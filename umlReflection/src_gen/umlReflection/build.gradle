/*-------------------------------------------------
*
* Tasks created by UML4CPP Generator 
*
*-------------------------------------------------
*/

apply plugin: 'cpp'

description 'C++ project of model UmlReflection.uml, generated by UML4CPP'

File appendDebugSuffix(File binaryFile) {
  int extensionSeparatorIndex = binaryFile.path.lastIndexOf('.')
  return new File(binaryFile.path.substring(0, extensionSeparatorIndex) + "d" + binaryFile.path.substring(extensionSeparatorIndex))
}

task deliverUmlReflectionHeaders(type: Copy) {
	description 'deliver UmlReflection header to %MDE4CPP_HOME%/application/include/UmlReflection'
	from "."
	into System.getenv('MDE4CPP_HOME')+"/application/include/UmlReflection"
	include "**/*.hpp"
	exclude "build", ".gradle"
}

task deliverUmlReflectionDebugSharedLibrary(type: Copy) {
	description 'deliver UmlReflection debug libary to %MDE4CPP_HOME%/application/bin'
	from "build/libs/UmlReflection/shared/debug"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "UmlReflectiond.dll"
}

task deliverUmlReflectionReleaseSharedLibrary(type: Copy) {
	description 'deliver UmlReflection release libary to %MDE4CPP_HOME%/application/bin'
	from "build/libs/UmlReflection/shared/release"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "UmlReflection.dll"
}

model {
    toolChains {
    	 gcc(Gcc) {
    	 	"g++"
    	 }
    }
	
    buildTypes {
        debug 
        release
    }

	repositories {
        libs(PrebuiltLibraries) {
			[ 'ecoreReflection'
			 ].each {
				delegate."$it" {
					def libraryName = "${name}"
					headers.srcDir System.getenv('MDE4CPP_HOME')+"/application/include"
					binaries.withType(SharedLibraryBinary) {
						if(buildType == buildTypes.debug) {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}d.dll")
						} else {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}.dll")						
						}
					}
				}	
			}         
		}
	}

	repositories {
        libs(PrebuiltLibraries) {
			[ 'ecore', 'uml', 'primitiveTypesReflection' ].each {
				delegate."$it" {
					def libraryName = "${name}"
					headers.srcDir System.getenv('MDE4CPP_HOME')+"/application/include/${libraryName}"
					binaries.withType(SharedLibraryBinary) {
						if(buildType == buildTypes.debug) {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}d.dll")
						} else {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}.dll")						
						}
					}
				}	
			}         
		}
	}

    components {
        UmlReflection(NativeLibrarySpec)
        {
        	sources {
                cpp {
                    source {
                        srcDirs ".", "../" , System.getenv('MDE4CPP_HOME')+"/application/include/util"

						include	"impl/UMLPackageImpl.cpp"
						include	"UMLPackage.cpp"
						include "util.cpp"
						include "registry.cpp"
						include "stereotypestorage.cpp"
                    }
					exportedHeaders {
                        srcDirs "../" 
						srcDirs System.getenv('MDE4CPP_HOME')+"/application/include"
						srcDirs System.getenv('MDE4CPP_HOME')+"/application/include/util"
                        include "**/*.hpp"
                    }
					lib library: "ecore"
					lib library: "uml"
					lib library: "primitiveTypesReflection"
					lib library: "ecoreReflection"

                }
            }

			binaries.withType(StaticLibraryBinarySpec) {
				buildable = false
			}
        }
		
		withType(NativeComponentSpec) {
			binaries.withType(NativeBinarySpec) {
				if(buildType == buildTypes.debug) {
					if (it instanceof SharedLibraryBinarySpec) {
						sharedLibraryFile = appendDebugSuffix(sharedLibraryFile)
						sharedLibraryLinkFile = appendDebugSuffix(sharedLibraryLinkFile)
					} else if (it instanceof StaticLibraryBinarySpec) {
						staticLibraryFile = appendDebugSuffix(staticLibraryFile)
					} else {
						throw new GradleException("Unknown native library binary")
					}
				}
			}
        }
    }
    
    binaries {
        all {
        	cppCompiler.args '-std=c++11','-Wall', '-Wno-overloaded-virtual', '-pipe'
			if (buildType == buildTypes.debug) {
				cppCompiler.args '-g'
			}

			else {
				cppCompiler.args '-DNDEBUG'
			}
        }
    }
}

tasks.withType(LinkSharedLibrary) { compileTask -> deliverUmlReflectionHeaders.mustRunAfter compileTask }
tasks.withType(LinkSharedLibrary) { compileTask -> deliverUmlReflectionDebugSharedLibrary.mustRunAfter compileTask }
tasks.withType(LinkSharedLibrary) { compileTask -> deliverUmlReflectionReleaseSharedLibrary.mustRunAfter compileTask }

task compileUmlReflection(dependsOn: ['build', 'deliverUmlReflectionHeaders', 'deliverUmlReflectionDebugSharedLibrary', 'deliverUmlReflectionReleaseSharedLibrary']){
	group 'UmlReflection'
	description 'compile UmlReflection in debug and release'
}
task compileUmlReflectionDebug(dependsOn: ['UmlReflectionDebugSharedLibrary', 'deliverUmlReflectionHeaders', 'deliverUmlReflectionDebugSharedLibrary']) {
	group 'UmlReflection'
	description 'compile UmlReflection in debug'
}
task compileUmlReflectionRelease(dependsOn: ['UmlReflectionReleaseSharedLibrary', 'deliverUmlReflectionHeaders', 'deliverUmlReflectionReleaseSharedLibrary']) {
	group 'UmlReflection'
	description 'compile UmlReflection in release'
}
