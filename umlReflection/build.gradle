plugins {
	id "tui.sse.mde4cpp.mde4cpp-compile-plugin" version "0.3"
	id "tui.sse.mde4cpp.mde4cpp-generate-plugin" version "0.2"
}
apply plugin: 'base' 

description 'Build tasks for project: umlReflection'

task buildUmlReflection(dependsOn: ['generateUmlReflection', 'compileUmlReflection']) {
	group 'umlReflection'
	description 'build umlReflection'
}

task compileUmlReflection(type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group 'umlReflection'
	description 'compile umlReflection'

	projectFolder = file("./src_gen/umlReflection")
}

task generateUmlReflection(type: tui.sse.mde4cpp.MDE4CPPGenerate) {
	group 'umlReflection'
	description 'generate C++ code of umlReflection.uml model'

	modelFilePath = file("./model/umlReflection.uml")
	structureOnly = true
}

compileUmlReflection.mustRunAfter generateUmlReflection

clean.doFirst {
	def cmakeFolder = file('./src_gen/umlReflection/.cmake/')
	if(cmakeFolder.exists()) {
    	delete cmakeFolder.absolutePath
   		println "deleting folder " + cmakeFolder.absolutePath
	}
}
