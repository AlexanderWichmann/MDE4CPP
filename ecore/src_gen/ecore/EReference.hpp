//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_EREFERENCE_HPP
#define ECORE_EREFERENCE_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#define ACTIVITY_DEBUG_ON

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

#include <string>
#include <map>
#include <vector>
#include "SubsetUnion.hpp"
#include "boost/shared_ptr.hpp"
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace ecore 
{
	class EAnnotation;
}

namespace ecore 
{
	class EAttribute;
}

namespace ecore 
{
	class EClass;
}

namespace ecore 
{
	class EClassifier;
}

namespace ecore 
{
	class EGenericType;
}

namespace ecore 
{
	class EReference;
}

namespace ecore 
{
	class EStructuralFeature;
}

// base class includes
#include "EStructuralFeature.hpp"

// enum includes


//*********************************
namespace ecore 
{
	/*!
	 */
	class EReference:virtual public EStructuralFeature	{
		public:
 			EReference(const EReference &) {}
			EReference& operator=(EReference const&) = delete;

		protected:
			EReference(){}


		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~EReference() {}

			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual bool isContainment() const = 0;
			
			/*!
			 */ 
			virtual void setContainment (bool _containment)= 0; 
			
			/*!
			 */ 
			virtual bool isContainer() const = 0;
			
			/*!
			 */ 
			virtual bool isResolveProxies() const = 0;
			
			/*!
			 */ 
			virtual void setResolveProxies (bool _resolveProxies)= 0; 
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<ecore::EReference > getEOpposite() const = 0;
			
			/*!
			 */
			virtual void setEOpposite(std::shared_ptr<ecore::EReference> _eOpposite_eOpposite) = 0;
			/*!
			 */
			virtual std::shared_ptr<ecore::EClass > getEReferenceType() const = 0;
			
			/*!
			 */
			virtual std::shared_ptr< Bag<ecore::EAttribute> > getEKeys() const = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			 */ 
			bool m_containment ;
			/*!
			 */ 
			bool m_container ;
			/*!
			 */ 
			bool m_resolveProxies =  true;
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			std::shared_ptr<ecore::EReference > m_eOpposite;
			/*!
			 */
			std::shared_ptr<ecore::EClass > m_eReferenceType;
			/*!
			 */
			std::shared_ptr< Bag<ecore::EAttribute> > m_eKeys;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			 
	};

}
#endif /* end of include guard: ECORE_EREFERENCE_HPP */

