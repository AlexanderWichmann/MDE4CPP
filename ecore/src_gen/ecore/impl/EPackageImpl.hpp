//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_EPACKAGEEPACKAGEIMPL_HPP
#define ECORE_EPACKAGEEPACKAGEIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//*********************************
// generated Includes

//Model includes
#include "../EPackage.hpp"

#include "impl/ENamedElementImpl.hpp"

#include "SubsetUnion.hpp"



//*********************************
namespace ecore 
{
	class EPackageImpl :virtual public ENamedElementImpl, virtual public EPackage 
	{
		public: 
			EPackageImpl(const EPackageImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			EPackageImpl& operator=(EPackageImpl const&) = delete;

		protected:
			friend class EcoreFactoryImpl;
			EPackageImpl();

			//Additional constructors for the containments back reference
			EPackageImpl(std::weak_ptr<ecore::EPackage > par_eSuperPackage);




		public:
			//destructor
			virtual ~EPackageImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void addEParameter(std::shared_ptr<ecore::EOperation>  owner,std::shared_ptr<ecore::EClassifier>  type,std::string name)  ;
			
			/*!
			 */ 
			virtual void addEParameter(std::shared_ptr<ecore::EOperation>  owner,std::shared_ptr<ecore::EClassifier>  type,std::string name,int lower,int upper)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EParameter> addEParameter(std::shared_ptr<ecore::EOperation>  owner,std::shared_ptr<ecore::EClassifier>  type,std::string name,int lower,int upper,bool isUnique,bool isOrdered)  ;
			
			/*!
			 */ 
			virtual void createEAttribute(std::shared_ptr<ecore::EClass>  owner,int id)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EClass> createEClass(int id)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EDataType> createEDataType(int id)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EEnum> createEEnum(int id)  ;
			
			/*!
			 */ 
			virtual void createEOperation(std::shared_ptr<ecore::EClass>  owner,int id)  ;
			
			/*!
			 */ 
			virtual void createEReference(std::shared_ptr<ecore::EClass>  owner,int id)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EClassifier> getEClassifier(std::string name)  const  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EAttribute> initEAttribute(std::shared_ptr<ecore::EAttribute>  a,std::shared_ptr<ecore::EClassifier>  type,std::string name,std::string defaultValue,int lowerBound,int upperBound,bool isTransient,bool isVolatile,bool isChangeable,bool isUnsettable,bool isID,bool isUnique,bool isDerived)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EAttribute> initEAttribute(std::shared_ptr<ecore::EAttribute>  a,std::shared_ptr<ecore::EClassifier>  type,std::string name,std::string defaultValue,int lowerBound,int upperBound,bool isTransient,bool isVolatile,bool isChangeable,bool isUnsettable,bool isID,bool isUnique,bool isDerived,bool isOrdered)  ;
			
			
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EClass> initEClass(std::shared_ptr<ecore::EClass>  c,void *  instanceClass,std::string name,bool isAbstract,bool isInterface)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EClass> initEClass(std::shared_ptr<ecore::EClass>  c,void *  instanceClass,std::string name,bool isAbstract,bool isInterface,bool isGenerated)  ;
			
			/*!
			 */ 
			virtual void initEClassifier(std::shared_ptr<ecore::EClassifier>  o,std::shared_ptr<ecore::EClass>  metaObject,void *  instanceClass,std::string name)  ;
			
			/*!
			 */ 
			virtual void initEClassifier(std::shared_ptr<ecore::EClassifier>  o,std::shared_ptr<ecore::EClass>  metaObject,void *  instanceClass,std::string name,bool isGenerated)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EDataType> initEDataType(std::shared_ptr<ecore::EDataType>  d,void *  instanceClass,std::string name,bool isSerializable,bool isGenerated)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EEnum> initEEnum(std::shared_ptr<ecore::EEnum>  e,void *  instanceClass,std::string name)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EOperation> initEOperation(std::shared_ptr<ecore::EOperation>  o,std::shared_ptr<ecore::EClassifier>  type,std::string name)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EOperation> initEOperation(std::shared_ptr<ecore::EOperation>  o,std::shared_ptr<ecore::EClassifier>  type,std::string name,int lowerBound,int upperBound)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EOperation> initEOperation(std::shared_ptr<ecore::EOperation>  o,std::shared_ptr<ecore::EClassifier>  type,std::string name,int lowerBound,int upperBound,bool isUnique,bool isOrdered)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EReference> initEReference(std::shared_ptr<ecore::EReference>  r,std::shared_ptr<ecore::EClassifier>  type,std::shared_ptr<ecore::EReference>  otherEnd,std::string name,std::string defaultValue,int lowerBound,int upperBound,bool isTransient,bool isVolatile,bool isChangeable,bool isContainment,bool isResolveProxies,bool isUnsettable,bool isUnique,bool isDerived)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EReference> initEReference(std::shared_ptr<ecore::EReference>  r,std::shared_ptr<ecore::EClassifier>  type,std::shared_ptr<ecore::EReference>  otherEnd,std::string name,std::string defaultValue,int lowerBound,int upperBound,bool isTransient,bool isVolatile,bool isChangeable,bool isContainment,bool isResolveProxies,bool isUnsettable,bool isUnique,bool isDerived,bool isOrdered)  ;
			
			
			
			/*!
			 */ 
			virtual void initEStructuralFeature(std::shared_ptr<ecore::EStructuralFeature>  s,std::shared_ptr<ecore::EClassifier>  type,std::string name,std::string defaultValue,int lowerBound,int upperBound,bool isTransient,bool isVolatile,bool isChangeable,bool isUnsettable,bool isUnique,bool isDerived,bool isOrdered)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EParameter> internalAddEParameter(std::shared_ptr<ecore::EOperation>  owner,std::shared_ptr<ecore::EClassifier>  type,std::string name)  ;
			
			/*!
			 */ 
			virtual void setGeneratedClassName(std::shared_ptr<ecore::EClassifier>  eClassifier)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual std::string getNsPrefix() const ;
			
			/*!
			 */ 
			virtual void setNsPrefix (std::string _nsPrefix); 
			
			/*!
			 */ 
			virtual std::string getNsURI() const ;
			
			/*!
			 */ 
			virtual void setNsURI (std::string _nsURI); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr< Bag<ecore::EClassifier> > getEClassifiers() const ;
			
			/*!
			 */
			virtual std::shared_ptr<ecore::EFactory > getEFactoryInstance() const ;
			
			/*!
			 */
			virtual void setEFactoryInstance(std::shared_ptr<ecore::EFactory> _eFactoryInstance_eFactoryInstance) ;
			/*!
			 */
			virtual std::shared_ptr< Bag<ecore::EPackage> > getESubpackages() const ;
			
			/*!
			 */
			virtual std::weak_ptr<ecore::EPackage > getESuperPackage() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: ECORE_EPACKAGEEPACKAGEIMPL_HPP */

