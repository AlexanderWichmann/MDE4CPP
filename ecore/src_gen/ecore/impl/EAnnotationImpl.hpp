//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_EANNOTATIONEANNOTATIONIMPL_HPP
#define ECORE_EANNOTATIONEANNOTATIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) /**/
#else
    #define ACT_DEBUG(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../EAnnotation.hpp"

#include "impl/EModelElementImpl.hpp"

#include "SubsetUnion.hpp"



//*********************************
namespace ecore 
{
	class EAnnotationImpl :virtual public EModelElementImpl, virtual public EAnnotation 
	{
		public: 
			EAnnotationImpl(const EAnnotationImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			EAnnotationImpl& operator=(EAnnotationImpl const&) = delete;

		protected:
			friend class EcoreFactoryImpl;
			EAnnotationImpl();

		public:
			//destructor
			virtual ~EAnnotationImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual std::string getSource() const ;
			
			/*!
			 */ 
			virtual void setSource (std::string _source); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual 	std::shared_ptr< Bag<ecore::EStringToStringMapEntry> >
			 getDetails() const ;
			
			/*!
			 */
			virtual std::shared_ptr<ecore::EModelElement > getEModelElement() const ;
			
			/*!
			 */
			virtual void setEModelElement(std::shared_ptr<ecore::EModelElement> _eModelElement_eModelElement) ;
			/*!
			 */
			virtual 	std::shared_ptr< Bag<ecore::EObject> >
			 getContents() const ;
			
			/*!
			 */
			virtual 	std::shared_ptr< Bag<ecore::EObject> >
			 getReferences() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: ECORE_EANNOTATIONEANNOTATIONIMPL_HPP */

