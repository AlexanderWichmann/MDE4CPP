//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_EENUMLITERAL_HPP
#define ECORE_EENUMLITERAL_HPP

#include <list>
#include <memory>
#include <string>

#include "boost/any.hpp"

// forward declarations



//*********************************
// generated Includes

#include <map>

namespace persistence
{
	namespace interface
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace ecore
{
	class EcoreFactory;
}

//Forward Declaration for used types
namespace ecore 
{
	class EAnnotation;
}

namespace ecore 
{
	class EEnum;
}

namespace ecore 
{
	class ENamedElement;
}

// base class includes
#include "ecore/ENamedElement.hpp"

// enum includes


//*********************************
namespace ecore 
{
	/*!
	 */
	class EEnumLiteral:virtual public ENamedElement
	{
		public:
 			EEnumLiteral(const EEnumLiteral &) {}
			EEnumLiteral& operator=(EEnumLiteral const&) = delete;

		protected:
			EEnumLiteral(){}


			//Additional constructors for the containments back reference

			EEnumLiteral(std::weak_ptr<ecore::EEnum > par_eEnum);

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~EEnumLiteral() {}

			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual boost::any getInstance() const = 0;
			
			/*!
			 */ 
			virtual void setInstance (boost::any _instance)= 0; 
			
			/*!
			 */ 
			virtual std::string getLiteral() const = 0;
			
			/*!
			 */ 
			virtual void setLiteral (std::string _literal)= 0; 
			
			/*!
			 */ 
			virtual int getValue() const = 0;
			
			/*!
			 */ 
			virtual void setValue (int _value)= 0; 
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::weak_ptr<ecore::EEnum > getEEnum() const = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			 */ 
			boost::any m_instance = nullptr;
			/*!
			 */ 
			std::string m_literal = "";
			/*!
			 */ 
			int m_value = 0;
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			std::weak_ptr<ecore::EEnum > m_eEnum;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interface::XLoadHandler> loadHandler) = 0;
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<EObject> > references) = 0;
			virtual void save(std::shared_ptr<persistence::interface::XSaveHandler> saveHandler) const = 0;
			
	};

}
#endif /* end of include guard: ECORE_EENUMLITERAL_HPP */
