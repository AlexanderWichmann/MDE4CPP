description 'MDE4CPP root project'


task buildAll() {
	group 'MDE4CPP'
	description 'build generators and all models'

	dependsOn 'generator:createAllGenerators'
	dependsOn 'src:buildEcoreModels'
	dependsOn 'src:buildReflectionModels'
	dependsOn 'src:common:pluginFramework:compilePluginFramework'
	dependsOn 'src:common:persistence:compilePersistence'
	dependsOn 'src:deliverBasicInterfaces'
}

task compileAll() {
	group 'MDE4CPP'
	description 'compile all models without generating the models'

	dependsOn 'src:compileEcoreModels'
	dependsOn 'src:compileReflectionModels'
	dependsOn 'src:common:pluginFramework:compilePluginFramework'
	dependsOn 'src:common:persistence:compilePersistence'
	dependsOn 'src:deliverBasicInterfaces'
}

task generateAll() {
	group 'MDE4CPP'
	description 'compile all models without generating the models'

	dependsOn 'src:generateEcoreModels'
	dependsOn 'src:generateReflectionModels'
}

task installationInstruction() {
	group 'MDE4CPP'

	description	'installation instruction'

	def instructionMessage = '' +
		'##############################################################################\n' +
		'#                    Installation instruction for MDE4CPP                    #\n' +
		'##############################################################################\n' +
		'\n' +
		'Welcome to MDE4CPP framework!\n' +
		'To start the work with MDE4CPP, you have to configure the environment settings.\n' +
		'A pattern is prepared for it:\n' +
		'- for Windows systems: setenv.bat.default\n' +
		'- for Unix systems: setenv.default.\n' +
		'Copy the file and remove the extension \'default\' first.\n' +
		'Open this file and configure the variables afterwards.\n' +
		'Run the file in a console. Note, that the environment is set inside the console\n' +
		'and has to be redone at each season start\n' +
		'More information see https://github.com/MDE4CPP/MDE4CPP\n' +
		'\n'

	/*def files = file('$projectDir').listFiles(new FileFilter() {
		public boolean accept(File pathname) {
			def extension = '.sh'
			if (System.properties['os.name'].toLowerCase().contains('windows')) {
				extension = '.bat'
			}

			return pathname.getName().endsWith(extension);
		}
	})*/

	/*if (files.length == 0) {
		println instructionMessage
	} else {*/
		doFirst {
			println instructionMessage
		}
	//}
}

task checkEnvironment(){
  group 'Utilities'
  description 'Check that all required variables and executables are set and can be found'
  
  ext.checkPath = { path ->
  	  if(! new File(path).exists()){
		return false;
	  }
	  return true;
  }
  
  ext.checkVariableExists = { variable_name, should_fail ->
		println ''
	  def my_var = System.getenv(variable_name);
	  if(my_var == null)
	  {
		if(should_fail){
			throw new GradleException(variable_name + ' variable has not been set')
		}
		else
		{
			println 'Warning: variable not set: ' + variable_name;
			return;
		}
	  }
	  print variable_name + ': ' + my_var
    }
  
	ext.checkMyVariablePath = { variable_name, should_fail ->
		checkVariableExists(variable_name, should_fail)
		if(! checkPath(System.getenv(variable_name))){
			throw new GradleException('Path for variable ' + variable_name + ' cannot be found.' + System.getenv(variable_name))
		}
		println ' (exists)'
	}
  
  doFirst{
	  println '------------------'  
	  println 'YOUR PATH VARIABLE'
	  println '------------------'
	  
	  println 'PATH: ' + System.getenv('PATH')
	  def path_elements = System.getenv('PATH').split(';');
	 
	 println '\nAnalyzing all path elements...'
	 path_elements.each{el ->
		if(! checkPath(el))
		{
			println 'PATH contains an invalid element: ' + el;
		}
		else{
			println '\t' + el + ' (exists)'
		}
	  }
	  
	  println '\n------------------------------'  
	  println 'YOUR ENV VARIABLES WITH A PATH'
	  println '------------------------------'

	  checkMyVariablePath('MDE4CPP_HOME', true)
	  checkMyVariablePath('MDE4CPP_ECLIPSE_HOME', true)

      checkMyVariablePath('COMPILER_HOME', false)
	  checkMyVariablePath('CMAKE_HOME', false)
	  checkMyVariablePath('JAVA_HOME', false)
	  
	  println '\n---------------------------------------'  
	  println 'YOUR ENV VARIABLES WITH A CONFIGURATION'
	  println '---------------------------------------'	  
	  checkVariableExists('GRADLE_OPTS', false);
	  checkVariableExists('ORG_GRADLE_PROJECT_WORKER', false);
	  checkVariableExists('ORG_GRADLE_PROJECT_RELEASE', false);
	  checkVariableExists('ORG_GRADLE_PROJECT_DEBUG', false);
	  checkVariableExists('ORG_GRADLE_PROJECT_DEBUG_MESSAGE_FUML', false);
	  checkVariableExists('ORG_GRADLE_PROJECT_ACTIVITY_DEBUG_ON', false);
	  checkVariableExists('COMPILER_DELIVERY_NAME', false);
	  checkVariableExists('COMPILER_VERSION', false);
  }
}
