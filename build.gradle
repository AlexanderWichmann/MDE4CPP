description 'MDE4CPP root project'

task buildAll() {
	group 'MDE4CPP'
	description 'build generators and all models'
	
	dependsOn 'generator:createAllGenerators'
	dependsOn 'src:buildEcoreModels'
	dependsOn 'src:buildReflectionModels'
	dependsOn 'src:common:pluginFramework:compilePluginFramework'
	dependsOn 'src:common:persistence:compilePersistence'
	dependsOn 'src:deliverBasicInterfaces'
}

task compileAll() {
	group 'MDE4CPP'
	description 'compile all models without generating the models'
	
	dependsOn 'src:compileEcoreModels'
	dependsOn 'src:compileReflectionModels'
	dependsOn 'src:common:pluginFramework:compilePluginFramework'
	dependsOn 'src:common:persistence:compilePersistence'
	dependsOn 'src:deliverBasicInterfaces'
}

task generateAll() {
	group 'MDE4CPP'
	description 'compile all models without generating the models'
	
	dependsOn 'src:generateEcoreModels'
	dependsOn 'src:generateReflectionModels'
}

task initPropertyFile() {
	doFirst {
		def propertyFile = file('./gradle.properties')
		if(!propertyFile.exists()) {
			def count = findProperty('worker') ?: 1
			def content = "make_parallel_jobs=" + count
			if (getProject().hasProperty('parallel')) {
				content += System.lineSeparator() + "org.gradle.parallel=true"
			}		
			new File("$projectDir/gradle.properties").text = content
		}
	}
}