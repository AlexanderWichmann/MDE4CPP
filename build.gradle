description 'MDE4CPP root project'

task buildAll() {
	group 'MDE4CPP'
	description 'build generators and all models'
	
	dependsOn 'generator:createAllGenerators'
	dependsOn 'src:buildEcoreModels'
	dependsOn 'src:buildReflectionModels'
	dependsOn 'src:common:pluginFramework:compilePluginFramework'
	dependsOn 'src:common:persistence:compilePersistence'
	dependsOn 'src:deliverBasicInterfaces'
}

task compileAll() {
	group 'MDE4CPP'
	description 'compile all models without generating the models'
	
	dependsOn 'src:compileEcoreModels'
	dependsOn 'src:compileReflectionModels'
	dependsOn 'src:common:pluginFramework:compilePluginFramework'
	dependsOn 'src:common:persistence:compilePersistence'
	dependsOn 'src:deliverBasicInterfaces'
}

task generateAll() {
	group 'MDE4CPP'
	description 'compile all models without generating the models'
	
	dependsOn 'src:generateEcoreModels'
	dependsOn 'src:generateReflectionModels'
}

task initPropertyFile() {
	group 'MDE4CPP'

	description 'Create file \'gradle.property\' in root folder\n\n' +
				'Following parameter are available:\n' +
				'\t-Pworker=<int> ... count of worker for each compile task\n' +
				'\t-Pparallel ... enable parallel Gradle task execution permanently\n' +
				'\t-Prelease ... enable compile option \'RELEASE\' permanently\n' +
				'\t-Pdebug ... enable compile option \'DEBUG\' permanently\n'
	
	if (!file("$projectDir/gradle.properties").exists()) {
		println '##############################################################################'
		println '#                             Welcome to MDE4CPP                             #'
		println '##############################################################################'
		println 'It is recommended to execute the task initPropertyFile first.'
		println 'This task allows to specify the count of compiler worker for one compile task.'
		println 'Type \'gradle initPropertyFile -Pworker=<count of worker>\' for execution.'
		println 'For more information see \'gradle help --task initPropertyFile\''
		println ''
		println ''
	}

	doFirst {
		def count = findProperty('worker') ?: 1
		def content = "workerCount=" + count
		if (getProject().hasProperty('parallel')) {
			content += System.lineSeparator() + "org.gradle.parallel=true"
		}
		if (getProject().hasProperty('release')) {
			content += System.lineSeparator() + "RELEASE"
		}
		if (getProject().hasProperty('debug')) {
			content += System.lineSeparator() + "DEBUG"
		}
		new File("$projectDir/gradle.properties").text = content
	}
}