//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_PROTOCOLCONFORMANCE_HPP
#define UML_PROTOCOLCONFORMANCE_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) /**/
#else
    #define ACT_DEBUG(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "SubsetUnion.hpp"
#include "boost/shared_ptr.hpp"
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class Comment;
}

namespace uml 
{
	class DirectedRelationship;
}

namespace ecore 
{
	class EAnnotation;
}

namespace uml 
{
	class Element;
}

namespace uml 
{
	class ProtocolStateMachine;
}

// base class includes
#include "DirectedRelationship.hpp"

// enum includes


//*********************************
namespace uml 
{
	/*!
	 A ProtocolStateMachine can be redefined into a more specific ProtocolStateMachine or into behavioral StateMachine. ProtocolConformance declares that the specific ProtocolStateMachine specifies a protocol that conforms to the general ProtocolStateMachine or that the specific behavioral StateMachine abides by the protocol of the general ProtocolStateMachine.
	<p>From package UML::StateMachines.</p> */
	class ProtocolConformance:virtual public DirectedRelationship	{
		public:
 			ProtocolConformance(const ProtocolConformance &) {}
			ProtocolConformance& operator=(ProtocolConformance const&) = delete;
	
		protected:
			ProtocolConformance(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~ProtocolConformance() {}

			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 Specifies the ProtocolStateMachine to which the specific ProtocolStateMachine conforms.
			<p>From package UML::StateMachines.</p> */
			virtual std::shared_ptr<uml::ProtocolStateMachine > getGeneralMachine() const = 0;
			
			/*!
			 Specifies the ProtocolStateMachine to which the specific ProtocolStateMachine conforms.
			<p>From package UML::StateMachines.</p> */
			virtual void setGeneralMachine(std::shared_ptr<uml::ProtocolStateMachine> _generalMachine_generalMachine) = 0;
			/*!
			 Specifies the ProtocolStateMachine which conforms to the general ProtocolStateMachine.
			<p>From package UML::StateMachines.</p> */
			virtual std::shared_ptr<uml::ProtocolStateMachine > getSpecificMachine() const = 0;
			
			/*!
			 Specifies the ProtocolStateMachine which conforms to the general ProtocolStateMachine.
			<p>From package UML::StateMachines.</p> */
			virtual void setSpecificMachine(std::shared_ptr<uml::ProtocolStateMachine> _specificMachine_specificMachine) = 0;
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 Specifies the ProtocolStateMachine to which the specific ProtocolStateMachine conforms.
			<p>From package UML::StateMachines.</p> */
			std::shared_ptr<uml::ProtocolStateMachine > m_generalMachine;
			/*!
			 Specifies the ProtocolStateMachine which conforms to the general ProtocolStateMachine.
			<p>From package UML::StateMachines.</p> */
			std::shared_ptr<uml::ProtocolStateMachine > m_specificMachine;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element > getOwner() const = 0;/*!
			 Specifies the elements related by the Relationship.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::Element> > getRelatedElement() const = 0;/*!
			 Specifies the target Element(s) of the DirectedRelationship.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<SubsetUnion<uml::Element, uml::Element > >
			 getTarget() const = 0;/*!
			 Specifies the source Element(s) of the DirectedRelationship.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<SubsetUnion<uml::Element, uml::Element > >
			 getSource() const = 0;/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::Element> > getOwnedElement() const = 0; 
	};

}
#endif /* end of include guard: UML_PROTOCOLCONFORMANCE_HPP */

