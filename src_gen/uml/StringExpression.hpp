//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_STRINGEXPRESSION_HPP
#define UML_STRINGEXPRESSION_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class Comment;
}

namespace uml 
{
	class Dependency;
}

namespace ecore 
{
	class EAnnotation;
}

namespace uml 
{
	class Element;
}

namespace uml 
{
	class Expression;
}

namespace uml 
{
	class Namespace;
}

namespace uml 
{
	class StringExpression;
}

namespace uml 
{
	class TemplateBinding;
}

namespace uml 
{
	class TemplateParameter;
}

namespace uml 
{
	class TemplateSignature;
}

namespace uml 
{
	class TemplateableElement;
}

namespace uml 
{
	class Type;
}

namespace uml 
{
	class ValueSpecification;
}

// base class includes
#include "Expression.hpp"

#include "TemplateableElement.hpp"

// enum includes
#include "VisibilityKind.hpp"


//*********************************
namespace uml 
{
	/*!
	 A StringExpression is an Expression that specifies a String value that is derived by concatenating a sequence of operands with String values or a sequence of subExpressions, some of which might be template parameters.
	<p>From package UML::Values.</p> */
	class StringExpression:virtual public Expression,virtual public TemplateableElement	{
		public:
 			StringExpression(const StringExpression &) {}
			StringExpression& operator=(StringExpression const&) = delete;
	
		protected:
			StringExpression(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~StringExpression() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 All the operands of a StringExpression must be LiteralStrings
			operand->forAll (oclIsKindOf (LiteralString)) */ 
			virtual bool operands(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  = 0;
			
			/*!
			 If a StringExpression has sub-expressions, it cannot have operands and vice versa (this avoids the problem of having to define a collating sequence between operands and subexpressions).
			if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif */ 
			virtual bool subexpressions(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The StringExpression of which this StringExpression is a subExpression.
			<p>From package UML::Values.</p> */
			virtual uml::StringExpression *  getOwningExpression() const = 0;
			
			/*!
			 The StringExpression of which this StringExpression is a subExpression.
			<p>From package UML::Values.</p> */
			virtual void setOwningExpression(uml::StringExpression *  _owningExpression) = 0;
			
			/*!
			 The StringExpressions that constitute this StringExpression.
			<p>From package UML::Values.</p> */
			virtual std::vector<uml::StringExpression * > *  getSubExpression() const = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 The StringExpression of which this StringExpression is a subExpression.
			<p>From package UML::Values.</p> */
			uml::StringExpression *  m_owningExpression =  nullptr ;
			/*!
			 The StringExpressions that constitute this StringExpression.
			<p>From package UML::Values.</p> */
			std::vector<uml::StringExpression * > *  m_subExpression =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const = 0;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const = 0; 
	};

}
#endif /* end of include guard: UML_STRINGEXPRESSION_HPP */

