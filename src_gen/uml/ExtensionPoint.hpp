//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_EXTENSIONPOINT_HPP
#define UML_EXTENSIONPOINT_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class Classifier;
}

namespace uml 
{
	class Comment;
}

namespace uml 
{
	class Dependency;
}

namespace ecore 
{
	class EAnnotation;
}

namespace uml 
{
	class Element;
}

namespace uml 
{
	class Namespace;
}

namespace uml 
{
	class RedefinableElement;
}

namespace uml 
{
	class StringExpression;
}

namespace uml 
{
	class UseCase;
}

// base class includes
#include "RedefinableElement.hpp"

// enum includes
#include "VisibilityKind.hpp"


//*********************************
namespace uml 
{
	/*!
	 An ExtensionPoint identifies a point in the behavior of a UseCase where that behavior can be extended by the behavior of some other (extending) UseCase, as specified by an Extend relationship.
	<p>From package UML::UseCases.</p> */
	class ExtensionPoint:virtual public RedefinableElement	{
		public:
 			ExtensionPoint(const ExtensionPoint &) {}
			ExtensionPoint& operator=(ExtensionPoint const&) = delete;
	
		protected:
			ExtensionPoint(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~ExtensionPoint() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 An ExtensionPoint must have a name.
			name->notEmpty () */ 
			virtual bool must_have_name(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The UseCase that owns this ExtensionPoint.
			<p>From package UML::UseCases.</p> */
			virtual uml::UseCase *  getUseCase() const = 0;
			
			/*!
			 The UseCase that owns this ExtensionPoint.
			<p>From package UML::UseCases.</p> */
			virtual void setUseCase(uml::UseCase *  _useCase) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 The UseCase that owns this ExtensionPoint.
			<p>From package UML::UseCases.</p> */
			uml::UseCase *  m_useCase =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const = 0;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const = 0;/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Namespace *  getNamespace() const = 0; 
	};

}
#endif /* end of include guard: UML_EXTENSIONPOINT_HPP */

