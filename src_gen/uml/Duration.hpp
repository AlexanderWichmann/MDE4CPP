//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_DURATION_HPP
#define UML_DURATION_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class Comment;
}

namespace uml 
{
	class Dependency;
}

namespace ecore 
{
	class EAnnotation;
}

namespace uml 
{
	class Element;
}

namespace uml 
{
	class Namespace;
}

namespace uml 
{
	class Observation;
}

namespace uml 
{
	class StringExpression;
}

namespace uml 
{
	class TemplateParameter;
}

namespace uml 
{
	class Type;
}

namespace uml 
{
	class ValueSpecification;
}

// base class includes
#include "ValueSpecification.hpp"

// enum includes
#include "VisibilityKind.hpp"


//*********************************
namespace uml 
{
	/*!
	 A Duration is a ValueSpecification that specifies the temporal distance between two time instants.
	<p>From package UML::Values.</p> */
	class Duration:virtual public ValueSpecification	{
		public:
 			Duration(const Duration &) {}
			Duration& operator=(Duration const&) = delete;
	
		protected:
			Duration(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~Duration() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 If a Duration has no expr, then it must have a single observation that is a DurationObservation.
			expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(DurationObservation))) */ 
			virtual bool no_expr_requires_observation(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 A ValueSpecification that evaluates to the value of the Duration.
			<p>From package UML::Values.</p> */
			virtual uml::ValueSpecification *  getExpr() const = 0;
			
			/*!
			 A ValueSpecification that evaluates to the value of the Duration.
			<p>From package UML::Values.</p> */
			virtual void setExpr(uml::ValueSpecification *  _expr) = 0;
			
			/*!
			 Refers to the Observations that are involved in the computation of the Duration value
			<p>From package UML::Values.</p> */
			virtual std::vector<uml::Observation * > *  getObservation() const = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 A ValueSpecification that evaluates to the value of the Duration.
			<p>From package UML::Values.</p> */
			uml::ValueSpecification *  m_expr =  nullptr ;
			/*!
			 Refers to the Observations that are involved in the computation of the Duration value
			<p>From package UML::Values.</p> */
			std::vector<uml::Observation * > *  m_observation =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const = 0;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const = 0; 
	};

}
#endif /* end of include guard: UML_DURATION_HPP */

