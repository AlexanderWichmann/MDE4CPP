//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_PARAMETERABLEELEMENT_HPP
#define UML_PARAMETERABLEELEMENT_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class Comment;
}

namespace ecore 
{
	class EAnnotation;
}

namespace uml 
{
	class Element;
}

namespace uml 
{
	class ParameterableElement;
}

namespace uml 
{
	class TemplateParameter;
}

// base class includes
#include "Element.hpp"

// enum includes


//*********************************
namespace uml 
{
	/*!
	 A ParameterableElement is an Element that can be exposed as a formal TemplateParameter for a template, or specified as an actual parameter in a binding of a template.
	<p>From package UML::CommonStructure.</p> */
	class ParameterableElement:virtual public Element	{
		public:
 			ParameterableElement(const ParameterableElement &) {}
			ParameterableElement& operator=(ParameterableElement const&) = delete;
	
		protected:
			ParameterableElement(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~ParameterableElement() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 The query isCompatibleWith() determines if this ParameterableElement is compatible with the specified ParameterableElement. By default, this ParameterableElement is compatible with another ParameterableElement p if the kind of this ParameterableElement is the same as or a subtype of the kind of p. Subclasses of ParameterableElement should override this operation to specify different compatibility constraints.
			result = (self.oclIsKindOf(p.oclType()))
			<p>From package UML::CommonStructure.</p> */ 
			virtual bool isCompatibleWith(uml::ParameterableElement *  p)  = 0;
			
			/*!
			 The query isTemplateParameter() determines if this ParameterableElement is exposed as a formal TemplateParameter.
			result = (templateParameter->notEmpty())
			<p>From package UML::CommonStructure.</p> */ 
			virtual bool isTemplateParameter()  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The formal TemplateParameter that owns this ParameterableElement.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::TemplateParameter *  getOwningTemplateParameter() const = 0;
			
			/*!
			 The formal TemplateParameter that owns this ParameterableElement.
			<p>From package UML::CommonStructure.</p> */
			virtual void setOwningTemplateParameter(uml::TemplateParameter *  _owningTemplateParameter) = 0;
			
			/*!
			 The TemplateParameter that exposes this ParameterableElement as a formal parameter.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::TemplateParameter *  getTemplateParameter() const = 0;
			
			/*!
			 The TemplateParameter that exposes this ParameterableElement as a formal parameter.
			<p>From package UML::CommonStructure.</p> */
			virtual void setTemplateParameter(uml::TemplateParameter *  _templateParameter) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 The formal TemplateParameter that owns this ParameterableElement.
			<p>From package UML::CommonStructure.</p> */
			uml::TemplateParameter *  m_owningTemplateParameter =  nullptr ;
			/*!
			 The TemplateParameter that exposes this ParameterableElement as a formal parameter.
			<p>From package UML::CommonStructure.</p> */
			uml::TemplateParameter *  m_templateParameter =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const = 0;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const = 0; 
	};

}
#endif /* end of include guard: UML_PARAMETERABLEELEMENT_HPP */

