//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UMLFACTORY_HPP
#define UMLFACTORY_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include "EFactory.hpp"

namespace uml 
{	class Abstraction;
	class AcceptCallAction;
	class AcceptEventAction;
	class Action;
	class ActionExecutionSpecification;
	class ActionInputPin;
	class Activity;
	class ActivityContent;
	class ActivityEdge;
	class ActivityFinalNode;
	class ActivityGroup;
	class ActivityNode;
	class ActivityParameterNode;
	class ActivityPartition;
	class Actor;
	class AddStructuralFeatureValueAction;
	class AddVariableValueAction;
	class AnyReceiveEvent;
	class Artifact;
	class Association;
	class AssociationClass;
	class Behavior;
	class BehaviorExecutionSpecification;
	class BehavioralFeature;
	class BehavioredClassifier;
	class BroadcastSignalAction;
	class CallAction;
	class CallBehaviorAction;
	class CallEvent;
	class CallOperationAction;
	class CentralBufferNode;
	class ChangeEvent;
	class Class;
	class Classifier;
	class ClassifierTemplateParameter;
	class Clause;
	class ClearAssociationAction;
	class ClearStructuralFeatureAction;
	class ClearVariableAction;
	class Collaboration;
	class CollaborationUse;
	class CombinedFragment;
	class Comment;
	class CommunicationPath;
	class Component;
	class ComponentRealization;
	class ConditionalNode;
	class ConnectableElement;
	class ConnectableElementTemplateParameter;
	class ConnectionPointReference;
	class Connector;
	class ConnectorEnd;
	class ConsiderIgnoreFragment;
	class Constraint;
	class Continuation;
	class ControlFlow;
	class ControlNode;
	class CreateLinkAction;
	class CreateLinkObjectAction;
	class CreateObjectAction;
	class DataStoreNode;
	class DataType;
	class DecisionNode;
	class Dependency;
	class DeployedArtifact;
	class Deployment;
	class DeploymentSpecification;
	class DeploymentTarget;
	class DestroyLinkAction;
	class DestroyObjectAction;
	class DestructionOccurrenceSpecification;
	class Device;
	class DirectedRelationship;
	class Duration;
	class DurationConstraint;
	class DurationInterval;
	class DurationObservation;
	class Element;
	class ElementImport;
	class EncapsulatedClassifier;
	class Enumeration;
	class EnumerationLiteral;
	class Event;
	class ExceptionHandler;
	class ExecutableNode;
	class ExecutionEnvironment;
	class ExecutionOccurrenceSpecification;
	class ExecutionSpecification;
	class ExpansionNode;
	class ExpansionRegion;
	class Expression;
	class Extend;
	class Extension;
	class ExtensionEnd;
	class ExtensionPoint;
	class Factory;
	class Feature;
	class FinalNode;
	class FinalState;
	class FlowFinalNode;
	class ForkNode;
	class FunctionBehavior;
	class Gate;
	class GeneralOrdering;
	class Generalization;
	class GeneralizationSet;
	class Image;
	class Include;
	class InformationFlow;
	class InformationItem;
	class InitialNode;
	class InputPin;
	class InstanceSpecification;
	class InstanceValue;
	class Interaction;
	class InteractionConstraint;
	class InteractionFragment;
	class InteractionOperand;
	class InteractionUse;
	class Interface;
	class InterfaceRealization;
	class InterruptibleActivityRegion;
	class Interval;
	class IntervalConstraint;
	class InvocationAction;
	class JoinNode;
	class Lifeline;
	class LinkAction;
	class LinkEndCreationData;
	class LinkEndData;
	class LinkEndDestructionData;
	class LiteralBoolean;
	class LiteralInteger;
	class LiteralNull;
	class LiteralReal;
	class LiteralSpecification;
	class LiteralString;
	class LiteralUnlimitedNatural;
	class LoopNode;
	class Manifestation;
	class MergeNode;
	class Message;
	class MessageEnd;
	class MessageEvent;
	class MessageOccurrenceSpecification;
	class Model;
	class MultiplicityElement;
	class NamedElement;
	class Namespace;
	class Node;
	class Object;
	class ObjectFlow;
	class ObjectNode;
	class Observation;
	class OccurrenceSpecification;
	class OpaqueAction;
	class OpaqueBehavior;
	class OpaqueExpression;
	class Operation;
	class OperationTemplateParameter;
	class OutputPin;
	class Package;
	class PackageImport;
	class PackageMerge;
	class PackageableElement;
	class Parameter;
	class ParameterSet;
	class ParameterableElement;
	class PartDecomposition;
	class Pin;
	class Port;
	class PrimitiveType;
	class Profile;
	class ProfileApplication;
	class Property;
	class ProtocolConformance;
	class ProtocolStateMachine;
	class ProtocolTransition;
	class Pseudostate;
	class QualifierValue;
	class RaiseExceptionAction;
	class ReadExtentAction;
	class ReadIsClassifiedObjectAction;
	class ReadLinkAction;
	class ReadLinkObjectEndAction;
	class ReadLinkObjectEndQualifierAction;
	class ReadSelfAction;
	class ReadStructuralFeatureAction;
	class ReadVariableAction;
	class Realization;
	class Reception;
	class ReclassifyObjectAction;
	class RedefinableElement;
	class RedefinableTemplateSignature;
	class ReduceAction;
	class Region;
	class Relationship;
	class RemoveStructuralFeatureValueAction;
	class RemoveVariableValueAction;
	class ReplyAction;
	class SendObjectAction;
	class SendSignalAction;
	class SequenceNode;
	class Signal;
	class SignalEvent;
	class Slot;
	class StartClassifierBehaviorAction;
	class StartObjectBehaviorAction;
	class State;
	class StateInvariant;
	class StateMachine;
	class Stereotype;
	class StringExpression;
	class StructuralFeature;
	class StructuralFeatureAction;
	class StructuredActivityNode;
	class StructuredClassifier;
	class Substitution;
	class TemplateBinding;
	class TemplateParameter;
	class TemplateParameterSubstitution;
	class TemplateSignature;
	class TemplateableElement;
	class TestIdentityAction;
	class TimeConstraint;
	class TimeEvent;
	class TimeExpression;
	class TimeInterval;
	class TimeObservation;
	class Transition;
	class Trigger;
	class Type;
	class TypedElement;
	class UnmarshallAction;
	class Usage;
	class UseCase;
	class ValuePin;
	class ValueSpecification;
	class ValueSpecificationAction;
	class Variable;
	class VariableAction;
	class Vertex;
	class WriteLinkAction;
	class WriteStructuralFeatureAction;
	class WriteVariableAction;
	class UmlPackage;
	class UmlFactory;
}

namespace uml 
{
	class UmlFactory : virtual public ecore::EFactory 
	{
		private:    
			UmlFactory(UmlFactory const&) = delete;
			UmlFactory& operator=(UmlFactory const&) = delete;
		protected:
			UmlFactory(){}
		
			//Singleton Instance and Getter
		private:
			static UmlFactory* instance;
		public:
			static UmlFactory* eInstance();
		
			//Creator functions
			virtual Activity* createActivity() const = 0;
			virtual Class* createClass() const = 0;
			virtual Comment* createComment() const = 0;
			virtual Stereotype* createStereotype() const = 0;
			virtual Image* createImage() const = 0;
			virtual Profile* createProfile() const = 0;
			virtual Package* createPackage() const = 0;
			virtual TemplateParameter* createTemplateParameter() const = 0;
			virtual TemplateSignature* createTemplateSignature() const = 0;
			virtual TemplateBinding* createTemplateBinding() const = 0;
			virtual TemplateParameterSubstitution* createTemplateParameterSubstitution() const = 0;
			virtual Object* createObject() const = 0;
			virtual Factory* createFactory() const = 0;
			virtual Association* createAssociation() const = 0;
			virtual Property* createProperty() const = 0;
			virtual ConnectorEnd* createConnectorEnd() const = 0;
			virtual ConnectableElementTemplateParameter* createConnectableElementTemplateParameter() const = 0;
			virtual Deployment* createDeployment() const = 0;
			virtual Dependency* createDependency() const = 0;
			virtual DeploymentSpecification* createDeploymentSpecification() const = 0;
			virtual Artifact* createArtifact() const = 0;
			virtual Manifestation* createManifestation() const = 0;
			virtual Abstraction* createAbstraction() const = 0;
			virtual OpaqueExpression* createOpaqueExpression() const = 0;
			virtual Parameter* createParameter() const = 0;
			virtual Operation* createOperation() const = 0;
			virtual ParameterSet* createParameterSet() const = 0;
			virtual Constraint* createConstraint() const = 0;
			virtual DataType* createDataType() const = 0;
			virtual Interface* createInterface() const = 0;
			virtual Reception* createReception() const = 0;
			virtual Signal* createSignal() const = 0;
			virtual ProtocolStateMachine* createProtocolStateMachine() const = 0;
			virtual StateMachine* createStateMachine() const = 0;
			virtual Pseudostate* createPseudostate() const = 0;
			virtual Region* createRegion() const = 0;
			virtual State* createState() const = 0;
			virtual ConnectionPointReference* createConnectionPointReference() const = 0;
			virtual Trigger* createTrigger() const = 0;
			virtual Port* createPort() const = 0;
			virtual Transition* createTransition() const = 0;
			virtual ProtocolConformance* createProtocolConformance() const = 0;
			virtual OperationTemplateParameter* createOperationTemplateParameter() const = 0;
			virtual PackageMerge* createPackageMerge() const = 0;
			virtual ProfileApplication* createProfileApplication() const = 0;
			virtual Enumeration* createEnumeration() const = 0;
			virtual EnumerationLiteral* createEnumerationLiteral() const = 0;
			virtual InstanceSpecification* createInstanceSpecification() const = 0;
			virtual Slot* createSlot() const = 0;
			virtual PrimitiveType* createPrimitiveType() const = 0;
			virtual ElementImport* createElementImport() const = 0;
			virtual PackageImport* createPackageImport() const = 0;
			virtual Extension* createExtension() const = 0;
			virtual ExtensionEnd* createExtensionEnd() const = 0;
			virtual Model* createModel() const = 0;
			virtual StringExpression* createStringExpression() const = 0;
			virtual Expression* createExpression() const = 0;
			virtual Usage* createUsage() const = 0;
			virtual CollaborationUse* createCollaborationUse() const = 0;
			virtual Collaboration* createCollaboration() const = 0;
			virtual Connector* createConnector() const = 0;
			virtual Generalization* createGeneralization() const = 0;
			virtual GeneralizationSet* createGeneralizationSet() const = 0;
			virtual RedefinableTemplateSignature* createRedefinableTemplateSignature() const = 0;
			virtual UseCase* createUseCase() const = 0;
			virtual Extend* createExtend() const = 0;
			virtual ExtensionPoint* createExtensionPoint() const = 0;
			virtual Include* createInclude() const = 0;
			virtual Substitution* createSubstitution() const = 0;
			virtual Realization* createRealization() const = 0;
			virtual ClassifierTemplateParameter* createClassifierTemplateParameter() const = 0;
			virtual InterfaceRealization* createInterfaceRealization() const = 0;
			virtual ActivityPartition* createActivityPartition() const = 0;
			virtual InterruptibleActivityRegion* createInterruptibleActivityRegion() const = 0;
			virtual StructuredActivityNode* createStructuredActivityNode() const = 0;
			virtual ExceptionHandler* createExceptionHandler() const = 0;
			virtual InputPin* createInputPin() const = 0;
			virtual OutputPin* createOutputPin() const = 0;
			virtual Variable* createVariable() const = 0;
			virtual ValueSpecificationAction* createValueSpecificationAction() const = 0;
			virtual LinkEndData* createLinkEndData() const = 0;
			virtual QualifierValue* createQualifierValue() const = 0;
			virtual AcceptCallAction* createAcceptCallAction() const = 0;
			virtual AcceptEventAction* createAcceptEventAction() const = 0;
			virtual ActionInputPin* createActionInputPin() const = 0;
			virtual AddStructuralFeatureValueAction* createAddStructuralFeatureValueAction() const = 0;
			virtual AddVariableValueAction* createAddVariableValueAction() const = 0;
			virtual BroadcastSignalAction* createBroadcastSignalAction() const = 0;
			virtual CallBehaviorAction* createCallBehaviorAction() const = 0;
			virtual CallOperationAction* createCallOperationAction() const = 0;
			virtual Clause* createClause() const = 0;
			virtual ClearAssociationAction* createClearAssociationAction() const = 0;
			virtual ClearStructuralFeatureAction* createClearStructuralFeatureAction() const = 0;
			virtual ClearVariableAction* createClearVariableAction() const = 0;
			virtual ConditionalNode* createConditionalNode() const = 0;
			virtual CreateLinkAction* createCreateLinkAction() const = 0;
			virtual LinkEndCreationData* createLinkEndCreationData() const = 0;
			virtual CreateLinkObjectAction* createCreateLinkObjectAction() const = 0;
			virtual CreateObjectAction* createCreateObjectAction() const = 0;
			virtual DestroyLinkAction* createDestroyLinkAction() const = 0;
			virtual LinkEndDestructionData* createLinkEndDestructionData() const = 0;
			virtual DestroyObjectAction* createDestroyObjectAction() const = 0;
			virtual ExpansionNode* createExpansionNode() const = 0;
			virtual ExpansionRegion* createExpansionRegion() const = 0;
			virtual LoopNode* createLoopNode() const = 0;
			virtual OpaqueAction* createOpaqueAction() const = 0;
			virtual RaiseExceptionAction* createRaiseExceptionAction() const = 0;
			virtual ReadExtentAction* createReadExtentAction() const = 0;
			virtual ReadIsClassifiedObjectAction* createReadIsClassifiedObjectAction() const = 0;
			virtual ReadLinkAction* createReadLinkAction() const = 0;
			virtual ReadLinkObjectEndAction* createReadLinkObjectEndAction() const = 0;
			virtual ReadLinkObjectEndQualifierAction* createReadLinkObjectEndQualifierAction() const = 0;
			virtual ReadSelfAction* createReadSelfAction() const = 0;
			virtual ReadStructuralFeatureAction* createReadStructuralFeatureAction() const = 0;
			virtual ReadVariableAction* createReadVariableAction() const = 0;
			virtual ReclassifyObjectAction* createReclassifyObjectAction() const = 0;
			virtual ReduceAction* createReduceAction() const = 0;
			virtual RemoveStructuralFeatureValueAction* createRemoveStructuralFeatureValueAction() const = 0;
			virtual RemoveVariableValueAction* createRemoveVariableValueAction() const = 0;
			virtual ReplyAction* createReplyAction() const = 0;
			virtual SendObjectAction* createSendObjectAction() const = 0;
			virtual SendSignalAction* createSendSignalAction() const = 0;
			virtual SequenceNode* createSequenceNode() const = 0;
			virtual StartClassifierBehaviorAction* createStartClassifierBehaviorAction() const = 0;
			virtual StartObjectBehaviorAction* createStartObjectBehaviorAction() const = 0;
			virtual TestIdentityAction* createTestIdentityAction() const = 0;
			virtual UnmarshallAction* createUnmarshallAction() const = 0;
			virtual ValuePin* createValuePin() const = 0;
			virtual ActivityFinalNode* createActivityFinalNode() const = 0;
			virtual ActivityParameterNode* createActivityParameterNode() const = 0;
			virtual CentralBufferNode* createCentralBufferNode() const = 0;
			virtual ControlFlow* createControlFlow() const = 0;
			virtual DataStoreNode* createDataStoreNode() const = 0;
			virtual DecisionNode* createDecisionNode() const = 0;
			virtual ObjectFlow* createObjectFlow() const = 0;
			virtual FlowFinalNode* createFlowFinalNode() const = 0;
			virtual ForkNode* createForkNode() const = 0;
			virtual InitialNode* createInitialNode() const = 0;
			virtual JoinNode* createJoinNode() const = 0;
			virtual MergeNode* createMergeNode() const = 0;
			virtual InstanceValue* createInstanceValue() const = 0;
			virtual AnyReceiveEvent* createAnyReceiveEvent() const = 0;
			virtual CallEvent* createCallEvent() const = 0;
			virtual ChangeEvent* createChangeEvent() const = 0;
			virtual FunctionBehavior* createFunctionBehavior() const = 0;
			virtual OpaqueBehavior* createOpaqueBehavior() const = 0;
			virtual SignalEvent* createSignalEvent() const = 0;
			virtual TimeEvent* createTimeEvent() const = 0;
			virtual TimeExpression* createTimeExpression() const = 0;
			virtual CommunicationPath* createCommunicationPath() const = 0;
			virtual Device* createDevice() const = 0;
			virtual Node* createNode() const = 0;
			virtual ExecutionEnvironment* createExecutionEnvironment() const = 0;
			virtual InformationFlow* createInformationFlow() const = 0;
			virtual Message* createMessage() const = 0;
			virtual Interaction* createInteraction() const = 0;
			virtual Lifeline* createLifeline() const = 0;
			virtual PartDecomposition* createPartDecomposition() const = 0;
			virtual InteractionUse* createInteractionUse() const = 0;
			virtual Gate* createGate() const = 0;
			virtual InteractionOperand* createInteractionOperand() const = 0;
			virtual InteractionConstraint* createInteractionConstraint() const = 0;
			virtual GeneralOrdering* createGeneralOrdering() const = 0;
			virtual OccurrenceSpecification* createOccurrenceSpecification() const = 0;
			virtual InformationItem* createInformationItem() const = 0;
			virtual ActionExecutionSpecification* createActionExecutionSpecification() const = 0;
			virtual BehaviorExecutionSpecification* createBehaviorExecutionSpecification() const = 0;
			virtual CombinedFragment* createCombinedFragment() const = 0;
			virtual ConsiderIgnoreFragment* createConsiderIgnoreFragment() const = 0;
			virtual Continuation* createContinuation() const = 0;
			virtual DestructionOccurrenceSpecification* createDestructionOccurrenceSpecification() const = 0;
			virtual MessageOccurrenceSpecification* createMessageOccurrenceSpecification() const = 0;
			virtual ExecutionOccurrenceSpecification* createExecutionOccurrenceSpecification() const = 0;
			virtual StateInvariant* createStateInvariant() const = 0;
			virtual FinalState* createFinalState() const = 0;
			virtual ProtocolTransition* createProtocolTransition() const = 0;
			virtual AssociationClass* createAssociationClass() const = 0;
			virtual Component* createComponent() const = 0;
			virtual ComponentRealization* createComponentRealization() const = 0;
			virtual Actor* createActor() const = 0;
			virtual Duration* createDuration() const = 0;
			virtual DurationConstraint* createDurationConstraint() const = 0;
			virtual IntervalConstraint* createIntervalConstraint() const = 0;
			virtual Interval* createInterval() const = 0;
			virtual DurationInterval* createDurationInterval() const = 0;
			virtual DurationObservation* createDurationObservation() const = 0;
			virtual LiteralBoolean* createLiteralBoolean() const = 0;
			virtual LiteralInteger* createLiteralInteger() const = 0;
			virtual LiteralNull* createLiteralNull() const = 0;
			virtual LiteralReal* createLiteralReal() const = 0;
			virtual LiteralString* createLiteralString() const = 0;
			virtual LiteralUnlimitedNatural* createLiteralUnlimitedNatural() const = 0;
			virtual TimeConstraint* createTimeConstraint() const = 0;
			virtual TimeInterval* createTimeInterval() const = 0;
			virtual TimeObservation* createTimeObservation() const = 0;
			
			//Package
			virtual UmlPackage* getUmlPackage() const = 0;
	};
}
#endif /* end of include guard: UMLFACTORY_HPP */

