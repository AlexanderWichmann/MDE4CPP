//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_EXECUTIONSPECIFICATION_HPP
#define UML_EXECUTIONSPECIFICATION_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class Comment;
}

namespace uml 
{
	class Dependency;
}

namespace ecore 
{
	class EAnnotation;
}

namespace uml 
{
	class Element;
}

namespace uml 
{
	class GeneralOrdering;
}

namespace uml 
{
	class Interaction;
}

namespace uml 
{
	class InteractionFragment;
}

namespace uml 
{
	class InteractionOperand;
}

namespace uml 
{
	class Lifeline;
}

namespace uml 
{
	class Namespace;
}

namespace uml 
{
	class OccurrenceSpecification;
}

namespace uml 
{
	class StringExpression;
}

// base class includes
#include "InteractionFragment.hpp"

// enum includes
#include "VisibilityKind.hpp"


//*********************************
namespace uml 
{
	/*!
	 An ExecutionSpecification is a specification of the execution of a unit of Behavior or Action within the Lifeline. The duration of an ExecutionSpecification is represented by two OccurrenceSpecifications, the start OccurrenceSpecification and the finish OccurrenceSpecification.
	<p>From package UML::Interactions.</p> */
	class ExecutionSpecification:virtual public InteractionFragment	{
		public:
 			ExecutionSpecification(const ExecutionSpecification &) {}
			ExecutionSpecification& operator=(ExecutionSpecification const&) = delete;
	
		protected:
			ExecutionSpecification(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~ExecutionSpecification() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 The startEvent and the finishEvent must be on the same Lifeline.
			start.covered = finish.covered */ 
			virtual bool same_lifeline(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 References the OccurrenceSpecification that designates the finish of the Action or Behavior.
			<p>From package UML::Interactions.</p> */
			virtual uml::OccurrenceSpecification *  getFinish() const = 0;
			
			/*!
			 References the OccurrenceSpecification that designates the finish of the Action or Behavior.
			<p>From package UML::Interactions.</p> */
			virtual void setFinish(uml::OccurrenceSpecification *  _finish) = 0;
			
			/*!
			 References the OccurrenceSpecification that designates the start of the Action or Behavior.
			<p>From package UML::Interactions.</p> */
			virtual uml::OccurrenceSpecification *  getStart() const = 0;
			
			/*!
			 References the OccurrenceSpecification that designates the start of the Action or Behavior.
			<p>From package UML::Interactions.</p> */
			virtual void setStart(uml::OccurrenceSpecification *  _start) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 References the OccurrenceSpecification that designates the finish of the Action or Behavior.
			<p>From package UML::Interactions.</p> */
			uml::OccurrenceSpecification *  m_finish =  nullptr ;
			/*!
			 References the OccurrenceSpecification that designates the start of the Action or Behavior.
			<p>From package UML::Interactions.</p> */
			uml::OccurrenceSpecification *  m_start =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const = 0;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const = 0;/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Namespace *  getNamespace() const = 0; 
	};

}
#endif /* end of include guard: UML_EXECUTIONSPECIFICATION_HPP */

