//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_TEMPLATEPARAMETERSUBSTITUTION_HPP
#define UML_TEMPLATEPARAMETERSUBSTITUTION_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <map>
#include <string>
#include <vector>

#include "abstractDataTypes/SubsetUnion.hpp"
#include "boost/shared_ptr.hpp"
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class Comment;
}

namespace ecore 
{
	class EAnnotation;
}

namespace uml 
{
	class Element;
}

namespace uml 
{
	class ParameterableElement;
}

namespace uml 
{
	class TemplateBinding;
}

namespace uml 
{
	class TemplateParameter;
}

// base class includes
#include "uml/Element.hpp"

// enum includes


//*********************************
namespace uml 
{
	/*!
	 A TemplateParameterSubstitution relates the actual parameter to a formal TemplateParameter as part of a template binding.
	<p>From package UML::CommonStructure.</p> */
	class TemplateParameterSubstitution:virtual public Element
	{
		public:
 			TemplateParameterSubstitution(const TemplateParameterSubstitution &) {}
			TemplateParameterSubstitution& operator=(TemplateParameterSubstitution const&) = delete;

		protected:
			TemplateParameterSubstitution(){}


			//Additional constructors for the containments back reference

			TemplateParameterSubstitution(std::weak_ptr<uml::Element > par_owner);

			//Additional constructors for the containments back reference

			TemplateParameterSubstitution(std::weak_ptr<uml::TemplateBinding > par_templateBinding);

		public:
			virtual std::shared_ptr<ecore::EObject> copy() const = 0;

			//destructor
			virtual ~TemplateParameterSubstitution() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 The actual ParameterableElement must be compatible with the formal TemplateParameter, e.g., the actual ParameterableElement for a Class TemplateParameter must be a Class.
			actual->forAll(a | a.isCompatibleWith(formal.parameteredElement)) */ 
			virtual bool must_be_compatible(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The ParameterableElement that is the actual parameter for this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::ParameterableElement > getActual() const = 0;
			
			/*!
			 The ParameterableElement that is the actual parameter for this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p> */
			virtual void setActual(std::shared_ptr<uml::ParameterableElement> _actual_actual) = 0;
			/*!
			 The formal TemplateParameter that is associated with this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::TemplateParameter > getFormal() const = 0;
			
			/*!
			 The formal TemplateParameter that is associated with this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p> */
			virtual void setFormal(std::shared_ptr<uml::TemplateParameter> _formal_formal) = 0;
			/*!
			 The ParameterableElement that is owned by this TemplateParameterSubstitution as its actual parameter.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::ParameterableElement > getOwnedActual() const = 0;
			
			/*!
			 The ParameterableElement that is owned by this TemplateParameterSubstitution as its actual parameter.
			<p>From package UML::CommonStructure.</p> */
			virtual void setOwnedActual(std::shared_ptr<uml::ParameterableElement> _ownedActual_ownedActual) = 0;
			/*!
			 The TemplateBinding that owns this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p> */
			virtual std::weak_ptr<uml::TemplateBinding > getTemplateBinding() const = 0;
			
			/*!
			 The TemplateBinding that owns this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p> */
			virtual void setTemplateBinding(std::shared_ptr<uml::TemplateBinding> _templateBinding_templateBinding) = 0;
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 The ParameterableElement that is the actual parameter for this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p> */
			std::shared_ptr<uml::ParameterableElement > m_actual;
			/*!
			 The formal TemplateParameter that is associated with this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p> */
			std::shared_ptr<uml::TemplateParameter > m_formal;
			/*!
			 The ParameterableElement that is owned by this TemplateParameterSubstitution as its actual parameter.
			<p>From package UML::CommonStructure.</p> */
			std::shared_ptr<uml::ParameterableElement > m_ownedActual;
			/*!
			 The TemplateBinding that owns this TemplateParameterSubstitution.
			<p>From package UML::CommonStructure.</p> */
			std::weak_ptr<uml::TemplateBinding > m_templateBinding;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<Union<uml::Element> > getOwnedElement() const = 0;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::weak_ptr<uml::Element > getOwner() const = 0;

			virtual std::shared_ptr<ecore::EObject> eContainer() const = 0; 
	};

}
#endif /* end of include guard: UML_TEMPLATEPARAMETERSUBSTITUTION_HPP */

