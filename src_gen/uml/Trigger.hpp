//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_TRIGGER_HPP
#define UML_TRIGGER_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class Comment;
}

namespace uml 
{
	class Dependency;
}

namespace ecore 
{
	class EAnnotation;
}

namespace uml 
{
	class Element;
}

namespace uml 
{
	class Event;
}

namespace uml 
{
	class NamedElement;
}

namespace uml 
{
	class Namespace;
}

namespace uml 
{
	class Port;
}

namespace uml 
{
	class StringExpression;
}

// base class includes
#include "NamedElement.hpp"

// enum includes
#include "VisibilityKind.hpp"


//*********************************
namespace uml 
{
	/*!
	 A Trigger specifies a specific point  at which an Event occurrence may trigger an effect in a Behavior. A Trigger may be qualified by the Port on which the Event occurred.
	<p>From package UML::CommonBehavior.</p> */
	class Trigger:virtual public NamedElement	{
		public:
 			Trigger(const Trigger &) {}
			Trigger& operator=(Trigger const&) = delete;
	
		protected:
			Trigger(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~Trigger() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 If a Trigger specifies one or more ports, the event of the Trigger must be a MessageEvent.
			port->notEmpty() implies event.oclIsKindOf(MessageEvent) */ 
			virtual bool trigger_with_ports(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The Event that detected by the Trigger.
			<p>From package UML::CommonBehavior.</p> */
			virtual uml::Event *  getEvent() const = 0;
			
			/*!
			 The Event that detected by the Trigger.
			<p>From package UML::CommonBehavior.</p> */
			virtual void setEvent(uml::Event *  _event) = 0;
			
			/*!
			 A optional Port of through which the given effect is detected.
			<p>From package UML::CommonBehavior.</p> */
			virtual std::vector<uml::Port * > *  getPort() const = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 The Event that detected by the Trigger.
			<p>From package UML::CommonBehavior.</p> */
			uml::Event *  m_event =  nullptr ;
			/*!
			 A optional Port of through which the given effect is detected.
			<p>From package UML::CommonBehavior.</p> */
			std::vector<uml::Port * > *  m_port =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const = 0;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const = 0; 
	};

}
#endif /* end of include guard: UML_TRIGGER_HPP */

