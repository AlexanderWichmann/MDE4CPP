//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_TEMPLATESIGNATURE_HPP
#define UML_TEMPLATESIGNATURE_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class Comment;
}

namespace ecore 
{
	class EAnnotation;
}

namespace uml 
{
	class Element;
}

namespace uml 
{
	class TemplateParameter;
}

namespace uml 
{
	class TemplateableElement;
}

// base class includes
#include "Element.hpp"

// enum includes


//*********************************
namespace uml 
{
	/*!
	 A Template Signature bundles the set of formal TemplateParameters for a template.
	<p>From package UML::CommonStructure.</p> */
	class TemplateSignature:virtual public Element	{
		public:
 			TemplateSignature(const TemplateSignature &) {}
			TemplateSignature& operator=(TemplateSignature const&) = delete;
	
		protected:
			TemplateSignature(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~TemplateSignature() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 Parameters must own the ParameterableElements they parameter or those ParameterableElements must be owned by the TemplateableElement being templated.
			template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet()) */ 
			virtual bool own_elements(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  = 0;
			
			/*!
			 The names of the parameters of a TemplateSignature are unique.
			parameter->forAll( p1, p2 | (p1 <> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies
			   p1.parameteredElement.oclAsType(NamedElement).name <> p2.parameteredElement.oclAsType(NamedElement).name) */ 
			virtual bool unique_parameters(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The ordered set of all formal TemplateParameters for this TemplateSignature.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::TemplateParameter * > *  getParameter() const = 0;
			
			/*!
			 The TemplateableElement that owns this TemplateSignature.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::TemplateableElement *  getTemplate() const = 0;
			
			/*!
			 The TemplateableElement that owns this TemplateSignature.
			<p>From package UML::CommonStructure.</p> */
			virtual void setTemplate(uml::TemplateableElement *  _template) = 0;
			
			/*!
			 The formal parameters that are owned by this TemplateSignature.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::TemplateParameter * > *  getOwnedParameter() const = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 The ordered set of all formal TemplateParameters for this TemplateSignature.
			<p>From package UML::CommonStructure.</p> */
			std::vector<uml::TemplateParameter * > *  m_parameter =  nullptr ;
			/*!
			 The TemplateableElement that owns this TemplateSignature.
			<p>From package UML::CommonStructure.</p> */
			uml::TemplateableElement *  m_template =  nullptr ;
			/*!
			 The formal parameters that are owned by this TemplateSignature.
			<p>From package UML::CommonStructure.</p> */
			std::vector<uml::TemplateParameter * > *  m_ownedParameter =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const = 0;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const = 0; 
	};

}
#endif /* end of include guard: UML_TEMPLATESIGNATURE_HPP */

