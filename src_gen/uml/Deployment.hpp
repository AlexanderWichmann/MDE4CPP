//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_DEPLOYMENT_HPP
#define UML_DEPLOYMENT_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class Comment;
}

namespace uml 
{
	class Dependency;
}

namespace uml 
{
	class DeployedArtifact;
}

namespace uml 
{
	class DeploymentSpecification;
}

namespace uml 
{
	class DeploymentTarget;
}

namespace ecore 
{
	class EAnnotation;
}

namespace uml 
{
	class Element;
}

namespace uml 
{
	class NamedElement;
}

namespace uml 
{
	class Namespace;
}

namespace uml 
{
	class StringExpression;
}

namespace uml 
{
	class TemplateParameter;
}

// base class includes
#include "Dependency.hpp"

// enum includes
#include "VisibilityKind.hpp"


//*********************************
namespace uml 
{
	/*!
	 A deployment is the allocation of an artifact or artifact instance to a deployment target.
	A component deployment is the deployment of one or more artifacts or artifact instances to a deployment target, optionally parameterized by a deployment specification. Examples are executables and configuration files.
	<p>From package UML::Deployments.</p> */
	class Deployment:virtual public Dependency	{
		public:
 			Deployment(const Deployment &) {}
			Deployment& operator=(Deployment const&) = delete;
	
		protected:
			Deployment(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~Deployment() {}

			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The specification of properties that parameterize the deployment and execution of one or more Artifacts.
			<p>From package UML::Deployments.</p> */
			virtual std::vector<uml::DeploymentSpecification * > *  getConfiguration() const = 0;
			
			/*!
			 The Artifacts that are deployed onto a Node. This association specializes the supplier association.
			<p>From package UML::Deployments.</p> */
			virtual std::vector<uml::DeployedArtifact * > *  getDeployedArtifact() const = 0;
			
			/*!
			 The DeployedTarget which is the target of a Deployment.
			<p>From package UML::Deployments.</p> */
			virtual uml::DeploymentTarget *  getLocation() const = 0;
			
			/*!
			 The DeployedTarget which is the target of a Deployment.
			<p>From package UML::Deployments.</p> */
			virtual void setLocation(uml::DeploymentTarget *  _location) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 The specification of properties that parameterize the deployment and execution of one or more Artifacts.
			<p>From package UML::Deployments.</p> */
			std::vector<uml::DeploymentSpecification * > *  m_configuration =  nullptr ;
			/*!
			 The Artifacts that are deployed onto a Node. This association specializes the supplier association.
			<p>From package UML::Deployments.</p> */
			std::vector<uml::DeployedArtifact * > *  m_deployedArtifact =  nullptr ;
			/*!
			 The DeployedTarget which is the target of a Deployment.
			<p>From package UML::Deployments.</p> */
			uml::DeploymentTarget *  m_location =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const = 0;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const = 0;/*!
			 Specifies the target Element(s) of the DirectedRelationship.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getTarget() const = 0;/*!
			 Specifies the source Element(s) of the DirectedRelationship.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getSource() const = 0;/*!
			 Specifies the elements related by the Relationship.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getRelatedElement() const = 0; 
	};

}
#endif /* end of include guard: UML_DEPLOYMENT_HPP */

