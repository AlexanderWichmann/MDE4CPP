//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_STEREOTYPESTEREOTYPEIMPL_HPP
#define UML_STEREOTYPESTEREOTYPEIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../Stereotype.hpp"

#include "impl/ClassImpl.hpp"

#include "SubsetUnion.hpp"



//*********************************
namespace uml 
{
	class StereotypeImpl :virtual public ClassImpl, virtual public Stereotype 
	{
		public: 
			StereotypeImpl(const StereotypeImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			StereotypeImpl& operator=(StereotypeImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			StereotypeImpl();

		public:
			//destructor
			virtual ~StereotypeImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 Stereotypes may only participate in binary associations.
			ownedAttribute.association->forAll(memberEnd->size()=2) */ 
			virtual bool
			 binaryAssociationsOnly(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 A Stereotype may only generalize or specialize another Stereotype.
			allParents()->forAll(oclIsKindOf(Stereotype)) 
			and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype)) */ 
			virtual bool
			 generalize(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 Stereotype names should not clash with keyword names for the extended model element. */ 
			virtual bool
			 name_not_clash(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 Where a stereotypeâ€™s property is an association end for an association other than a kind of extension, and the other end is not a stereotype, the other end must be owned by the association itself.
			ownedAttribute
			->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))
			->forAll(opposite.owner = association) */ 
			virtual bool
			 associationEndOwnership(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 The upper bound of base-properties is exactly 1. */ 
			virtual bool
			 base_property_upper_bound(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 If a Stereotype extends only one metaclass, the multiplicity of the corresponding base-property shall be 1..1. */ 
			virtual bool
			 base_property_multiplicity_single_extension(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 If a Stereotype extends more than one metaclass, the multiplicity of the corresponding base-properties shall be [0..1]. At any point in time, only one of these base-properties can contain a metaclass instance during runtime. */ 
			virtual bool
			 base_property_multiplicity_multiple_extension(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 Creates a(n) (required) extension of the specified metaclass with this stereotype. */ 
			virtual std::shared_ptr<uml::Extension> 
			 createExtension(std::shared_ptr<uml::Class>  metaclass,bool isRequired)  ;
			
			/*!
			 Creates an icon with the specified location for this stereotype. */ 
			virtual std::shared_ptr<uml::Image> 
			 createIcon(std::string location)  ;
			
			/*!
			 Creates an icon with the specified format and content for this stereotype. */ 
			virtual std::shared_ptr<uml::Image> 
			 createIcon(std::string format,std::string content)  ;
			
			/*!
			 Retrieves all the metaclasses extended by this stereotype, including the metaclasses extended by its superstereotypes. */ 
			virtual std::shared_ptr<Bag<uml::Class> >
			 getAllExtendedMetaclasses()  ;
			
			/*!
			 Retrieves the current definition (Ecore representation) of this stereotype. */ 
			virtual std::shared_ptr<ecore::EClass> 
			 getDefinition()  ;
			
			/*!
			 Retrieves the metaclasses extended by this stereotype. */ 
			virtual std::shared_ptr<Bag<uml::Class> >
			 getExtendedMetaclasses()  ;
			
			/*!
			 Retrieves the localized keyword for this stereotype. */ 
			virtual std::string
			 getKeyword()  ;
			
			/*!
			 Retrieves the keyword for this stereotype, localized if indicated. */ 
			virtual std::string
			 getKeyword(bool localize)  ;
			
			/*!
			 The query containingProfile returns the closest profile directly or indirectly containing this stereotype.
			result = (self.namespace.oclAsType(Package).containingProfile())
			<p>From package UML::Packages.</p> */ 
			virtual std::shared_ptr<uml::Profile> 
			 containingProfile()  ;
			
			
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 Stereotype can change the graphical appearance of the extended model element by using attached icons. When this association is not null, it references the location of the icon content to be displayed within diagrams presenting the extended model elements.
			<p>From package UML::Packages.</p> */
			virtual 		std::shared_ptr<Subset<uml::Image, uml::Element > >
			 getIcon() const ;
			
			/*!
			 The profile that directly or indirectly contains this stereotype.
			<p>From package UML::Packages.</p> */
			virtual std::shared_ptr<uml::Profile > getProfile() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 All of the Properties that are direct (i.e., not inherited or imported) attributes of the Classifier.
			<p>From package UML::Classification.</p> */
			virtual 		std::shared_ptr<SubsetUnion<uml::Property, uml::Feature > >
			 getAttribute() const ;/*!
			 A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::NamedElement> > getMember() const ;/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::Element> > getOwnedElement() const ;/*!
			 Specifies each Feature directly defined in the classifier. Note that there may be members of the Classifier that are of the type Feature but are not included, e.g., inherited features.
			<p>From package UML::Classification.</p> */
			virtual 		std::shared_ptr<SubsetUnion<uml::Feature, uml::NamedElement > >
			 getFeature() const ;/*!
			 A collection of NamedElements owned by the Namespace.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<SubsetUnion<uml::NamedElement, uml::Element,uml::NamedElement > >
			 getOwnedMember() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual 		std::shared_ptr<Union<uml::RedefinableElement> > getRedefinedElement() const ;/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Namespace > getNamespace() const ;/*!
			 The roles that instances may play in this StructuredClassifier.
			<p>From package UML::StructuredClassifiers.</p> */
			virtual 		std::shared_ptr<SubsetUnion<uml::ConnectableElement, uml::NamedElement > >
			 getRole() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element > getOwner() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_STEREOTYPESTEREOTYPEIMPL_HPP */

