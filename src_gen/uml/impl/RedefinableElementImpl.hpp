//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_REDEFINABLEELEMENTREDEFINABLEELEMENTIMPL_HPP
#define UML_REDEFINABLEELEMENTREDEFINABLEELEMENTIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../RedefinableElement.hpp"

#include "impl/NamedElementImpl.hpp"



//*********************************
namespace uml 
{
	class RedefinableElementImpl :virtual public NamedElementImpl, virtual public RedefinableElement 
	{
		public: 
			RedefinableElementImpl(const RedefinableElementImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			RedefinableElementImpl& operator=(RedefinableElementImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			RedefinableElementImpl();

		public:
			//destructor
			virtual ~RedefinableElementImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 A redefining element must be consistent with each redefined element.
			redefinedElement->forAll(re | re.isConsistentWith(self)) */ 
			virtual bool redefinition_consistent(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 A RedefinableElement can only redefine non-leaf RedefinableElements.
			redefinedElement->forAll(re | not re.isLeaf) */ 
			virtual bool non_leaf_redefinition(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 At least one of the redefinition contexts of the redefining element must be a specialization of at least one of the redefinition contexts for each redefined element.
			redefinedElement->forAll(re | self.isRedefinitionContextValid(re)) */ 
			virtual bool redefinition_context_valid(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 The query isConsistentWith() specifies, for any two RedefinableElements in a context in which redefinition is possible, whether redefinition would be logically consistent. By default, this is false; this operation must be overridden for subclasses of RedefinableElement to define the consistency conditions.
			result = (false)
			redefiningElement.isRedefinitionContextValid(self)
			<p>From package UML::Classification.</p> */ 
			virtual bool isConsistentWith(std::shared_ptr<uml::RedefinableElement>  redefiningElement)  ;
			
			/*!
			 The query isRedefinitionContextValid() specifies whether the redefinition contexts of this RedefinableElement are properly related to the redefinition contexts of the specified RedefinableElement to allow this element to redefine the other. By default at least one of the redefinition contexts of this element must be a specialization of at least one of the redefinition contexts of the specified element.
			result = (redefinitionContext->exists(c | c.allParents()->includesAll(redefinedElement.redefinitionContext)))
			<p>From package UML::Classification.</p> */ 
			virtual bool isRedefinitionContextValid(std::shared_ptr<uml::RedefinableElement>  redefinedElement)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 Indicates whether it is possible to further redefine a RedefinableElement. If the value is true, then it is not possible to further redefine the RedefinableElement.
			<p>From package UML::Classification.</p> */ 
			virtual bool getIsLeaf() const ;
			
			/*!
			 Indicates whether it is possible to further redefine a RedefinableElement. If the value is true, then it is not possible to further redefine the RedefinableElement.
			<p>From package UML::Classification.</p> */ 
			virtual void setIsLeaf (bool _isLeaf); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::Element>>> getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element> getOwner() const ;/*!
			 The contexts that this element may be redefined from.
			<p>From package UML::Classification.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::Classifier>>> getRedefinitionContext() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::RedefinableElement>>> getRedefinedElement() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_REDEFINABLEELEMENTREDEFINABLEELEMENTIMPL_HPP */

