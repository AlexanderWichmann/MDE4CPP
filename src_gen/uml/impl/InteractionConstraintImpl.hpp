//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_INTERACTIONCONSTRAINTINTERACTIONCONSTRAINTIMPL_HPP
#define UML_INTERACTIONCONSTRAINTINTERACTIONCONSTRAINTIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) /**/
#else
    #define ACT_DEBUG(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../InteractionConstraint.hpp"

#include "impl/ConstraintImpl.hpp"

#include "SubsetUnion.hpp"



//*********************************
namespace uml 
{
	class InteractionConstraintImpl :virtual public ConstraintImpl, virtual public InteractionConstraint 
	{
		public: 
			InteractionConstraintImpl(const InteractionConstraintImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			InteractionConstraintImpl& operator=(InteractionConstraintImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			InteractionConstraintImpl();

		public:
			//destructor
			virtual ~InteractionConstraintImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 Minint/maxint can only be present if the InteractionConstraint is associated with the operand of a loop CombinedFragment.
			maxint->notEmpty() or minint->notEmpty() implies
			interactionOperand.combinedFragment.interactionOperator =
			InteractionOperatorKind::loop */ 
			virtual bool
			 minint_maxint(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 If minint is specified, then the expression must evaluate to a non-negative integer.
			minint->notEmpty() implies 
			minint->asSequence()->first().integerValue() >= 0 */ 
			virtual bool
			 minint_non_negative(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 If maxint is specified, then the expression must evaluate to a positive integer.
			maxint->notEmpty() implies 
			maxint->asSequence()->first().integerValue() > 0 */ 
			virtual bool
			 maxint_positive(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 The dynamic variables that take part in the constraint must be owned by the ConnectableElement corresponding to the covered Lifeline. */ 
			virtual bool
			 dynamic_variables(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 The constraint may contain references to global data or write-once data. */ 
			virtual bool
			 global_data(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 If maxint is specified, then minint must be specified and the evaluation of maxint must be >= the evaluation of minint.
			maxint->notEmpty() implies (minint->notEmpty() and 
			maxint->asSequence()->first().integerValue() >=
			minint->asSequence()->first().integerValue() ) */ 
			virtual bool
			 maxint_greater_equal_minint(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The maximum number of iterations of a loop
			<p>From package UML::Interactions.</p> */
			virtual std::shared_ptr<uml::ValueSpecification > getMaxint() const ;
			
			/*!
			 The maximum number of iterations of a loop
			<p>From package UML::Interactions.</p> */
			virtual void setMaxint(std::shared_ptr<uml::ValueSpecification> _maxint_maxint) ;
			/*!
			 The minimum number of iterations of a loop
			<p>From package UML::Interactions.</p> */
			virtual std::shared_ptr<uml::ValueSpecification > getMinint() const ;
			
			/*!
			 The minimum number of iterations of a loop
			<p>From package UML::Interactions.</p> */
			virtual void setMinint(std::shared_ptr<uml::ValueSpecification> _minint_minint) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::Element> > getOwnedElement() const ;/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Namespace > getNamespace() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element > getOwner() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_INTERACTIONCONSTRAINTINTERACTIONCONSTRAINTIMPL_HPP */

