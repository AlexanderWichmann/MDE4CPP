//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_DESTRUCTIONOCCURRENCESPECIFICATIONDESTRUCTIONOCCURRENCESPECIFICATIONIMPL_HPP
#define UML_DESTRUCTIONOCCURRENCESPECIFICATIONDESTRUCTIONOCCURRENCESPECIFICATIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../DestructionOccurrenceSpecification.hpp"

#include "impl/MessageOccurrenceSpecificationImpl.hpp"



//*********************************
namespace uml 
{
	class DestructionOccurrenceSpecificationImpl :virtual public MessageOccurrenceSpecificationImpl, virtual public DestructionOccurrenceSpecification 
	{
		public: 
			DestructionOccurrenceSpecificationImpl(const DestructionOccurrenceSpecificationImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			DestructionOccurrenceSpecificationImpl& operator=(DestructionOccurrenceSpecificationImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			DestructionOccurrenceSpecificationImpl();

		public:
			//destructor
			virtual ~DestructionOccurrenceSpecificationImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 No other OccurrenceSpecifications on a given Lifeline in an InteractionOperand may appear below a DestructionOccurrenceSpecification.
			let o : InteractionOperand = enclosingOperand in o->notEmpty() and 
			let peerEvents : OrderedSet(OccurrenceSpecification) = covered.events->select(enclosingOperand = o)
			in peerEvents->last() = self */ 
			virtual bool no_occurrence_specifications_below(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::Element>>> getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element> getOwner() const ;/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Namespace> getNamespace() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_DESTRUCTIONOCCURRENCESPECIFICATIONDESTRUCTIONOCCURRENCESPECIFICATIONIMPL_HPP */

