//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_EXECUTIONSPECIFICATIONEXECUTIONSPECIFICATIONIMPL_HPP
#define UML_EXECUTIONSPECIFICATIONEXECUTIONSPECIFICATIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../ExecutionSpecification.hpp"

#include "impl/InteractionFragmentImpl.hpp"


//*********************************
namespace uml 
{
	class ExecutionSpecificationImpl :virtual public InteractionFragmentImpl, virtual public ExecutionSpecification
	{
		public: 
			ExecutionSpecificationImpl(const ExecutionSpecificationImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			ExecutionSpecificationImpl& operator=(ExecutionSpecificationImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			ExecutionSpecificationImpl();

		public:
			//destructor
			virtual ~ExecutionSpecificationImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 The startEvent and the finishEvent must be on the same Lifeline.
			start.covered = finish.covered */ 
			virtual bool same_lifeline(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 References the OccurrenceSpecification that designates the finish of the Action or Behavior.
			<p>From package UML::Interactions.</p> */
			virtual uml::OccurrenceSpecification *  getFinish() const ;
			
			/*!
			 References the OccurrenceSpecification that designates the finish of the Action or Behavior.
			<p>From package UML::Interactions.</p> */
			virtual void setFinish(uml::OccurrenceSpecification *  _finish) ;
			
			/*!
			 References the OccurrenceSpecification that designates the start of the Action or Behavior.
			<p>From package UML::Interactions.</p> */
			virtual uml::OccurrenceSpecification *  getStart() const ;
			
			/*!
			 References the OccurrenceSpecification that designates the start of the Action or Behavior.
			<p>From package UML::Interactions.</p> */
			virtual void setStart(uml::OccurrenceSpecification *  _start) ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const ;/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Namespace *  getNamespace() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual ecore::EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: UML_EXECUTIONSPECIFICATIONEXECUTIONSPECIFICATIONIMPL_HPP */

