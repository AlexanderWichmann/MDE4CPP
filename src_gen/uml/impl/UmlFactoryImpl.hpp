//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UMLFACTORYIMPL_HPP
#define UMLFACTORYIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include "impl/EFactoryImpl.hpp"

#include "AbstractionImpl.hpp"
#include "AcceptCallActionImpl.hpp"
#include "AcceptEventActionImpl.hpp"
#include "ActionImpl.hpp"
#include "ActionExecutionSpecificationImpl.hpp"
#include "ActionInputPinImpl.hpp"
#include "ActivityImpl.hpp"
#include "ActivityContentImpl.hpp"
#include "ActivityEdgeImpl.hpp"
#include "ActivityFinalNodeImpl.hpp"
#include "ActivityGroupImpl.hpp"
#include "ActivityNodeImpl.hpp"
#include "ActivityParameterNodeImpl.hpp"
#include "ActivityPartitionImpl.hpp"
#include "ActorImpl.hpp"
#include "AddStructuralFeatureValueActionImpl.hpp"
#include "AddVariableValueActionImpl.hpp"
#include "AnyReceiveEventImpl.hpp"
#include "ArtifactImpl.hpp"
#include "AssociationImpl.hpp"
#include "AssociationClassImpl.hpp"
#include "BehaviorImpl.hpp"
#include "BehaviorExecutionSpecificationImpl.hpp"
#include "BehavioralFeatureImpl.hpp"
#include "BehavioredClassifierImpl.hpp"
#include "BroadcastSignalActionImpl.hpp"
#include "CallActionImpl.hpp"
#include "CallBehaviorActionImpl.hpp"
#include "CallEventImpl.hpp"
#include "CallOperationActionImpl.hpp"
#include "CentralBufferNodeImpl.hpp"
#include "ChangeEventImpl.hpp"
#include "ClassImpl.hpp"
#include "ClassifierImpl.hpp"
#include "ClassifierTemplateParameterImpl.hpp"
#include "ClauseImpl.hpp"
#include "ClearAssociationActionImpl.hpp"
#include "ClearStructuralFeatureActionImpl.hpp"
#include "ClearVariableActionImpl.hpp"
#include "CollaborationImpl.hpp"
#include "CollaborationUseImpl.hpp"
#include "CombinedFragmentImpl.hpp"
#include "CommentImpl.hpp"
#include "CommunicationPathImpl.hpp"
#include "ComponentImpl.hpp"
#include "ComponentRealizationImpl.hpp"
#include "ConditionalNodeImpl.hpp"
#include "ConnectableElementImpl.hpp"
#include "ConnectableElementTemplateParameterImpl.hpp"
#include "ConnectionPointReferenceImpl.hpp"
#include "ConnectorImpl.hpp"
#include "ConnectorEndImpl.hpp"
#include "ConsiderIgnoreFragmentImpl.hpp"
#include "ConstraintImpl.hpp"
#include "ContinuationImpl.hpp"
#include "ControlFlowImpl.hpp"
#include "ControlNodeImpl.hpp"
#include "CreateLinkActionImpl.hpp"
#include "CreateLinkObjectActionImpl.hpp"
#include "CreateObjectActionImpl.hpp"
#include "DataStoreNodeImpl.hpp"
#include "DataTypeImpl.hpp"
#include "DecisionNodeImpl.hpp"
#include "DependencyImpl.hpp"
#include "DeployedArtifactImpl.hpp"
#include "DeploymentImpl.hpp"
#include "DeploymentSpecificationImpl.hpp"
#include "DeploymentTargetImpl.hpp"
#include "DestroyLinkActionImpl.hpp"
#include "DestroyObjectActionImpl.hpp"
#include "DestructionOccurrenceSpecificationImpl.hpp"
#include "DeviceImpl.hpp"
#include "DirectedRelationshipImpl.hpp"
#include "DurationImpl.hpp"
#include "DurationConstraintImpl.hpp"
#include "DurationIntervalImpl.hpp"
#include "DurationObservationImpl.hpp"
#include "ElementImpl.hpp"
#include "ElementImportImpl.hpp"
#include "EncapsulatedClassifierImpl.hpp"
#include "EnumerationImpl.hpp"
#include "EnumerationLiteralImpl.hpp"
#include "EventImpl.hpp"
#include "ExceptionHandlerImpl.hpp"
#include "ExecutableNodeImpl.hpp"
#include "ExecutionEnvironmentImpl.hpp"
#include "ExecutionOccurrenceSpecificationImpl.hpp"
#include "ExecutionSpecificationImpl.hpp"
#include "ExpansionNodeImpl.hpp"
#include "ExpansionRegionImpl.hpp"
#include "ExpressionImpl.hpp"
#include "ExtendImpl.hpp"
#include "ExtensionImpl.hpp"
#include "ExtensionEndImpl.hpp"
#include "ExtensionPointImpl.hpp"
#include "FactoryImpl.hpp"
#include "FeatureImpl.hpp"
#include "FinalNodeImpl.hpp"
#include "FinalStateImpl.hpp"
#include "FlowFinalNodeImpl.hpp"
#include "ForkNodeImpl.hpp"
#include "FunctionBehaviorImpl.hpp"
#include "GateImpl.hpp"
#include "GeneralOrderingImpl.hpp"
#include "GeneralizationImpl.hpp"
#include "GeneralizationSetImpl.hpp"
#include "ImageImpl.hpp"
#include "IncludeImpl.hpp"
#include "InformationFlowImpl.hpp"
#include "InformationItemImpl.hpp"
#include "InitialNodeImpl.hpp"
#include "InputPinImpl.hpp"
#include "InstanceSpecificationImpl.hpp"
#include "InstanceValueImpl.hpp"
#include "InteractionImpl.hpp"
#include "InteractionConstraintImpl.hpp"
#include "InteractionFragmentImpl.hpp"
#include "InteractionOperandImpl.hpp"
#include "InteractionUseImpl.hpp"
#include "InterfaceImpl.hpp"
#include "InterfaceRealizationImpl.hpp"
#include "InterruptibleActivityRegionImpl.hpp"
#include "IntervalImpl.hpp"
#include "IntervalConstraintImpl.hpp"
#include "InvocationActionImpl.hpp"
#include "JoinNodeImpl.hpp"
#include "LifelineImpl.hpp"
#include "LinkActionImpl.hpp"
#include "LinkEndCreationDataImpl.hpp"
#include "LinkEndDataImpl.hpp"
#include "LinkEndDestructionDataImpl.hpp"
#include "LiteralBooleanImpl.hpp"
#include "LiteralIntegerImpl.hpp"
#include "LiteralNullImpl.hpp"
#include "LiteralRealImpl.hpp"
#include "LiteralSpecificationImpl.hpp"
#include "LiteralStringImpl.hpp"
#include "LiteralUnlimitedNaturalImpl.hpp"
#include "LoopNodeImpl.hpp"
#include "ManifestationImpl.hpp"
#include "MergeNodeImpl.hpp"
#include "MessageImpl.hpp"
#include "MessageEndImpl.hpp"
#include "MessageEventImpl.hpp"
#include "MessageOccurrenceSpecificationImpl.hpp"
#include "ModelImpl.hpp"
#include "MultiplicityElementImpl.hpp"
#include "NamedElementImpl.hpp"
#include "NamespaceImpl.hpp"
#include "NodeImpl.hpp"
#include "ObjectImpl.hpp"
#include "ObjectFlowImpl.hpp"
#include "ObjectNodeImpl.hpp"
#include "ObservationImpl.hpp"
#include "OccurrenceSpecificationImpl.hpp"
#include "OpaqueActionImpl.hpp"
#include "OpaqueBehaviorImpl.hpp"
#include "OpaqueExpressionImpl.hpp"
#include "OperationImpl.hpp"
#include "OperationTemplateParameterImpl.hpp"
#include "OutputPinImpl.hpp"
#include "PackageImpl.hpp"
#include "PackageImportImpl.hpp"
#include "PackageMergeImpl.hpp"
#include "PackageableElementImpl.hpp"
#include "ParameterImpl.hpp"
#include "ParameterSetImpl.hpp"
#include "ParameterableElementImpl.hpp"
#include "PartDecompositionImpl.hpp"
#include "PinImpl.hpp"
#include "PortImpl.hpp"
#include "PrimitiveTypeImpl.hpp"
#include "ProfileImpl.hpp"
#include "ProfileApplicationImpl.hpp"
#include "PropertyImpl.hpp"
#include "ProtocolConformanceImpl.hpp"
#include "ProtocolStateMachineImpl.hpp"
#include "ProtocolTransitionImpl.hpp"
#include "PseudostateImpl.hpp"
#include "QualifierValueImpl.hpp"
#include "RaiseExceptionActionImpl.hpp"
#include "ReadExtentActionImpl.hpp"
#include "ReadIsClassifiedObjectActionImpl.hpp"
#include "ReadLinkActionImpl.hpp"
#include "ReadLinkObjectEndActionImpl.hpp"
#include "ReadLinkObjectEndQualifierActionImpl.hpp"
#include "ReadSelfActionImpl.hpp"
#include "ReadStructuralFeatureActionImpl.hpp"
#include "ReadVariableActionImpl.hpp"
#include "RealizationImpl.hpp"
#include "ReceptionImpl.hpp"
#include "ReclassifyObjectActionImpl.hpp"
#include "RedefinableElementImpl.hpp"
#include "RedefinableTemplateSignatureImpl.hpp"
#include "ReduceActionImpl.hpp"
#include "RegionImpl.hpp"
#include "RelationshipImpl.hpp"
#include "RemoveStructuralFeatureValueActionImpl.hpp"
#include "RemoveVariableValueActionImpl.hpp"
#include "ReplyActionImpl.hpp"
#include "SendObjectActionImpl.hpp"
#include "SendSignalActionImpl.hpp"
#include "SequenceNodeImpl.hpp"
#include "SignalImpl.hpp"
#include "SignalEventImpl.hpp"
#include "SlotImpl.hpp"
#include "StartClassifierBehaviorActionImpl.hpp"
#include "StartObjectBehaviorActionImpl.hpp"
#include "StateImpl.hpp"
#include "StateInvariantImpl.hpp"
#include "StateMachineImpl.hpp"
#include "StereotypeImpl.hpp"
#include "StringExpressionImpl.hpp"
#include "StructuralFeatureImpl.hpp"
#include "StructuralFeatureActionImpl.hpp"
#include "StructuredActivityNodeImpl.hpp"
#include "StructuredClassifierImpl.hpp"
#include "SubstitutionImpl.hpp"
#include "TemplateBindingImpl.hpp"
#include "TemplateParameterImpl.hpp"
#include "TemplateParameterSubstitutionImpl.hpp"
#include "TemplateSignatureImpl.hpp"
#include "TemplateableElementImpl.hpp"
#include "TestIdentityActionImpl.hpp"
#include "TimeConstraintImpl.hpp"
#include "TimeEventImpl.hpp"
#include "TimeExpressionImpl.hpp"
#include "TimeIntervalImpl.hpp"
#include "TimeObservationImpl.hpp"
#include "TransitionImpl.hpp"
#include "TriggerImpl.hpp"
#include "TypeImpl.hpp"
#include "TypedElementImpl.hpp"
#include "UnmarshallActionImpl.hpp"
#include "UsageImpl.hpp"
#include "UseCaseImpl.hpp"
#include "ValuePinImpl.hpp"
#include "ValueSpecificationImpl.hpp"
#include "ValueSpecificationActionImpl.hpp"
#include "VariableImpl.hpp"
#include "VariableActionImpl.hpp"
#include "VertexImpl.hpp"
#include "WriteLinkActionImpl.hpp"
#include "WriteStructuralFeatureActionImpl.hpp"
#include "WriteVariableActionImpl.hpp"

#include "UmlFactory.hpp"

namespace uml 
{
	class UmlFactoryImpl : virtual public ecore::EFactoryImpl , virtual public UmlFactory 
	{
		private:    
			UmlFactoryImpl(UmlFactoryImpl const&) = delete;
			UmlFactoryImpl& operator=(UmlFactoryImpl const&) = delete;

		protected:
			friend class UmlFactory;
			// Constructor
			UmlFactoryImpl();

		public:
			virtual ~UmlFactoryImpl();
			virtual ecore::EObject* create(ecore::EClass* _class) const;

			//Creator functions
			virtual Activity* createActivity() const ;
			virtual Class* createClass() const ;
			virtual Comment* createComment() const ;
			virtual Stereotype* createStereotype() const ;
			virtual Image* createImage() const ;
			virtual Profile* createProfile() const ;
			virtual Package* createPackage() const ;
			virtual TemplateParameter* createTemplateParameter() const ;
			virtual TemplateSignature* createTemplateSignature() const ;
			virtual TemplateBinding* createTemplateBinding() const ;
			virtual TemplateParameterSubstitution* createTemplateParameterSubstitution() const ;
			virtual Object* createObject() const ;
			virtual Factory* createFactory() const ;
			virtual Association* createAssociation() const ;
			virtual Property* createProperty() const ;
			virtual ConnectorEnd* createConnectorEnd() const ;
			virtual ConnectableElementTemplateParameter* createConnectableElementTemplateParameter() const ;
			virtual Deployment* createDeployment() const ;
			virtual Dependency* createDependency() const ;
			virtual DeploymentSpecification* createDeploymentSpecification() const ;
			virtual Artifact* createArtifact() const ;
			virtual Manifestation* createManifestation() const ;
			virtual Abstraction* createAbstraction() const ;
			virtual OpaqueExpression* createOpaqueExpression() const ;
			virtual Parameter* createParameter() const ;
			virtual Operation* createOperation() const ;
			virtual ParameterSet* createParameterSet() const ;
			virtual Constraint* createConstraint() const ;
			virtual DataType* createDataType() const ;
			virtual Interface* createInterface() const ;
			virtual Reception* createReception() const ;
			virtual Signal* createSignal() const ;
			virtual ProtocolStateMachine* createProtocolStateMachine() const ;
			virtual StateMachine* createStateMachine() const ;
			virtual Pseudostate* createPseudostate() const ;
			virtual Region* createRegion() const ;
			virtual State* createState() const ;
			virtual ConnectionPointReference* createConnectionPointReference() const ;
			virtual Trigger* createTrigger() const ;
			virtual Port* createPort() const ;
			virtual Transition* createTransition() const ;
			virtual ProtocolConformance* createProtocolConformance() const ;
			virtual OperationTemplateParameter* createOperationTemplateParameter() const ;
			virtual PackageMerge* createPackageMerge() const ;
			virtual ProfileApplication* createProfileApplication() const ;
			virtual Enumeration* createEnumeration() const ;
			virtual EnumerationLiteral* createEnumerationLiteral() const ;
			virtual InstanceSpecification* createInstanceSpecification() const ;
			virtual Slot* createSlot() const ;
			virtual PrimitiveType* createPrimitiveType() const ;
			virtual ElementImport* createElementImport() const ;
			virtual PackageImport* createPackageImport() const ;
			virtual Extension* createExtension() const ;
			virtual ExtensionEnd* createExtensionEnd() const ;
			virtual Model* createModel() const ;
			virtual StringExpression* createStringExpression() const ;
			virtual Expression* createExpression() const ;
			virtual Usage* createUsage() const ;
			virtual CollaborationUse* createCollaborationUse() const ;
			virtual Collaboration* createCollaboration() const ;
			virtual Connector* createConnector() const ;
			virtual Generalization* createGeneralization() const ;
			virtual GeneralizationSet* createGeneralizationSet() const ;
			virtual RedefinableTemplateSignature* createRedefinableTemplateSignature() const ;
			virtual UseCase* createUseCase() const ;
			virtual Extend* createExtend() const ;
			virtual ExtensionPoint* createExtensionPoint() const ;
			virtual Include* createInclude() const ;
			virtual Substitution* createSubstitution() const ;
			virtual Realization* createRealization() const ;
			virtual ClassifierTemplateParameter* createClassifierTemplateParameter() const ;
			virtual InterfaceRealization* createInterfaceRealization() const ;
			virtual ActivityPartition* createActivityPartition() const ;
			virtual InterruptibleActivityRegion* createInterruptibleActivityRegion() const ;
			virtual StructuredActivityNode* createStructuredActivityNode() const ;
			virtual ExceptionHandler* createExceptionHandler() const ;
			virtual InputPin* createInputPin() const ;
			virtual OutputPin* createOutputPin() const ;
			virtual Variable* createVariable() const ;
			virtual ValueSpecificationAction* createValueSpecificationAction() const ;
			virtual LinkEndData* createLinkEndData() const ;
			virtual QualifierValue* createQualifierValue() const ;
			virtual AcceptCallAction* createAcceptCallAction() const ;
			virtual AcceptEventAction* createAcceptEventAction() const ;
			virtual ActionInputPin* createActionInputPin() const ;
			virtual AddStructuralFeatureValueAction* createAddStructuralFeatureValueAction() const ;
			virtual AddVariableValueAction* createAddVariableValueAction() const ;
			virtual BroadcastSignalAction* createBroadcastSignalAction() const ;
			virtual CallBehaviorAction* createCallBehaviorAction() const ;
			virtual CallOperationAction* createCallOperationAction() const ;
			virtual Clause* createClause() const ;
			virtual ClearAssociationAction* createClearAssociationAction() const ;
			virtual ClearStructuralFeatureAction* createClearStructuralFeatureAction() const ;
			virtual ClearVariableAction* createClearVariableAction() const ;
			virtual ConditionalNode* createConditionalNode() const ;
			virtual CreateLinkAction* createCreateLinkAction() const ;
			virtual LinkEndCreationData* createLinkEndCreationData() const ;
			virtual CreateLinkObjectAction* createCreateLinkObjectAction() const ;
			virtual CreateObjectAction* createCreateObjectAction() const ;
			virtual DestroyLinkAction* createDestroyLinkAction() const ;
			virtual LinkEndDestructionData* createLinkEndDestructionData() const ;
			virtual DestroyObjectAction* createDestroyObjectAction() const ;
			virtual ExpansionNode* createExpansionNode() const ;
			virtual ExpansionRegion* createExpansionRegion() const ;
			virtual LoopNode* createLoopNode() const ;
			virtual OpaqueAction* createOpaqueAction() const ;
			virtual RaiseExceptionAction* createRaiseExceptionAction() const ;
			virtual ReadExtentAction* createReadExtentAction() const ;
			virtual ReadIsClassifiedObjectAction* createReadIsClassifiedObjectAction() const ;
			virtual ReadLinkAction* createReadLinkAction() const ;
			virtual ReadLinkObjectEndAction* createReadLinkObjectEndAction() const ;
			virtual ReadLinkObjectEndQualifierAction* createReadLinkObjectEndQualifierAction() const ;
			virtual ReadSelfAction* createReadSelfAction() const ;
			virtual ReadStructuralFeatureAction* createReadStructuralFeatureAction() const ;
			virtual ReadVariableAction* createReadVariableAction() const ;
			virtual ReclassifyObjectAction* createReclassifyObjectAction() const ;
			virtual ReduceAction* createReduceAction() const ;
			virtual RemoveStructuralFeatureValueAction* createRemoveStructuralFeatureValueAction() const ;
			virtual RemoveVariableValueAction* createRemoveVariableValueAction() const ;
			virtual ReplyAction* createReplyAction() const ;
			virtual SendObjectAction* createSendObjectAction() const ;
			virtual SendSignalAction* createSendSignalAction() const ;
			virtual SequenceNode* createSequenceNode() const ;
			virtual StartClassifierBehaviorAction* createStartClassifierBehaviorAction() const ;
			virtual StartObjectBehaviorAction* createStartObjectBehaviorAction() const ;
			virtual TestIdentityAction* createTestIdentityAction() const ;
			virtual UnmarshallAction* createUnmarshallAction() const ;
			virtual ValuePin* createValuePin() const ;
			virtual ActivityFinalNode* createActivityFinalNode() const ;
			virtual ActivityParameterNode* createActivityParameterNode() const ;
			virtual CentralBufferNode* createCentralBufferNode() const ;
			virtual ControlFlow* createControlFlow() const ;
			virtual DataStoreNode* createDataStoreNode() const ;
			virtual DecisionNode* createDecisionNode() const ;
			virtual ObjectFlow* createObjectFlow() const ;
			virtual FlowFinalNode* createFlowFinalNode() const ;
			virtual ForkNode* createForkNode() const ;
			virtual InitialNode* createInitialNode() const ;
			virtual JoinNode* createJoinNode() const ;
			virtual MergeNode* createMergeNode() const ;
			virtual InstanceValue* createInstanceValue() const ;
			virtual AnyReceiveEvent* createAnyReceiveEvent() const ;
			virtual CallEvent* createCallEvent() const ;
			virtual ChangeEvent* createChangeEvent() const ;
			virtual FunctionBehavior* createFunctionBehavior() const ;
			virtual OpaqueBehavior* createOpaqueBehavior() const ;
			virtual SignalEvent* createSignalEvent() const ;
			virtual TimeEvent* createTimeEvent() const ;
			virtual TimeExpression* createTimeExpression() const ;
			virtual CommunicationPath* createCommunicationPath() const ;
			virtual Device* createDevice() const ;
			virtual Node* createNode() const ;
			virtual ExecutionEnvironment* createExecutionEnvironment() const ;
			virtual InformationFlow* createInformationFlow() const ;
			virtual Message* createMessage() const ;
			virtual Interaction* createInteraction() const ;
			virtual Lifeline* createLifeline() const ;
			virtual PartDecomposition* createPartDecomposition() const ;
			virtual InteractionUse* createInteractionUse() const ;
			virtual Gate* createGate() const ;
			virtual InteractionOperand* createInteractionOperand() const ;
			virtual InteractionConstraint* createInteractionConstraint() const ;
			virtual GeneralOrdering* createGeneralOrdering() const ;
			virtual OccurrenceSpecification* createOccurrenceSpecification() const ;
			virtual InformationItem* createInformationItem() const ;
			virtual ActionExecutionSpecification* createActionExecutionSpecification() const ;
			virtual BehaviorExecutionSpecification* createBehaviorExecutionSpecification() const ;
			virtual CombinedFragment* createCombinedFragment() const ;
			virtual ConsiderIgnoreFragment* createConsiderIgnoreFragment() const ;
			virtual Continuation* createContinuation() const ;
			virtual DestructionOccurrenceSpecification* createDestructionOccurrenceSpecification() const ;
			virtual MessageOccurrenceSpecification* createMessageOccurrenceSpecification() const ;
			virtual ExecutionOccurrenceSpecification* createExecutionOccurrenceSpecification() const ;
			virtual StateInvariant* createStateInvariant() const ;
			virtual FinalState* createFinalState() const ;
			virtual ProtocolTransition* createProtocolTransition() const ;
			virtual AssociationClass* createAssociationClass() const ;
			virtual Component* createComponent() const ;
			virtual ComponentRealization* createComponentRealization() const ;
			virtual Actor* createActor() const ;
			virtual Duration* createDuration() const ;
			virtual DurationConstraint* createDurationConstraint() const ;
			virtual IntervalConstraint* createIntervalConstraint() const ;
			virtual Interval* createInterval() const ;
			virtual DurationInterval* createDurationInterval() const ;
			virtual DurationObservation* createDurationObservation() const ;
			virtual LiteralBoolean* createLiteralBoolean() const ;
			virtual LiteralInteger* createLiteralInteger() const ;
			virtual LiteralNull* createLiteralNull() const ;
			virtual LiteralReal* createLiteralReal() const ;
			virtual LiteralString* createLiteralString() const ;
			virtual LiteralUnlimitedNatural* createLiteralUnlimitedNatural() const ;
			virtual TimeConstraint* createTimeConstraint() const ;
			virtual TimeInterval* createTimeInterval() const ;
			virtual TimeObservation* createTimeObservation() const ;
			

			//Package
			virtual UmlPackage* getUmlPackage() const;

		private:
			static UmlFactory * create();
			virtual void init() {}

	};
}
#endif /* end of include guard: UMLFACTORYIMPL_HPP */

