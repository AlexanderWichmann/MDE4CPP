//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_QUALIFIERVALUEQUALIFIERVALUEIMPL_HPP
#define UML_QUALIFIERVALUEQUALIFIERVALUEIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../QualifierValue.hpp"

#include "impl/ElementImpl.hpp"

#include "SubsetUnion.hpp"



//*********************************
namespace uml 
{
	class QualifierValueImpl :virtual public ElementImpl, virtual public QualifierValue 
	{
		public: 
			QualifierValueImpl(const QualifierValueImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			QualifierValueImpl& operator=(QualifierValueImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			QualifierValueImpl();

		public:
			//destructor
			virtual ~QualifierValueImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 The multiplicity of the value InputPin is 1..1.
			value.is(1,1) */ 
			virtual bool
			 multiplicity_of_qualifier(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 The type of the value InputPin conforms to the type of the qualifier Property.
			value.type.conformsTo(qualifier.type) */ 
			virtual bool
			 type_of_qualifier(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 The qualifier must be a qualifier of the Association end of the linkEndData that owns this QualifierValue.
			linkEndData.end.qualifier->includes(qualifier) */ 
			virtual bool
			 qualifier_attribute(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The qualifier Property for which the value is to be specified.
			<p>From package UML::Actions.</p> */
			virtual std::shared_ptr<uml::Property > getQualifier() const ;
			
			/*!
			 The qualifier Property for which the value is to be specified.
			<p>From package UML::Actions.</p> */
			virtual void setQualifier(std::shared_ptr<uml::Property> _qualifier_qualifier) ;
			/*!
			 The InputPin from which the specified value for the qualifier is taken.
			<p>From package UML::Actions.</p> */
			virtual std::shared_ptr<uml::InputPin > getValue() const ;
			
			/*!
			 The InputPin from which the specified value for the qualifier is taken.
			<p>From package UML::Actions.</p> */
			virtual void setValue(std::shared_ptr<uml::InputPin> _value_value) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::Element> > getOwnedElement() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_QUALIFIERVALUEQUALIFIERVALUEIMPL_HPP */

