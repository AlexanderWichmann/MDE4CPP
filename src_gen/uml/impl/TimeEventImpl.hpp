//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_TIMEEVENTTIMEEVENTIMPL_HPP
#define UML_TIMEEVENTTIMEEVENTIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

//*********************************
// generated Includes

//Model includes
#include "../TimeEvent.hpp"

#include "uml/impl/EventImpl.hpp"



//*********************************
namespace uml 
{
	class TimeEventImpl :virtual public EventImpl, virtual public TimeEvent 
	{
		public: 
			TimeEventImpl(const TimeEventImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			TimeEventImpl& operator=(TimeEventImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			TimeEventImpl();

			//Additional constructors for the containments back reference
			TimeEventImpl(std::weak_ptr<uml::Namespace > par_namespace);


			//Additional constructors for the containments back reference
			TimeEventImpl(std::weak_ptr<uml::Element > par_owner);


			//Additional constructors for the containments back reference
			TimeEventImpl(std::weak_ptr<uml::Package > par_owningPackage);


			//Additional constructors for the containments back reference
			TimeEventImpl(std::weak_ptr<uml::TemplateParameter > par_owningTemplateParameter);




		public:
			//destructor
			virtual ~TimeEventImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 The ValueSpecification when must return a non-negative Integer.
			when.integerValue() >= 0 */ 
			virtual bool when_non_negative(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 Specifies whether the TimeEvent is specified as an absolute or relative time.
			<p>From package UML::CommonBehavior.</p> */ 
			virtual bool getIsRelative() const ;
			
			/*!
			 Specifies whether the TimeEvent is specified as an absolute or relative time.
			<p>From package UML::CommonBehavior.</p> */ 
			virtual void setIsRelative (bool _isRelative); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 Specifies the time of the TimeEvent.
			<p>From package UML::CommonBehavior.</p> */
			virtual std::shared_ptr<uml::TimeExpression > getWhen() const ;
			
			/*!
			 Specifies the time of the TimeEvent.
			<p>From package UML::CommonBehavior.</p> */
			virtual void setWhen(std::shared_ptr<uml::TimeExpression> _when_when) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual std::weak_ptr<uml::Namespace > getNamespace() const ;/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<Union<uml::Element> > getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::weak_ptr<uml::Element > getOwner() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual void eSet(int featureID, boost::any newValue) ;

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_TIMEEVENTTIMEEVENTIMPL_HPP */

