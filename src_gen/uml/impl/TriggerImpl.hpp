//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_TRIGGERTRIGGERIMPL_HPP
#define UML_TRIGGERTRIGGERIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../Trigger.hpp"

#include "impl/NamedElementImpl.hpp"



//*********************************
namespace uml 
{
	class TriggerImpl :virtual public NamedElementImpl, virtual public Trigger 
	{
		public: 
			TriggerImpl(const TriggerImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			TriggerImpl& operator=(TriggerImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			TriggerImpl();

		public:
			//destructor
			virtual ~TriggerImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 If a Trigger specifies one or more ports, the event of the Trigger must be a MessageEvent.
			port->notEmpty() implies event.oclIsKindOf(MessageEvent) */ 
			virtual bool trigger_with_ports(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The Event that detected by the Trigger.
			<p>From package UML::CommonBehavior.</p> */
			virtual std::shared_ptr<uml::Event> getEvent() const ;
			
			/*!
			 The Event that detected by the Trigger.
			<p>From package UML::CommonBehavior.</p> */
			virtual void setEvent(std::shared_ptr<uml::Event> _event) ;
			/*!
			 A optional Port of through which the given effect is detected.
			<p>From package UML::CommonBehavior.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::Port>>> getPort() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::Element>>> getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element> getOwner() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_TRIGGERTRIGGERIMPL_HPP */

