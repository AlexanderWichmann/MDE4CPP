//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_REDEFINABLETEMPLATESIGNATUREREDEFINABLETEMPLATESIGNATUREIMPL_HPP
#define UML_REDEFINABLETEMPLATESIGNATUREREDEFINABLETEMPLATESIGNATUREIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../RedefinableTemplateSignature.hpp"

#include "impl/RedefinableElementImpl.hpp"
#include "impl/TemplateSignatureImpl.hpp"

#include "SubsetUnion.hpp"



//*********************************
namespace uml 
{
	class RedefinableTemplateSignatureImpl :virtual public RedefinableElementImpl, virtual public TemplateSignatureImpl, virtual public RedefinableTemplateSignature 
	{
		public: 
			RedefinableTemplateSignatureImpl(const RedefinableTemplateSignatureImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			RedefinableTemplateSignatureImpl& operator=(RedefinableTemplateSignatureImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			RedefinableTemplateSignatureImpl();

		public:
			//destructor
			virtual ~RedefinableTemplateSignatureImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 If any of the parent Classifiers are a template, then the extendedSignature must include the signature of that Classifier.
			classifier.allParents()->forAll(c | c.ownedTemplateSignature->notEmpty() implies self->closure(extendedSignature)->includes(c.ownedTemplateSignature)) */ 
			virtual bool
			 redefines_parents(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 Derivation for RedefinableTemplateSignature::/inheritedParameter
			result = (if extendedSignature->isEmpty() then Set{} else extendedSignature.parameter->asSet() endif)
			<p>From package UML::Classification.</p> */ 
			virtual std::shared_ptr<Bag<uml::TemplateParameter> >
			 getInheritedParameters()  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The signatures extended by this RedefinableTemplateSignature.
			<p>From package UML::Classification.</p> */
			virtual 		std::shared_ptr<Subset<uml::RedefinableTemplateSignature, uml::RedefinableElement > >
			 getExtendedSignature() const ;
			
			/*!
			 The formal template parameters of the extended signatures.
			<p>From package UML::Classification.</p> */
			virtual 		std::shared_ptr<Subset<uml::TemplateParameter, uml::TemplateParameter > >
			 getInheritedParameter() const ;
			
			/*!
			 The Classifier that owns this RedefinableTemplateSignature.
			<p>From package UML::Classification.</p> */
			virtual std::shared_ptr<uml::Classifier > getClassifier() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::Element> > getOwnedElement() const ;/*!
			 The ordered set of all formal TemplateParameters for this TemplateSignature.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::TemplateParameter> > getParameter() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual 		std::shared_ptr<Union<uml::RedefinableElement> > getRedefinedElement() const ;/*!
			 The contexts that this element may be redefined from.
			<p>From package UML::Classification.</p> */
			virtual 		std::shared_ptr<Union<uml::Classifier> > getRedefinitionContext() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element > getOwner() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_REDEFINABLETEMPLATESIGNATUREREDEFINABLETEMPLATESIGNATUREIMPL_HPP */

