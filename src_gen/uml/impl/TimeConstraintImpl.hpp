//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_TIMECONSTRAINTTIMECONSTRAINTIMPL_HPP
#define UML_TIMECONSTRAINTTIMECONSTRAINTIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../TimeConstraint.hpp"

#include "impl/IntervalConstraintImpl.hpp"

#include "SubsetUnion.hpp"



//*********************************
namespace uml 
{
	class TimeConstraintImpl :virtual public IntervalConstraintImpl, virtual public TimeConstraint 
	{
		public: 
			TimeConstraintImpl(const TimeConstraintImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			TimeConstraintImpl& operator=(TimeConstraintImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			TimeConstraintImpl();

		public:
			//destructor
			virtual ~TimeConstraintImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 A TimeConstraint has one constrainedElement.
			constrainedElement->size() = 1 */ 
			virtual bool
			 has_one_constrainedElement(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 The value of firstEvent is related to the constrainedElement. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters the constrainedElement. If firstEvent is false, then the corresponding observation event is the last time instant the execution is within the constrainedElement.
			<p>From package UML::Values.</p> */ 
			virtual bool getFirstEvent() const ;
			
			/*!
			 The value of firstEvent is related to the constrainedElement. If firstEvent is true, then the corresponding observation event is the first time instant the execution enters the constrainedElement. If firstEvent is false, then the corresponding observation event is the last time instant the execution is within the constrainedElement.
			<p>From package UML::Values.</p> */ 
			virtual void setFirstEvent (bool _firstEvent); 
			
			
			
			//*********************************
			// Reference
			//*********************************
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::Element> > getOwnedElement() const ;/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Namespace > getNamespace() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element > getOwner() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_TIMECONSTRAINTTIMECONSTRAINTIMPL_HPP */

