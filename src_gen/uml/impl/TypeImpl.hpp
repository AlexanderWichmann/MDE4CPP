//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_TYPETYPEIMPL_HPP
#define UML_TYPETYPEIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../Type.hpp"

#include "impl/PackageableElementImpl.hpp"

#include "SubsetUnion.hpp"



//*********************************
namespace uml 
{
	class TypeImpl :virtual public PackageableElementImpl, virtual public Type 
	{
		public: 
			TypeImpl(const TypeImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			TypeImpl& operator=(TypeImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			TypeImpl();

		public:
			//destructor
			virtual ~TypeImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 Creates a(n) (binary) association between this type and the specified other type, with the specified navigabilities, aggregations, names, lower bounds, and upper bounds, and owned by this type's nearest package. */ 
			virtual std::shared_ptr<uml::Association> 
			 createAssociation(bool end1IsNavigable,AggregationKind end1Aggregation,std::string end1Name,int end1Lower,int end1Upper,std::shared_ptr<uml::Type>  end1Type,bool end2IsNavigable,AggregationKind end2Aggregation,std::string end2Name,int end2Lower,int end2Upper)  ;
			
			/*!
			 Retrieves the associations in which this type is involved. */ 
			virtual std::shared_ptr<Bag<uml::Association> >
			 getAssociations()  ;
			
			/*!
			 The query conformsTo() gives true for a Type that conforms to another. By default, two Types do not conform to each other. This query is intended to be redefined for specific conformance situations.
			result = (false)
			<p>From package UML::CommonStructure.</p> */ 
			virtual bool
			 conformsTo(std::shared_ptr<uml::Type>  other)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 Specifies the owning Package of this Type, if any.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Package > getPackage() const ;
			
			/*!
			 Specifies the owning Package of this Type, if any.
			<p>From package UML::CommonStructure.</p> */
			virtual void setPackage(std::shared_ptr<uml::Package> _package_package) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::Element> > getOwnedElement() const ;/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Namespace > getNamespace() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element > getOwner() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_TYPETYPEIMPL_HPP */

