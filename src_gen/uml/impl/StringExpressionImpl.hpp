//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_STRINGEXPRESSIONSTRINGEXPRESSIONIMPL_HPP
#define UML_STRINGEXPRESSIONSTRINGEXPRESSIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

//*********************************
// generated Includes

//Model includes
#include "../StringExpression.hpp"

#include "uml/impl/ExpressionImpl.hpp"
#include "uml/impl/TemplateableElementImpl.hpp"



//*********************************
namespace uml 
{
	class StringExpressionImpl :virtual public ExpressionImpl, virtual public TemplateableElementImpl, virtual public StringExpression 
	{
		public: 
			StringExpressionImpl(const StringExpressionImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			StringExpressionImpl& operator=(StringExpressionImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			StringExpressionImpl();

			//Additional constructors for the containments back reference
			StringExpressionImpl(std::weak_ptr<uml::Namespace > par_namespace);


			//Additional constructors for the containments back reference
			StringExpressionImpl(std::weak_ptr<uml::Element > par_owner);


			//Additional constructors for the containments back reference
			StringExpressionImpl(std::weak_ptr<uml::StringExpression > par_owningExpression);


			//Additional constructors for the containments back reference
			StringExpressionImpl(std::weak_ptr<uml::Package > par_owningPackage);


			//Additional constructors for the containments back reference
			StringExpressionImpl(std::weak_ptr<uml::Slot > par_owningSlot);


			//Additional constructors for the containments back reference
			StringExpressionImpl(std::weak_ptr<uml::TemplateParameter > par_owningTemplateParameter);




		public:
			//destructor
			virtual ~StringExpressionImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 All the operands of a StringExpression must be LiteralStrings
			operand->forAll (oclIsKindOf (LiteralString)) */ 
			virtual bool operands(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 If a StringExpression has sub-expressions, it cannot have operands and vice versa (this avoids the problem of having to define a collating sequence between operands and subexpressions).
			if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif */ 
			virtual bool subexpressions(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The StringExpression of which this StringExpression is a subExpression.
			<p>From package UML::Values.</p> */
			virtual std::weak_ptr<uml::StringExpression > getOwningExpression() const ;
			
			/*!
			 The StringExpression of which this StringExpression is a subExpression.
			<p>From package UML::Values.</p> */
			virtual void setOwningExpression(std::shared_ptr<uml::StringExpression> _owningExpression_owningExpression) ;
			/*!
			 The StringExpressions that constitute this StringExpression.
			<p>From package UML::Values.</p> */
			virtual std::shared_ptr<Subset<uml::StringExpression, uml::Element > > getSubExpression() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual std::weak_ptr<uml::Namespace > getNamespace() const ;/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<Union<uml::Element> > getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::weak_ptr<uml::Element > getOwner() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual void eSet(int featureID, boost::any newValue) ;

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_STRINGEXPRESSIONSTRINGEXPRESSIONIMPL_HPP */

