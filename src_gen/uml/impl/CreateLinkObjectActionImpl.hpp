//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_CREATELINKOBJECTACTIONCREATELINKOBJECTACTIONIMPL_HPP
#define UML_CREATELINKOBJECTACTIONCREATELINKOBJECTACTIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../CreateLinkObjectAction.hpp"

#include "impl/CreateLinkActionImpl.hpp"


//*********************************
namespace uml 
{
	class CreateLinkObjectActionImpl :virtual public CreateLinkActionImpl, virtual public CreateLinkObjectAction
	{
		public: 
			CreateLinkObjectActionImpl(const CreateLinkObjectActionImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			CreateLinkObjectActionImpl& operator=(CreateLinkObjectActionImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			CreateLinkObjectActionImpl();

		public:
			//destructor
			virtual ~CreateLinkObjectActionImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 The multiplicity of the OutputPin is 1..1.
			result.is(1,1) */ 
			virtual bool multiplicity(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			/*!
			 The type of the result OutputPin must be the same as the Association of the CreateLinkObjectAction.
			result.type = association() */ 
			virtual bool type_of_result(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			/*!
			 The Association must be an AssociationClass.
			self.association().oclIsKindOf(AssociationClass) */ 
			virtual bool association_class(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The output pin on which the newly created link object is placed.
			<p>From package UML::Actions.</p> */
			virtual uml::OutputPin *  getResult() const ;
			
			/*!
			 The output pin on which the newly created link object is placed.
			<p>From package UML::Actions.</p> */
			virtual void setResult(uml::OutputPin *  _result) ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 ActivityGroups containing the ActivityNode.
			<p>From package UML::Activities.</p> */
			virtual std::vector<uml::ActivityGroup * > *  getInGroup() const ;/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual std::vector<uml::RedefinableElement * > *  getRedefinedElement() const ;/*!
			 The ordered set of OutputPins representing outputs from the Action.
			<p>From package UML::Actions.</p> */
			virtual std::vector<uml::OutputPin * > *  getOutput() const ;/*!
			 The ordered set of InputPins representing the inputs to the Action.
			<p>From package UML::Actions.</p> */
			virtual std::vector<uml::InputPin * > *  getInput() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual ecore::EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: UML_CREATELINKOBJECTACTIONCREATELINKOBJECTACTIONIMPL_HPP */

