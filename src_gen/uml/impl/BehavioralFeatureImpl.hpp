//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_BEHAVIORALFEATUREBEHAVIORALFEATUREIMPL_HPP
#define UML_BEHAVIORALFEATUREBEHAVIORALFEATUREIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../BehavioralFeature.hpp"

#include "impl/FeatureImpl.hpp"
#include "impl/NamespaceImpl.hpp"


//*********************************
namespace uml 
{
	class BehavioralFeatureImpl :virtual public FeatureImpl, virtual public NamespaceImpl, virtual public BehavioralFeature
	{
		public: 
			BehavioralFeatureImpl(const BehavioralFeatureImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			BehavioralFeatureImpl& operator=(BehavioralFeatureImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			BehavioralFeatureImpl();

		public:
			//destructor
			virtual ~BehavioralFeatureImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 When isAbstract is true there are no methods.
			isAbstract implies method->isEmpty() */ 
			virtual bool abstract_no_method(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			/*!
			 Creates a return result parameter with the specified name and type. */ 
			virtual uml::Parameter *  createReturnResult(std::string name,uml::Type *  type)  ;
			
			/*!
			 The ownedParameters with direction in and inout.
			result = (ownedParameter->select(direction=ParameterDirectionKind::_'in' or direction=ParameterDirectionKind::inout))
			<p>From package UML::Classification.</p> */ 
			virtual std::vector<uml::Parameter * > *  inputParameters()  ;
			
			/*!
			 The ownedParameters with direction out, inout, or return.
			result = (ownedParameter->select(direction=ParameterDirectionKind::out or direction=ParameterDirectionKind::inout or direction=ParameterDirectionKind::return))
			<p>From package UML::Classification.</p> */ 
			virtual std::vector<uml::Parameter * > *  outputParameters()  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 Specifies the semantics of concurrent calls to the same passive instance (i.e., an instance originating from a Class with isActive being false). Active instances control access to their own BehavioralFeatures.
			<p>From package UML::Classification.</p> */ 
			virtual CallConcurrencyKind getConcurrency() const ;
			
			/*!
			 Specifies the semantics of concurrent calls to the same passive instance (i.e., an instance originating from a Class with isActive being false). Active instances control access to their own BehavioralFeatures.
			<p>From package UML::Classification.</p> */ 
			virtual void setConcurrency (CallConcurrencyKind _concurrency); 
			
			/*!
			 If true, then the BehavioralFeature does not have an implementation, and one must be supplied by a more specific Classifier. If false, the BehavioralFeature must have an implementation in the Classifier or one must be inherited.
			<p>From package UML::Classification.</p> */ 
			virtual bool getIsAbstract() const ;
			
			/*!
			 If true, then the BehavioralFeature does not have an implementation, and one must be supplied by a more specific Classifier. If false, the BehavioralFeature must have an implementation in the Classifier or one must be inherited.
			<p>From package UML::Classification.</p> */ 
			virtual void setIsAbstract (bool _isAbstract); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 A Behavior that implements the BehavioralFeature. There may be at most one Behavior for a particular pairing of a Classifier (as owner of the Behavior) and a BehavioralFeature (as specification of the Behavior).
			<p>From package UML::Classification.</p> */
			virtual std::vector<uml::Behavior * > *  getMethod() const ;
			
			/*!
			 The ordered set of formal Parameters of this BehavioralFeature.
			<p>From package UML::Classification.</p> */
			virtual std::vector<uml::Parameter * > *  getOwnedParameter() const ;
			
			/*!
			 The ParameterSets owned by this BehavioralFeature.
			<p>From package UML::Classification.</p> */
			virtual std::vector<uml::ParameterSet * > *  getOwnedParameterSet() const ;
			
			/*!
			 The Types representing exceptions that may be raised during an invocation of this BehavioralFeature.
			<p>From package UML::Classification.</p> */
			virtual std::vector<uml::Type * > *  getRaisedException() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const ;/*!
			 A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::NamedElement * > *  getMember() const ;/*!
			 A collection of NamedElements owned by the Namespace.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::NamedElement * > *  getOwnedMember() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual ecore::EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: UML_BEHAVIORALFEATUREBEHAVIORALFEATUREIMPL_HPP */

