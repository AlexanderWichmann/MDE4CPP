//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_ADDSTRUCTURALFEATUREVALUEACTIONADDSTRUCTURALFEATUREVALUEACTIONIMPL_HPP
#define UML_ADDSTRUCTURALFEATUREVALUEACTIONADDSTRUCTURALFEATUREVALUEACTIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../AddStructuralFeatureValueAction.hpp"

#include "impl/WriteStructuralFeatureActionImpl.hpp"

#include "SubsetUnion.hpp"



//*********************************
namespace uml 
{
	class AddStructuralFeatureValueActionImpl :virtual public WriteStructuralFeatureActionImpl, virtual public AddStructuralFeatureValueAction 
	{
		public: 
			AddStructuralFeatureValueActionImpl(const AddStructuralFeatureValueActionImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			AddStructuralFeatureValueActionImpl& operator=(AddStructuralFeatureValueActionImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			AddStructuralFeatureValueActionImpl();

		public:
			//destructor
			virtual ~AddStructuralFeatureValueActionImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 A value InputPin is required.
			value<>null */ 
			virtual bool
			 required_value(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 AddStructuralFeatureActions adding a value to ordered StructuralFeatures must have a single InputPin for the insertion point with type UnlimitedNatural and multiplicity of 1..1 if isReplaceAll=false, and must have no Input Pin for the insertion point when the StructuralFeature is unordered.
			if not structuralFeature.isOrdered then insertAt = null
			else 
			  not isReplaceAll implies
			  	insertAt<>null and 
			  	insertAt->forAll(type=UnlimitedNatural and is(1,1.oclAsType(UnlimitedNatural)))
			endif */ 
			virtual bool
			 insertAt_pin(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 Specifies whether existing values of the StructuralFeature should be removed before adding the new value.
			<p>From package UML::Actions.</p> */ 
			virtual bool getIsReplaceAll() const ;
			
			/*!
			 Specifies whether existing values of the StructuralFeature should be removed before adding the new value.
			<p>From package UML::Actions.</p> */ 
			virtual void setIsReplaceAll (bool _isReplaceAll); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The InputPin that gives the position at which to insert the value in an ordered StructuralFeature. The type of the insertAt InputPin is UnlimitedNatural, but the value cannot be zero. It is omitted for unordered StructuralFeatures.
			<p>From package UML::Actions.</p> */
			virtual std::shared_ptr<uml::InputPin > getInsertAt() const ;
			
			/*!
			 The InputPin that gives the position at which to insert the value in an ordered StructuralFeature. The type of the insertAt InputPin is UnlimitedNatural, but the value cannot be zero. It is omitted for unordered StructuralFeatures.
			<p>From package UML::Actions.</p> */
			virtual void setInsertAt(std::shared_ptr<uml::InputPin> _insertAt_insertAt) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The ordered set of InputPins representing the inputs to the Action.
			<p>From package UML::Actions.</p> */
			virtual 		std::shared_ptr<SubsetUnion<uml::InputPin, uml::Element > >
			 getInput() const ;/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::Element> > getOwnedElement() const ;/*!
			 The ordered set of OutputPins representing outputs from the Action.
			<p>From package UML::Actions.</p> */
			virtual 		std::shared_ptr<SubsetUnion<uml::OutputPin, uml::Element > >
			 getOutput() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual 		std::shared_ptr<Union<uml::RedefinableElement> > getRedefinedElement() const ;/*!
			 ActivityGroups containing the ActivityNode.
			<p>From package UML::Activities.</p> */
			virtual 		std::shared_ptr<Union<uml::ActivityGroup> > getInGroup() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element > getOwner() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_ADDSTRUCTURALFEATUREVALUEACTIONADDSTRUCTURALFEATUREVALUEACTIONIMPL_HPP */

