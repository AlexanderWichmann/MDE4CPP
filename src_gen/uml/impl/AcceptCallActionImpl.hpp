//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_ACCEPTCALLACTIONACCEPTCALLACTIONIMPL_HPP
#define UML_ACCEPTCALLACTIONACCEPTCALLACTIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../AcceptCallAction.hpp"

#include "impl/AcceptEventActionImpl.hpp"



//*********************************
namespace uml 
{
	class AcceptCallActionImpl :virtual public AcceptEventActionImpl, virtual public AcceptCallAction 
	{
		public: 
			AcceptCallActionImpl(const AcceptCallActionImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			AcceptCallActionImpl& operator=(AcceptCallActionImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			AcceptCallActionImpl();

		public:
			//destructor
			virtual ~AcceptCallActionImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 The number of result OutputPins must be the same as the number of input (in and inout) ownedParameters of the Operation specified by the trigger Event. The type, ordering and multiplicity of each result OutputPin must be consistent with the corresponding input Parameter.
			let parameter: OrderedSet(Parameter) = trigger.event->asSequence()->first().oclAsType(CallEvent).operation.inputParameters() in
			result->size() = parameter->size() and
			Sequence{1..result->size()}->forAll(i | 
				parameter->at(i).type.conformsTo(result->at(i).type) and 
				parameter->at(i).isOrdered = result->at(i).isOrdered and
				parameter->at(i).compatibleWith(result->at(i))) */ 
			virtual bool result_pins(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 The action must have exactly one trigger, which must be for a CallEvent.
			trigger->size()=1 and
			trigger->asSequence()->first().event.oclIsKindOf(CallEvent) */ 
			virtual bool trigger_call_event(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 isUnmrashall must be true for an AcceptCallAction.
			isUnmarshall = true */ 
			virtual bool unmarshall(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 An OutputPin where a value is placed containing sufficient information to perform a subsequent ReplyAction and return control to the caller. The contents of this value are opaque. It can be passed and copied but it cannot be manipulated by the model.
			<p>From package UML::Actions.</p> */
			virtual std::shared_ptr<uml::OutputPin> getReturnInformation() const ;
			
			/*!
			 An OutputPin where a value is placed containing sufficient information to perform a subsequent ReplyAction and return control to the caller. The contents of this value are opaque. It can be passed and copied but it cannot be manipulated by the model.
			<p>From package UML::Actions.</p> */
			virtual void setReturnInformation(std::shared_ptr<uml::OutputPin> _returnInformation) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The ordered set of OutputPins representing outputs from the Action.
			<p>From package UML::Actions.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::OutputPin>>> getOutput() const ;/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::Element>>> getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element> getOwner() const ;/*!
			 ActivityGroups containing the ActivityNode.
			<p>From package UML::Activities.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::ActivityGroup>>> getInGroup() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::RedefinableElement>>> getRedefinedElement() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_ACCEPTCALLACTIONACCEPTCALLACTIONIMPL_HPP */

