//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_INFORMATIONITEMINFORMATIONITEMIMPL_HPP
#define UML_INFORMATIONITEMINFORMATIONITEMIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../InformationItem.hpp"

#include "impl/ClassifierImpl.hpp"


//*********************************
namespace uml 
{
	class InformationItemImpl :virtual public ClassifierImpl, virtual public InformationItem
	{
		public: 
			InformationItemImpl(const InformationItemImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			InformationItemImpl& operator=(InformationItemImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			InformationItemImpl();

		public:
			//destructor
			virtual ~InformationItemImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 The sources and targets of an information item (its related information flows) must designate subsets of the sources and targets of the representation information item, if any. The Classifiers that can realize an information item can only be of the following kind: Class, Interface, InformationItem, Signal, Component.
			(self.represented->select(oclIsKindOf(InformationItem))->forAll(p |
			  p.conveyingFlow.source->forAll(q | self.conveyingFlow.source->includes(q)) and
			    p.conveyingFlow.target->forAll(q | self.conveyingFlow.target->includes(q)))) and
			      (self.represented->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface) or
			        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))) */ 
			virtual bool sources_and_targets(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			/*!
			 An informationItem has no feature, no generalization, and no associations.
			self.generalization->isEmpty() and self.feature->isEmpty() */ 
			virtual bool has_no(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			/*!
			 It is not instantiable.
			isAbstract */ 
			virtual bool not_instantiable(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 Determines the classifiers that will specify the structure and nature of the information. An information item represents all its represented classifiers.
			<p>From package UML::InformationFlows.</p> */
			virtual std::vector<uml::Classifier * > *  getRepresented() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const ;/*!
			 A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::NamedElement * > *  getMember() const ;/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Namespace *  getNamespace() const ;/*!
			 Specifies each Feature directly defined in the classifier. Note that there may be members of the Classifier that are of the type Feature but are not included, e.g., inherited features.
			<p>From package UML::Classification.</p> */
			virtual std::vector<uml::Feature * > *  getFeature() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual std::vector<uml::RedefinableElement * > *  getRedefinedElement() const ;/*!
			 A collection of NamedElements owned by the Namespace.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::NamedElement * > *  getOwnedMember() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual ecore::EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: UML_INFORMATIONITEMINFORMATIONITEMIMPL_HPP */

