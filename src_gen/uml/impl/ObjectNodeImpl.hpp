//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_OBJECTNODEOBJECTNODEIMPL_HPP
#define UML_OBJECTNODEOBJECTNODEIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../ObjectNode.hpp"

#include "impl/ActivityNodeImpl.hpp"
#include "impl/TypedElementImpl.hpp"

#include "SubsetUnion.hpp"



//*********************************
namespace uml 
{
	class ObjectNodeImpl :virtual public ActivityNodeImpl, virtual public TypedElementImpl, virtual public ObjectNode 
	{
		public: 
			ObjectNodeImpl(const ObjectNodeImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			ObjectNodeImpl& operator=(ObjectNodeImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			ObjectNodeImpl();

		public:
			//destructor
			virtual ~ObjectNodeImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 A selection Behavior has one input Parameter and one output Parameter. The input Parameter must have the same type as  or a supertype of the type of ObjectNode, be non-unique, and have multiplicity 0..*. The output Parameter must be the same or a subtype of the type of ObjectNode. The Behavior cannot have side effects.
			selection<>null implies
				selection.inputParameters()->size()=1 and
				selection.inputParameters()->forAll(p | not p.isUnique and p.is(0,*) and self.type.conformsTo(p.type)) and
				selection.outputParameters()->size()=1 and
					selection.inputParameters()->forAll(p | self.type.conformsTo(p.type)) */ 
			virtual bool
			 input_output_parameter(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 If an ObjectNode has a selection Behavior, then the ordering of the object node is ordered, and vice versa.
			(selection<>null) = (ordering=ObjectNodeOrderingKind::ordered) */ 
			virtual bool
			 selection_behavior(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 If isControlType=false, the ActivityEdges incoming to or outgoing from an ObjectNode must all be ObjectFlows.
			(not isControlType) implies incoming->union(outgoing)->forAll(oclIsKindOf(ObjectFlow)) */ 
			virtual bool
			 object_flow_edges(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 Indicates whether the type of the ObjectNode is to be treated as representing control values that may traverse ControlFlows.
			<p>From package UML::Activities.</p> */ 
			virtual bool getIsControlType() const ;
			
			/*!
			 Indicates whether the type of the ObjectNode is to be treated as representing control values that may traverse ControlFlows.
			<p>From package UML::Activities.</p> */ 
			virtual void setIsControlType (bool _isControlType); 
			
			/*!
			 Indicates how the tokens held by the ObjectNode are ordered for selection to traverse ActivityEdges outgoing from the ObjectNode.
			<p>From package UML::Activities.</p> */ 
			virtual ObjectNodeOrderingKind getOrdering() const ;
			
			/*!
			 Indicates how the tokens held by the ObjectNode are ordered for selection to traverse ActivityEdges outgoing from the ObjectNode.
			<p>From package UML::Activities.</p> */ 
			virtual void setOrdering (ObjectNodeOrderingKind _ordering); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The States required to be associated with the values held by tokens on this ObjectNode.
			<p>From package UML::Activities.</p> */
			virtual 	std::shared_ptr< Bag<uml::State> >
			 getInState() const ;
			
			/*!
			 A Behavior used to select tokens to be offered on outgoing ActivityEdges.
			<p>From package UML::Activities.</p> */
			virtual std::shared_ptr<uml::Behavior > getSelection() const ;
			
			/*!
			 A Behavior used to select tokens to be offered on outgoing ActivityEdges.
			<p>From package UML::Activities.</p> */
			virtual void setSelection(std::shared_ptr<uml::Behavior> _selection_selection) ;
			/*!
			 The maximum number of tokens that may be held by this ObjectNode. Tokens cannot flow into the ObjectNode if the upperBound is reached. If no upperBound is specified, then there is no limit on how many tokens the ObjectNode can hold.
			<p>From package UML::Activities.</p> */
			virtual std::shared_ptr<uml::ValueSpecification > getUpperBound() const ;
			
			/*!
			 The maximum number of tokens that may be held by this ObjectNode. Tokens cannot flow into the ObjectNode if the upperBound is reached. If no upperBound is specified, then there is no limit on how many tokens the ObjectNode can hold.
			<p>From package UML::Activities.</p> */
			virtual void setUpperBound(std::shared_ptr<uml::ValueSpecification> _upperBound_upperBound) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::Element> > getOwnedElement() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual 		std::shared_ptr<Union<uml::RedefinableElement> > getRedefinedElement() const ;/*!
			 ActivityGroups containing the ActivityNode.
			<p>From package UML::Activities.</p> */
			virtual 		std::shared_ptr<Union<uml::ActivityGroup> > getInGroup() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element > getOwner() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_OBJECTNODEOBJECTNODEIMPL_HPP */

