//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_USECASEUSECASEIMPL_HPP
#define UML_USECASEUSECASEIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../UseCase.hpp"

#include "impl/BehavioredClassifierImpl.hpp"



//*********************************
namespace uml 
{
	class UseCaseImpl :virtual public BehavioredClassifierImpl, virtual public UseCase 
	{
		public: 
			UseCaseImpl(const UseCaseImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			UseCaseImpl& operator=(UseCaseImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			UseCaseImpl();

		public:
			//destructor
			virtual ~UseCaseImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 UseCases can only be involved in binary Associations.
			Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2) */ 
			virtual bool binary_associations(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 UseCases cannot have Associations to UseCases specifying the same subject.
			Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies 
			   (
			   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in
			   usecases->size() > 1 implies usecases->collect(subject)->size() > 1
			   )
			) */ 
			virtual bool no_association_to_use_case(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 A UseCase cannot include UseCases that directly or indirectly include it.
			not allIncludedUseCases()->includes(self) */ 
			virtual bool cannot_include_self(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 A UseCase must have a name.
			name -> notEmpty () */ 
			virtual bool must_have_name(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 The query allIncludedUseCases() returns the transitive closure of all UseCases (directly or indirectly) included by this UseCase.
			result = (self.include.addition->union(self.include.addition->collect(uc | uc.allIncludedUseCases()))->asSet())
			<p>From package UML::UseCases.</p> */ 
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::UseCase>>> allIncludedUseCases()  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The Extend relationships owned by this UseCase.
			<p>From package UML::UseCases.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::Extend>>> getExtend() const ;
			
			/*!
			 The ExtensionPoints owned by this UseCase.
			<p>From package UML::UseCases.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::ExtensionPoint>>> getExtensionPoint() const ;
			
			/*!
			 The Include relationships owned by this UseCase.
			<p>From package UML::UseCases.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::Include>>> getInclude() const ;
			
			/*!
			 The subjects to which this UseCase applies. Each subject or its parts realize all the UseCases that apply to it.
			<p>From package UML::UseCases.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::Classifier>>> getSubject() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::Element>>> getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element> getOwner() const ;/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Namespace> getNamespace() const ;/*!
			 A collection of NamedElements owned by the Namespace.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::NamedElement>>> getOwnedMember() const ;/*!
			 Specifies each Feature directly defined in the classifier. Note that there may be members of the Classifier that are of the type Feature but are not included, e.g., inherited features.
			<p>From package UML::Classification.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::Feature>>> getFeature() const ;/*!
			 A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::NamedElement>>> getMember() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::RedefinableElement>>> getRedefinedElement() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_USECASEUSECASEIMPL_HPP */

