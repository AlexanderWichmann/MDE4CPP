//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_SIGNALEVENTSIGNALEVENTIMPL_HPP
#define UML_SIGNALEVENTSIGNALEVENTIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../SignalEvent.hpp"

#include "impl/MessageEventImpl.hpp"



//*********************************
namespace uml 
{
	class SignalEventImpl :virtual public MessageEventImpl, virtual public SignalEvent 
	{
		public: 
			SignalEventImpl(const SignalEventImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			SignalEventImpl& operator=(SignalEventImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			SignalEventImpl();

		public:
			//destructor
			virtual ~SignalEventImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The specific Signal that is associated with this SignalEvent.
			<p>From package UML::CommonBehavior.</p> */
			virtual std::shared_ptr<uml::Signal> getSignal() const ;
			
			/*!
			 The specific Signal that is associated with this SignalEvent.
			<p>From package UML::CommonBehavior.</p> */
			virtual void setSignal(std::shared_ptr<uml::Signal> _signal) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::Element>>> getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element> getOwner() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_SIGNALEVENTSIGNALEVENTIMPL_HPP */

