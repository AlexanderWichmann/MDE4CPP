//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_ELEMENTELEMENTIMPL_HPP
#define UML_ELEMENTELEMENTIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../Element.hpp"

#include "impl/EModelElementImpl.hpp"
#include "impl/ObjectImpl.hpp"

#include "stereotypestorage.h"

//*********************************
namespace uml 
{
	class ElementImpl :virtual public ecore::EModelElementImpl, virtual public ObjectImpl, virtual public Element
	{
		public: 
			ElementImpl(const ElementImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			ElementImpl& operator=(ElementImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			ElementImpl();

		public:
			//destructor
			virtual ~ElementImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 Elements that must be owned must have an owner.
			mustBeOwned() implies owner->notEmpty() */ 
			virtual bool has_owner(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			/*!
			 An element may not directly or indirectly own itself.
			not allOwnedElements()->includes(self) */ 
			virtual bool not_own_self(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			/*!
			 Adds the specified keyword to this element. */ 
			virtual bool addKeyword(std::string keyword)  ;
			
			/*!
			 Applies the specified stereotype to this element. */ 
			virtual ecore::EObject *  applyStereotype(uml::Stereotype *  stereotype)  ;
			
			/*!
			 Creates an annotation with the specified source and this element as its model element. */ 
			virtual ecore::EAnnotation *  createEAnnotation(std::string source)  ;
			
			/*!
			 Destroys this element by removing all cross references to/from it and removing it from its containing resource or object. */ 
			virtual void destroy()  ;
			
			/*!
			 Retrieves the keywords for this element. */ 
			virtual std::vector<std::string> *  getKeywords()  ;
			
			/*!
			 Retrieves the stereotype with the specified qualified name that is applicable to this element, or null if no such stereotype is applicable. */ 
			virtual uml::Stereotype *  getApplicableStereotype(std::string qualifiedName)  ;
			
			/*!
			 Retrieves the stereotypes that are applicable to this element, including those that are required and/or may already be applied. */ 
			virtual std::vector<uml::Stereotype * > *  getApplicableStereotypes()  ;
			
			/*!
			 Retrieves the stereotype with the specified qualified name that is applied to this element, or null if no such stereotype is  applied. */ 
			virtual uml::Stereotype *  getAppliedStereotype(std::string qualifiedName)  ;
			
			/*!
			 Retrieves the stereotypes that are applied to this element. */ 
			virtual std::vector<uml::Stereotype * > *  getAppliedStereotypes()  ;
			
			/*!
			 Retrieves the substereotype of the specified stereotype with the specified qualified name that is applied to this element, or null if no such stereotype is applied. */ 
			virtual uml::Stereotype *  getAppliedSubstereotype(uml::Stereotype *  stereotype,std::string qualifiedName)  ;
			
			/*!
			 Retrieves the substereotypes of the specified stereotype that are applied to this element. */ 
			virtual std::vector<uml::Stereotype * > *  getAppliedSubstereotypes(uml::Stereotype *  stereotype)  ;
			
			/*!
			 Retrieves the model that owns (either directly or indirectly) this element. */ 
			virtual uml::Model *  getModel()  ;
			
			/*!
			 Retrieves the nearest package that owns (either directly or indirectly) this element, or the element itself (if it is a package). */ 
			virtual uml::Package *  getNearestPackage()  ;
			
			/*!
			 Retrieves the relationships in which this element is involved. */ 
			virtual std::vector<uml::Relationship * > *  getRelationships()  ;
			
			/*!
			 Retrieves the relationships of the specified type in which this element is involved. */ 
			virtual std::vector<uml::Relationship * > *  getRelationships(ecore::EClass *  eClass)  ;
			
			/*!
			 Retrieves the stereotype with the specified qualified name that is required for this element, or null if no such stereotype is required. */ 
			virtual uml::Stereotype *  getRequiredStereotype(std::string qualifiedName)  ;
			
			/*!
			 Retrieves the stereotypes that are required for this element. */ 
			virtual std::vector<uml::Stereotype * > *  getRequiredStereotypes()  ;
			
			/*!
			 Retrieves the directed relationships for which this element is a source. */ 
			virtual std::vector<uml::DirectedRelationship * > *  getSourceDirectedRelationships()  ;
			
			/*!
			 Retrieves the directed relationships of the specified type for which this element is a source. */ 
			virtual std::vector<uml::DirectedRelationship * > *  getSourceDirectedRelationships(ecore::EClass *  eClass)  ;
			
			/*!
			 Retrieves the application of the specified stereotype for this element, or null if no such stereotype application exists. */ 
			virtual ecore::EObject *  getStereotypeApplication(uml::Stereotype *  stereotype)  ;
			
			/*!
			 Retrieves the stereotype applications for this element. */ 
			virtual std::vector<ecore::EObject * > *  getStereotypeApplications()  ;
			
			/*!
			 Retrieves the directed relationships for which this element is a target. */ 
			virtual std::vector<uml::DirectedRelationship * > *  getTargetDirectedRelationships()  ;
			
			/*!
			 Retrieves the directed relationships of the specified type for which this element is a target. */ 
			virtual std::vector<uml::DirectedRelationship * > *  getTargetDirectedRelationships(ecore::EClass *  eClass)  ;
			
			/*!
			 Retrieves the value of the property with the specified name in the specified stereotype for this element. */ 
			virtual boost::any getValue(uml::Stereotype *  stereotype,std::string propertyName)  ;
			
			/*!
			 Determines whether this element has the specified keyword. */ 
			virtual bool hasKeyword(std::string keyword)  ;
			
			/*!
			 Determines whether this element has a (non-default) value for the property with the specified name in the specified stereotype. */ 
			virtual bool hasValue(uml::Stereotype *  stereotype,std::string propertyName)  ;
			
			/*!
			 Determines whether the specified stereotype is applicable to this element. */ 
			virtual bool isStereotypeApplicable(uml::Stereotype *  stereotype)  ;
			
			/*!
			 Determines whether the specified stereotype is applied to this element. */ 
			virtual bool isStereotypeApplied(uml::Stereotype *  stereotype)  ;
			
			/*!
			 Determines whether the specified stereotype is required for this element. */ 
			virtual bool isStereotypeRequired(uml::Stereotype *  stereotype)  ;
			
			/*!
			 Removes the specified keyword from this element. */ 
			virtual bool removeKeyword(std::string keyword)  ;
			
			/*!
			 Sets the value of the property with the specified name in the specified stereotype for this element. */ 
			virtual void setValue(uml::Stereotype *  stereotype,std::string propertyName,boost::any newValue)  ;
			
			/*!
			 Unapplies the specified stereotype from this element. */ 
			virtual ecore::EObject *  unapplyStereotype(uml::Stereotype *  stereotype)  ;
			
			/*!
			 The query allOwnedElements() gives all of the direct and indirect ownedElements of an Element.
			result = (ownedElement->union(ownedElement->collect(e | e.allOwnedElements()))->asSet())
			<p>From package UML::CommonStructure.</p> */ 
			virtual std::vector<uml::Element * > *  allOwnedElements()  ;
			
			/*!
			 The query mustBeOwned() indicates whether Elements of this type must have an owner. Subclasses of Element that do not require an owner must override this operation.
			result = (true)
			<p>From package UML::CommonStructure.</p> */ 
			virtual bool mustBeOwned()  ;
			
			/*!
			 Returns the Class that describes this element.
			
			<span style="background-color:#FF8000">This Element was merged from mof::Reflection package.</span> */ 
			virtual uml::Class *  getMetaClass()  ;
			
			/*!
			 Returns the parent container of this element if any. Return Null if there is no containing element.
			
			<span style="background-color:#FF8000">This Element was merged from mof::Reflection package.</span> */ 
			virtual uml::Element *  container()  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The Comments owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Comment * > *  getOwnedComment() const ;
			
			
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual ecore::EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: UML_ELEMENTELEMENTIMPL_HPP */

