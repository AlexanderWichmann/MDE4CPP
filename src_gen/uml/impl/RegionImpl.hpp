//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_REGIONREGIONIMPL_HPP
#define UML_REGIONREGIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../Region.hpp"

#include "impl/NamespaceImpl.hpp"
#include "impl/RedefinableElementImpl.hpp"


//*********************************
namespace uml 
{
	class RegionImpl :virtual public NamespaceImpl, virtual public RedefinableElementImpl, virtual public Region
	{
		public: 
			RegionImpl(const RegionImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			RegionImpl& operator=(RegionImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			RegionImpl();

		public:
			//destructor
			virtual ~RegionImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 A Region can have at most one deep history Vertex.
			self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->
			   select(kind = PseudostateKind::deepHistory)->size() <= 1 */ 
			virtual bool deep_history_vertex(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			/*!
			 A Region can have at most one shallow history Vertex.
			subvertex->select(oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->
			  select(kind = PseudostateKind::shallowHistory)->size() <= 1 */ 
			virtual bool shallow_history_vertex(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			/*!
			 If a Region is owned by a StateMachine, then it cannot also be owned by a State and vice versa.
			(stateMachine <> null implies state = null) and (state <> null implies stateMachine = null) */ 
			virtual bool owned(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			/*!
			 A Region can have at most one initial Vertex.
			self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->
			  select(kind = PseudostateKind::initial)->size() <= 1 */ 
			virtual bool initial_vertex(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			/*!
			 The operation belongsToPSM () checks if the Region belongs to a ProtocolStateMachine.
			result = (if  stateMachine <> null 
			then
			  stateMachine.oclIsKindOf(ProtocolStateMachine)
			else 
			  state <> null  implies  state.container.belongsToPSM()
			endif )
			<p>From package UML::StateMachines.</p> */ 
			virtual bool belongsToPSM()  ;
			
			/*!
			 The operation containingStateMachine() returns the StateMachine in which this Region is defined.
			result = (if stateMachine = null 
			then
			  state.containingStateMachine()
			else
			  stateMachine
			endif)
			<p>From package UML::StateMachines.</p> */ 
			virtual uml::StateMachine *  containingStateMachine()  ;
			
			/*!
			 The redefinition context of a Region is the nearest containing StateMachine.
			result = (let sm : StateMachine = containingStateMachine() in
			if sm._'context' = null or sm.general->notEmpty() then
			  sm
			else
			  sm._'context'
			endif)
			<p>From package UML::StateMachines.</p> */ 
			virtual uml::Classifier *  redefinitionContext()  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The region of which this region is an extension.
			<p>From package UML::StateMachines.</p> */
			virtual uml::Region *  getExtendedRegion() const ;
			
			/*!
			 The region of which this region is an extension.
			<p>From package UML::StateMachines.</p> */
			virtual void setExtendedRegion(uml::Region *  _extendedRegion) ;
			
			/*!
			 The State that owns the Region. If a Region is owned by a State, then it cannot also be owned by a StateMachine.
			<p>From package UML::StateMachines.</p> */
			virtual uml::State *  getState() const ;
			
			/*!
			 The State that owns the Region. If a Region is owned by a State, then it cannot also be owned by a StateMachine.
			<p>From package UML::StateMachines.</p> */
			virtual void setState(uml::State *  _state) ;
			
			/*!
			 The StateMachine that owns the Region. If a Region is owned by a StateMachine, then it cannot also be owned by a State.
			<p>From package UML::StateMachines.</p> */
			virtual uml::StateMachine *  getStateMachine() const ;
			
			/*!
			 The StateMachine that owns the Region. If a Region is owned by a StateMachine, then it cannot also be owned by a State.
			<p>From package UML::StateMachines.</p> */
			virtual void setStateMachine(uml::StateMachine *  _stateMachine) ;
			
			/*!
			 The set of Transitions owned by the Region.
			<p>From package UML::StateMachines.</p> */
			virtual std::vector<uml::Transition * > *  getTransition() const ;
			
			/*!
			 The set of Vertices that are owned by this Region.
			<p>From package UML::StateMachines.</p> */
			virtual std::vector<uml::Vertex * > *  getSubvertex() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const ;/*!
			 A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::NamedElement * > *  getMember() const ;/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Namespace *  getNamespace() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual std::vector<uml::RedefinableElement * > *  getRedefinedElement() const ;/*!
			 A collection of NamedElements owned by the Namespace.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::NamedElement * > *  getOwnedMember() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual ecore::EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: UML_REGIONREGIONIMPL_HPP */

