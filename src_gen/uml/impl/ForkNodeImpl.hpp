//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_FORKNODEFORKNODEIMPL_HPP
#define UML_FORKNODEFORKNODEIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#define ACTIVITY_DEBUG_ON

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//*********************************
// generated Includes

//Model includes
#include "../ForkNode.hpp"

#include "impl/ControlNodeImpl.hpp"

#include "SubsetUnion.hpp"



//*********************************
namespace uml 
{
	class ForkNodeImpl :virtual public ControlNodeImpl, virtual public ForkNode 
	{
		public: 
			ForkNodeImpl(const ForkNodeImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			ForkNodeImpl& operator=(ForkNodeImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			ForkNodeImpl();

			//Additional constructors for the containments back reference
			ForkNodeImpl(std::shared_ptr<uml::Activity > par_activity);


			//Additional constructors for the containments back reference
			ForkNodeImpl(std::weak_ptr<uml::StructuredActivityNode > par_inStructuredNode);




		public:
			//destructor
			virtual ~ForkNodeImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 The ActivityEdges incoming to and outgoing from a ForkNode must be either all ObjectFlows or all ControlFlows.
			let allEdges : Set(ActivityEdge) = incoming->union(outgoing) in
			allEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow)) */ 
			virtual bool edges(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 A ForkNode has one incoming ActivityEdge.
			incoming->size()=1 */ 
			virtual bool one_incoming_edge(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::weak_ptr<uml::Element > getOwner() const ;/*!
			 ActivityGroups containing the ActivityNode.
			<p>From package UML::Activities.</p> */
			virtual std::shared_ptr<Union<uml::ActivityGroup> > getInGroup() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual std::shared_ptr<Union<uml::RedefinableElement> > getRedefinedElement() const ;/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<Union<uml::Element> > getOwnedElement() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_FORKNODEFORKNODEIMPL_HPP */

