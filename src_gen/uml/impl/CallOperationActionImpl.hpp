//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_CALLOPERATIONACTIONCALLOPERATIONACTIONIMPL_HPP
#define UML_CALLOPERATIONACTIONCALLOPERATIONACTIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../CallOperationAction.hpp"

#include "impl/CallActionImpl.hpp"


//*********************************
namespace uml 
{
	class CallOperationActionImpl :virtual public CallActionImpl, virtual public CallOperationAction
	{
		public: 
			CallOperationActionImpl(const CallOperationActionImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			CallOperationActionImpl& operator=(CallOperationActionImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			CallOperationActionImpl();

		public:
			//destructor
			virtual ~CallOperationActionImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 If onPort has no value, the operation must be an owned or inherited feature of the type of the target InputPin, otherwise the Port given by onPort must be an owned or inherited feature of the type of the target InputPin, and the Port must have a required or provided Interface with the operation as an owned or inherited feature.
			if onPort=null then  target.type.oclAsType(Classifier).allFeatures()->includes(operation)
			else target.type.oclAsType(Classifier).allFeatures()->includes(onPort) and onPort.provided->union(onPort.required).allFeatures()->includes(operation)
			endif */ 
			virtual bool type_target_pin(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The Operation being invoked.
			<p>From package UML::Actions.</p> */
			virtual uml::Operation *  getOperation() const ;
			
			/*!
			 The Operation being invoked.
			<p>From package UML::Actions.</p> */
			virtual void setOperation(uml::Operation *  _operation) ;
			
			/*!
			 The InputPin that provides the target object to which the Operation call request is sent.
			<p>From package UML::Actions.</p> */
			virtual uml::InputPin *  getTarget() const ;
			
			/*!
			 The InputPin that provides the target object to which the Operation call request is sent.
			<p>From package UML::Actions.</p> */
			virtual void setTarget(uml::InputPin *  _target) ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 ActivityGroups containing the ActivityNode.
			<p>From package UML::Activities.</p> */
			virtual std::vector<uml::ActivityGroup * > *  getInGroup() const ;/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual std::vector<uml::RedefinableElement * > *  getRedefinedElement() const ;/*!
			 The ordered set of OutputPins representing outputs from the Action.
			<p>From package UML::Actions.</p> */
			virtual std::vector<uml::OutputPin * > *  getOutput() const ;/*!
			 The ordered set of InputPins representing the inputs to the Action.
			<p>From package UML::Actions.</p> */
			virtual std::vector<uml::InputPin * > *  getInput() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual ecore::EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: UML_CALLOPERATIONACTIONCALLOPERATIONACTIONIMPL_HPP */

