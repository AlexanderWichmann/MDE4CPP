//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_INTERACTIONOPERANDINTERACTIONOPERANDIMPL_HPP
#define UML_INTERACTIONOPERANDINTERACTIONOPERANDIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../InteractionOperand.hpp"

#include "impl/InteractionFragmentImpl.hpp"
#include "impl/NamespaceImpl.hpp"



//*********************************
namespace uml 
{
	class InteractionOperandImpl :virtual public InteractionFragmentImpl, virtual public NamespaceImpl, virtual public InteractionOperand 
	{
		public: 
			InteractionOperandImpl(const InteractionOperandImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			InteractionOperandImpl& operator=(InteractionOperandImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			InteractionOperandImpl();

		public:
			//destructor
			virtual ~InteractionOperandImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 The guard must contain only references to values local to the Lifeline on which it resides, or values global to the whole Interaction. */ 
			virtual bool guard_contain_references(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 The guard must be placed directly prior to (above) the OccurrenceSpecification that will become the first OccurrenceSpecification within this InteractionOperand. */ 
			virtual bool guard_directly_prior(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The fragments of the operand.
			<p>From package UML::Interactions.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::InteractionFragment>>> getFragment() const ;
			
			/*!
			 Constraint of the operand.
			<p>From package UML::Interactions.</p> */
			virtual std::shared_ptr<uml::InteractionConstraint> getGuard() const ;
			
			/*!
			 Constraint of the operand.
			<p>From package UML::Interactions.</p> */
			virtual void setGuard(std::shared_ptr<uml::InteractionConstraint> _guard) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::Element>>> getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element> getOwner() const ;/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Namespace> getNamespace() const ;/*!
			 A collection of NamedElements owned by the Namespace.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::NamedElement>>> getOwnedMember() const ;/*!
			 A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::NamedElement>>> getMember() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_INTERACTIONOPERANDINTERACTIONOPERANDIMPL_HPP */

