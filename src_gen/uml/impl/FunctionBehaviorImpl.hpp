//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_FUNCTIONBEHAVIORFUNCTIONBEHAVIORIMPL_HPP
#define UML_FUNCTIONBEHAVIORFUNCTIONBEHAVIORIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../FunctionBehavior.hpp"

#include "impl/OpaqueBehaviorImpl.hpp"


//*********************************
namespace uml 
{
	class FunctionBehaviorImpl :virtual public OpaqueBehaviorImpl, virtual public FunctionBehavior
	{
		public: 
			FunctionBehaviorImpl(const FunctionBehaviorImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			FunctionBehaviorImpl& operator=(FunctionBehaviorImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			FunctionBehaviorImpl();

		public:
			//destructor
			virtual ~FunctionBehaviorImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 A FunctionBehavior has at least one output Parameter.
			self.ownedParameter->
			  select(p | p.direction = ParameterDirectionKind::out or p.direction= ParameterDirectionKind::inout or p.direction= ParameterDirectionKind::return)->size() >= 1 */ 
			virtual bool one_output_parameter(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			/*!
			 The types of the ownedParameters are all DataTypes, which may not nest anything but other DataTypes.
			ownedParameter->forAll(p | p.type <> null and
			  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType))) */ 
			virtual bool types_of_parameters(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			/*!
			 The hasAllDataTypeAttributes query tests whether the types of the attributes of the given DataType are all DataTypes, and similarly for all those DataTypes.
			result = (d.ownedAttribute->forAll(a |
			    a.type.oclIsKindOf(DataType) and
			      hasAllDataTypeAttributes(a.type.oclAsType(DataType))))
			<p>From package UML::CommonBehavior.</p> */ 
			virtual bool hasAllDataTypeAttributes(uml::DataType *  d)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const ;/*!
			 The contexts that this element may be redefined from.
			<p>From package UML::Classification.</p> */
			virtual std::vector<uml::Classifier * > *  getRedefinitionContext() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const ;/*!
			 All of the Properties that are direct (i.e., not inherited or imported) attributes of the Classifier.
			<p>From package UML::Classification.</p> */
			virtual std::vector<uml::Property * > *  getAttribute() const ;/*!
			 A collection of NamedElements identifiable within the Namespace, either by being owned or by being introduced by importing or inheritance.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::NamedElement * > *  getMember() const ;/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Namespace *  getNamespace() const ;/*!
			 The roles that instances may play in this StructuredClassifier.
			<p>From package UML::StructuredClassifiers.</p> */
			virtual std::vector<uml::ConnectableElement * > *  getRole() const ;/*!
			 Specifies each Feature directly defined in the classifier. Note that there may be members of the Classifier that are of the type Feature but are not included, e.g., inherited features.
			<p>From package UML::Classification.</p> */
			virtual std::vector<uml::Feature * > *  getFeature() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual std::vector<uml::RedefinableElement * > *  getRedefinedElement() const ;/*!
			 A collection of NamedElements owned by the Namespace.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::NamedElement * > *  getOwnedMember() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual ecore::EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: UML_FUNCTIONBEHAVIORFUNCTIONBEHAVIORIMPL_HPP */

