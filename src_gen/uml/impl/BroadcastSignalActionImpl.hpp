//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_BROADCASTSIGNALACTIONBROADCASTSIGNALACTIONIMPL_HPP
#define UML_BROADCASTSIGNALACTIONBROADCASTSIGNALACTIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) /**/
#else
    #define ACT_DEBUG(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../BroadcastSignalAction.hpp"

#include "impl/InvocationActionImpl.hpp"

#include "SubsetUnion.hpp"



//*********************************
namespace uml 
{
	class BroadcastSignalActionImpl :virtual public InvocationActionImpl, virtual public BroadcastSignalAction 
	{
		public: 
			BroadcastSignalActionImpl(const BroadcastSignalActionImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			BroadcastSignalActionImpl& operator=(BroadcastSignalActionImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			BroadcastSignalActionImpl();

		public:
			//destructor
			virtual ~BroadcastSignalActionImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 The number of argument InputPins must be the same as the number of attributes in the signal.
			argument->size() = signal.allAttributes()->size() */ 
			virtual bool
			 number_of_arguments(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 The type, ordering, and multiplicity of an argument InputPin must be the same as the corresponding attribute of the signal.
			let attribute: OrderedSet(Property) = signal.allAttributes() in
			Sequence{1..argument->size()}->forAll(i | 
				argument->at(i).type.conformsTo(attribute->at(i).type) and 
				argument->at(i).isOrdered = attribute->at(i).isOrdered and
				argument->at(i).compatibleWith(attribute->at(i))) */ 
			virtual bool
			 type_ordering_multiplicity(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			/*!
			 A BroadcaseSignalAction may not specify onPort.
			onPort=null */ 
			virtual bool
			 no_onport(boost::any diagnostics,std::map <   boost::any, boost::any >  context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The Signal whose instances are to be sent.
			<p>From package UML::Actions.</p> */
			virtual std::shared_ptr<uml::Signal > getSignal() const ;
			
			/*!
			 The Signal whose instances are to be sent.
			<p>From package UML::Actions.</p> */
			virtual void setSignal(std::shared_ptr<uml::Signal> _signal_signal) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The ordered set of InputPins representing the inputs to the Action.
			<p>From package UML::Actions.</p> */
			virtual 		std::shared_ptr<SubsetUnion<uml::InputPin, uml::Element > >
			 getInput() const ;/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::Element> > getOwnedElement() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual 		std::shared_ptr<Union<uml::RedefinableElement> > getRedefinedElement() const ;/*!
			 ActivityGroups containing the ActivityNode.
			<p>From package UML::Activities.</p> */
			virtual 		std::shared_ptr<Union<uml::ActivityGroup> > getInGroup() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element > getOwner() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_BROADCASTSIGNALACTIONBROADCASTSIGNALACTIONIMPL_HPP */

