//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_PROFILEAPPLICATIONPROFILEAPPLICATIONIMPL_HPP
#define UML_PROFILEAPPLICATIONPROFILEAPPLICATIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../ProfileApplication.hpp"

#include "impl/DirectedRelationshipImpl.hpp"


//*********************************
namespace uml 
{
	class ProfileApplicationImpl :virtual public DirectedRelationshipImpl, virtual public ProfileApplication
	{
		public: 
			ProfileApplicationImpl(const ProfileApplicationImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			ProfileApplicationImpl& operator=(ProfileApplicationImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			ProfileApplicationImpl();

		public:
			//destructor
			virtual ~ProfileApplicationImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 Retrieves the definition (Ecore representation) of the profile associated with this profile application. */ 
			virtual ecore::EPackage *  getAppliedDefinition()  ;
			
			/*!
			 Retrieves the definition (Ecore representation) of the specified named element in the profile associated with this profile application. */ 
			virtual ecore::ENamedElement *  getAppliedDefinition(uml::NamedElement *  namedElement)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied.
			<p>From package UML::Packages.</p> */ 
			virtual bool getIsStrict() const ;
			
			/*!
			 Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied.
			<p>From package UML::Packages.</p> */ 
			virtual void setIsStrict (bool _isStrict); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 References the Profiles that are applied to a Package through this ProfileApplication.
			<p>From package UML::Packages.</p> */
			virtual uml::Profile *  getAppliedProfile() const ;
			
			/*!
			 References the Profiles that are applied to a Package through this ProfileApplication.
			<p>From package UML::Packages.</p> */
			virtual void setAppliedProfile(uml::Profile *  _appliedProfile) ;
			
			/*!
			 The package that owns the profile application.
			<p>From package UML::Packages.</p> */
			virtual uml::Package *  getApplyingPackage() const ;
			
			/*!
			 The package that owns the profile application.
			<p>From package UML::Packages.</p> */
			virtual void setApplyingPackage(uml::Package *  _applyingPackage) ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const ;/*!
			 Specifies the target Element(s) of the DirectedRelationship.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getTarget() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const ;/*!
			 Specifies the source Element(s) of the DirectedRelationship.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getSource() const ;/*!
			 Specifies the elements related by the Relationship.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getRelatedElement() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual ecore::EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: UML_PROFILEAPPLICATIONPROFILEAPPLICATIONIMPL_HPP */

