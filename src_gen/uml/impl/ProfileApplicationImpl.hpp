//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_PROFILEAPPLICATIONPROFILEAPPLICATIONIMPL_HPP
#define UML_PROFILEAPPLICATIONPROFILEAPPLICATIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) /**/
#else
    #define ACT_DEBUG(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../ProfileApplication.hpp"

#include "impl/DirectedRelationshipImpl.hpp"

#include "SubsetUnion.hpp"



//*********************************
namespace uml 
{
	class ProfileApplicationImpl :virtual public DirectedRelationshipImpl, virtual public ProfileApplication 
	{
		public: 
			ProfileApplicationImpl(const ProfileApplicationImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			ProfileApplicationImpl& operator=(ProfileApplicationImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			ProfileApplicationImpl();

		public:
			//destructor
			virtual ~ProfileApplicationImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 Retrieves the definition (Ecore representation) of the profile associated with this profile application. */ 
			virtual std::shared_ptr<ecore::EPackage> 
			 getAppliedDefinition()  ;
			
			/*!
			 Retrieves the definition (Ecore representation) of the specified named element in the profile associated with this profile application. */ 
			virtual std::shared_ptr<ecore::ENamedElement> 
			 getAppliedDefinition(std::shared_ptr<uml::NamedElement>  namedElement)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied.
			<p>From package UML::Packages.</p> */ 
			virtual bool getIsStrict() const ;
			
			/*!
			 Specifies that the Profile filtering rules for the metaclasses of the referenced metamodel shall be strictly applied.
			<p>From package UML::Packages.</p> */ 
			virtual void setIsStrict (bool _isStrict); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 References the Profiles that are applied to a Package through this ProfileApplication.
			<p>From package UML::Packages.</p> */
			virtual std::shared_ptr<uml::Profile > getAppliedProfile() const ;
			
			/*!
			 References the Profiles that are applied to a Package through this ProfileApplication.
			<p>From package UML::Packages.</p> */
			virtual void setAppliedProfile(std::shared_ptr<uml::Profile> _appliedProfile_appliedProfile) ;
			/*!
			 The package that owns the profile application.
			<p>From package UML::Packages.</p> */
			virtual std::shared_ptr<uml::Package > getApplyingPackage() const ;
			
			/*!
			 The package that owns the profile application.
			<p>From package UML::Packages.</p> */
			virtual void setApplyingPackage(std::shared_ptr<uml::Package> _applyingPackage_applyingPackage) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::Element> > getOwnedElement() const ;/*!
			 Specifies the elements related by the Relationship.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::Element> > getRelatedElement() const ;/*!
			 Specifies the target Element(s) of the DirectedRelationship.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<SubsetUnion<uml::Element, uml::Element > >
			 getTarget() const ;/*!
			 Specifies the source Element(s) of the DirectedRelationship.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<SubsetUnion<uml::Element, uml::Element > >
			 getSource() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element > getOwner() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: UML_PROFILEAPPLICATIONPROFILEAPPLICATIONIMPL_HPP */

