//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_REDUCEACTIONREDUCEACTIONIMPL_HPP
#define UML_REDUCEACTIONREDUCEACTIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../ReduceAction.hpp"

#include "impl/ActionImpl.hpp"


//*********************************
namespace uml 
{
	class ReduceActionImpl :virtual public ActionImpl, virtual public ReduceAction
	{
		public: 
			ReduceActionImpl(const ReduceActionImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			ReduceActionImpl& operator=(ReduceActionImpl const&) = delete;

		protected:
			friend class UmlFactoryImpl;
			ReduceActionImpl();

		public:
			//destructor
			virtual ~ReduceActionImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 The reducer Behavior must have two input ownedParameters and one output ownedParameter, where the type of the output Parameter and the type of elements of the input collection conform to the types of the input Parameters.
			let inputs: OrderedSet(Parameter) = reducer.inputParameters() in
			let outputs: OrderedSet(Parameter) = reducer.outputParameters() in
			inputs->size()=2 and outputs->size()=1 and
			inputs.type->forAll(t | 
				outputs.type->forAll(conformsTo(t)) and 
				-- Note that the following only checks the case when the collection is via multiple tokens.
				collection.upperBound()>1 implies collection.type.conformsTo(t)) */ 
			virtual bool reducer_inputs_output(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			/*!
			 The type of the collection InputPin must be a collection. */ 
			virtual bool input_type_is_collection(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			/*!
			 The type of the output of the reducer Behavior must conform to the type of the result OutputPin.
			reducer.outputParameters().type->forAll(conformsTo(result.type)) */ 
			virtual bool output_types_are_compatible(boost::any diagnostics,std::map <   boost::any, boost::any > * context)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 Indicates whether the order of the input collection should determine the order in which the reducer Behavior is applied to its elements.
			<p>From package UML::Actions.</p> */ 
			virtual bool getIsOrdered() const ;
			
			/*!
			 Indicates whether the order of the input collection should determine the order in which the reducer Behavior is applied to its elements.
			<p>From package UML::Actions.</p> */ 
			virtual void setIsOrdered (bool _isOrdered); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The InputPin that provides the collection to be reduced.
			<p>From package UML::Actions.</p> */
			virtual uml::InputPin *  getCollection() const ;
			
			/*!
			 The InputPin that provides the collection to be reduced.
			<p>From package UML::Actions.</p> */
			virtual void setCollection(uml::InputPin *  _collection) ;
			
			/*!
			 A Behavior that is repreatedly applied to two elements of the input collection to produce a value that is of the same type as elements of the collection.
			<p>From package UML::Actions.</p> */
			virtual uml::Behavior *  getReducer() const ;
			
			/*!
			 A Behavior that is repreatedly applied to two elements of the input collection to produce a value that is of the same type as elements of the collection.
			<p>From package UML::Actions.</p> */
			virtual void setReducer(uml::Behavior *  _reducer) ;
			
			/*!
			 The output pin on which the result value is placed.
			<p>From package UML::Actions.</p> */
			virtual uml::OutputPin *  getResult() const ;
			
			/*!
			 The output pin on which the result value is placed.
			<p>From package UML::Actions.</p> */
			virtual void setResult(uml::OutputPin *  _result) ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 ActivityGroups containing the ActivityNode.
			<p>From package UML::Activities.</p> */
			virtual std::vector<uml::ActivityGroup * > *  getInGroup() const ;/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const ;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const ;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual std::vector<uml::RedefinableElement * > *  getRedefinedElement() const ;/*!
			 The ordered set of OutputPins representing outputs from the Action.
			<p>From package UML::Actions.</p> */
			virtual std::vector<uml::OutputPin * > *  getOutput() const ;/*!
			 The ordered set of InputPins representing the inputs to the Action.
			<p>From package UML::Actions.</p> */
			virtual std::vector<uml::InputPin * > *  getInput() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual ecore::EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: UML_REDUCEACTIONREDUCEACTIONIMPL_HPP */

