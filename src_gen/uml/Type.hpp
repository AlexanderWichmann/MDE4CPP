//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_TYPE_HPP
#define UML_TYPE_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class Association;
}

namespace uml 
{
	class Comment;
}

namespace uml 
{
	class Dependency;
}

namespace ecore 
{
	class EAnnotation;
}

namespace uml 
{
	class Element;
}

namespace uml 
{
	class Namespace;
}

namespace uml 
{
	class Package;
}

namespace uml 
{
	class PackageableElement;
}

namespace uml 
{
	class StringExpression;
}

namespace uml 
{
	class TemplateParameter;
}

namespace uml 
{
	class Type;
}

// base class includes
#include "PackageableElement.hpp"

// enum includes
#include "AggregationKind.hpp"

#include "VisibilityKind.hpp"


//*********************************
namespace uml 
{
	/*!
	 A Type constrains the values represented by a TypedElement.
	<p>From package UML::CommonStructure.</p> */
	class Type:virtual public PackageableElement	{
		public:
 			Type(const Type &) {}
			Type& operator=(Type const&) = delete;
	
		protected:
			Type(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~Type() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 Creates a(n) (binary) association between this type and the specified other type, with the specified navigabilities, aggregations, names, lower bounds, and upper bounds, and owned by this type's nearest package. */ 
			virtual uml::Association *  createAssociation(bool end1IsNavigable,AggregationKind end1Aggregation,std::string end1Name,int end1Lower,int end1Upper,uml::Type *  end1Type,bool end2IsNavigable,AggregationKind end2Aggregation,std::string end2Name,int end2Lower,int end2Upper)  = 0;
			
			/*!
			 Retrieves the associations in which this type is involved. */ 
			virtual std::vector<uml::Association * > *  getAssociations()  = 0;
			
			/*!
			 The query conformsTo() gives true for a Type that conforms to another. By default, two Types do not conform to each other. This query is intended to be redefined for specific conformance situations.
			result = (false)
			<p>From package UML::CommonStructure.</p> */ 
			virtual bool conformsTo(uml::Type *  other)  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 Specifies the owning Package of this Type, if any.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Package *  getPackage() const = 0;
			
			/*!
			 Specifies the owning Package of this Type, if any.
			<p>From package UML::CommonStructure.</p> */
			virtual void setPackage(uml::Package *  _package) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 Specifies the owning Package of this Type, if any.
			<p>From package UML::CommonStructure.</p> */
			uml::Package *  m_package =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::vector<uml::Element * > *  getOwnedElement() const = 0;/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Element *  getOwner() const = 0;/*!
			 Specifies the Namespace that owns the NamedElement.
			<p>From package UML::CommonStructure.</p> */
			virtual uml::Namespace *  getNamespace() const = 0; 
	};

}
#endif /* end of include guard: UML_TYPE_HPP */

