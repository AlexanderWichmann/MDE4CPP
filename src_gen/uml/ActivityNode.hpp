//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_ACTIVITYNODE_HPP
#define UML_ACTIVITYNODE_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) /**/
#else
    #define ACT_DEBUG(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "SubsetUnion.hpp"
#include "boost/shared_ptr.hpp"
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class Activity;
}

namespace uml 
{
	class ActivityContent;
}

namespace uml 
{
	class ActivityEdge;
}

namespace uml 
{
	class ActivityGroup;
}

namespace uml 
{
	class ActivityNode;
}

namespace uml 
{
	class ActivityPartition;
}

namespace uml 
{
	class Classifier;
}

namespace uml 
{
	class Comment;
}

namespace uml 
{
	class Dependency;
}

namespace ecore 
{
	class EAnnotation;
}

namespace uml 
{
	class Element;
}

namespace uml 
{
	class InterruptibleActivityRegion;
}

namespace uml 
{
	class Namespace;
}

namespace uml 
{
	class RedefinableElement;
}

namespace uml 
{
	class StringExpression;
}

namespace uml 
{
	class StructuredActivityNode;
}

// base class includes
#include "ActivityContent.hpp"

#include "RedefinableElement.hpp"

// enum includes
#include "VisibilityKind.hpp"


//*********************************
namespace uml 
{
	/*!
	 ActivityNode is an abstract class for points in the flow of an Activity connected by ActivityEdges.
	<p>From package UML::Activities.</p> */
	class ActivityNode:virtual public ActivityContent,virtual public RedefinableElement	{
		public:
 			ActivityNode(const ActivityNode &) {}
			ActivityNode& operator=(ActivityNode const&) = delete;
	
		protected:
			ActivityNode(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~ActivityNode() {}

			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 The Activity containing the ActivityNode, if it is directly owned by an Activity.
			<p>From package UML::Activities.</p> */
			virtual std::shared_ptr<uml::Activity > getActivity() const = 0;
			
			/*!
			 The Activity containing the ActivityNode, if it is directly owned by an Activity.
			<p>From package UML::Activities.</p> */
			virtual void setActivity(std::shared_ptr<uml::Activity> _activity_activity) = 0;
			
			/*!
			 InterruptibleActivityRegions containing the ActivityNode.
			<p>From package UML::Activities.</p> */
			virtual 		std::shared_ptr<Subset<uml::InterruptibleActivityRegion, uml::ActivityGroup > >
			 getInInterruptibleRegion() const = 0;
			
			/*!
			 The StructuredActivityNode containing the ActvityNode, if it is directly owned by a StructuredActivityNode.
			<p>From package UML::Activities.</p> */
			virtual std::shared_ptr<uml::StructuredActivityNode > getInStructuredNode() const = 0;
			
			/*!
			 The StructuredActivityNode containing the ActvityNode, if it is directly owned by a StructuredActivityNode.
			<p>From package UML::Activities.</p> */
			virtual void setInStructuredNode(std::shared_ptr<uml::StructuredActivityNode> _inStructuredNode_inStructuredNode) = 0;
			/*!
			 ActivityEdges that have the ActivityNode as their target.
			<p>From package UML::Activities.</p> */
			virtual 	std::shared_ptr< Bag<uml::ActivityEdge> >
			 getIncoming() const = 0;
			
			/*!
			 ActivityEdges that have the ActivityNode as their source.
			<p>From package UML::Activities.</p> */
			virtual 	std::shared_ptr< Bag<uml::ActivityEdge> >
			 getOutgoing() const = 0;
			
			/*!
			 ActivityNodes from a generalization of the Activity containining this ActivityNode that are redefined by this ActivityNode.
			<p>From package UML::Activities.</p> */
			virtual 		std::shared_ptr<Subset<uml::ActivityNode, uml::RedefinableElement > >
			 getRedefinedNode() const = 0;
			
			/*!
			 ActivityPartitions containing the ActivityNode.
			<p>From package UML::Activities.</p> */
			virtual 		std::shared_ptr<Subset<uml::ActivityPartition, uml::ActivityGroup > >
			 getInPartition() const = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 The Activity containing the ActivityNode, if it is directly owned by an Activity.
			<p>From package UML::Activities.</p> */
			std::shared_ptr<uml::Activity > m_activity;
			/*!
			 ActivityGroups containing the ActivityNode.
			<p>From package UML::Activities.</p> */
					std::shared_ptr<Union<uml::ActivityGroup> > m_inGroup;
			/*!
			 InterruptibleActivityRegions containing the ActivityNode.
			<p>From package UML::Activities.</p> */
					std::shared_ptr<Subset<uml::InterruptibleActivityRegion, uml::ActivityGroup > >
			 m_inInterruptibleRegion;
			/*!
			 The StructuredActivityNode containing the ActvityNode, if it is directly owned by a StructuredActivityNode.
			<p>From package UML::Activities.</p> */
			std::shared_ptr<uml::StructuredActivityNode > m_inStructuredNode;
			/*!
			 ActivityEdges that have the ActivityNode as their target.
			<p>From package UML::Activities.</p> */
				std::shared_ptr< Bag<uml::ActivityEdge> >
			 m_incoming;
			/*!
			 ActivityEdges that have the ActivityNode as their source.
			<p>From package UML::Activities.</p> */
				std::shared_ptr< Bag<uml::ActivityEdge> >
			 m_outgoing;
			/*!
			 ActivityNodes from a generalization of the Activity containining this ActivityNode that are redefined by this ActivityNode.
			<p>From package UML::Activities.</p> */
					std::shared_ptr<Subset<uml::ActivityNode, uml::RedefinableElement > >
			 m_redefinedNode;
			/*!
			 ActivityPartitions containing the ActivityNode.
			<p>From package UML::Activities.</p> */
					std::shared_ptr<Subset<uml::ActivityPartition, uml::ActivityGroup > >
			 m_inPartition;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 The Element that owns this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual std::shared_ptr<uml::Element > getOwner() const = 0;/*!
			 ActivityGroups containing the ActivityNode.
			<p>From package UML::Activities.</p> */
			virtual 		std::shared_ptr<Union<uml::ActivityGroup> > getInGroup() const = 0;/*!
			 The RedefinableElement that is being redefined by this element.
			<p>From package UML::Classification.</p> */
			virtual 		std::shared_ptr<Union<uml::RedefinableElement> > getRedefinedElement() const = 0;/*!
			 The Elements owned by this Element.
			<p>From package UML::CommonStructure.</p> */
			virtual 		std::shared_ptr<Union<uml::Element> > getOwnedElement() const = 0; 
	};

}
#endif /* end of include guard: UML_ACTIVITYNODE_HPP */

