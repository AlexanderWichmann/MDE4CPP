//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef UML_OBJECT_HPP
#define UML_OBJECT_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "SubsetUnion.hpp"
#include "boost/shared_ptr.hpp"
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class Property;
}

// base class includes

// enum includes

#include "EObject.hpp"

//*********************************
namespace uml 
{
	/*!
	 Reflection introduces Object as a supertype of Element in order to be able to have a Type that represents both elements
	and data values. Object represents ‘any’ value and is the equivalent of java.lang.Object in Java.
	
	<span style="background-color:#FF8000">This Element was merged from mof::Reflection package.</span> */
	class Object : virtual public ecore::EObject 
	{
		public:
 			Object(const Object &) {}
			Object& operator=(Object const&) = delete;
	
		protected:
			Object(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~Object() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 Gets the value of the given property. If the Property has multiplicity upper bound of 1, get() returns the value of the
			Property. If Property has multiplicity upper bound >1, get() returns a ReflectiveCollection containing the values of the
			Property. If there are no values, the ReflectiveCollection returned is empty.  */ 
			virtual boost::any
			 get(std::shared_ptr<uml::Property>  property)  = 0;
			
			/*!
			 If the Property has multiplicity upper bound = 1, set() atomically updates the value of the Property to the object
			parameter. If Property has multiplicity upper bound >1, the Object must be a kind of ReflectiveCollection. */ 
			virtual void
			 set(std::shared_ptr<uml::Property>  property,boost::any value)  = 0;
			
			/*!
			 */ 
			virtual void
			 unset(std::shared_ptr<uml::Property>  property)  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			 
	};

}
#endif /* end of include guard: UML_OBJECT_HPP */

