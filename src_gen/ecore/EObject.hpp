//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_EOBJECT_HPP
#define ECORE_EOBJECT_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "SubsetUnion.hpp"
#include "boost/shared_ptr.hpp"
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace ecore 
{
	class EClass;
}

namespace ecore 
{
	class EObject;
}

namespace ecore 
{
	class EOperation;
}

namespace ecore 
{
	class EReference;
}

namespace ecore 
{
	class EStructuralFeature;
}

// base class includes

// enum includes


//*********************************
namespace ecore 
{
	/*!
	 */
	class EObject	{
		public:
 			EObject(const EObject &) {}
			EObject& operator=(EObject const&) = delete;
	
		protected:
			EObject(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~EObject() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EClass> 
			 eClass()  const  = 0;
			
			/*!
			 */ 
			virtual bool
			 eIsProxy()  const  = 0;
			
			/*!
			 */ 
			virtual int
			 eResource()  const  = 0;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EStructuralFeature> 
			 eContainingFeature()  const  = 0;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EReference> 
			 eContainmentFeature()  const  = 0;
			
			/*!
			 */ 
			virtual std::vector <   ecore::EObject > 
			 eContents()  const  = 0;
			
			/*!
			 */ 
			virtual std::vector <   ecore::EObject > 
			 eAllContents()  const  = 0;
			
			/*!
			 */ 
			virtual std::vector <   ecore::EObject > 
			 eCrossReferences()  const  = 0;
			
			/*!
			 */ 
			virtual boost::any
			 eGet(std::shared_ptr<ecore::EStructuralFeature>  feature)  const  = 0;
			
			/*!
			 */ 
			virtual boost::any
			 eGet(std::shared_ptr<ecore::EStructuralFeature>  feature,bool resolve)  const  = 0;
			
			/*!
			 */ 
			virtual void
			 eSet(std::shared_ptr<ecore::EStructuralFeature>  feature,boost::any newValue)  const  = 0;
			
			/*!
			 */ 
			virtual bool
			 eIsSet(std::shared_ptr<ecore::EStructuralFeature>  feature)  const  = 0;
			
			/*!
			 */ 
			virtual void
			 eUnset(std::shared_ptr<ecore::EStructuralFeature>  feature)  const  = 0;
			
			/*!
			 */ 
			virtual boost::any
			 eInvoke(std::shared_ptr<ecore::EOperation>  operation,std::vector <   boost::any >  arguments)  const  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<ecore::EObject > eContainer() const = 0;
			
			/*!
			 */
			virtual void setContainer(std::shared_ptr<ecore::EObject> _eContainer_eContainer) = 0;
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			std::shared_ptr<ecore::EObject > m_eContainer;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			 
	};

}
#endif /* end of include guard: ECORE_EOBJECT_HPP */

