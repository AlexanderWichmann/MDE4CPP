//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_ETYPEDELEMENT_HPP
#define ECORE_ETYPEDELEMENT_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/shared_ptr.hpp"
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace ecore 
{
	class EAnnotation;
}

namespace ecore 
{
	class EClassifier;
}

namespace ecore 
{
	class EGenericType;
}

namespace ecore 
{
	class ENamedElement;
}

// base class includes
#include "ENamedElement.hpp"

// enum includes


//*********************************
namespace ecore 
{
	/*!
	 */
	class ETypedElement:virtual public ENamedElement	{
		public:
 			ETypedElement(const ETypedElement &) {}
			ETypedElement& operator=(ETypedElement const&) = delete;
	
		protected:
			ETypedElement(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~ETypedElement() {}

			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual bool isOrdered() const = 0;
			
			/*!
			 */ 
			virtual void setOrdered (bool _ordered)= 0; 
			
			/*!
			 */ 
			virtual bool isUnique() const = 0;
			
			/*!
			 */ 
			virtual void setUnique (bool _unique)= 0; 
			
			/*!
			 */ 
			virtual int getLowerBound() const = 0;
			
			/*!
			 */ 
			virtual void setLowerBound (int _lowerBound)= 0; 
			
			/*!
			 */ 
			virtual int getUpperBound() const = 0;
			
			/*!
			 */ 
			virtual void setUpperBound (int _upperBound)= 0; 
			
			/*!
			 */ 
			virtual bool isMany() const = 0;
			
			/*!
			 */ 
			virtual bool isRequired() const = 0;
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr< ecore::EClassifier >  getEType() const = 0;
			
			/*!
			 */
			virtual void setEType(std::shared_ptr<ecore::EClassifier> _eType) = 0;
			/*!
			 */
			virtual std::shared_ptr< ecore::EGenericType >  getEGenericType() const = 0;
			
			/*!
			 */
			virtual void setEGenericType(std::shared_ptr<ecore::EGenericType> _eGenericType) = 0;
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			 */ 
			bool m_ordered =  true;
			/*!
			 */ 
			bool m_unique =  true;
			/*!
			 */ 
			int m_lowerBound ;
			/*!
			 */ 
			int m_upperBound =  1;
			/*!
			 */ 
			bool m_many ;
			/*!
			 */ 
			bool m_required ;
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			std::shared_ptr< ecore::EClassifier >  m_eType;
			/*!
			 */
			std::shared_ptr< ecore::EGenericType >  m_eGenericType;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			 
	};

}
#endif /* end of include guard: ECORE_ETYPEDELEMENT_HPP */

