//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_ECLASS_HPP
#define ECORE_ECLASS_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace ecore 
{
	class EAnnotation;
}

namespace ecore 
{
	class EAttribute;
}

namespace ecore 
{
	class EClass;
}

namespace ecore 
{
	class EClassifier;
}

namespace ecore 
{
	class EGenericType;
}

namespace ecore 
{
	class EOperation;
}

namespace ecore 
{
	class EPackage;
}

namespace ecore 
{
	class EReference;
}

namespace ecore 
{
	class EStructuralFeature;
}

namespace ecore 
{
	class ETypeParameter;
}

// base class includes
#include "EClassifier.hpp"

// enum includes


//*********************************
namespace ecore 
{
	/*!
	 */
	class EClass:virtual public EClassifier	{
		public:
 			EClass(const EClass &) {}
			EClass& operator=(EClass const&) = delete;
	
		protected:
			EClass(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~EClass() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual bool isSuperTypeOf(ecore::EClass *  someClass)  const  = 0;
			
			/*!
			 */ 
			virtual int getFeatureCount()  const  = 0;
			
			/*!
			 */ 
			virtual ecore::EStructuralFeature *  getEStructuralFeature(int featureID)  const  = 0;
			
			/*!
			 */ 
			virtual int getFeatureID(ecore::EStructuralFeature *  feature)  const  = 0;
			
			/*!
			 */ 
			virtual ecore::EStructuralFeature *  getEStructuralFeature(std::string featureName)  const  = 0;
			
			/*!
			 */ 
			virtual int getOperationCount()  const  = 0;
			
			/*!
			 */ 
			virtual ecore::EOperation *  getEOperation(int operationID)  const  = 0;
			
			/*!
			 */ 
			virtual int getOperationID(ecore::EOperation *  operation)  const  = 0;
			
			/*!
			 */ 
			virtual ecore::EOperation *  getOverride(ecore::EOperation *  operation)  const  = 0;
			
			/*!
			 */ 
			virtual ecore::EGenericType *  getFeatureType(ecore::EStructuralFeature *  feature)  const  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual bool isAbstract() const = 0;
			
			/*!
			 */ 
			virtual void setAbstract (bool _abstract)= 0; 
			
			/*!
			 */ 
			virtual bool isInterface() const = 0;
			
			/*!
			 */ 
			virtual void setInterface (bool _interface)= 0; 
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::vector<ecore::EClass * > *  getESuperTypes() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EOperation * > *  getEOperations() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EAttribute * > *  getEAllAttributes() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EReference * > *  getEAllReferences() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EReference * > *  getEReferences() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EAttribute * > *  getEAttributes() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EReference * > *  getEAllContainments() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EOperation * > *  getEAllOperations() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EStructuralFeature * > *  getEAllStructuralFeatures() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EClass * > *  getEAllSuperTypes() const = 0;
			
			/*!
			 */
			virtual ecore::EAttribute *  getEIDAttribute() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EStructuralFeature * > *  getEStructuralFeatures() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EGenericType * > *  getEGenericSuperTypes() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EGenericType * > *  getEAllGenericSuperTypes() const = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			 */ 
			bool m_abstract ;
			/*!
			 */ 
			bool m_interface ;
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			std::vector<ecore::EClass * > *  m_eSuperTypes =  nullptr ;
			/*!
			 */
			std::vector<ecore::EOperation * > *  m_eOperations =  nullptr ;
			/*!
			 */
			std::vector<ecore::EAttribute * > *  m_eAllAttributes =  nullptr ;
			/*!
			 */
			std::vector<ecore::EReference * > *  m_eAllReferences =  nullptr ;
			/*!
			 */
			std::vector<ecore::EReference * > *  m_eReferences =  nullptr ;
			/*!
			 */
			std::vector<ecore::EAttribute * > *  m_eAttributes =  nullptr ;
			/*!
			 */
			std::vector<ecore::EReference * > *  m_eAllContainments =  nullptr ;
			/*!
			 */
			std::vector<ecore::EOperation * > *  m_eAllOperations =  nullptr ;
			/*!
			 */
			std::vector<ecore::EStructuralFeature * > *  m_eAllStructuralFeatures =  nullptr ;
			/*!
			 */
			std::vector<ecore::EClass * > *  m_eAllSuperTypes =  nullptr ;
			/*!
			 */
			ecore::EAttribute *  m_eIDAttribute =  nullptr ;
			/*!
			 */
			std::vector<ecore::EStructuralFeature * > *  m_eStructuralFeatures =  nullptr ;
			/*!
			 */
			std::vector<ecore::EGenericType * > *  m_eGenericSuperTypes =  nullptr ;
			/*!
			 */
			std::vector<ecore::EGenericType * > *  m_eAllGenericSuperTypes =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			 
	};

}
#endif /* end of include guard: ECORE_ECLASS_HPP */

