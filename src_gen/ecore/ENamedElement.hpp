//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_ENAMEDELEMENT_HPP
#define ECORE_ENAMEDELEMENT_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace ecore 
{
	class EAnnotation;
}

namespace ecore 
{
	class EModelElement;
}

// base class includes
#include "EModelElement.hpp"

// enum includes


//*********************************
namespace ecore 
{
	/*!
	 */
	class ENamedElement:virtual public EModelElement	{
		public:
 			ENamedElement(const ENamedElement &) {}
			ENamedElement& operator=(ENamedElement const&) = delete;
	
		protected:
			ENamedElement(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~ENamedElement() {}

			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual std::string getName() const = 0;
			
			/*!
			 */ 
			virtual void setName (std::string _name)= 0; 
			
			
			//*********************************
			// Reference
			//*********************************
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			 */ 
			std::string m_name ;
			
			
			//*********************************
			// Reference Members
			//*********************************
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			 
	};

}
#endif /* end of include guard: ECORE_ENAMEDELEMENT_HPP */

