//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_EGENERICTYPEEGENERICTYPEIMPL_HPP
#define ECORE_EGENERICTYPEEGENERICTYPEIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../EGenericType.hpp"

#include "impl/EObjectImpl.hpp"


//*********************************
namespace ecore 
{
	class EGenericTypeImpl :virtual public EObjectImpl, virtual public EGenericType
	{
		public: 
			EGenericTypeImpl(const EGenericTypeImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			EGenericTypeImpl& operator=(EGenericTypeImpl const&) = delete;

		protected:
			friend class EcoreFactoryImpl;
			EGenericTypeImpl();

		public:
			//destructor
			virtual ~EGenericTypeImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual bool isInstance(boost::any object)  const  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual ecore::EGenericType *  getEUpperBound() const ;
			
			/*!
			 */
			virtual void setEUpperBound(ecore::EGenericType *  _eUpperBound) ;
			
			/*!
			 */
			virtual std::vector<ecore::EGenericType * > *  getETypeArguments() const ;
			
			/*!
			 */
			virtual ecore::EClassifier *  getERawType() const ;
			
			/*!
			 */
			virtual ecore::EGenericType *  getELowerBound() const ;
			
			/*!
			 */
			virtual void setELowerBound(ecore::EGenericType *  _eLowerBound) ;
			
			/*!
			 */
			virtual ecore::ETypeParameter *  getETypeParameter() const ;
			
			/*!
			 */
			virtual void setETypeParameter(ecore::ETypeParameter *  _eTypeParameter) ;
			
			/*!
			 */
			virtual ecore::EClassifier *  getEClassifier() const ;
			
			/*!
			 */
			virtual void setEClassifier(ecore::EClassifier *  _eClassifier) ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: ECORE_EGENERICTYPEEGENERICTYPEIMPL_HPP */

