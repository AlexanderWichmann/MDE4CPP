//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_EPACKAGEEPACKAGEIMPL_HPP
#define ECORE_EPACKAGEEPACKAGEIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../EPackage.hpp"

#include "impl/ENamedElementImpl.hpp"


//*********************************
namespace ecore 
{
	class EPackageImpl :virtual public ENamedElementImpl, virtual public EPackage
	{
		public: 
			EPackageImpl(const EPackageImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			EPackageImpl& operator=(EPackageImpl const&) = delete;

		protected:
			friend class EcoreFactoryImpl;
			EPackageImpl();

		public:
			//destructor
			virtual ~EPackageImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual ecore::EClassifier *  getEClassifier(std::string name)  const  ;
			
			/*!
			 */ 
			virtual ecore::EClass *  createEClass(int id)  ;
			
			/*!
			 */ 
			virtual ecore::EEnum *  createEEnum(int id)  ;
			
			/*!
			 */ 
			virtual void createEAttribute(ecore::EClass *  owner,int id)  ;
			
			/*!
			 */ 
			virtual void createEReference(ecore::EClass *  owner,int id)  ;
			
			/*!
			 */ 
			virtual void createEOperation(ecore::EClass *  owner,int id)  ;
			
			/*!
			 */ 
			virtual ecore::EDataType *  createEDataType(int id)  ;
			
			/*!
			 */ 
			virtual ecore::EClass *  initEClass(ecore::EClass *  c,void *  instanceClass,std::string name,bool isAbstract,bool isInterface)  ;
			
			/*!
			 */ 
			virtual ecore::EClass *  initEClass(ecore::EClass *  c,void *  instanceClass,std::string name,bool isAbstract,bool isInterface,bool isGenerated)  ;
			
			/*!
			 */ 
			virtual ecore::EAttribute *  initEAttribute(ecore::EAttribute *  a,ecore::EClassifier *  type,std::string name,std::string defaultValue,int lowerBound,int upperBound,bool isTransient,bool isVolatile,bool isChangeable,bool isUnsettable,bool isID,bool isUnique,bool isDerived)  ;
			
			/*!
			 */ 
			virtual ecore::EAttribute *  initEAttribute(ecore::EAttribute *  a,ecore::EClassifier *  type,std::string name,std::string defaultValue,int lowerBound,int upperBound,bool isTransient,bool isVolatile,bool isChangeable,bool isUnsettable,bool isID,bool isUnique,bool isDerived,bool isOrdered)  ;
			
			/*!
			 */ 
			virtual ecore::EAttribute *  initEAttribute(ecore::EAttribute *  a,ecore::EClassifier *  type,std::string name,std::string defaultValue,int lowerBound,int upperBound,void *  containerClass,bool isTransient,bool isVolatile,bool isChangeable,bool isUnsettable,bool isID,bool isUnique,bool isDerived,bool isOrdered)  ;
			
			/*!
			 */ 
			virtual ecore::EReference *  initEReference(ecore::EReference *  r,ecore::EClassifier *  type,ecore::EReference *  otherEnd,std::string name,std::string defaultValue,int lowerBound,int upperBound,bool isTransient,bool isVolatile,bool isChangeable,bool isContainment,bool isResolveProxies,bool isUnsettable,bool isUnique,bool isDerived)  ;
			
			/*!
			 */ 
			virtual ecore::EReference *  initEReference(ecore::EReference *  r,ecore::EClassifier *  type,ecore::EReference *  otherEnd,std::string name,std::string defaultValue,int lowerBound,int upperBound,bool isTransient,bool isVolatile,bool isChangeable,bool isContainment,bool isResolveProxies,bool isUnsettable,bool isUnique,bool isDerived,bool isOrdered)  ;
			
			/*!
			 */ 
			virtual ecore::EReference *  initEReference(ecore::EReference *  r,ecore::EClassifier *  type,ecore::EReference *  otherEnd,std::string name,std::string defaultValue,int lowerBound,int upperBound,void *  containerClass,bool isTransient,bool isVolatile,bool isChangeable,bool isContainment,bool isResolveProxies,bool isUnsettable,bool isUnique,bool isDerived,bool isOrdered)  ;
			
			/*!
			 */ 
			virtual void initEStructuralFeature(ecore::EStructuralFeature *  s,ecore::EClassifier *  type,std::string name,std::string defaultValue,int lowerBound,int upperBound,void *  containerClass,bool isTransient,bool isVolatile,bool isChangeable,bool isUnsettable,bool isUnique,bool isDerived,bool isOrdered)  ;
			
			/*!
			 */ 
			virtual void initEClassifier(ecore::EClassifier *  o,ecore::EClass *  metaObject,void *  instanceClass,std::string name)  ;
			
			/*!
			 */ 
			virtual void initEClassifier(ecore::EClassifier *  o,ecore::EClass *  metaObject,void *  instanceClass,std::string name,bool isGenerated)  ;
			
			/*!
			 */ 
			virtual ecore::EOperation *  initEOperation(ecore::EOperation *  o,ecore::EClassifier *  type,std::string name)  ;
			
			/*!
			 */ 
			virtual ecore::EOperation *  initEOperation(ecore::EOperation *  o,ecore::EClassifier *  type,std::string name,int lowerBound,int upperBound)  ;
			
			/*!
			 */ 
			virtual ecore::EOperation *  initEOperation(ecore::EOperation *  o,ecore::EClassifier *  type,std::string name,int lowerBound,int upperBound,bool isUnique,bool isOrdered)  ;
			
			/*!
			 */ 
			virtual ecore::EEnum *  initEEnum(ecore::EEnum *  e,void *  instanceClass,std::string name)  ;
			
			/*!
			 */ 
			virtual ecore::EDataType *  initEDataType(ecore::EDataType *  d,void *  instanceClass,std::string name,bool isSerializable,bool isGenerated)  ;
			
			/*!
			 */ 
			virtual void addEParameter(ecore::EOperation *  owner,ecore::EClassifier *  type,std::string name)  ;
			
			/*!
			 */ 
			virtual void addEParameter(ecore::EOperation *  owner,ecore::EClassifier *  type,std::string name,int lower,int upper)  ;
			
			/*!
			 */ 
			virtual ecore::EParameter *  addEParameter(ecore::EOperation *  owner,ecore::EClassifier *  type,std::string name,int lower,int upper,bool isUnique,bool isOrdered)  ;
			
			/*!
			 */ 
			virtual ecore::EParameter *  internalAddEParameter(ecore::EOperation *  owner,ecore::EClassifier *  type,std::string name)  ;
			
			/*!
			 */ 
			virtual void setGeneratedClassName(ecore::EClassifier *  eClassifier)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual std::string getNsURI() const ;
			
			/*!
			 */ 
			virtual void setNsURI (std::string _nsURI); 
			
			/*!
			 */ 
			virtual std::string getNsPrefix() const ;
			
			/*!
			 */ 
			virtual void setNsPrefix (std::string _nsPrefix); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual ecore::EFactory *  getEFactoryInstance() const ;
			
			/*!
			 */
			virtual void setEFactoryInstance(ecore::EFactory *  _eFactoryInstance) ;
			
			/*!
			 */
			virtual std::vector<ecore::EClassifier * > *  getEClassifiers() const ;
			
			/*!
			 */
			virtual std::vector<ecore::EPackage * > *  getESubpackages() const ;
			
			/*!
			 */
			virtual ecore::EPackage *  getESuperPackage() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: ECORE_EPACKAGEEPACKAGEIMPL_HPP */

