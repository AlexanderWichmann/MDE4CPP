//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_EOBJECTEOBJECTIMPL_HPP
#define ECORE_EOBJECTEOBJECTIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../EObject.hpp"





//*********************************
namespace ecore 
{
	class EObjectImpl :
virtual public EObject 
	{
		public: 
			EObjectImpl(const EObjectImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			EObjectImpl& operator=(EObjectImpl const&) = delete;

		protected:
			friend class EcoreFactoryImpl;
			EObjectImpl();

		public:
			//destructor
			virtual ~EObjectImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EClass>  eClass()  const  ;
			
			/*!
			 */ 
			virtual bool eIsProxy()  const  ;
			
			/*!
			 */ 
			virtual int eResource()  const  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EStructuralFeature>  eContainingFeature()  const  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<ecore::EReference>  eContainmentFeature()  const  ;
			
			/*!
			 */ 
			virtual std::vector <   ecore::EObject >  eContents()  const  ;
			
			/*!
			 */ 
			virtual std::vector <   ecore::EObject >  eAllContents()  const  ;
			
			/*!
			 */ 
			virtual std::vector <   ecore::EObject >  eCrossReferences()  const  ;
			
			/*!
			 */ 
			virtual boost::any eGet(std::shared_ptr<ecore::EStructuralFeature>  feature)  const  ;
			
			/*!
			 */ 
			virtual boost::any eGet(std::shared_ptr<ecore::EStructuralFeature>  feature,bool resolve)  const  ;
			
			/*!
			 */ 
			virtual void eSet(std::shared_ptr<ecore::EStructuralFeature>  feature,boost::any newValue)  const  ;
			
			/*!
			 */ 
			virtual bool eIsSet(std::shared_ptr<ecore::EStructuralFeature>  feature)  const  ;
			
			/*!
			 */ 
			virtual void eUnset(std::shared_ptr<ecore::EStructuralFeature>  feature)  const  ;
			
			/*!
			 */ 
			virtual boost::any eInvoke(std::shared_ptr<ecore::EOperation>  operation,std::vector <   boost::any >  arguments)  const  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr< ecore::EObject >  eContainer() const ;
			
			/*!
			 */
			virtual void setContainer(std::shared_ptr<ecore::EObject> _eContainer) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: ECORE_EOBJECTEOBJECTIMPL_HPP */

