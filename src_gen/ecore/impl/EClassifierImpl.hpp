//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_ECLASSIFIERECLASSIFIERIMPL_HPP
#define ECORE_ECLASSIFIERECLASSIFIERIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../EClassifier.hpp"

#include "impl/ENamedElementImpl.hpp"

#include "SubsetUnion.hpp"



//*********************************
namespace ecore 
{
	class EClassifierImpl :virtual public ENamedElementImpl, virtual public EClassifier 
	{
		public: 
			EClassifierImpl(const EClassifierImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			EClassifierImpl& operator=(EClassifierImpl const&) = delete;

		protected:
			friend class EcoreFactoryImpl;
			EClassifierImpl();

		public:
			//destructor
			virtual ~EClassifierImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual bool
			 isInstance(boost::any object)  const  ;
			
			/*!
			 */ 
			virtual void
			 setGeneratedInstance(bool isGenerated)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual std::string getInstanceClassName() const ;
			
			/*!
			 */ 
			virtual void setInstanceClassName (std::string _instanceClassName); 
			
			/*!
			 */ 
			virtual void *  getInstanceClass() const ;
			
			/*!
			 */ 
			virtual void setInstanceClass (void *  _instanceClass); 
			
			/*!
			 */ 
			virtual boost::any getDefaultValue() const ;
			
			/*!
			 */ 
			virtual int getClassifierID() const ;
			
			/*!
			 */ 
			virtual void setClassifierID (int _classifierID); 
			
			/*!
			 */ 
			virtual std::string getInstanceTypeName() const ;
			
			/*!
			 */ 
			virtual void setInstanceTypeName (std::string _instanceTypeName); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<ecore::EPackage > getEPackage() const ;
			
			/*!
			 */
			virtual void setEPackage(std::shared_ptr<ecore::EPackage> _ePackage_ePackage) ;
			/*!
			 */
			virtual 	std::shared_ptr< Bag<ecore::ETypeParameter> >
			 getETypeParameters() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: ECORE_ECLASSIFIERECLASSIFIERIMPL_HPP */

