//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_EOPERATION_HPP
#define ECORE_EOPERATION_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace ecore 
{
	class EAnnotation;
}

namespace ecore 
{
	class EClass;
}

namespace ecore 
{
	class EClassifier;
}

namespace ecore 
{
	class EGenericType;
}

namespace ecore 
{
	class EOperation;
}

namespace ecore 
{
	class EParameter;
}

namespace ecore 
{
	class ETypeParameter;
}

namespace ecore 
{
	class ETypedElement;
}

// base class includes
#include "ETypedElement.hpp"

// enum includes


//*********************************
namespace ecore 
{
	/*!
	 */
	class EOperation:virtual public ETypedElement	{
		public:
 			EOperation(const EOperation &) {}
			EOperation& operator=(EOperation const&) = delete;
	
		protected:
			EOperation(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~EOperation() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual bool isOverrideOf(ecore::EOperation *  someOperation)  const  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual int getOperationID() const = 0;
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual ecore::EClass *  getEContainingClass() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::ETypeParameter * > *  getETypeParameters() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EParameter * > *  getEParameters() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EClassifier * > *  getEExceptions() const = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EGenericType * > *  getEGenericExceptions() const = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			 */ 
			int m_operationID =  -1;
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			ecore::EClass *  m_eContainingClass =  nullptr ;
			/*!
			 */
			std::vector<ecore::ETypeParameter * > *  m_eTypeParameters =  nullptr ;
			/*!
			 */
			std::vector<ecore::EParameter * > *  m_eParameters =  nullptr ;
			/*!
			 */
			std::vector<ecore::EClassifier * > *  m_eExceptions =  nullptr ;
			/*!
			 */
			std::vector<ecore::EGenericType * > *  m_eGenericExceptions =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			 
	};

}
#endif /* end of include guard: ECORE_EOPERATION_HPP */

