//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_EENUMLITERAL_HPP
#define ECORE_EENUMLITERAL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/shared_ptr.hpp"
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace ecore 
{
	class EAnnotation;
}

namespace ecore 
{
	class EEnum;
}

namespace ecore 
{
	class ENamedElement;
}

// base class includes
#include "ENamedElement.hpp"

// enum includes


//*********************************
namespace ecore 
{
	/*!
	 */
	class EEnumLiteral:virtual public ENamedElement	{
		public:
 			EEnumLiteral(const EEnumLiteral &) {}
			EEnumLiteral& operator=(EEnumLiteral const&) = delete;
	
		protected:
			EEnumLiteral(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~EEnumLiteral() {}

			//*********************************
			// Operations
			//*********************************
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual int getValue() const = 0;
			
			/*!
			 */ 
			virtual void setValue (int _value)= 0; 
			
			/*!
			 */ 
			virtual boost::any getInstance() const = 0;
			
			/*!
			 */ 
			virtual void setInstance (boost::any _instance)= 0; 
			
			/*!
			 */ 
			virtual std::string getLiteral() const = 0;
			
			/*!
			 */ 
			virtual void setLiteral (std::string _literal)= 0; 
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr< ecore::EEnum >  getEEnum() const = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			 */ 
			int m_value ;
			/*!
			 */ 
			boost::any m_instance ;
			/*!
			 */ 
			std::string m_literal ;
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			std::shared_ptr< ecore::EEnum >  m_eEnum;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			 
	};

}
#endif /* end of include guard: ECORE_EENUMLITERAL_HPP */

