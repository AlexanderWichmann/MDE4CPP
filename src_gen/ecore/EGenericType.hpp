//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef ECORE_EGENERICTYPE_HPP
#define ECORE_EGENERICTYPE_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace ecore 
{
	class EClassifier;
}

namespace ecore 
{
	class EGenericType;
}

namespace ecore 
{
	class EObject;
}

namespace ecore 
{
	class ETypeParameter;
}

// base class includes
#include "EObject.hpp"

// enum includes


//*********************************
namespace ecore 
{
	/*!
	 */
	class EGenericType:virtual public EObject	{
		public:
 			EGenericType(const EGenericType &) {}
			EGenericType& operator=(EGenericType const&) = delete;
	
		protected:
			EGenericType(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~EGenericType() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual bool isInstance(boost::any object)  const  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual ecore::EGenericType *  getEUpperBound() const = 0;
			
			/*!
			 */
			virtual void setEUpperBound(ecore::EGenericType *  _eUpperBound) = 0;
			
			/*!
			 */
			virtual std::vector<ecore::EGenericType * > *  getETypeArguments() const = 0;
			
			/*!
			 */
			virtual ecore::EClassifier *  getERawType() const = 0;
			
			/*!
			 */
			virtual ecore::EGenericType *  getELowerBound() const = 0;
			
			/*!
			 */
			virtual void setELowerBound(ecore::EGenericType *  _eLowerBound) = 0;
			
			/*!
			 */
			virtual ecore::ETypeParameter *  getETypeParameter() const = 0;
			
			/*!
			 */
			virtual void setETypeParameter(ecore::ETypeParameter *  _eTypeParameter) = 0;
			
			/*!
			 */
			virtual ecore::EClassifier *  getEClassifier() const = 0;
			
			/*!
			 */
			virtual void setEClassifier(ecore::EClassifier *  _eClassifier) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			ecore::EGenericType *  m_eUpperBound =  nullptr ;
			/*!
			 */
			std::vector<ecore::EGenericType * > *  m_eTypeArguments =  nullptr ;
			/*!
			 */
			ecore::EClassifier *  m_eRawType =  nullptr ;
			/*!
			 */
			ecore::EGenericType *  m_eLowerBound =  nullptr ;
			/*!
			 */
			ecore::ETypeParameter *  m_eTypeParameter =  nullptr ;
			/*!
			 */
			ecore::EClassifier *  m_eClassifier =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			 
	};

}
#endif /* end of include guard: ECORE_EGENERICTYPE_HPP */

