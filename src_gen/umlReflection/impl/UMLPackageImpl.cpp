#include "UMLPackageImpl.hpp"

//metamodel classes
#include "Stereotype.hpp"
#include "Generalization.hpp"
#include "Constraint.hpp"
#include "OpaqueExpression.hpp"
#include "EnumerationLiteral.hpp"
#include "PrimitiveType.hpp"
#include "FunctionBehavior.hpp"

#include "Association.hpp"
#include "Class.hpp"
#include "Comment.hpp"
#include "Constraint.hpp"
#include "Enumeration.hpp"
#include "EnumerationLiteral.hpp"
#include "Generalization.hpp"
#include "InstanceValue.hpp"
#include "Interface.hpp"
#include "LiteralBoolean.hpp"
#include "LiteralInteger.hpp"
#include "LiteralUnlimitedNatural.hpp"
#include "OpaqueExpression.hpp"
#include "Operation.hpp"
#include "PackageImport.hpp"
#include "Parameter.hpp"
#include "PrimitiveType.hpp"
#include "ProfileApplication.hpp"
#include "Property.hpp"
#include "TemplateBinding.hpp"
#include "TemplateParameterSubstitution.hpp"
//metamodel factory
#include "UmlFactory.hpp"

//depending model packages
#include "ecoreReflection/EcorePackage.hpp"
#include "ecoreReflection/EcorePackage.hpp"
#include "primitivetypesReflection/PrimitiveTypesPackage.hpp"

#include "EAttribute.hpp"
#include "EReference.hpp"


using namespace UML;

UMLPackageImpl::UMLPackageImpl()
{
}

UMLPackageImpl::~UMLPackageImpl()
{
}

bool UMLPackageImpl::isInited = false;

UMLPackage* UMLPackageImpl::create()
{
	if (isInited)
	{
		return UMLPackage::eInstance().get();
	}
	isInited = true;
	
    // Obtain or create and register package, create package meta-data objects
    UMLPackageImpl * metaModelPackage = new UMLPackageImpl();
	metaModelPackage->initMetaModel();
    metaModelPackage->createPackageContents();
    return metaModelPackage;
}

void UMLPackageImpl::init()
{
    // Initialize created meta-data
    initializePackageContents();   
}

void UMLPackageImpl::initMetaModel()
{
}

void UMLPackageImpl::createPackageContents()
{
	if (isCreated)
	{
		return;
	}
	isCreated = true;

	struct null_deleter{void operator()(void const *) const {} };
	std::shared_ptr<UMLPackageImpl> uML = std::shared_ptr<UMLPackageImpl>(this, null_deleter());
	std::shared_ptr<uml::Constraint> con = nullptr;
	std::shared_ptr<uml::OpaqueExpression> oe = nullptr;
	
	uML_A_action_actionExecutionSpecification_actionExecutionSpecification_lowerValue_LiteralInteger_UML_A_action_actionExecutionSpecification_actionExecutionSpecification.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_action_actionExecutionSpecification_actionExecutionSpecification_lowerValue_LiteralInteger_UML_A_action_actionExecutionSpecification_actionExecutionSpecification->setValue(0);
	
	uML_A_action_actionExecutionSpecification_actionExecutionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_action_actionExecutionSpecification_actionExecutionSpecification.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_action_actionExecutionSpecification_actionExecutionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_action_actionExecutionSpecification_actionExecutionSpecification->setValue(-1);
	
	uML_A_action_interaction_interaction_lowerValue_LiteralInteger_UML_A_action_interaction_interaction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_action_interaction_interaction_lowerValue_LiteralInteger_UML_A_action_interaction_interaction->setValue(0);
	
	uML_A_actualGate_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_actualGate_interactionUse_interactionUse.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_actualGate_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_actualGate_interactionUse_interactionUse->setValue(0);
	
	uML_A_actual_templateParameterSubstitution_templateParameterSubstitution_lowerValue_LiteralInteger_UML_A_actual_templateParameterSubstitution_templateParameterSubstitution.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_actual_templateParameterSubstitution_templateParameterSubstitution_lowerValue_LiteralInteger_UML_A_actual_templateParameterSubstitution_templateParameterSubstitution->setValue(0);
	
	uML_A_actual_templateParameterSubstitution_templateParameterSubstitution_upperValue_LiteralUnlimitedNatural_UML_A_actual_templateParameterSubstitution_templateParameterSubstitution.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_actual_templateParameterSubstitution_templateParameterSubstitution_upperValue_LiteralUnlimitedNatural_UML_A_actual_templateParameterSubstitution_templateParameterSubstitution->setValue(-1);
	
	uML_A_addition_include_include_lowerValue_LiteralInteger_UML_A_addition_include_include.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_addition_include_include_lowerValue_LiteralInteger_UML_A_addition_include_include->setValue(0);
	
	uML_A_addition_include_include_upperValue_LiteralUnlimitedNatural_UML_A_addition_include_include.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_addition_include_include_upperValue_LiteralUnlimitedNatural_UML_A_addition_include_include->setValue(-1);
	
	uML_A_annotatedElement_comment_comment_lowerValue_LiteralInteger_UML_A_annotatedElement_comment_comment.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_annotatedElement_comment_comment_lowerValue_LiteralInteger_UML_A_annotatedElement_comment_comment->setValue(0);
	
	uML_A_annotatedElement_comment_comment_upperValue_LiteralUnlimitedNatural_UML_A_annotatedElement_comment_comment.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_annotatedElement_comment_comment_upperValue_LiteralUnlimitedNatural_UML_A_annotatedElement_comment_comment->setValue(-1);
	
	uML_A_appliedProfile_profileApplication_profileApplication_lowerValue_LiteralInteger_UML_A_appliedProfile_profileApplication_profileApplication.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_appliedProfile_profileApplication_profileApplication_lowerValue_LiteralInteger_UML_A_appliedProfile_profileApplication_profileApplication->setValue(0);
	
	uML_A_appliedProfile_profileApplication_profileApplication_upperValue_LiteralUnlimitedNatural_UML_A_appliedProfile_profileApplication_profileApplication.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_appliedProfile_profileApplication_profileApplication_upperValue_LiteralUnlimitedNatural_UML_A_appliedProfile_profileApplication_profileApplication->setValue(-1);
	
	uML_A_argument_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_argument_interactionUse_interactionUse.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_argument_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_argument_interactionUse_interactionUse->setValue(0);
	
	uML_A_argument_invocationAction_invocationAction_lowerValue_LiteralInteger_UML_A_argument_invocationAction_invocationAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_argument_invocationAction_invocationAction_lowerValue_LiteralInteger_UML_A_argument_invocationAction_invocationAction->setValue(0);
	
	uML_A_argument_message_message_lowerValue_LiteralInteger_UML_A_argument_message_message.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_argument_message_message_lowerValue_LiteralInteger_UML_A_argument_message_message->setValue(0);
	
	uML_A_association_clearAssociationAction_clearAssociationAction_lowerValue_LiteralInteger_UML_A_association_clearAssociationAction_clearAssociationAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_association_clearAssociationAction_clearAssociationAction_lowerValue_LiteralInteger_UML_A_association_clearAssociationAction_clearAssociationAction->setValue(0);
	
	uML_A_attribute_classifier_classifier_lowerValue_LiteralInteger_UML_A_attribute_classifier_classifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_attribute_classifier_classifier_lowerValue_LiteralInteger_UML_A_attribute_classifier_classifier->setValue(0);
	
	uML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification_lowerValue_LiteralInteger_UML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification_lowerValue_LiteralInteger_UML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification->setValue(0);
	
	uML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification->setValue(-1);
	
	uML_A_behavior_callBehaviorAction_callBehaviorAction_lowerValue_LiteralInteger_UML_A_behavior_callBehaviorAction_callBehaviorAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_behavior_callBehaviorAction_callBehaviorAction_lowerValue_LiteralInteger_UML_A_behavior_callBehaviorAction_callBehaviorAction->setValue(0);
	
	uML_A_behavior_callBehaviorAction_callBehaviorAction_upperValue_LiteralUnlimitedNatural_UML_A_behavior_callBehaviorAction_callBehaviorAction.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_behavior_callBehaviorAction_callBehaviorAction_upperValue_LiteralUnlimitedNatural_UML_A_behavior_callBehaviorAction_callBehaviorAction->setValue(-1);
	
	uML_A_behavior_opaqueExpression_opaqueExpression_lowerValue_LiteralInteger_UML_A_behavior_opaqueExpression_opaqueExpression.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_behavior_opaqueExpression_opaqueExpression_lowerValue_LiteralInteger_UML_A_behavior_opaqueExpression_opaqueExpression->setValue(0);
	
	uML_A_behavior_opaqueExpression_opaqueExpression_upperValue_LiteralUnlimitedNatural_UML_A_behavior_opaqueExpression_opaqueExpression.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_behavior_opaqueExpression_opaqueExpression_upperValue_LiteralUnlimitedNatural_UML_A_behavior_opaqueExpression_opaqueExpression->setValue(-1);
	
	uML_A_bodyCondition_bodyContext_bodyContext_lowerValue_LiteralInteger_UML_A_bodyCondition_bodyContext_bodyContext.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_bodyCondition_bodyContext_bodyContext_lowerValue_LiteralInteger_UML_A_bodyCondition_bodyContext_bodyContext->setValue(0);
	
	uML_A_bodyOutput_clause_clause_lowerValue_LiteralInteger_UML_A_bodyOutput_clause_clause.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_bodyOutput_clause_clause_lowerValue_LiteralInteger_UML_A_bodyOutput_clause_clause->setValue(0);
	
	uML_A_bodyOutput_clause_clause_upperValue_LiteralUnlimitedNatural_UML_A_bodyOutput_clause_clause.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_bodyOutput_clause_clause_upperValue_LiteralUnlimitedNatural_UML_A_bodyOutput_clause_clause->setValue(-1);
	
	uML_A_bodyOutput_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_bodyOutput_loopNode_loopNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_bodyOutput_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_bodyOutput_loopNode_loopNode->setValue(0);
	
	uML_A_bodyOutput_loopNode_loopNode_upperValue_LiteralUnlimitedNatural_UML_A_bodyOutput_loopNode_loopNode.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_bodyOutput_loopNode_loopNode_upperValue_LiteralUnlimitedNatural_UML_A_bodyOutput_loopNode_loopNode->setValue(-1);
	
	uML_A_bodyPart_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_bodyPart_loopNode_loopNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_bodyPart_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_bodyPart_loopNode_loopNode->setValue(0);
	
	uML_A_body_clause_clause_lowerValue_LiteralInteger_UML_A_body_clause_clause.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_body_clause_clause_lowerValue_LiteralInteger_UML_A_body_clause_clause->setValue(0);
	
	uML_A_cfragmentGate_combinedFragment_combinedFragment_lowerValue_LiteralInteger_UML_A_cfragmentGate_combinedFragment_combinedFragment.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_cfragmentGate_combinedFragment_combinedFragment_lowerValue_LiteralInteger_UML_A_cfragmentGate_combinedFragment_combinedFragment->setValue(0);
	
	uML_A_changeExpression_changeEvent_changeEvent_lowerValue_LiteralInteger_UML_A_changeExpression_changeEvent_changeEvent.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_changeExpression_changeEvent_changeEvent_lowerValue_LiteralInteger_UML_A_changeExpression_changeEvent_changeEvent->setValue(0);
	
	uML_A_classifierBehavior_behavioredClassifier_behavioredClassifier_lowerValue_LiteralInteger_UML_A_classifierBehavior_behavioredClassifier_behavioredClassifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_classifierBehavior_behavioredClassifier_behavioredClassifier_lowerValue_LiteralInteger_UML_A_classifierBehavior_behavioredClassifier_behavioredClassifier->setValue(0);
	
	uML_A_classifier_createObjectAction_createObjectAction_lowerValue_LiteralInteger_UML_A_classifier_createObjectAction_createObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_classifier_createObjectAction_createObjectAction_lowerValue_LiteralInteger_UML_A_classifier_createObjectAction_createObjectAction->setValue(0);
	
	uML_A_classifier_createObjectAction_createObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_classifier_createObjectAction_createObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_classifier_createObjectAction_createObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_classifier_createObjectAction_createObjectAction->setValue(-1);
	
	uML_A_classifier_enumerationLiteral_enumerationLiteral_lowerValue_LiteralInteger_UML_A_classifier_enumerationLiteral_enumerationLiteral.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_classifier_enumerationLiteral_enumerationLiteral_lowerValue_LiteralInteger_UML_A_classifier_enumerationLiteral_enumerationLiteral->setValue(0);
	
	uML_A_classifier_enumerationLiteral_enumerationLiteral_upperValue_LiteralUnlimitedNatural_UML_A_classifier_enumerationLiteral_enumerationLiteral.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_classifier_enumerationLiteral_enumerationLiteral_upperValue_LiteralUnlimitedNatural_UML_A_classifier_enumerationLiteral_enumerationLiteral->setValue(-1);
	
	uML_A_classifier_instanceSpecification_instanceSpecification_lowerValue_LiteralInteger_UML_A_classifier_instanceSpecification_instanceSpecification.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_classifier_instanceSpecification_instanceSpecification_lowerValue_LiteralInteger_UML_A_classifier_instanceSpecification_instanceSpecification->setValue(0);
	
	uML_A_classifier_instanceSpecification_instanceSpecification_upperValue_LiteralUnlimitedNatural_UML_A_classifier_instanceSpecification_instanceSpecification.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_classifier_instanceSpecification_instanceSpecification_upperValue_LiteralUnlimitedNatural_UML_A_classifier_instanceSpecification_instanceSpecification->setValue(-1);
	
	uML_A_classifier_readExtentAction_readExtentAction_lowerValue_LiteralInteger_UML_A_classifier_readExtentAction_readExtentAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_classifier_readExtentAction_readExtentAction_lowerValue_LiteralInteger_UML_A_classifier_readExtentAction_readExtentAction->setValue(0);
	
	uML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction_lowerValue_LiteralInteger_UML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction_lowerValue_LiteralInteger_UML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction->setValue(0);
	
	uML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction->setValue(-1);
	
	uML_A_clientDependency_client_dependency_lowerValue_LiteralInteger_UML_A_clientDependency_client_dependency.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_clientDependency_client_dependency_lowerValue_LiteralInteger_UML_A_clientDependency_client_dependency->setValue(0);
	
	uML_A_clientDependency_client_dependency_upperValue_LiteralUnlimitedNatural_UML_A_clientDependency_client_dependency.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_clientDependency_client_dependency_upperValue_LiteralUnlimitedNatural_UML_A_clientDependency_client_dependency->setValue(-1);
	
	uML_A_collaborationRole_collaboration_collaboration_lowerValue_LiteralInteger_UML_A_collaborationRole_collaboration_collaboration.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_collaborationRole_collaboration_collaboration_lowerValue_LiteralInteger_UML_A_collaborationRole_collaboration_collaboration->setValue(0);
	
	uML_A_collaborationRole_collaboration_collaboration_upperValue_LiteralUnlimitedNatural_UML_A_collaborationRole_collaboration_collaboration.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_collaborationRole_collaboration_collaboration_upperValue_LiteralUnlimitedNatural_UML_A_collaborationRole_collaboration_collaboration->setValue(-1);
	
	uML_A_collaborationUse_classifier_classifier_lowerValue_LiteralInteger_UML_A_collaborationUse_classifier_classifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_collaborationUse_classifier_classifier_lowerValue_LiteralInteger_UML_A_collaborationUse_classifier_classifier->setValue(0);
	
	uML_A_collection_reduceAction_reduceAction_lowerValue_LiteralInteger_UML_A_collection_reduceAction_reduceAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_collection_reduceAction_reduceAction_lowerValue_LiteralInteger_UML_A_collection_reduceAction_reduceAction->setValue(0);
	
	uML_A_condition_extend_extend_lowerValue_LiteralInteger_UML_A_condition_extend_extend.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_condition_extend_extend_lowerValue_LiteralInteger_UML_A_condition_extend_extend->setValue(0);
	
	uML_A_condition_parameterSet_parameterSet_lowerValue_LiteralInteger_UML_A_condition_parameterSet_parameterSet.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_condition_parameterSet_parameterSet_lowerValue_LiteralInteger_UML_A_condition_parameterSet_parameterSet->setValue(0);
	
	uML_A_connector_message_message_lowerValue_LiteralInteger_UML_A_connector_message_message.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_connector_message_message_lowerValue_LiteralInteger_UML_A_connector_message_message->setValue(0);
	
	uML_A_connector_message_message_upperValue_LiteralUnlimitedNatural_UML_A_connector_message_message.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_connector_message_message_upperValue_LiteralUnlimitedNatural_UML_A_connector_message_message->setValue(-1);
	
	uML_A_constrainedElement_constraint_constraint_lowerValue_LiteralInteger_UML_A_constrainedElement_constraint_constraint.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_constrainedElement_constraint_constraint_lowerValue_LiteralInteger_UML_A_constrainedElement_constraint_constraint->setValue(0);
	
	uML_A_constrainedElement_constraint_constraint_upperValue_LiteralUnlimitedNatural_UML_A_constrainedElement_constraint_constraint.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_constrainedElement_constraint_constraint_upperValue_LiteralUnlimitedNatural_UML_A_constrainedElement_constraint_constraint->setValue(-1);
	
	uML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter_lowerValue_LiteralInteger_UML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter_lowerValue_LiteralInteger_UML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter->setValue(0);
	
	uML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter_upperValue_LiteralUnlimitedNatural_UML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter_upperValue_LiteralUnlimitedNatural_UML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter->setValue(-1);
	
	uML_A_context_action_action_lowerValue_LiteralInteger_UML_A_context_action_action.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_context_action_action_lowerValue_LiteralInteger_UML_A_context_action_action->setValue(0);
	
	uML_A_context_action_action_upperValue_LiteralUnlimitedNatural_UML_A_context_action_action.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_context_action_action_upperValue_LiteralUnlimitedNatural_UML_A_context_action_action->setValue(-1);
	
	uML_A_context_behavior_behavior_lowerValue_LiteralInteger_UML_A_context_behavior_behavior.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_context_behavior_behavior_lowerValue_LiteralInteger_UML_A_context_behavior_behavior->setValue(0);
	
	uML_A_context_behavior_behavior_upperValue_LiteralUnlimitedNatural_UML_A_context_behavior_behavior.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_context_behavior_behavior_upperValue_LiteralUnlimitedNatural_UML_A_context_behavior_behavior->setValue(-1);
	
	uML_A_contract_connector_connector_lowerValue_LiteralInteger_UML_A_contract_connector_connector.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_contract_connector_connector_lowerValue_LiteralInteger_UML_A_contract_connector_connector->setValue(0);
	
	uML_A_contract_connector_connector_upperValue_LiteralUnlimitedNatural_UML_A_contract_connector_connector.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_contract_connector_connector_upperValue_LiteralUnlimitedNatural_UML_A_contract_connector_connector->setValue(-1);
	
	uML_A_contract_interfaceRealization_interfaceRealization_lowerValue_LiteralInteger_UML_A_contract_interfaceRealization_interfaceRealization.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_contract_interfaceRealization_interfaceRealization_lowerValue_LiteralInteger_UML_A_contract_interfaceRealization_interfaceRealization->setValue(0);
	
	uML_A_contract_interfaceRealization_interfaceRealization_upperValue_LiteralUnlimitedNatural_UML_A_contract_interfaceRealization_interfaceRealization.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_contract_interfaceRealization_interfaceRealization_upperValue_LiteralUnlimitedNatural_UML_A_contract_interfaceRealization_interfaceRealization->setValue(-1);
	
	uML_A_contract_substitution_substitution_lowerValue_LiteralInteger_UML_A_contract_substitution_substitution.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_contract_substitution_substitution_lowerValue_LiteralInteger_UML_A_contract_substitution_substitution->setValue(0);
	
	uML_A_contract_substitution_substitution_upperValue_LiteralUnlimitedNatural_UML_A_contract_substitution_substitution.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_contract_substitution_substitution_upperValue_LiteralUnlimitedNatural_UML_A_contract_substitution_substitution->setValue(-1);
	
	uML_A_conveyed_conveyingFlow_conveyingFlow_lowerValue_LiteralInteger_UML_A_conveyed_conveyingFlow_conveyingFlow.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_conveyed_conveyingFlow_conveyingFlow_lowerValue_LiteralInteger_UML_A_conveyed_conveyingFlow_conveyingFlow->setValue(0);
	
	uML_A_conveyed_conveyingFlow_conveyingFlow_upperValue_LiteralUnlimitedNatural_UML_A_conveyed_conveyingFlow_conveyingFlow.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_conveyed_conveyingFlow_conveyingFlow_upperValue_LiteralUnlimitedNatural_UML_A_conveyed_conveyingFlow_conveyingFlow->setValue(-1);
	
	uML_A_covered_events_events_lowerValue_LiteralInteger_UML_A_covered_events_events.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_covered_events_events_lowerValue_LiteralInteger_UML_A_covered_events_events->setValue(0);
	
	uML_A_covered_events_events_upperValue_LiteralUnlimitedNatural_UML_A_covered_events_events.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_covered_events_events_upperValue_LiteralUnlimitedNatural_UML_A_covered_events_events->setValue(-1);
	
	uML_A_covered_stateInvariant_stateInvariant_lowerValue_LiteralInteger_UML_A_covered_stateInvariant_stateInvariant.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_covered_stateInvariant_stateInvariant_lowerValue_LiteralInteger_UML_A_covered_stateInvariant_stateInvariant->setValue(0);
	
	uML_A_covered_stateInvariant_stateInvariant_upperValue_LiteralUnlimitedNatural_UML_A_covered_stateInvariant_stateInvariant.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_covered_stateInvariant_stateInvariant_upperValue_LiteralUnlimitedNatural_UML_A_covered_stateInvariant_stateInvariant->setValue(-1);
	
	uML_A_decider_clause_clause_lowerValue_LiteralInteger_UML_A_decider_clause_clause.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_decider_clause_clause_lowerValue_LiteralInteger_UML_A_decider_clause_clause->setValue(0);
	
	uML_A_decider_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_decider_loopNode_loopNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_decider_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_decider_loopNode_loopNode->setValue(0);
	
	uML_A_decisionInputFlow_decisionNode_decisionNode_lowerValue_LiteralInteger_UML_A_decisionInputFlow_decisionNode_decisionNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_decisionInputFlow_decisionNode_decisionNode_lowerValue_LiteralInteger_UML_A_decisionInputFlow_decisionNode_decisionNode->setValue(0);
	
	uML_A_decisionInput_decisionNode_decisionNode_lowerValue_LiteralInteger_UML_A_decisionInput_decisionNode_decisionNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_decisionInput_decisionNode_decisionNode_lowerValue_LiteralInteger_UML_A_decisionInput_decisionNode_decisionNode->setValue(0);
	
	uML_A_decisionInput_decisionNode_decisionNode_upperValue_LiteralUnlimitedNatural_UML_A_decisionInput_decisionNode_decisionNode.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_decisionInput_decisionNode_decisionNode_upperValue_LiteralUnlimitedNatural_UML_A_decisionInput_decisionNode_decisionNode->setValue(-1);
	
	uML_A_defaultValue_owningParameter_owningParameter_lowerValue_LiteralInteger_UML_A_defaultValue_owningParameter_owningParameter.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_defaultValue_owningParameter_owningParameter_lowerValue_LiteralInteger_UML_A_defaultValue_owningParameter_owningParameter->setValue(0);
	
	uML_A_defaultValue_owningProperty_owningProperty_lowerValue_LiteralInteger_UML_A_defaultValue_owningProperty_owningProperty.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_defaultValue_owningProperty_owningProperty_lowerValue_LiteralInteger_UML_A_defaultValue_owningProperty_owningProperty->setValue(0);
	
	uML_A_default_templateParameter_templateParameter_lowerValue_LiteralInteger_UML_A_default_templateParameter_templateParameter.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_default_templateParameter_templateParameter_lowerValue_LiteralInteger_UML_A_default_templateParameter_templateParameter->setValue(0);
	
	uML_A_default_templateParameter_templateParameter_upperValue_LiteralUnlimitedNatural_UML_A_default_templateParameter_templateParameter.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_default_templateParameter_templateParameter_upperValue_LiteralUnlimitedNatural_UML_A_default_templateParameter_templateParameter->setValue(-1);
	
	uML_A_deferrableTrigger_state_state_lowerValue_LiteralInteger_UML_A_deferrableTrigger_state_state.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_deferrableTrigger_state_state_lowerValue_LiteralInteger_UML_A_deferrableTrigger_state_state->setValue(0);
	
	uML_A_definingEnd_connectorEnd_connectorEnd_lowerValue_LiteralInteger_UML_A_definingEnd_connectorEnd_connectorEnd.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_definingEnd_connectorEnd_connectorEnd_lowerValue_LiteralInteger_UML_A_definingEnd_connectorEnd_connectorEnd->setValue(0);
	
	uML_A_definingEnd_connectorEnd_connectorEnd_upperValue_LiteralUnlimitedNatural_UML_A_definingEnd_connectorEnd_connectorEnd.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_definingEnd_connectorEnd_connectorEnd_upperValue_LiteralUnlimitedNatural_UML_A_definingEnd_connectorEnd_connectorEnd->setValue(-1);
	
	uML_A_definingFeature_slot_slot_lowerValue_LiteralInteger_UML_A_definingFeature_slot_slot.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_definingFeature_slot_slot_lowerValue_LiteralInteger_UML_A_definingFeature_slot_slot->setValue(0);
	
	uML_A_definingFeature_slot_slot_upperValue_LiteralUnlimitedNatural_UML_A_definingFeature_slot_slot.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_definingFeature_slot_slot_upperValue_LiteralUnlimitedNatural_UML_A_definingFeature_slot_slot->setValue(-1);
	
	uML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact_lowerValue_LiteralInteger_UML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact_lowerValue_LiteralInteger_UML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact->setValue(0);
	
	uML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact_upperValue_LiteralUnlimitedNatural_UML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact_upperValue_LiteralUnlimitedNatural_UML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact->setValue(-1);
	
	uML_A_deployedElement_deploymentTarget_deploymentTarget_lowerValue_LiteralInteger_UML_A_deployedElement_deploymentTarget_deploymentTarget.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_deployedElement_deploymentTarget_deploymentTarget_lowerValue_LiteralInteger_UML_A_deployedElement_deploymentTarget_deploymentTarget->setValue(0);
	
	uML_A_deployedElement_deploymentTarget_deploymentTarget_upperValue_LiteralUnlimitedNatural_UML_A_deployedElement_deploymentTarget_deploymentTarget.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_deployedElement_deploymentTarget_deploymentTarget_upperValue_LiteralUnlimitedNatural_UML_A_deployedElement_deploymentTarget_deploymentTarget->setValue(-1);
	
	uML_A_destroyAt_linkEndDestructionData_linkEndDestructionData_lowerValue_LiteralInteger_UML_A_destroyAt_linkEndDestructionData_linkEndDestructionData.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_destroyAt_linkEndDestructionData_linkEndDestructionData_lowerValue_LiteralInteger_UML_A_destroyAt_linkEndDestructionData_linkEndDestructionData->setValue(0);
	
	uML_A_doActivity_state_state_lowerValue_LiteralInteger_UML_A_doActivity_state_state.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_doActivity_state_state_lowerValue_LiteralInteger_UML_A_doActivity_state_state->setValue(0);
	
	uML_A_effect_transition_transition_lowerValue_LiteralInteger_UML_A_effect_transition_transition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_effect_transition_transition_lowerValue_LiteralInteger_UML_A_effect_transition_transition->setValue(0);
	
	uML_A_endType_association_association_lowerValue_LiteralInteger_UML_A_endType_association_association.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_endType_association_association_lowerValue_LiteralInteger_UML_A_endType_association_association->setValue(0);
	
	uML_A_endType_association_association_upperValue_LiteralUnlimitedNatural_UML_A_endType_association_association.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_endType_association_association_upperValue_LiteralUnlimitedNatural_UML_A_endType_association_association->setValue(-1);
	
	uML_A_end_linkEndData_linkEndData_lowerValue_LiteralInteger_UML_A_end_linkEndData_linkEndData.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_end_linkEndData_linkEndData_lowerValue_LiteralInteger_UML_A_end_linkEndData_linkEndData->setValue(0);
	
	uML_A_end_linkEndData_linkEndData_upperValue_LiteralUnlimitedNatural_UML_A_end_linkEndData_linkEndData.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_end_linkEndData_linkEndData_upperValue_LiteralUnlimitedNatural_UML_A_end_linkEndData_linkEndData->setValue(-1);
	
	uML_A_end_readLinkObjectEndAction_readLinkObjectEndAction_lowerValue_LiteralInteger_UML_A_end_readLinkObjectEndAction_readLinkObjectEndAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_end_readLinkObjectEndAction_readLinkObjectEndAction_lowerValue_LiteralInteger_UML_A_end_readLinkObjectEndAction_readLinkObjectEndAction->setValue(0);
	
	uML_A_end_role_end_lowerValue_LiteralInteger_UML_A_end_role_end.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_end_role_end_lowerValue_LiteralInteger_UML_A_end_role_end->setValue(0);
	
	uML_A_end_role_end_upperValue_LiteralUnlimitedNatural_UML_A_end_role_end.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_end_role_end_upperValue_LiteralUnlimitedNatural_UML_A_end_role_end->setValue(-1);
	
	uML_A_entry_connectionPointReference_connectionPointReference_lowerValue_LiteralInteger_UML_A_entry_connectionPointReference_connectionPointReference.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_entry_connectionPointReference_connectionPointReference_lowerValue_LiteralInteger_UML_A_entry_connectionPointReference_connectionPointReference->setValue(0);
	
	uML_A_entry_state_state_lowerValue_LiteralInteger_UML_A_entry_state_state.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_entry_state_state_lowerValue_LiteralInteger_UML_A_entry_state_state->setValue(0);
	
	uML_A_event_durationObservation_durationObservation_lowerValue_LiteralInteger_UML_A_event_durationObservation_durationObservation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_event_durationObservation_durationObservation_lowerValue_LiteralInteger_UML_A_event_durationObservation_durationObservation->setValue(0);
	
	uML_A_event_durationObservation_durationObservation_upperValue_LiteralUnlimitedNatural_UML_A_event_durationObservation_durationObservation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_event_durationObservation_durationObservation_upperValue_LiteralUnlimitedNatural_UML_A_event_durationObservation_durationObservation->setValue(-1);
	
	uML_A_event_timeObservation_timeObservation_lowerValue_LiteralInteger_UML_A_event_timeObservation_timeObservation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_event_timeObservation_timeObservation_lowerValue_LiteralInteger_UML_A_event_timeObservation_timeObservation->setValue(0);
	
	uML_A_event_timeObservation_timeObservation_upperValue_LiteralUnlimitedNatural_UML_A_event_timeObservation_timeObservation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_event_timeObservation_timeObservation_upperValue_LiteralUnlimitedNatural_UML_A_event_timeObservation_timeObservation->setValue(-1);
	
	uML_A_event_trigger_trigger_lowerValue_LiteralInteger_UML_A_event_trigger_trigger.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_event_trigger_trigger_lowerValue_LiteralInteger_UML_A_event_trigger_trigger->setValue(0);
	
	uML_A_event_trigger_trigger_upperValue_LiteralUnlimitedNatural_UML_A_event_trigger_trigger.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_event_trigger_trigger_upperValue_LiteralUnlimitedNatural_UML_A_event_trigger_trigger->setValue(-1);
	
	uML_A_exceptionInput_exceptionHandler_exceptionHandler_lowerValue_LiteralInteger_UML_A_exceptionInput_exceptionHandler_exceptionHandler.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_exceptionInput_exceptionHandler_exceptionHandler_lowerValue_LiteralInteger_UML_A_exceptionInput_exceptionHandler_exceptionHandler->setValue(0);
	
	uML_A_exceptionInput_exceptionHandler_exceptionHandler_upperValue_LiteralUnlimitedNatural_UML_A_exceptionInput_exceptionHandler_exceptionHandler.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_exceptionInput_exceptionHandler_exceptionHandler_upperValue_LiteralUnlimitedNatural_UML_A_exceptionInput_exceptionHandler_exceptionHandler->setValue(-1);
	
	uML_A_exceptionType_exceptionHandler_exceptionHandler_lowerValue_LiteralInteger_UML_A_exceptionType_exceptionHandler_exceptionHandler.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_exceptionType_exceptionHandler_exceptionHandler_lowerValue_LiteralInteger_UML_A_exceptionType_exceptionHandler_exceptionHandler->setValue(0);
	
	uML_A_exceptionType_exceptionHandler_exceptionHandler_upperValue_LiteralUnlimitedNatural_UML_A_exceptionType_exceptionHandler_exceptionHandler.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_exceptionType_exceptionHandler_exceptionHandler_upperValue_LiteralUnlimitedNatural_UML_A_exceptionType_exceptionHandler_exceptionHandler->setValue(-1);
	
	uML_A_exception_raiseExceptionAction_raiseExceptionAction_lowerValue_LiteralInteger_UML_A_exception_raiseExceptionAction_raiseExceptionAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_exception_raiseExceptionAction_raiseExceptionAction_lowerValue_LiteralInteger_UML_A_exception_raiseExceptionAction_raiseExceptionAction->setValue(0);
	
	uML_A_executableNode_sequenceNode_sequenceNode_lowerValue_LiteralInteger_UML_A_executableNode_sequenceNode_sequenceNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_executableNode_sequenceNode_sequenceNode_lowerValue_LiteralInteger_UML_A_executableNode_sequenceNode_sequenceNode->setValue(0);
	
	uML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification_lowerValue_LiteralInteger_UML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification_lowerValue_LiteralInteger_UML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification->setValue(0);
	
	uML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification_upperValue_LiteralUnlimitedNatural_UML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification_upperValue_LiteralUnlimitedNatural_UML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification->setValue(2);
	
	uML_A_exit_connectionPointReference_connectionPointReference_lowerValue_LiteralInteger_UML_A_exit_connectionPointReference_connectionPointReference.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_exit_connectionPointReference_connectionPointReference_lowerValue_LiteralInteger_UML_A_exit_connectionPointReference_connectionPointReference->setValue(0);
	
	uML_A_exit_state_state_lowerValue_LiteralInteger_UML_A_exit_state_state.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_exit_state_state_lowerValue_LiteralInteger_UML_A_exit_state_state->setValue(0);
	
	uML_A_expr_duration_duration_lowerValue_LiteralInteger_UML_A_expr_duration_duration.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_expr_duration_duration_lowerValue_LiteralInteger_UML_A_expr_duration_duration->setValue(0);
	
	uML_A_expr_timeExpression_timeExpression_lowerValue_LiteralInteger_UML_A_expr_timeExpression_timeExpression.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_expr_timeExpression_timeExpression_lowerValue_LiteralInteger_UML_A_expr_timeExpression_timeExpression->setValue(0);
	
	uML_A_extendedCase_extend_extend_lowerValue_LiteralInteger_UML_A_extendedCase_extend_extend.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_extendedCase_extend_extend_lowerValue_LiteralInteger_UML_A_extendedCase_extend_extend->setValue(0);
	
	uML_A_extendedCase_extend_extend_upperValue_LiteralUnlimitedNatural_UML_A_extendedCase_extend_extend.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_extendedCase_extend_extend_upperValue_LiteralUnlimitedNatural_UML_A_extendedCase_extend_extend->setValue(-1);
	
	uML_A_extendedRegion_region_region_lowerValue_LiteralInteger_UML_A_extendedRegion_region_region.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_extendedRegion_region_region_lowerValue_LiteralInteger_UML_A_extendedRegion_region_region->setValue(0);
	
	uML_A_extendedRegion_region_region_upperValue_LiteralUnlimitedNatural_UML_A_extendedRegion_region_region.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_extendedRegion_region_region_upperValue_LiteralUnlimitedNatural_UML_A_extendedRegion_region_region->setValue(-1);
	
	uML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature_lowerValue_LiteralInteger_UML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature_lowerValue_LiteralInteger_UML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature->setValue(0);
	
	uML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature_upperValue_LiteralUnlimitedNatural_UML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature_upperValue_LiteralUnlimitedNatural_UML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature->setValue(-1);
	
	uML_A_extendedStateMachine_stateMachine_stateMachine_lowerValue_LiteralInteger_UML_A_extendedStateMachine_stateMachine_stateMachine.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_extendedStateMachine_stateMachine_stateMachine_lowerValue_LiteralInteger_UML_A_extendedStateMachine_stateMachine_stateMachine->setValue(0);
	
	uML_A_extendedStateMachine_stateMachine_stateMachine_upperValue_LiteralUnlimitedNatural_UML_A_extendedStateMachine_stateMachine_stateMachine.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_extendedStateMachine_stateMachine_stateMachine_upperValue_LiteralUnlimitedNatural_UML_A_extendedStateMachine_stateMachine_stateMachine->setValue(-1);
	
	uML_A_extensionLocation_extension_extension_lowerValue_LiteralInteger_UML_A_extensionLocation_extension_extension.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_extensionLocation_extension_extension_lowerValue_LiteralInteger_UML_A_extensionLocation_extension_extension->setValue(0);
	
	uML_A_extensionLocation_extension_extension_upperValue_LiteralUnlimitedNatural_UML_A_extensionLocation_extension_extension.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_extensionLocation_extension_extension_upperValue_LiteralUnlimitedNatural_UML_A_extensionLocation_extension_extension->setValue(-1);
	
	uML_A_finish_executionSpecification_executionSpecification_lowerValue_LiteralInteger_UML_A_finish_executionSpecification_executionSpecification.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_finish_executionSpecification_executionSpecification_lowerValue_LiteralInteger_UML_A_finish_executionSpecification_executionSpecification->setValue(0);
	
	uML_A_finish_executionSpecification_executionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_finish_executionSpecification_executionSpecification.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_finish_executionSpecification_executionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_finish_executionSpecification_executionSpecification->setValue(-1);
	
	uML_A_first_testIdentityAction_testIdentityAction_lowerValue_LiteralInteger_UML_A_first_testIdentityAction_testIdentityAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_first_testIdentityAction_testIdentityAction_lowerValue_LiteralInteger_UML_A_first_testIdentityAction_testIdentityAction->setValue(0);
	
	uML_A_formalGate_interaction_interaction_lowerValue_LiteralInteger_UML_A_formalGate_interaction_interaction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_formalGate_interaction_interaction_lowerValue_LiteralInteger_UML_A_formalGate_interaction_interaction->setValue(0);
	
	uML_A_formal_templateParameterSubstitution_templateParameterSubstitution_lowerValue_LiteralInteger_UML_A_formal_templateParameterSubstitution_templateParameterSubstitution.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_formal_templateParameterSubstitution_templateParameterSubstitution_lowerValue_LiteralInteger_UML_A_formal_templateParameterSubstitution_templateParameterSubstitution->setValue(0);
	
	uML_A_formal_templateParameterSubstitution_templateParameterSubstitution_upperValue_LiteralUnlimitedNatural_UML_A_formal_templateParameterSubstitution_templateParameterSubstitution.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_formal_templateParameterSubstitution_templateParameterSubstitution_upperValue_LiteralUnlimitedNatural_UML_A_formal_templateParameterSubstitution_templateParameterSubstitution->setValue(-1);
	
	uML_A_fromAction_actionInputPin_actionInputPin_lowerValue_LiteralInteger_UML_A_fromAction_actionInputPin_actionInputPin.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_fromAction_actionInputPin_actionInputPin_lowerValue_LiteralInteger_UML_A_fromAction_actionInputPin_actionInputPin->setValue(0);
	
	uML_A_generalMachine_protocolConformance_protocolConformance_lowerValue_LiteralInteger_UML_A_generalMachine_protocolConformance_protocolConformance.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_generalMachine_protocolConformance_protocolConformance_lowerValue_LiteralInteger_UML_A_generalMachine_protocolConformance_protocolConformance->setValue(0);
	
	uML_A_generalMachine_protocolConformance_protocolConformance_upperValue_LiteralUnlimitedNatural_UML_A_generalMachine_protocolConformance_protocolConformance.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_generalMachine_protocolConformance_protocolConformance_upperValue_LiteralUnlimitedNatural_UML_A_generalMachine_protocolConformance_protocolConformance->setValue(-1);
	
	uML_A_generalOrdering_interactionFragment_interactionFragment_lowerValue_LiteralInteger_UML_A_generalOrdering_interactionFragment_interactionFragment.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_generalOrdering_interactionFragment_interactionFragment_lowerValue_LiteralInteger_UML_A_generalOrdering_interactionFragment_interactionFragment->setValue(0);
	
	uML_A_general_classifier_classifier_lowerValue_LiteralInteger_UML_A_general_classifier_classifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_general_classifier_classifier_lowerValue_LiteralInteger_UML_A_general_classifier_classifier->setValue(0);
	
	uML_A_general_classifier_classifier_upperValue_LiteralUnlimitedNatural_UML_A_general_classifier_classifier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_general_classifier_classifier_upperValue_LiteralUnlimitedNatural_UML_A_general_classifier_classifier->setValue(-1);
	
	uML_A_general_generalization_generalization_lowerValue_LiteralInteger_UML_A_general_generalization_generalization.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_general_generalization_generalization_lowerValue_LiteralInteger_UML_A_general_generalization_generalization->setValue(0);
	
	uML_A_general_generalization_generalization_upperValue_LiteralUnlimitedNatural_UML_A_general_generalization_generalization.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_general_generalization_generalization_upperValue_LiteralUnlimitedNatural_UML_A_general_generalization_generalization->setValue(-1);
	
	uML_A_guard_activityEdge_activityEdge_lowerValue_LiteralInteger_UML_A_guard_activityEdge_activityEdge.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_guard_activityEdge_activityEdge_lowerValue_LiteralInteger_UML_A_guard_activityEdge_activityEdge->setValue(0);
	
	uML_A_guard_transition_transition_lowerValue_LiteralInteger_UML_A_guard_transition_transition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_guard_transition_transition_lowerValue_LiteralInteger_UML_A_guard_transition_transition->setValue(0);
	
	uML_A_handlerBody_exceptionHandler_exceptionHandler_lowerValue_LiteralInteger_UML_A_handlerBody_exceptionHandler_exceptionHandler.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_handlerBody_exceptionHandler_exceptionHandler_lowerValue_LiteralInteger_UML_A_handlerBody_exceptionHandler_exceptionHandler->setValue(0);
	
	uML_A_handlerBody_exceptionHandler_exceptionHandler_upperValue_LiteralUnlimitedNatural_UML_A_handlerBody_exceptionHandler_exceptionHandler.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_handlerBody_exceptionHandler_exceptionHandler_upperValue_LiteralUnlimitedNatural_UML_A_handlerBody_exceptionHandler_exceptionHandler->setValue(-1);
	
	uML_A_icon_stereotype_stereotype_lowerValue_LiteralInteger_UML_A_icon_stereotype_stereotype.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_icon_stereotype_stereotype_lowerValue_LiteralInteger_UML_A_icon_stereotype_stereotype->setValue(0);
	
	uML_A_importedElement_import_import_lowerValue_LiteralInteger_UML_A_importedElement_import_import.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_importedElement_import_import_lowerValue_LiteralInteger_UML_A_importedElement_import_import->setValue(0);
	
	uML_A_importedElement_import_import_upperValue_LiteralUnlimitedNatural_UML_A_importedElement_import_import.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_importedElement_import_import_upperValue_LiteralUnlimitedNatural_UML_A_importedElement_import_import->setValue(-1);
	
	uML_A_importedMember_namespace_namespace_lowerValue_LiteralInteger_UML_A_importedMember_namespace_namespace.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_importedMember_namespace_namespace_lowerValue_LiteralInteger_UML_A_importedMember_namespace_namespace->setValue(0);
	
	uML_A_importedMember_namespace_namespace_upperValue_LiteralUnlimitedNatural_UML_A_importedMember_namespace_namespace.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_importedMember_namespace_namespace_upperValue_LiteralUnlimitedNatural_UML_A_importedMember_namespace_namespace->setValue(-1);
	
	uML_A_importedPackage_packageImport_packageImport_lowerValue_LiteralInteger_UML_A_importedPackage_packageImport_packageImport.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_importedPackage_packageImport_packageImport_lowerValue_LiteralInteger_UML_A_importedPackage_packageImport_packageImport->setValue(0);
	
	uML_A_importedPackage_packageImport_packageImport_upperValue_LiteralUnlimitedNatural_UML_A_importedPackage_packageImport_packageImport.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_importedPackage_packageImport_packageImport_upperValue_LiteralUnlimitedNatural_UML_A_importedPackage_packageImport_packageImport->setValue(-1);
	
	uML_A_inState_objectNode_objectNode_lowerValue_LiteralInteger_UML_A_inState_objectNode_objectNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_inState_objectNode_objectNode_lowerValue_LiteralInteger_UML_A_inState_objectNode_objectNode->setValue(0);
	
	uML_A_inState_objectNode_objectNode_upperValue_LiteralUnlimitedNatural_UML_A_inState_objectNode_objectNode.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_inState_objectNode_objectNode_upperValue_LiteralUnlimitedNatural_UML_A_inState_objectNode_objectNode->setValue(-1);
	
	uML_A_incoming_target_vertex_incoming_lowerValue_LiteralInteger_UML_A_incoming_target_vertex_incoming.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_incoming_target_vertex_incoming_lowerValue_LiteralInteger_UML_A_incoming_target_vertex_incoming->setValue(0);
	
	uML_A_incoming_target_vertex_incoming_upperValue_LiteralUnlimitedNatural_UML_A_incoming_target_vertex_incoming.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_incoming_target_vertex_incoming_upperValue_LiteralUnlimitedNatural_UML_A_incoming_target_vertex_incoming->setValue(-1);
	
	uML_A_informationSource_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_informationSource_informationFlow_informationFlow.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_informationSource_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_informationSource_informationFlow_informationFlow->setValue(0);
	
	uML_A_informationSource_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_informationSource_informationFlow_informationFlow.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_informationSource_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_informationSource_informationFlow_informationFlow->setValue(-1);
	
	uML_A_informationTarget_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_informationTarget_informationFlow_informationFlow.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_informationTarget_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_informationTarget_informationFlow_informationFlow->setValue(0);
	
	uML_A_informationTarget_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_informationTarget_informationFlow_informationFlow.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_informationTarget_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_informationTarget_informationFlow_informationFlow->setValue(-1);
	
	uML_A_inheritedMember_inheritingClassifier_inheritingClassifier_lowerValue_LiteralInteger_UML_A_inheritedMember_inheritingClassifier_inheritingClassifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_inheritedMember_inheritingClassifier_inheritingClassifier_lowerValue_LiteralInteger_UML_A_inheritedMember_inheritingClassifier_inheritingClassifier->setValue(0);
	
	uML_A_inheritedMember_inheritingClassifier_inheritingClassifier_upperValue_LiteralUnlimitedNatural_UML_A_inheritedMember_inheritingClassifier_inheritingClassifier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_inheritedMember_inheritingClassifier_inheritingClassifier_upperValue_LiteralUnlimitedNatural_UML_A_inheritedMember_inheritingClassifier_inheritingClassifier->setValue(-1);
	
	uML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature_lowerValue_LiteralInteger_UML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature_lowerValue_LiteralInteger_UML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature->setValue(0);
	
	uML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature_upperValue_LiteralUnlimitedNatural_UML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature_upperValue_LiteralUnlimitedNatural_UML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature->setValue(-1);
	
	uML_A_inputValue_linkAction_linkAction_lowerValue_LiteralInteger_UML_A_inputValue_linkAction_linkAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_inputValue_linkAction_linkAction_lowerValue_LiteralInteger_UML_A_inputValue_linkAction_linkAction->setValue(0);
	
	uML_A_inputValue_opaqueAction_opaqueAction_lowerValue_LiteralInteger_UML_A_inputValue_opaqueAction_opaqueAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_inputValue_opaqueAction_opaqueAction_lowerValue_LiteralInteger_UML_A_inputValue_opaqueAction_opaqueAction->setValue(0);
	
	uML_A_input_action_action_lowerValue_LiteralInteger_UML_A_input_action_action.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_input_action_action_lowerValue_LiteralInteger_UML_A_input_action_action->setValue(0);
	
	uML_A_insertAt_addStructuralFeatureValueAction_addStructuralFeatureValueAction_lowerValue_LiteralInteger_UML_A_insertAt_addStructuralFeatureValueAction_addStructuralFeatureValueAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_insertAt_addStructuralFeatureValueAction_addStructuralFeatureValueAction_lowerValue_LiteralInteger_UML_A_insertAt_addStructuralFeatureValueAction_addStructuralFeatureValueAction->setValue(0);
	
	uML_A_insertAt_addVariableValueAction_addVariableValueAction_lowerValue_LiteralInteger_UML_A_insertAt_addVariableValueAction_addVariableValueAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_insertAt_addVariableValueAction_addVariableValueAction_lowerValue_LiteralInteger_UML_A_insertAt_addVariableValueAction_addVariableValueAction->setValue(0);
	
	uML_A_insertAt_linkEndCreationData_linkEndCreationData_lowerValue_LiteralInteger_UML_A_insertAt_linkEndCreationData_linkEndCreationData.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_insertAt_linkEndCreationData_linkEndCreationData_lowerValue_LiteralInteger_UML_A_insertAt_linkEndCreationData_linkEndCreationData->setValue(0);
	
	uML_A_instance_instanceValue_instanceValue_lowerValue_LiteralInteger_UML_A_instance_instanceValue_instanceValue.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_instance_instanceValue_instanceValue_lowerValue_LiteralInteger_UML_A_instance_instanceValue_instanceValue->setValue(0);
	
	uML_A_instance_instanceValue_instanceValue_upperValue_LiteralUnlimitedNatural_UML_A_instance_instanceValue_instanceValue.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_instance_instanceValue_instanceValue_upperValue_LiteralUnlimitedNatural_UML_A_instance_instanceValue_instanceValue->setValue(-1);
	
	uML_A_invariant_stateInvariant_stateInvariant_lowerValue_LiteralInteger_UML_A_invariant_stateInvariant_stateInvariant.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_invariant_stateInvariant_stateInvariant_lowerValue_LiteralInteger_UML_A_invariant_stateInvariant_stateInvariant->setValue(0);
	
	uML_A_joinSpec_joinNode_joinNode_lowerValue_LiteralInteger_UML_A_joinSpec_joinNode_joinNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_joinSpec_joinNode_joinNode_lowerValue_LiteralInteger_UML_A_joinSpec_joinNode_joinNode->setValue(0);
	
	uML_A_localPostcondition_action_action_lowerValue_LiteralInteger_UML_A_localPostcondition_action_action.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_localPostcondition_action_action_lowerValue_LiteralInteger_UML_A_localPostcondition_action_action->setValue(0);
	
	uML_A_localPrecondition_action_action_lowerValue_LiteralInteger_UML_A_localPrecondition_action_action.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_localPrecondition_action_action_lowerValue_LiteralInteger_UML_A_localPrecondition_action_action->setValue(0);
	
	uML_A_loopVariableInput_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_loopVariableInput_loopNode_loopNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_loopVariableInput_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_loopVariableInput_loopNode_loopNode->setValue(0);
	
	uML_A_loopVariable_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_loopVariable_loopNode_loopNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_loopVariable_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_loopVariable_loopNode_loopNode->setValue(0);
	
	uML_A_lowerValue_owningLower_owningLower_lowerValue_LiteralInteger_UML_A_lowerValue_owningLower_owningLower.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_lowerValue_owningLower_owningLower_lowerValue_LiteralInteger_UML_A_lowerValue_owningLower_owningLower->setValue(0);
	
	uML_A_mapping_abstraction_abstraction_lowerValue_LiteralInteger_UML_A_mapping_abstraction_abstraction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_mapping_abstraction_abstraction_lowerValue_LiteralInteger_UML_A_mapping_abstraction_abstraction->setValue(0);
	
	uML_A_max_durationInterval_durationInterval_lowerValue_LiteralInteger_UML_A_max_durationInterval_durationInterval.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_max_durationInterval_durationInterval_lowerValue_LiteralInteger_UML_A_max_durationInterval_durationInterval->setValue(0);
	
	uML_A_max_durationInterval_durationInterval_upperValue_LiteralUnlimitedNatural_UML_A_max_durationInterval_durationInterval.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_max_durationInterval_durationInterval_upperValue_LiteralUnlimitedNatural_UML_A_max_durationInterval_durationInterval->setValue(-1);
	
	uML_A_max_interval_interval_lowerValue_LiteralInteger_UML_A_max_interval_interval.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_max_interval_interval_lowerValue_LiteralInteger_UML_A_max_interval_interval->setValue(0);
	
	uML_A_max_interval_interval_upperValue_LiteralUnlimitedNatural_UML_A_max_interval_interval.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_max_interval_interval_upperValue_LiteralUnlimitedNatural_UML_A_max_interval_interval->setValue(-1);
	
	uML_A_max_timeInterval_timeInterval_lowerValue_LiteralInteger_UML_A_max_timeInterval_timeInterval.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_max_timeInterval_timeInterval_lowerValue_LiteralInteger_UML_A_max_timeInterval_timeInterval->setValue(0);
	
	uML_A_max_timeInterval_timeInterval_upperValue_LiteralUnlimitedNatural_UML_A_max_timeInterval_timeInterval.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_max_timeInterval_timeInterval_upperValue_LiteralUnlimitedNatural_UML_A_max_timeInterval_timeInterval->setValue(-1);
	
	uML_A_maxint_interactionConstraint_interactionConstraint_lowerValue_LiteralInteger_UML_A_maxint_interactionConstraint_interactionConstraint.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_maxint_interactionConstraint_interactionConstraint_lowerValue_LiteralInteger_UML_A_maxint_interactionConstraint_interactionConstraint->setValue(0);
	
	uML_A_member_memberNamespace_memberNamespace_lowerValue_LiteralInteger_UML_A_member_memberNamespace_memberNamespace.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_member_memberNamespace_memberNamespace_lowerValue_LiteralInteger_UML_A_member_memberNamespace_memberNamespace->setValue(0);
	
	uML_A_member_memberNamespace_memberNamespace_upperValue_LiteralUnlimitedNatural_UML_A_member_memberNamespace_memberNamespace.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_member_memberNamespace_memberNamespace_upperValue_LiteralUnlimitedNatural_UML_A_member_memberNamespace_memberNamespace->setValue(-1);
	
	uML_A_mergedPackage_packageMerge_packageMerge_lowerValue_LiteralInteger_UML_A_mergedPackage_packageMerge_packageMerge.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_mergedPackage_packageMerge_packageMerge_lowerValue_LiteralInteger_UML_A_mergedPackage_packageMerge_packageMerge->setValue(0);
	
	uML_A_mergedPackage_packageMerge_packageMerge_upperValue_LiteralUnlimitedNatural_UML_A_mergedPackage_packageMerge_packageMerge.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_mergedPackage_packageMerge_packageMerge_upperValue_LiteralUnlimitedNatural_UML_A_mergedPackage_packageMerge_packageMerge->setValue(-1);
	
	uML_A_message_considerIgnoreFragment_considerIgnoreFragment_lowerValue_LiteralInteger_UML_A_message_considerIgnoreFragment_considerIgnoreFragment.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_message_considerIgnoreFragment_considerIgnoreFragment_lowerValue_LiteralInteger_UML_A_message_considerIgnoreFragment_considerIgnoreFragment->setValue(0);
	
	uML_A_message_considerIgnoreFragment_considerIgnoreFragment_upperValue_LiteralUnlimitedNatural_UML_A_message_considerIgnoreFragment_considerIgnoreFragment.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_message_considerIgnoreFragment_considerIgnoreFragment_upperValue_LiteralUnlimitedNatural_UML_A_message_considerIgnoreFragment_considerIgnoreFragment->setValue(-1);
	
	uML_A_message_messageEnd_messageEnd_lowerValue_LiteralInteger_UML_A_message_messageEnd_messageEnd.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_message_messageEnd_messageEnd_lowerValue_LiteralInteger_UML_A_message_messageEnd_messageEnd->setValue(0);
	
	uML_A_message_messageEnd_messageEnd_upperValue_LiteralUnlimitedNatural_UML_A_message_messageEnd_messageEnd.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_message_messageEnd_messageEnd_upperValue_LiteralUnlimitedNatural_UML_A_message_messageEnd_messageEnd->setValue(2);
	
	uML_A_metaclassReference_profile_profile_lowerValue_LiteralInteger_UML_A_metaclassReference_profile_profile.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_metaclassReference_profile_profile_lowerValue_LiteralInteger_UML_A_metaclassReference_profile_profile->setValue(0);
	
	uML_A_metamodelReference_profile_profile_lowerValue_LiteralInteger_UML_A_metamodelReference_profile_profile.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_metamodelReference_profile_profile_lowerValue_LiteralInteger_UML_A_metamodelReference_profile_profile->setValue(0);
	
	uML_A_min_durationInterval_durationInterval_lowerValue_LiteralInteger_UML_A_min_durationInterval_durationInterval.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_min_durationInterval_durationInterval_lowerValue_LiteralInteger_UML_A_min_durationInterval_durationInterval->setValue(0);
	
	uML_A_min_durationInterval_durationInterval_upperValue_LiteralUnlimitedNatural_UML_A_min_durationInterval_durationInterval.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_min_durationInterval_durationInterval_upperValue_LiteralUnlimitedNatural_UML_A_min_durationInterval_durationInterval->setValue(-1);
	
	uML_A_min_interval_interval_lowerValue_LiteralInteger_UML_A_min_interval_interval.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_min_interval_interval_lowerValue_LiteralInteger_UML_A_min_interval_interval->setValue(0);
	
	uML_A_min_interval_interval_upperValue_LiteralUnlimitedNatural_UML_A_min_interval_interval.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_min_interval_interval_upperValue_LiteralUnlimitedNatural_UML_A_min_interval_interval->setValue(-1);
	
	uML_A_min_timeInterval_timeInterval_lowerValue_LiteralInteger_UML_A_min_timeInterval_timeInterval.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_min_timeInterval_timeInterval_lowerValue_LiteralInteger_UML_A_min_timeInterval_timeInterval->setValue(0);
	
	uML_A_min_timeInterval_timeInterval_upperValue_LiteralUnlimitedNatural_UML_A_min_timeInterval_timeInterval.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_min_timeInterval_timeInterval_upperValue_LiteralUnlimitedNatural_UML_A_min_timeInterval_timeInterval->setValue(-1);
	
	uML_A_minint_interactionConstraint_interactionConstraint_lowerValue_LiteralInteger_UML_A_minint_interactionConstraint_interactionConstraint.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_minint_interactionConstraint_interactionConstraint_lowerValue_LiteralInteger_UML_A_minint_interactionConstraint_interactionConstraint->setValue(0);
	
	uML_A_nameExpression_namedElement_namedElement_lowerValue_LiteralInteger_UML_A_nameExpression_namedElement_namedElement.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_nameExpression_namedElement_namedElement_lowerValue_LiteralInteger_UML_A_nameExpression_namedElement_namedElement->setValue(0);
	
	uML_A_navigableOwnedEnd_association_association_lowerValue_LiteralInteger_UML_A_navigableOwnedEnd_association_association.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_navigableOwnedEnd_association_association_lowerValue_LiteralInteger_UML_A_navigableOwnedEnd_association_association->setValue(0);
	
	uML_A_nestedArtifact_artifact_artifact_lowerValue_LiteralInteger_UML_A_nestedArtifact_artifact_artifact.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_nestedArtifact_artifact_artifact_lowerValue_LiteralInteger_UML_A_nestedArtifact_artifact_artifact->setValue(0);
	
	uML_A_nestedClassifier_interface_interface_lowerValue_LiteralInteger_UML_A_nestedClassifier_interface_interface.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_nestedClassifier_interface_interface_lowerValue_LiteralInteger_UML_A_nestedClassifier_interface_interface->setValue(0);
	
	uML_A_nestedClassifier_nestingClass_nestingClass_lowerValue_LiteralInteger_UML_A_nestedClassifier_nestingClass_nestingClass.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_nestedClassifier_nestingClass_nestingClass_lowerValue_LiteralInteger_UML_A_nestedClassifier_nestingClass_nestingClass->setValue(0);
	
	uML_A_nestedNode_node_node_lowerValue_LiteralInteger_UML_A_nestedNode_node_node.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_nestedNode_node_node_lowerValue_LiteralInteger_UML_A_nestedNode_node_node->setValue(0);
	
	uML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction_lowerValue_LiteralInteger_UML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction_lowerValue_LiteralInteger_UML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction->setValue(0);
	
	uML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction->setValue(-1);
	
	uML_A_object_clearAssociationAction_clearAssociationAction_lowerValue_LiteralInteger_UML_A_object_clearAssociationAction_clearAssociationAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_object_clearAssociationAction_clearAssociationAction_lowerValue_LiteralInteger_UML_A_object_clearAssociationAction_clearAssociationAction->setValue(0);
	
	uML_A_object_readIsClassifiedObjectAction_readIsClassifiedObjectAction_lowerValue_LiteralInteger_UML_A_object_readIsClassifiedObjectAction_readIsClassifiedObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_object_readIsClassifiedObjectAction_readIsClassifiedObjectAction_lowerValue_LiteralInteger_UML_A_object_readIsClassifiedObjectAction_readIsClassifiedObjectAction->setValue(0);
	
	uML_A_object_readLinkObjectEndAction_readLinkObjectEndAction_lowerValue_LiteralInteger_UML_A_object_readLinkObjectEndAction_readLinkObjectEndAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_object_readLinkObjectEndAction_readLinkObjectEndAction_lowerValue_LiteralInteger_UML_A_object_readLinkObjectEndAction_readLinkObjectEndAction->setValue(0);
	
	uML_A_object_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction_lowerValue_LiteralInteger_UML_A_object_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_object_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction_lowerValue_LiteralInteger_UML_A_object_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction->setValue(0);
	
	uML_A_object_reclassifyObjectAction_reclassifyObjectAction_lowerValue_LiteralInteger_UML_A_object_reclassifyObjectAction_reclassifyObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_object_reclassifyObjectAction_reclassifyObjectAction_lowerValue_LiteralInteger_UML_A_object_reclassifyObjectAction_reclassifyObjectAction->setValue(0);
	
	uML_A_object_startClassifierBehaviorAction_startClassifierBehaviorAction_lowerValue_LiteralInteger_UML_A_object_startClassifierBehaviorAction_startClassifierBehaviorAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_object_startClassifierBehaviorAction_startClassifierBehaviorAction_lowerValue_LiteralInteger_UML_A_object_startClassifierBehaviorAction_startClassifierBehaviorAction->setValue(0);
	
	uML_A_object_startObjectBehaviorAction_startObjectBehaviorAction_lowerValue_LiteralInteger_UML_A_object_startObjectBehaviorAction_startObjectBehaviorAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_object_startObjectBehaviorAction_startObjectBehaviorAction_lowerValue_LiteralInteger_UML_A_object_startObjectBehaviorAction_startObjectBehaviorAction->setValue(0);
	
	uML_A_object_structuralFeatureAction_structuralFeatureAction_lowerValue_LiteralInteger_UML_A_object_structuralFeatureAction_structuralFeatureAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_object_structuralFeatureAction_structuralFeatureAction_lowerValue_LiteralInteger_UML_A_object_structuralFeatureAction_structuralFeatureAction->setValue(0);
	
	uML_A_object_unmarshallAction_unmarshallAction_lowerValue_LiteralInteger_UML_A_object_unmarshallAction_unmarshallAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_object_unmarshallAction_unmarshallAction_lowerValue_LiteralInteger_UML_A_object_unmarshallAction_unmarshallAction->setValue(0);
	
	uML_A_observation_duration_duration_lowerValue_LiteralInteger_UML_A_observation_duration_duration.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_observation_duration_duration_lowerValue_LiteralInteger_UML_A_observation_duration_duration->setValue(0);
	
	uML_A_observation_timeExpression_timeExpression_lowerValue_LiteralInteger_UML_A_observation_timeExpression_timeExpression.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_observation_timeExpression_timeExpression_lowerValue_LiteralInteger_UML_A_observation_timeExpression_timeExpression->setValue(0);
	
	uML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction_lowerValue_LiteralInteger_UML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction_lowerValue_LiteralInteger_UML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction->setValue(0);
	
	uML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction_upperValue_LiteralUnlimitedNatural_UML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction->setValue(-1);
	
	uML_A_onPort_invocationAction_invocationAction_lowerValue_LiteralInteger_UML_A_onPort_invocationAction_invocationAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_onPort_invocationAction_invocationAction_lowerValue_LiteralInteger_UML_A_onPort_invocationAction_invocationAction->setValue(0);
	
	uML_A_onPort_invocationAction_invocationAction_upperValue_LiteralUnlimitedNatural_UML_A_onPort_invocationAction_invocationAction.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_onPort_invocationAction_invocationAction_upperValue_LiteralUnlimitedNatural_UML_A_onPort_invocationAction_invocationAction->setValue(-1);
	
	uML_A_operand_combinedFragment_combinedFragment_lowerValue_LiteralInteger_UML_A_operand_combinedFragment_combinedFragment.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_operand_combinedFragment_combinedFragment_lowerValue_LiteralInteger_UML_A_operand_combinedFragment_combinedFragment->setValue(0);
	
	uML_A_operand_expression_expression_lowerValue_LiteralInteger_UML_A_operand_expression_expression.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_operand_expression_expression_lowerValue_LiteralInteger_UML_A_operand_expression_expression->setValue(0);
	
	uML_A_operation_callEvent_callEvent_lowerValue_LiteralInteger_UML_A_operation_callEvent_callEvent.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_operation_callEvent_callEvent_lowerValue_LiteralInteger_UML_A_operation_callEvent_callEvent->setValue(0);
	
	uML_A_operation_callEvent_callEvent_upperValue_LiteralUnlimitedNatural_UML_A_operation_callEvent_callEvent.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_operation_callEvent_callEvent_upperValue_LiteralUnlimitedNatural_UML_A_operation_callEvent_callEvent->setValue(-1);
	
	uML_A_operation_callOperationAction_callOperationAction_lowerValue_LiteralInteger_UML_A_operation_callOperationAction_callOperationAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_operation_callOperationAction_callOperationAction_lowerValue_LiteralInteger_UML_A_operation_callOperationAction_callOperationAction->setValue(0);
	
	uML_A_operation_callOperationAction_callOperationAction_upperValue_LiteralUnlimitedNatural_UML_A_operation_callOperationAction_callOperationAction.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_operation_callOperationAction_callOperationAction_upperValue_LiteralUnlimitedNatural_UML_A_operation_callOperationAction_callOperationAction->setValue(-1);
	
	uML_A_opposite_property_property_lowerValue_LiteralInteger_UML_A_opposite_property_property.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_opposite_property_property_lowerValue_LiteralInteger_UML_A_opposite_property_property->setValue(0);
	
	uML_A_outgoing_source_vertex_outgoing_lowerValue_LiteralInteger_UML_A_outgoing_source_vertex_outgoing.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_outgoing_source_vertex_outgoing_lowerValue_LiteralInteger_UML_A_outgoing_source_vertex_outgoing->setValue(0);
	
	uML_A_outgoing_source_vertex_outgoing_upperValue_LiteralUnlimitedNatural_UML_A_outgoing_source_vertex_outgoing.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_outgoing_source_vertex_outgoing_upperValue_LiteralUnlimitedNatural_UML_A_outgoing_source_vertex_outgoing->setValue(-1);
	
	uML_A_outputValue_opaqueAction_opaqueAction_lowerValue_LiteralInteger_UML_A_outputValue_opaqueAction_opaqueAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_outputValue_opaqueAction_opaqueAction_lowerValue_LiteralInteger_UML_A_outputValue_opaqueAction_opaqueAction->setValue(0);
	
	uML_A_output_action_action_lowerValue_LiteralInteger_UML_A_output_action_action.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_output_action_action_lowerValue_LiteralInteger_UML_A_output_action_action->setValue(0);
	
	uML_A_ownedActual_owningTemplateParameterSubstitution_owningTemplateParameterSubstitution_lowerValue_LiteralInteger_UML_A_ownedActual_owningTemplateParameterSubstitution_owningTemplateParameterSubstitution.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedActual_owningTemplateParameterSubstitution_owningTemplateParameterSubstitution_lowerValue_LiteralInteger_UML_A_ownedActual_owningTemplateParameterSubstitution_owningTemplateParameterSubstitution->setValue(0);
	
	uML_A_ownedAttribute_artifact_artifact_lowerValue_LiteralInteger_UML_A_ownedAttribute_artifact_artifact.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedAttribute_artifact_artifact_lowerValue_LiteralInteger_UML_A_ownedAttribute_artifact_artifact->setValue(0);
	
	uML_A_ownedAttribute_owningSignal_owningSignal_lowerValue_LiteralInteger_UML_A_ownedAttribute_owningSignal_owningSignal.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedAttribute_owningSignal_owningSignal_lowerValue_LiteralInteger_UML_A_ownedAttribute_owningSignal_owningSignal->setValue(0);
	
	uML_A_ownedAttribute_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_ownedAttribute_structuredClassifier_structuredClassifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedAttribute_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_ownedAttribute_structuredClassifier_structuredClassifier->setValue(0);
	
	uML_A_ownedBehavior_behavioredClassifier_behavioredClassifier_lowerValue_LiteralInteger_UML_A_ownedBehavior_behavioredClassifier_behavioredClassifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedBehavior_behavioredClassifier_behavioredClassifier_lowerValue_LiteralInteger_UML_A_ownedBehavior_behavioredClassifier_behavioredClassifier->setValue(0);
	
	uML_A_ownedComment_owningElement_owningElement_lowerValue_LiteralInteger_UML_A_ownedComment_owningElement_owningElement.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedComment_owningElement_owningElement_lowerValue_LiteralInteger_UML_A_ownedComment_owningElement_owningElement->setValue(0);
	
	uML_A_ownedConnector_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_ownedConnector_structuredClassifier_structuredClassifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedConnector_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_ownedConnector_structuredClassifier_structuredClassifier->setValue(0);
	
	uML_A_ownedDefault_templateParameter_templateParameter_lowerValue_LiteralInteger_UML_A_ownedDefault_templateParameter_templateParameter.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedDefault_templateParameter_templateParameter_lowerValue_LiteralInteger_UML_A_ownedDefault_templateParameter_templateParameter->setValue(0);
	
	uML_A_ownedOperation_artifact_artifact_lowerValue_LiteralInteger_UML_A_ownedOperation_artifact_artifact.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedOperation_artifact_artifact_lowerValue_LiteralInteger_UML_A_ownedOperation_artifact_artifact->setValue(0);
	
	uML_A_ownedParameterSet_behavior_behavior_lowerValue_LiteralInteger_UML_A_ownedParameterSet_behavior_behavior.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedParameterSet_behavior_behavior_lowerValue_LiteralInteger_UML_A_ownedParameterSet_behavior_behavior->setValue(0);
	
	uML_A_ownedParameterSet_behavioralFeature_behavioralFeature_lowerValue_LiteralInteger_UML_A_ownedParameterSet_behavioralFeature_behavioralFeature.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedParameterSet_behavioralFeature_behavioralFeature_lowerValue_LiteralInteger_UML_A_ownedParameterSet_behavioralFeature_behavioralFeature->setValue(0);
	
	uML_A_ownedParameter_behavior_behavior_lowerValue_LiteralInteger_UML_A_ownedParameter_behavior_behavior.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedParameter_behavior_behavior_lowerValue_LiteralInteger_UML_A_ownedParameter_behavior_behavior->setValue(0);
	
	uML_A_ownedParameter_ownerFormalParam_ownerFormalParam_lowerValue_LiteralInteger_UML_A_ownedParameter_ownerFormalParam_ownerFormalParam.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedParameter_ownerFormalParam_ownerFormalParam_lowerValue_LiteralInteger_UML_A_ownedParameter_ownerFormalParam_ownerFormalParam->setValue(0);
	
	uML_A_ownedPort_encapsulatedClassifier_encapsulatedClassifier_lowerValue_LiteralInteger_UML_A_ownedPort_encapsulatedClassifier_encapsulatedClassifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedPort_encapsulatedClassifier_encapsulatedClassifier_lowerValue_LiteralInteger_UML_A_ownedPort_encapsulatedClassifier_encapsulatedClassifier->setValue(0);
	
	uML_A_ownedReception_class_class_lowerValue_LiteralInteger_UML_A_ownedReception_class_class.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedReception_class_class_lowerValue_LiteralInteger_UML_A_ownedReception_class_class->setValue(0);
	
	uML_A_ownedReception_interface_interface_lowerValue_LiteralInteger_UML_A_ownedReception_interface_interface.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedReception_interface_interface_lowerValue_LiteralInteger_UML_A_ownedReception_interface_interface->setValue(0);
	
	uML_A_ownedUseCase_classifier_classifier_lowerValue_LiteralInteger_UML_A_ownedUseCase_classifier_classifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_ownedUseCase_classifier_classifier_lowerValue_LiteralInteger_UML_A_ownedUseCase_classifier_classifier->setValue(0);
	
	uML_A_packagedElement_component_component_lowerValue_LiteralInteger_UML_A_packagedElement_component_component.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_packagedElement_component_component_lowerValue_LiteralInteger_UML_A_packagedElement_component_component->setValue(0);
	
	uML_A_packagedElement_owningPackage_owningPackage_lowerValue_LiteralInteger_UML_A_packagedElement_owningPackage_owningPackage.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_packagedElement_owningPackage_owningPackage_lowerValue_LiteralInteger_UML_A_packagedElement_owningPackage_owningPackage->setValue(0);
	
	uML_A_parameter_activityParameterNode_activityParameterNode_lowerValue_LiteralInteger_UML_A_parameter_activityParameterNode_activityParameterNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_parameter_activityParameterNode_activityParameterNode_lowerValue_LiteralInteger_UML_A_parameter_activityParameterNode_activityParameterNode->setValue(0);
	
	uML_A_parameter_activityParameterNode_activityParameterNode_upperValue_LiteralUnlimitedNatural_UML_A_parameter_activityParameterNode_activityParameterNode.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_parameter_activityParameterNode_activityParameterNode_upperValue_LiteralUnlimitedNatural_UML_A_parameter_activityParameterNode_activityParameterNode->setValue(-1);
	
	uML_A_parameter_templateSignature_templateSignature_lowerValue_LiteralInteger_UML_A_parameter_templateSignature_templateSignature.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_parameter_templateSignature_templateSignature_lowerValue_LiteralInteger_UML_A_parameter_templateSignature_templateSignature->setValue(0);
	
	uML_A_parameter_templateSignature_templateSignature_upperValue_LiteralUnlimitedNatural_UML_A_parameter_templateSignature_templateSignature.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_parameter_templateSignature_templateSignature_upperValue_LiteralUnlimitedNatural_UML_A_parameter_templateSignature_templateSignature->setValue(-1);
	
	uML_A_partWithPort_connectorEnd_connectorEnd_lowerValue_LiteralInteger_UML_A_partWithPort_connectorEnd_connectorEnd.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_partWithPort_connectorEnd_connectorEnd_lowerValue_LiteralInteger_UML_A_partWithPort_connectorEnd_connectorEnd->setValue(0);
	
	uML_A_partWithPort_connectorEnd_connectorEnd_upperValue_LiteralUnlimitedNatural_UML_A_partWithPort_connectorEnd_connectorEnd.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_partWithPort_connectorEnd_connectorEnd_upperValue_LiteralUnlimitedNatural_UML_A_partWithPort_connectorEnd_connectorEnd->setValue(-1);
	
	uML_A_part_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_part_structuredClassifier_structuredClassifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_part_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_part_structuredClassifier_structuredClassifier->setValue(0);
	
	uML_A_partition_activity_activity_lowerValue_LiteralInteger_UML_A_partition_activity_activity.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_partition_activity_activity_lowerValue_LiteralInteger_UML_A_partition_activity_activity->setValue(0);
	
	uML_A_port_trigger_trigger_lowerValue_LiteralInteger_UML_A_port_trigger_trigger.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_port_trigger_trigger_lowerValue_LiteralInteger_UML_A_port_trigger_trigger->setValue(0);
	
	uML_A_port_trigger_trigger_upperValue_LiteralUnlimitedNatural_UML_A_port_trigger_trigger.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_port_trigger_trigger_upperValue_LiteralUnlimitedNatural_UML_A_port_trigger_trigger->setValue(-1);
	
	uML_A_postCondition_owningTransition_owningTransition_lowerValue_LiteralInteger_UML_A_postCondition_owningTransition_owningTransition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_postCondition_owningTransition_owningTransition_lowerValue_LiteralInteger_UML_A_postCondition_owningTransition_owningTransition->setValue(0);
	
	uML_A_postcondition_behavior_behavior_lowerValue_LiteralInteger_UML_A_postcondition_behavior_behavior.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_postcondition_behavior_behavior_lowerValue_LiteralInteger_UML_A_postcondition_behavior_behavior->setValue(0);
	
	uML_A_postcondition_postContext_postContext_lowerValue_LiteralInteger_UML_A_postcondition_postContext_postContext.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_postcondition_postContext_postContext_lowerValue_LiteralInteger_UML_A_postcondition_postContext_postContext->setValue(0);
	
	uML_A_preCondition_protocolTransition_protocolTransition_lowerValue_LiteralInteger_UML_A_preCondition_protocolTransition_protocolTransition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_preCondition_protocolTransition_protocolTransition_lowerValue_LiteralInteger_UML_A_preCondition_protocolTransition_protocolTransition->setValue(0);
	
	uML_A_precondition_behavior_behavior_lowerValue_LiteralInteger_UML_A_precondition_behavior_behavior.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_precondition_behavior_behavior_lowerValue_LiteralInteger_UML_A_precondition_behavior_behavior->setValue(0);
	
	uML_A_precondition_preContext_preContext_lowerValue_LiteralInteger_UML_A_precondition_preContext_preContext.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_precondition_preContext_preContext_lowerValue_LiteralInteger_UML_A_precondition_preContext_preContext->setValue(0);
	
	uML_A_profile_stereotype_stereotype_lowerValue_LiteralInteger_UML_A_profile_stereotype_stereotype.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_profile_stereotype_stereotype_lowerValue_LiteralInteger_UML_A_profile_stereotype_stereotype->setValue(0);
	
	uML_A_profile_stereotype_stereotype_upperValue_LiteralUnlimitedNatural_UML_A_profile_stereotype_stereotype.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_profile_stereotype_stereotype_upperValue_LiteralUnlimitedNatural_UML_A_profile_stereotype_stereotype->setValue(-1);
	
	uML_A_protocol_interface_interface_lowerValue_LiteralInteger_UML_A_protocol_interface_interface.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_protocol_interface_interface_lowerValue_LiteralInteger_UML_A_protocol_interface_interface->setValue(0);
	
	uML_A_protocol_port_port_lowerValue_LiteralInteger_UML_A_protocol_port_port.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_protocol_port_port_lowerValue_LiteralInteger_UML_A_protocol_port_port->setValue(0);
	
	uML_A_protocol_port_port_upperValue_LiteralUnlimitedNatural_UML_A_protocol_port_port.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_protocol_port_port_upperValue_LiteralUnlimitedNatural_UML_A_protocol_port_port->setValue(-1);
	
	uML_A_provided_component_component_lowerValue_LiteralInteger_UML_A_provided_component_component.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_provided_component_component_lowerValue_LiteralInteger_UML_A_provided_component_component->setValue(0);
	
	uML_A_provided_component_component_upperValue_LiteralUnlimitedNatural_UML_A_provided_component_component.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_provided_component_component_upperValue_LiteralUnlimitedNatural_UML_A_provided_component_component->setValue(-1);
	
	uML_A_provided_port_port_lowerValue_LiteralInteger_UML_A_provided_port_port.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_provided_port_port_lowerValue_LiteralInteger_UML_A_provided_port_port->setValue(0);
	
	uML_A_provided_port_port_upperValue_LiteralUnlimitedNatural_UML_A_provided_port_port.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_provided_port_port_upperValue_LiteralUnlimitedNatural_UML_A_provided_port_port->setValue(-1);
	
	uML_A_qualifier_qualifierValue_qualifierValue_lowerValue_LiteralInteger_UML_A_qualifier_qualifierValue_qualifierValue.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_qualifier_qualifierValue_qualifierValue_lowerValue_LiteralInteger_UML_A_qualifier_qualifierValue_qualifierValue->setValue(0);
	
	uML_A_qualifier_qualifierValue_qualifierValue_upperValue_LiteralUnlimitedNatural_UML_A_qualifier_qualifierValue_qualifierValue.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_qualifier_qualifierValue_qualifierValue_upperValue_LiteralUnlimitedNatural_UML_A_qualifier_qualifierValue_qualifierValue->setValue(-1);
	
	uML_A_qualifier_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction_lowerValue_LiteralInteger_UML_A_qualifier_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_qualifier_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction_lowerValue_LiteralInteger_UML_A_qualifier_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction->setValue(0);
	
	uML_A_raisedException_behavioralFeature_behavioralFeature_lowerValue_LiteralInteger_UML_A_raisedException_behavioralFeature_behavioralFeature.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_raisedException_behavioralFeature_behavioralFeature_lowerValue_LiteralInteger_UML_A_raisedException_behavioralFeature_behavioralFeature->setValue(0);
	
	uML_A_raisedException_behavioralFeature_behavioralFeature_upperValue_LiteralUnlimitedNatural_UML_A_raisedException_behavioralFeature_behavioralFeature.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_raisedException_behavioralFeature_behavioralFeature_upperValue_LiteralUnlimitedNatural_UML_A_raisedException_behavioralFeature_behavioralFeature->setValue(-1);
	
	uML_A_raisedException_operation_operation_lowerValue_LiteralInteger_UML_A_raisedException_operation_operation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_raisedException_operation_operation_lowerValue_LiteralInteger_UML_A_raisedException_operation_operation->setValue(0);
	
	uML_A_raisedException_operation_operation_upperValue_LiteralUnlimitedNatural_UML_A_raisedException_operation_operation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_raisedException_operation_operation_upperValue_LiteralUnlimitedNatural_UML_A_raisedException_operation_operation->setValue(-1);
	
	uML_A_realization_abstraction_flow_abstraction_lowerValue_LiteralInteger_UML_A_realization_abstraction_flow_abstraction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_realization_abstraction_flow_abstraction_lowerValue_LiteralInteger_UML_A_realization_abstraction_flow_abstraction->setValue(0);
	
	uML_A_realization_abstraction_flow_abstraction_upperValue_LiteralUnlimitedNatural_UML_A_realization_abstraction_flow_abstraction.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_realization_abstraction_flow_abstraction_upperValue_LiteralUnlimitedNatural_UML_A_realization_abstraction_flow_abstraction->setValue(-1);
	
	uML_A_realizingActivityEdge_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_realizingActivityEdge_informationFlow_informationFlow.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_realizingActivityEdge_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_realizingActivityEdge_informationFlow_informationFlow->setValue(0);
	
	uML_A_realizingActivityEdge_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_realizingActivityEdge_informationFlow_informationFlow.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_realizingActivityEdge_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_realizingActivityEdge_informationFlow_informationFlow->setValue(-1);
	
	uML_A_realizingClassifier_componentRealization_componentRealization_lowerValue_LiteralInteger_UML_A_realizingClassifier_componentRealization_componentRealization.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_realizingClassifier_componentRealization_componentRealization_lowerValue_LiteralInteger_UML_A_realizingClassifier_componentRealization_componentRealization->setValue(0);
	
	uML_A_realizingClassifier_componentRealization_componentRealization_upperValue_LiteralUnlimitedNatural_UML_A_realizingClassifier_componentRealization_componentRealization.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_realizingClassifier_componentRealization_componentRealization_upperValue_LiteralUnlimitedNatural_UML_A_realizingClassifier_componentRealization_componentRealization->setValue(-1);
	
	uML_A_realizingConnector_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_realizingConnector_informationFlow_informationFlow.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_realizingConnector_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_realizingConnector_informationFlow_informationFlow->setValue(0);
	
	uML_A_realizingConnector_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_realizingConnector_informationFlow_informationFlow.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_realizingConnector_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_realizingConnector_informationFlow_informationFlow->setValue(-1);
	
	uML_A_realizingMessage_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_realizingMessage_informationFlow_informationFlow.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_realizingMessage_informationFlow_informationFlow_lowerValue_LiteralInteger_UML_A_realizingMessage_informationFlow_informationFlow->setValue(0);
	
	uML_A_realizingMessage_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_realizingMessage_informationFlow_informationFlow.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_realizingMessage_informationFlow_informationFlow_upperValue_LiteralUnlimitedNatural_UML_A_realizingMessage_informationFlow_informationFlow->setValue(-1);
	
	uML_A_receiveEvent_endMessage_endMessage_lowerValue_LiteralInteger_UML_A_receiveEvent_endMessage_endMessage.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_receiveEvent_endMessage_endMessage_lowerValue_LiteralInteger_UML_A_receiveEvent_endMessage_endMessage->setValue(0);
	
	uML_A_redefinedBehavior_behavior_behavior_lowerValue_LiteralInteger_UML_A_redefinedBehavior_behavior_behavior.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinedBehavior_behavior_behavior_lowerValue_LiteralInteger_UML_A_redefinedBehavior_behavior_behavior->setValue(0);
	
	uML_A_redefinedBehavior_behavior_behavior_upperValue_LiteralUnlimitedNatural_UML_A_redefinedBehavior_behavior_behavior.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinedBehavior_behavior_behavior_upperValue_LiteralUnlimitedNatural_UML_A_redefinedBehavior_behavior_behavior->setValue(-1);
	
	uML_A_redefinedClassifier_classifier_classifier_lowerValue_LiteralInteger_UML_A_redefinedClassifier_classifier_classifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinedClassifier_classifier_classifier_lowerValue_LiteralInteger_UML_A_redefinedClassifier_classifier_classifier->setValue(0);
	
	uML_A_redefinedClassifier_classifier_classifier_upperValue_LiteralUnlimitedNatural_UML_A_redefinedClassifier_classifier_classifier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinedClassifier_classifier_classifier_upperValue_LiteralUnlimitedNatural_UML_A_redefinedClassifier_classifier_classifier->setValue(-1);
	
	uML_A_redefinedConnector_connector_connector_lowerValue_LiteralInteger_UML_A_redefinedConnector_connector_connector.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinedConnector_connector_connector_lowerValue_LiteralInteger_UML_A_redefinedConnector_connector_connector->setValue(0);
	
	uML_A_redefinedConnector_connector_connector_upperValue_LiteralUnlimitedNatural_UML_A_redefinedConnector_connector_connector.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinedConnector_connector_connector_upperValue_LiteralUnlimitedNatural_UML_A_redefinedConnector_connector_connector->setValue(-1);
	
	uML_A_redefinedEdge_activityEdge_activityEdge_lowerValue_LiteralInteger_UML_A_redefinedEdge_activityEdge_activityEdge.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinedEdge_activityEdge_activityEdge_lowerValue_LiteralInteger_UML_A_redefinedEdge_activityEdge_activityEdge->setValue(0);
	
	uML_A_redefinedEdge_activityEdge_activityEdge_upperValue_LiteralUnlimitedNatural_UML_A_redefinedEdge_activityEdge_activityEdge.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinedEdge_activityEdge_activityEdge_upperValue_LiteralUnlimitedNatural_UML_A_redefinedEdge_activityEdge_activityEdge->setValue(-1);
	
	uML_A_redefinedElement_redefinableElement_redefinableElement_lowerValue_LiteralInteger_UML_A_redefinedElement_redefinableElement_redefinableElement.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinedElement_redefinableElement_redefinableElement_lowerValue_LiteralInteger_UML_A_redefinedElement_redefinableElement_redefinableElement->setValue(0);
	
	uML_A_redefinedElement_redefinableElement_redefinableElement_upperValue_LiteralUnlimitedNatural_UML_A_redefinedElement_redefinableElement_redefinableElement.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinedElement_redefinableElement_redefinableElement_upperValue_LiteralUnlimitedNatural_UML_A_redefinedElement_redefinableElement_redefinableElement->setValue(-1);
	
	uML_A_redefinedInterface_interface_interface_lowerValue_LiteralInteger_UML_A_redefinedInterface_interface_interface.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinedInterface_interface_interface_lowerValue_LiteralInteger_UML_A_redefinedInterface_interface_interface->setValue(0);
	
	uML_A_redefinedInterface_interface_interface_upperValue_LiteralUnlimitedNatural_UML_A_redefinedInterface_interface_interface.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinedInterface_interface_interface_upperValue_LiteralUnlimitedNatural_UML_A_redefinedInterface_interface_interface->setValue(-1);
	
	uML_A_redefinedNode_activityNode_activityNode_lowerValue_LiteralInteger_UML_A_redefinedNode_activityNode_activityNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinedNode_activityNode_activityNode_lowerValue_LiteralInteger_UML_A_redefinedNode_activityNode_activityNode->setValue(0);
	
	uML_A_redefinedNode_activityNode_activityNode_upperValue_LiteralUnlimitedNatural_UML_A_redefinedNode_activityNode_activityNode.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinedNode_activityNode_activityNode_upperValue_LiteralUnlimitedNatural_UML_A_redefinedNode_activityNode_activityNode->setValue(-1);
	
	uML_A_redefinedOperation_operation_operation_lowerValue_LiteralInteger_UML_A_redefinedOperation_operation_operation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinedOperation_operation_operation_lowerValue_LiteralInteger_UML_A_redefinedOperation_operation_operation->setValue(0);
	
	uML_A_redefinedOperation_operation_operation_upperValue_LiteralUnlimitedNatural_UML_A_redefinedOperation_operation_operation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinedOperation_operation_operation_upperValue_LiteralUnlimitedNatural_UML_A_redefinedOperation_operation_operation->setValue(-1);
	
	uML_A_redefinedPort_port_port_lowerValue_LiteralInteger_UML_A_redefinedPort_port_port.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinedPort_port_port_lowerValue_LiteralInteger_UML_A_redefinedPort_port_port->setValue(0);
	
	uML_A_redefinedPort_port_port_upperValue_LiteralUnlimitedNatural_UML_A_redefinedPort_port_port.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinedPort_port_port_upperValue_LiteralUnlimitedNatural_UML_A_redefinedPort_port_port->setValue(-1);
	
	uML_A_redefinedProperty_property_property_lowerValue_LiteralInteger_UML_A_redefinedProperty_property_property.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinedProperty_property_property_lowerValue_LiteralInteger_UML_A_redefinedProperty_property_property->setValue(0);
	
	uML_A_redefinedProperty_property_property_upperValue_LiteralUnlimitedNatural_UML_A_redefinedProperty_property_property.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinedProperty_property_property_upperValue_LiteralUnlimitedNatural_UML_A_redefinedProperty_property_property->setValue(-1);
	
	uML_A_redefinedState_state_state_lowerValue_LiteralInteger_UML_A_redefinedState_state_state.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinedState_state_state_lowerValue_LiteralInteger_UML_A_redefinedState_state_state->setValue(0);
	
	uML_A_redefinedState_state_state_upperValue_LiteralUnlimitedNatural_UML_A_redefinedState_state_state.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinedState_state_state_upperValue_LiteralUnlimitedNatural_UML_A_redefinedState_state_state->setValue(-1);
	
	uML_A_redefinedTransition_transition_transition_lowerValue_LiteralInteger_UML_A_redefinedTransition_transition_transition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinedTransition_transition_transition_lowerValue_LiteralInteger_UML_A_redefinedTransition_transition_transition->setValue(0);
	
	uML_A_redefinedTransition_transition_transition_upperValue_LiteralUnlimitedNatural_UML_A_redefinedTransition_transition_transition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinedTransition_transition_transition_upperValue_LiteralUnlimitedNatural_UML_A_redefinedTransition_transition_transition->setValue(-1);
	
	uML_A_redefinitionContext_redefinableElement_redefinableElement_lowerValue_LiteralInteger_UML_A_redefinitionContext_redefinableElement_redefinableElement.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinitionContext_redefinableElement_redefinableElement_lowerValue_LiteralInteger_UML_A_redefinitionContext_redefinableElement_redefinableElement->setValue(0);
	
	uML_A_redefinitionContext_redefinableElement_redefinableElement_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_redefinableElement_redefinableElement.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinitionContext_redefinableElement_redefinableElement_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_redefinableElement_redefinableElement->setValue(-1);
	
	uML_A_redefinitionContext_region_region_lowerValue_LiteralInteger_UML_A_redefinitionContext_region_region.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinitionContext_region_region_lowerValue_LiteralInteger_UML_A_redefinitionContext_region_region->setValue(0);
	
	uML_A_redefinitionContext_region_region_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_region_region.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinitionContext_region_region_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_region_region->setValue(-1);
	
	uML_A_redefinitionContext_state_state_lowerValue_LiteralInteger_UML_A_redefinitionContext_state_state.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinitionContext_state_state_lowerValue_LiteralInteger_UML_A_redefinitionContext_state_state->setValue(0);
	
	uML_A_redefinitionContext_state_state_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_state_state.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinitionContext_state_state_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_state_state->setValue(-1);
	
	uML_A_redefinitionContext_transition_transition_lowerValue_LiteralInteger_UML_A_redefinitionContext_transition_transition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_redefinitionContext_transition_transition_lowerValue_LiteralInteger_UML_A_redefinitionContext_transition_transition->setValue(0);
	
	uML_A_redefinitionContext_transition_transition_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_transition_transition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_redefinitionContext_transition_transition_upperValue_LiteralUnlimitedNatural_UML_A_redefinitionContext_transition_transition->setValue(-1);
	
	uML_A_reducer_reduceAction_reduceAction_lowerValue_LiteralInteger_UML_A_reducer_reduceAction_reduceAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_reducer_reduceAction_reduceAction_lowerValue_LiteralInteger_UML_A_reducer_reduceAction_reduceAction->setValue(0);
	
	uML_A_reducer_reduceAction_reduceAction_upperValue_LiteralUnlimitedNatural_UML_A_reducer_reduceAction_reduceAction.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_reducer_reduceAction_reduceAction_upperValue_LiteralUnlimitedNatural_UML_A_reducer_reduceAction_reduceAction->setValue(-1);
	
	uML_A_referred_protocolTransition_protocolTransition_lowerValue_LiteralInteger_UML_A_referred_protocolTransition_protocolTransition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_referred_protocolTransition_protocolTransition_lowerValue_LiteralInteger_UML_A_referred_protocolTransition_protocolTransition->setValue(0);
	
	uML_A_referred_protocolTransition_protocolTransition_upperValue_LiteralUnlimitedNatural_UML_A_referred_protocolTransition_protocolTransition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_referred_protocolTransition_protocolTransition_upperValue_LiteralUnlimitedNatural_UML_A_referred_protocolTransition_protocolTransition->setValue(-1);
	
	uML_A_refersTo_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_refersTo_interactionUse_interactionUse.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_refersTo_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_refersTo_interactionUse_interactionUse->setValue(0);
	
	uML_A_refersTo_interactionUse_interactionUse_upperValue_LiteralUnlimitedNatural_UML_A_refersTo_interactionUse_interactionUse.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_refersTo_interactionUse_interactionUse_upperValue_LiteralUnlimitedNatural_UML_A_refersTo_interactionUse_interactionUse->setValue(-1);
	
	uML_A_relatedElement_relationship_relationship_lowerValue_LiteralInteger_UML_A_relatedElement_relationship_relationship.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_relatedElement_relationship_relationship_lowerValue_LiteralInteger_UML_A_relatedElement_relationship_relationship->setValue(0);
	
	uML_A_relatedElement_relationship_relationship_upperValue_LiteralUnlimitedNatural_UML_A_relatedElement_relationship_relationship.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_relatedElement_relationship_relationship_upperValue_LiteralUnlimitedNatural_UML_A_relatedElement_relationship_relationship->setValue(-1);
	
	uML_A_removeAt_removeStructuralFeatureValueAction_removeStructuralFeatureValueAction_lowerValue_LiteralInteger_UML_A_removeAt_removeStructuralFeatureValueAction_removeStructuralFeatureValueAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_removeAt_removeStructuralFeatureValueAction_removeStructuralFeatureValueAction_lowerValue_LiteralInteger_UML_A_removeAt_removeStructuralFeatureValueAction_removeStructuralFeatureValueAction->setValue(0);
	
	uML_A_removeAt_removeVariableValueAction_removeVariableValueAction_lowerValue_LiteralInteger_UML_A_removeAt_removeVariableValueAction_removeVariableValueAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_removeAt_removeVariableValueAction_removeVariableValueAction_lowerValue_LiteralInteger_UML_A_removeAt_removeVariableValueAction_removeVariableValueAction->setValue(0);
	
	uML_A_replyToCall_replyAction_replyAction_lowerValue_LiteralInteger_UML_A_replyToCall_replyAction_replyAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_replyToCall_replyAction_replyAction_lowerValue_LiteralInteger_UML_A_replyToCall_replyAction_replyAction->setValue(0);
	
	uML_A_replyValue_replyAction_replyAction_lowerValue_LiteralInteger_UML_A_replyValue_replyAction_replyAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_replyValue_replyAction_replyAction_lowerValue_LiteralInteger_UML_A_replyValue_replyAction_replyAction->setValue(0);
	
	uML_A_representation_classifier_classifier_lowerValue_LiteralInteger_UML_A_representation_classifier_classifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_representation_classifier_classifier_lowerValue_LiteralInteger_UML_A_representation_classifier_classifier->setValue(0);
	
	uML_A_represented_representation_representation_lowerValue_LiteralInteger_UML_A_represented_representation_representation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_represented_representation_representation_lowerValue_LiteralInteger_UML_A_represented_representation_representation->setValue(0);
	
	uML_A_represented_representation_representation_upperValue_LiteralUnlimitedNatural_UML_A_represented_representation_representation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_represented_representation_representation_upperValue_LiteralUnlimitedNatural_UML_A_represented_representation_representation->setValue(-1);
	
	uML_A_represents_activityPartition_activityPartition_lowerValue_LiteralInteger_UML_A_represents_activityPartition_activityPartition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_represents_activityPartition_activityPartition_lowerValue_LiteralInteger_UML_A_represents_activityPartition_activityPartition->setValue(0);
	
	uML_A_represents_activityPartition_activityPartition_upperValue_LiteralUnlimitedNatural_UML_A_represents_activityPartition_activityPartition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_represents_activityPartition_activityPartition_upperValue_LiteralUnlimitedNatural_UML_A_represents_activityPartition_activityPartition->setValue(-1);
	
	uML_A_represents_lifeline_lifeline_lowerValue_LiteralInteger_UML_A_represents_lifeline_lifeline.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_represents_lifeline_lifeline_lowerValue_LiteralInteger_UML_A_represents_lifeline_lifeline->setValue(0);
	
	uML_A_represents_lifeline_lifeline_upperValue_LiteralUnlimitedNatural_UML_A_represents_lifeline_lifeline.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_represents_lifeline_lifeline_upperValue_LiteralUnlimitedNatural_UML_A_represents_lifeline_lifeline->setValue(-1);
	
	uML_A_request_sendObjectAction_sendObjectAction_lowerValue_LiteralInteger_UML_A_request_sendObjectAction_sendObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_request_sendObjectAction_sendObjectAction_lowerValue_LiteralInteger_UML_A_request_sendObjectAction_sendObjectAction->setValue(0);
	
	uML_A_required_component_component_lowerValue_LiteralInteger_UML_A_required_component_component.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_required_component_component_lowerValue_LiteralInteger_UML_A_required_component_component->setValue(0);
	
	uML_A_required_component_component_upperValue_LiteralUnlimitedNatural_UML_A_required_component_component.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_required_component_component_upperValue_LiteralUnlimitedNatural_UML_A_required_component_component->setValue(-1);
	
	uML_A_required_port_port_lowerValue_LiteralInteger_UML_A_required_port_port.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_required_port_port_lowerValue_LiteralInteger_UML_A_required_port_port->setValue(0);
	
	uML_A_required_port_port_upperValue_LiteralUnlimitedNatural_UML_A_required_port_port.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_required_port_port_upperValue_LiteralUnlimitedNatural_UML_A_required_port_port->setValue(-1);
	
	uML_A_result_acceptEventAction_acceptEventAction_lowerValue_LiteralInteger_UML_A_result_acceptEventAction_acceptEventAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_acceptEventAction_acceptEventAction_lowerValue_LiteralInteger_UML_A_result_acceptEventAction_acceptEventAction->setValue(0);
	
	uML_A_result_callAction_callAction_lowerValue_LiteralInteger_UML_A_result_callAction_callAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_callAction_callAction_lowerValue_LiteralInteger_UML_A_result_callAction_callAction->setValue(0);
	
	uML_A_result_clearStructuralFeatureAction_clearStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_result_clearStructuralFeatureAction_clearStructuralFeatureAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_clearStructuralFeatureAction_clearStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_result_clearStructuralFeatureAction_clearStructuralFeatureAction->setValue(0);
	
	uML_A_result_conditionalNode_conditionalNode_lowerValue_LiteralInteger_UML_A_result_conditionalNode_conditionalNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_conditionalNode_conditionalNode_lowerValue_LiteralInteger_UML_A_result_conditionalNode_conditionalNode->setValue(0);
	
	uML_A_result_createLinkObjectAction_createLinkObjectAction_lowerValue_LiteralInteger_UML_A_result_createLinkObjectAction_createLinkObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_createLinkObjectAction_createLinkObjectAction_lowerValue_LiteralInteger_UML_A_result_createLinkObjectAction_createLinkObjectAction->setValue(0);
	
	uML_A_result_createObjectAction_createObjectAction_lowerValue_LiteralInteger_UML_A_result_createObjectAction_createObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_createObjectAction_createObjectAction_lowerValue_LiteralInteger_UML_A_result_createObjectAction_createObjectAction->setValue(0);
	
	uML_A_result_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_result_loopNode_loopNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_result_loopNode_loopNode->setValue(0);
	
	uML_A_result_opaqueExpression_opaqueExpression_lowerValue_LiteralInteger_UML_A_result_opaqueExpression_opaqueExpression.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_opaqueExpression_opaqueExpression_lowerValue_LiteralInteger_UML_A_result_opaqueExpression_opaqueExpression->setValue(0);
	
	uML_A_result_opaqueExpression_opaqueExpression_upperValue_LiteralUnlimitedNatural_UML_A_result_opaqueExpression_opaqueExpression.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_result_opaqueExpression_opaqueExpression_upperValue_LiteralUnlimitedNatural_UML_A_result_opaqueExpression_opaqueExpression->setValue(-1);
	
	uML_A_result_readExtentAction_readExtentAction_lowerValue_LiteralInteger_UML_A_result_readExtentAction_readExtentAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_readExtentAction_readExtentAction_lowerValue_LiteralInteger_UML_A_result_readExtentAction_readExtentAction->setValue(0);
	
	uML_A_result_readIsClassifiedObjectAction_readIsClassifiedObjectAction_lowerValue_LiteralInteger_UML_A_result_readIsClassifiedObjectAction_readIsClassifiedObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_readIsClassifiedObjectAction_readIsClassifiedObjectAction_lowerValue_LiteralInteger_UML_A_result_readIsClassifiedObjectAction_readIsClassifiedObjectAction->setValue(0);
	
	uML_A_result_readLinkAction_readLinkAction_lowerValue_LiteralInteger_UML_A_result_readLinkAction_readLinkAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_readLinkAction_readLinkAction_lowerValue_LiteralInteger_UML_A_result_readLinkAction_readLinkAction->setValue(0);
	
	uML_A_result_readLinkObjectEndAction_readLinkObjectEndAction_lowerValue_LiteralInteger_UML_A_result_readLinkObjectEndAction_readLinkObjectEndAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_readLinkObjectEndAction_readLinkObjectEndAction_lowerValue_LiteralInteger_UML_A_result_readLinkObjectEndAction_readLinkObjectEndAction->setValue(0);
	
	uML_A_result_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction_lowerValue_LiteralInteger_UML_A_result_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction_lowerValue_LiteralInteger_UML_A_result_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction->setValue(0);
	
	uML_A_result_readSelfAction_readSelfAction_lowerValue_LiteralInteger_UML_A_result_readSelfAction_readSelfAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_readSelfAction_readSelfAction_lowerValue_LiteralInteger_UML_A_result_readSelfAction_readSelfAction->setValue(0);
	
	uML_A_result_readStructuralFeatureAction_readStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_result_readStructuralFeatureAction_readStructuralFeatureAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_readStructuralFeatureAction_readStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_result_readStructuralFeatureAction_readStructuralFeatureAction->setValue(0);
	
	uML_A_result_readVariableAction_readVariableAction_lowerValue_LiteralInteger_UML_A_result_readVariableAction_readVariableAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_readVariableAction_readVariableAction_lowerValue_LiteralInteger_UML_A_result_readVariableAction_readVariableAction->setValue(0);
	
	uML_A_result_reduceAction_reduceAction_lowerValue_LiteralInteger_UML_A_result_reduceAction_reduceAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_reduceAction_reduceAction_lowerValue_LiteralInteger_UML_A_result_reduceAction_reduceAction->setValue(0);
	
	uML_A_result_testIdentityAction_testIdentityAction_lowerValue_LiteralInteger_UML_A_result_testIdentityAction_testIdentityAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_testIdentityAction_testIdentityAction_lowerValue_LiteralInteger_UML_A_result_testIdentityAction_testIdentityAction->setValue(0);
	
	uML_A_result_unmarshallAction_unmarshallAction_lowerValue_LiteralInteger_UML_A_result_unmarshallAction_unmarshallAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_unmarshallAction_unmarshallAction_lowerValue_LiteralInteger_UML_A_result_unmarshallAction_unmarshallAction->setValue(0);
	
	uML_A_result_valueSpecificationAction_valueSpecificationAction_lowerValue_LiteralInteger_UML_A_result_valueSpecificationAction_valueSpecificationAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_valueSpecificationAction_valueSpecificationAction_lowerValue_LiteralInteger_UML_A_result_valueSpecificationAction_valueSpecificationAction->setValue(0);
	
	uML_A_result_writeStructuralFeatureAction_writeStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_result_writeStructuralFeatureAction_writeStructuralFeatureAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_result_writeStructuralFeatureAction_writeStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_result_writeStructuralFeatureAction_writeStructuralFeatureAction->setValue(0);
	
	uML_A_returnInformation_acceptCallAction_acceptCallAction_lowerValue_LiteralInteger_UML_A_returnInformation_acceptCallAction_acceptCallAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_returnInformation_acceptCallAction_acceptCallAction_lowerValue_LiteralInteger_UML_A_returnInformation_acceptCallAction_acceptCallAction->setValue(0);
	
	uML_A_returnInformation_replyAction_replyAction_lowerValue_LiteralInteger_UML_A_returnInformation_replyAction_replyAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_returnInformation_replyAction_replyAction_lowerValue_LiteralInteger_UML_A_returnInformation_replyAction_replyAction->setValue(0);
	
	uML_A_returnValueRecipient_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_returnValueRecipient_interactionUse_interactionUse.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_returnValueRecipient_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_returnValueRecipient_interactionUse_interactionUse->setValue(0);
	
	uML_A_returnValueRecipient_interactionUse_interactionUse_upperValue_LiteralUnlimitedNatural_UML_A_returnValueRecipient_interactionUse_interactionUse.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_returnValueRecipient_interactionUse_interactionUse_upperValue_LiteralUnlimitedNatural_UML_A_returnValueRecipient_interactionUse_interactionUse->setValue(-1);
	
	uML_A_returnValue_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_returnValue_interactionUse_interactionUse.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_returnValue_interactionUse_interactionUse_lowerValue_LiteralInteger_UML_A_returnValue_interactionUse_interactionUse->setValue(0);
	
	uML_A_roleBinding_collaborationUse_collaborationUse_lowerValue_LiteralInteger_UML_A_roleBinding_collaborationUse_collaborationUse.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_roleBinding_collaborationUse_collaborationUse_lowerValue_LiteralInteger_UML_A_roleBinding_collaborationUse_collaborationUse->setValue(0);
	
	uML_A_role_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_role_structuredClassifier_structuredClassifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_role_structuredClassifier_structuredClassifier_lowerValue_LiteralInteger_UML_A_role_structuredClassifier_structuredClassifier->setValue(0);
	
	uML_A_role_structuredClassifier_structuredClassifier_upperValue_LiteralUnlimitedNatural_UML_A_role_structuredClassifier_structuredClassifier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_role_structuredClassifier_structuredClassifier_upperValue_LiteralUnlimitedNatural_UML_A_role_structuredClassifier_structuredClassifier->setValue(-1);
	
	uML_A_second_testIdentityAction_testIdentityAction_lowerValue_LiteralInteger_UML_A_second_testIdentityAction_testIdentityAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_second_testIdentityAction_testIdentityAction_lowerValue_LiteralInteger_UML_A_second_testIdentityAction_testIdentityAction->setValue(0);
	
	uML_A_selection_objectFlow_objectFlow_lowerValue_LiteralInteger_UML_A_selection_objectFlow_objectFlow.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_selection_objectFlow_objectFlow_lowerValue_LiteralInteger_UML_A_selection_objectFlow_objectFlow->setValue(0);
	
	uML_A_selection_objectFlow_objectFlow_upperValue_LiteralUnlimitedNatural_UML_A_selection_objectFlow_objectFlow.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_selection_objectFlow_objectFlow_upperValue_LiteralUnlimitedNatural_UML_A_selection_objectFlow_objectFlow->setValue(-1);
	
	uML_A_selection_objectNode_objectNode_lowerValue_LiteralInteger_UML_A_selection_objectNode_objectNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_selection_objectNode_objectNode_lowerValue_LiteralInteger_UML_A_selection_objectNode_objectNode->setValue(0);
	
	uML_A_selection_objectNode_objectNode_upperValue_LiteralUnlimitedNatural_UML_A_selection_objectNode_objectNode.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_selection_objectNode_objectNode_upperValue_LiteralUnlimitedNatural_UML_A_selection_objectNode_objectNode->setValue(-1);
	
	uML_A_selector_lifeline_lifeline_lowerValue_LiteralInteger_UML_A_selector_lifeline_lifeline.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_selector_lifeline_lifeline_lowerValue_LiteralInteger_UML_A_selector_lifeline_lifeline->setValue(0);
	
	uML_A_sendEvent_endMessage_endMessage_lowerValue_LiteralInteger_UML_A_sendEvent_endMessage_endMessage.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_sendEvent_endMessage_endMessage_lowerValue_LiteralInteger_UML_A_sendEvent_endMessage_endMessage->setValue(0);
	
	uML_A_setupPart_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_setupPart_loopNode_loopNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_setupPart_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_setupPart_loopNode_loopNode->setValue(0);
	
	uML_A_signal_broadcastSignalAction_broadcastSignalAction_lowerValue_LiteralInteger_UML_A_signal_broadcastSignalAction_broadcastSignalAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_signal_broadcastSignalAction_broadcastSignalAction_lowerValue_LiteralInteger_UML_A_signal_broadcastSignalAction_broadcastSignalAction->setValue(0);
	
	uML_A_signal_broadcastSignalAction_broadcastSignalAction_upperValue_LiteralUnlimitedNatural_UML_A_signal_broadcastSignalAction_broadcastSignalAction.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_signal_broadcastSignalAction_broadcastSignalAction_upperValue_LiteralUnlimitedNatural_UML_A_signal_broadcastSignalAction_broadcastSignalAction->setValue(-1);
	
	uML_A_signal_reception_reception_lowerValue_LiteralInteger_UML_A_signal_reception_reception.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_signal_reception_reception_lowerValue_LiteralInteger_UML_A_signal_reception_reception->setValue(0);
	
	uML_A_signal_reception_reception_upperValue_LiteralUnlimitedNatural_UML_A_signal_reception_reception.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_signal_reception_reception_upperValue_LiteralUnlimitedNatural_UML_A_signal_reception_reception->setValue(-1);
	
	uML_A_signal_sendSignalAction_sendSignalAction_lowerValue_LiteralInteger_UML_A_signal_sendSignalAction_sendSignalAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_signal_sendSignalAction_sendSignalAction_lowerValue_LiteralInteger_UML_A_signal_sendSignalAction_sendSignalAction->setValue(0);
	
	uML_A_signal_sendSignalAction_sendSignalAction_upperValue_LiteralUnlimitedNatural_UML_A_signal_sendSignalAction_sendSignalAction.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_signal_sendSignalAction_sendSignalAction_upperValue_LiteralUnlimitedNatural_UML_A_signal_sendSignalAction_sendSignalAction->setValue(-1);
	
	uML_A_signal_signalEvent_signalEvent_lowerValue_LiteralInteger_UML_A_signal_signalEvent_signalEvent.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_signal_signalEvent_signalEvent_lowerValue_LiteralInteger_UML_A_signal_signalEvent_signalEvent->setValue(0);
	
	uML_A_signal_signalEvent_signalEvent_upperValue_LiteralUnlimitedNatural_UML_A_signal_signalEvent_signalEvent.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_signal_signalEvent_signalEvent_upperValue_LiteralUnlimitedNatural_UML_A_signal_signalEvent_signalEvent->setValue(-1);
	
	uML_A_signature_message_message_lowerValue_LiteralInteger_UML_A_signature_message_message.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_signature_message_message_lowerValue_LiteralInteger_UML_A_signature_message_message->setValue(0);
	
	uML_A_signature_message_message_upperValue_LiteralUnlimitedNatural_UML_A_signature_message_message.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_signature_message_message_upperValue_LiteralUnlimitedNatural_UML_A_signature_message_message->setValue(-1);
	
	uML_A_signature_templateBinding_templateBinding_lowerValue_LiteralInteger_UML_A_signature_templateBinding_templateBinding.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_signature_templateBinding_templateBinding_lowerValue_LiteralInteger_UML_A_signature_templateBinding_templateBinding->setValue(0);
	
	uML_A_signature_templateBinding_templateBinding_upperValue_LiteralUnlimitedNatural_UML_A_signature_templateBinding_templateBinding.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_signature_templateBinding_templateBinding_upperValue_LiteralUnlimitedNatural_UML_A_signature_templateBinding_templateBinding->setValue(-1);
	
	uML_A_source_directedRelationship_directedRelationship_lowerValue_LiteralInteger_UML_A_source_directedRelationship_directedRelationship.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_source_directedRelationship_directedRelationship_lowerValue_LiteralInteger_UML_A_source_directedRelationship_directedRelationship->setValue(0);
	
	uML_A_source_directedRelationship_directedRelationship_upperValue_LiteralUnlimitedNatural_UML_A_source_directedRelationship_directedRelationship.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_source_directedRelationship_directedRelationship_upperValue_LiteralUnlimitedNatural_UML_A_source_directedRelationship_directedRelationship->setValue(-1);
	
	uML_A_specification_durationConstraint_durationConstraint_lowerValue_LiteralInteger_UML_A_specification_durationConstraint_durationConstraint.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_specification_durationConstraint_durationConstraint_lowerValue_LiteralInteger_UML_A_specification_durationConstraint_durationConstraint->setValue(0);
	
	uML_A_specification_intervalConstraint_intervalConstraint_lowerValue_LiteralInteger_UML_A_specification_intervalConstraint_intervalConstraint.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_specification_intervalConstraint_intervalConstraint_lowerValue_LiteralInteger_UML_A_specification_intervalConstraint_intervalConstraint->setValue(0);
	
	uML_A_specification_owningConstraint_owningConstraint_lowerValue_LiteralInteger_UML_A_specification_owningConstraint_owningConstraint.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_specification_owningConstraint_owningConstraint_lowerValue_LiteralInteger_UML_A_specification_owningConstraint_owningConstraint->setValue(0);
	
	uML_A_specification_owningInstanceSpec_owningInstanceSpec_lowerValue_LiteralInteger_UML_A_specification_owningInstanceSpec_owningInstanceSpec.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_specification_owningInstanceSpec_owningInstanceSpec_lowerValue_LiteralInteger_UML_A_specification_owningInstanceSpec_owningInstanceSpec->setValue(0);
	
	uML_A_specification_timeConstraint_timeConstraint_lowerValue_LiteralInteger_UML_A_specification_timeConstraint_timeConstraint.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_specification_timeConstraint_timeConstraint_lowerValue_LiteralInteger_UML_A_specification_timeConstraint_timeConstraint->setValue(0);
	
	uML_A_start_executionSpecification_executionSpecification_lowerValue_LiteralInteger_UML_A_start_executionSpecification_executionSpecification.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_start_executionSpecification_executionSpecification_lowerValue_LiteralInteger_UML_A_start_executionSpecification_executionSpecification->setValue(0);
	
	uML_A_start_executionSpecification_executionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_start_executionSpecification_executionSpecification.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_start_executionSpecification_executionSpecification_upperValue_LiteralUnlimitedNatural_UML_A_start_executionSpecification_executionSpecification->setValue(-1);
	
	uML_A_stateInvariant_owningState_owningState_lowerValue_LiteralInteger_UML_A_stateInvariant_owningState_owningState.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_stateInvariant_owningState_owningState_lowerValue_LiteralInteger_UML_A_stateInvariant_owningState_owningState->setValue(0);
	
	uML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction_lowerValue_LiteralInteger_UML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction_lowerValue_LiteralInteger_UML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction->setValue(0);
	
	uML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction_upperValue_LiteralUnlimitedNatural_UML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction_upperValue_LiteralUnlimitedNatural_UML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction->setValue(-1);
	
	uML_A_structuredNodeInput_structuredActivityNode_structuredActivityNode_lowerValue_LiteralInteger_UML_A_structuredNodeInput_structuredActivityNode_structuredActivityNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_structuredNodeInput_structuredActivityNode_structuredActivityNode_lowerValue_LiteralInteger_UML_A_structuredNodeInput_structuredActivityNode_structuredActivityNode->setValue(0);
	
	uML_A_structuredNodeOutput_structuredActivityNode_structuredActivityNode_lowerValue_LiteralInteger_UML_A_structuredNodeOutput_structuredActivityNode_structuredActivityNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_structuredNodeOutput_structuredActivityNode_structuredActivityNode_lowerValue_LiteralInteger_UML_A_structuredNodeOutput_structuredActivityNode_structuredActivityNode->setValue(0);
	
	uML_A_structuredNode_activity_activity_lowerValue_LiteralInteger_UML_A_structuredNode_activity_activity.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_structuredNode_activity_activity_lowerValue_LiteralInteger_UML_A_structuredNode_activity_activity->setValue(0);
	
	uML_A_subsettedProperty_property_property_lowerValue_LiteralInteger_UML_A_subsettedProperty_property_property.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_subsettedProperty_property_property_lowerValue_LiteralInteger_UML_A_subsettedProperty_property_property->setValue(0);
	
	uML_A_subsettedProperty_property_property_upperValue_LiteralUnlimitedNatural_UML_A_subsettedProperty_property_property.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_subsettedProperty_property_property_upperValue_LiteralUnlimitedNatural_UML_A_subsettedProperty_property_property->setValue(-1);
	
	uML_A_superClass_class_class_lowerValue_LiteralInteger_UML_A_superClass_class_class.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_superClass_class_class_lowerValue_LiteralInteger_UML_A_superClass_class_class->setValue(0);
	
	uML_A_superClass_class_class_upperValue_LiteralUnlimitedNatural_UML_A_superClass_class_class.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_superClass_class_class_upperValue_LiteralUnlimitedNatural_UML_A_superClass_class_class->setValue(-1);
	
	uML_A_supplier_supplierDependency_supplierDependency_lowerValue_LiteralInteger_UML_A_supplier_supplierDependency_supplierDependency.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_supplier_supplierDependency_supplierDependency_lowerValue_LiteralInteger_UML_A_supplier_supplierDependency_supplierDependency->setValue(0);
	
	uML_A_supplier_supplierDependency_supplierDependency_upperValue_LiteralUnlimitedNatural_UML_A_supplier_supplierDependency_supplierDependency.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_supplier_supplierDependency_supplierDependency_upperValue_LiteralUnlimitedNatural_UML_A_supplier_supplierDependency_supplierDependency->setValue(-1);
	
	uML_A_target_callOperationAction_callOperationAction_lowerValue_LiteralInteger_UML_A_target_callOperationAction_callOperationAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_target_callOperationAction_callOperationAction_lowerValue_LiteralInteger_UML_A_target_callOperationAction_callOperationAction->setValue(0);
	
	uML_A_target_destroyObjectAction_destroyObjectAction_lowerValue_LiteralInteger_UML_A_target_destroyObjectAction_destroyObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_target_destroyObjectAction_destroyObjectAction_lowerValue_LiteralInteger_UML_A_target_destroyObjectAction_destroyObjectAction->setValue(0);
	
	uML_A_target_directedRelationship_directedRelationship_lowerValue_LiteralInteger_UML_A_target_directedRelationship_directedRelationship.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_target_directedRelationship_directedRelationship_lowerValue_LiteralInteger_UML_A_target_directedRelationship_directedRelationship->setValue(0);
	
	uML_A_target_directedRelationship_directedRelationship_upperValue_LiteralUnlimitedNatural_UML_A_target_directedRelationship_directedRelationship.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_target_directedRelationship_directedRelationship_upperValue_LiteralUnlimitedNatural_UML_A_target_directedRelationship_directedRelationship->setValue(-1);
	
	uML_A_target_sendObjectAction_sendObjectAction_lowerValue_LiteralInteger_UML_A_target_sendObjectAction_sendObjectAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_target_sendObjectAction_sendObjectAction_lowerValue_LiteralInteger_UML_A_target_sendObjectAction_sendObjectAction->setValue(0);
	
	uML_A_target_sendSignalAction_sendSignalAction_lowerValue_LiteralInteger_UML_A_target_sendSignalAction_sendSignalAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_target_sendSignalAction_sendSignalAction_lowerValue_LiteralInteger_UML_A_target_sendSignalAction_sendSignalAction->setValue(0);
	
	uML_A_test_clause_clause_lowerValue_LiteralInteger_UML_A_test_clause_clause.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_test_clause_clause_lowerValue_LiteralInteger_UML_A_test_clause_clause->setValue(0);
	
	uML_A_test_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_test_loopNode_loopNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_test_loopNode_loopNode_lowerValue_LiteralInteger_UML_A_test_loopNode_loopNode->setValue(0);
	
	uML_A_transformation_objectFlow_objectFlow_lowerValue_LiteralInteger_UML_A_transformation_objectFlow_objectFlow.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_transformation_objectFlow_objectFlow_lowerValue_LiteralInteger_UML_A_transformation_objectFlow_objectFlow->setValue(0);
	
	uML_A_transformation_objectFlow_objectFlow_upperValue_LiteralUnlimitedNatural_UML_A_transformation_objectFlow_objectFlow.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_transformation_objectFlow_objectFlow_upperValue_LiteralUnlimitedNatural_UML_A_transformation_objectFlow_objectFlow->setValue(-1);
	
	uML_A_trigger_acceptEventAction_acceptEventAction_lowerValue_LiteralInteger_UML_A_trigger_acceptEventAction_acceptEventAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_trigger_acceptEventAction_acceptEventAction_lowerValue_LiteralInteger_UML_A_trigger_acceptEventAction_acceptEventAction->setValue(0);
	
	uML_A_trigger_transition_transition_lowerValue_LiteralInteger_UML_A_trigger_transition_transition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_trigger_transition_transition_lowerValue_LiteralInteger_UML_A_trigger_transition_transition->setValue(0);
	
	uML_A_type_collaborationUse_collaborationUse_lowerValue_LiteralInteger_UML_A_type_collaborationUse_collaborationUse.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_type_collaborationUse_collaborationUse_lowerValue_LiteralInteger_UML_A_type_collaborationUse_collaborationUse->setValue(0);
	
	uML_A_type_collaborationUse_collaborationUse_upperValue_LiteralUnlimitedNatural_UML_A_type_collaborationUse_collaborationUse.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_type_collaborationUse_collaborationUse_upperValue_LiteralUnlimitedNatural_UML_A_type_collaborationUse_collaborationUse->setValue(-1);
	
	uML_A_type_connector_connector_lowerValue_LiteralInteger_UML_A_type_connector_connector.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_type_connector_connector_lowerValue_LiteralInteger_UML_A_type_connector_connector->setValue(0);
	
	uML_A_type_connector_connector_upperValue_LiteralUnlimitedNatural_UML_A_type_connector_connector.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_type_connector_connector_upperValue_LiteralUnlimitedNatural_UML_A_type_connector_connector->setValue(-1);
	
	uML_A_type_extensionEnd_extensionEnd_lowerValue_LiteralInteger_UML_A_type_extensionEnd_extensionEnd.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_type_extensionEnd_extensionEnd_lowerValue_LiteralInteger_UML_A_type_extensionEnd_extensionEnd->setValue(0);
	
	uML_A_type_extensionEnd_extensionEnd_upperValue_LiteralUnlimitedNatural_UML_A_type_extensionEnd_extensionEnd.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_type_extensionEnd_extensionEnd_upperValue_LiteralUnlimitedNatural_UML_A_type_extensionEnd_extensionEnd->setValue(-1);
	
	uML_A_type_operation_operation_lowerValue_LiteralInteger_UML_A_type_operation_operation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_type_operation_operation_lowerValue_LiteralInteger_UML_A_type_operation_operation->setValue(0);
	
	uML_A_type_operation_operation_upperValue_LiteralUnlimitedNatural_UML_A_type_operation_operation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_type_operation_operation_upperValue_LiteralUnlimitedNatural_UML_A_type_operation_operation->setValue(-1);
	
	uML_A_type_typedElement_typedElement_lowerValue_LiteralInteger_UML_A_type_typedElement_typedElement.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_type_typedElement_typedElement_lowerValue_LiteralInteger_UML_A_type_typedElement_typedElement->setValue(0);
	
	uML_A_type_typedElement_typedElement_upperValue_LiteralUnlimitedNatural_UML_A_type_typedElement_typedElement.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_type_typedElement_typedElement_upperValue_LiteralUnlimitedNatural_UML_A_type_typedElement_typedElement->setValue(-1);
	
	uML_A_unmarshallType_unmarshallAction_unmarshallAction_lowerValue_LiteralInteger_UML_A_unmarshallType_unmarshallAction_unmarshallAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_unmarshallType_unmarshallAction_unmarshallAction_lowerValue_LiteralInteger_UML_A_unmarshallType_unmarshallAction_unmarshallAction->setValue(0);
	
	uML_A_unmarshallType_unmarshallAction_unmarshallAction_upperValue_LiteralUnlimitedNatural_UML_A_unmarshallType_unmarshallAction_unmarshallAction.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_unmarshallType_unmarshallAction_unmarshallAction_upperValue_LiteralUnlimitedNatural_UML_A_unmarshallType_unmarshallAction_unmarshallAction->setValue(-1);
	
	uML_A_upperBound_objectNode_objectNode_lowerValue_LiteralInteger_UML_A_upperBound_objectNode_objectNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_upperBound_objectNode_objectNode_lowerValue_LiteralInteger_UML_A_upperBound_objectNode_objectNode->setValue(0);
	
	uML_A_upperValue_owningUpper_owningUpper_lowerValue_LiteralInteger_UML_A_upperValue_owningUpper_owningUpper.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_upperValue_owningUpper_owningUpper_lowerValue_LiteralInteger_UML_A_upperValue_owningUpper_owningUpper->setValue(0);
	
	uML_A_utilizedElement_manifestation_manifestation_lowerValue_LiteralInteger_UML_A_utilizedElement_manifestation_manifestation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_utilizedElement_manifestation_manifestation_lowerValue_LiteralInteger_UML_A_utilizedElement_manifestation_manifestation->setValue(0);
	
	uML_A_utilizedElement_manifestation_manifestation_upperValue_LiteralUnlimitedNatural_UML_A_utilizedElement_manifestation_manifestation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_utilizedElement_manifestation_manifestation_upperValue_LiteralUnlimitedNatural_UML_A_utilizedElement_manifestation_manifestation->setValue(-1);
	
	uML_A_value_linkEndData_linkEndData_lowerValue_LiteralInteger_UML_A_value_linkEndData_linkEndData.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_value_linkEndData_linkEndData_lowerValue_LiteralInteger_UML_A_value_linkEndData_linkEndData->setValue(0);
	
	uML_A_value_owningSlot_owningSlot_lowerValue_LiteralInteger_UML_A_value_owningSlot_owningSlot.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_value_owningSlot_owningSlot_lowerValue_LiteralInteger_UML_A_value_owningSlot_owningSlot->setValue(0);
	
	uML_A_value_qualifierValue_qualifierValue_lowerValue_LiteralInteger_UML_A_value_qualifierValue_qualifierValue.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_value_qualifierValue_qualifierValue_lowerValue_LiteralInteger_UML_A_value_qualifierValue_qualifierValue->setValue(0);
	
	uML_A_value_valuePin_valuePin_lowerValue_LiteralInteger_UML_A_value_valuePin_valuePin.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_value_valuePin_valuePin_lowerValue_LiteralInteger_UML_A_value_valuePin_valuePin->setValue(0);
	
	uML_A_value_valueSpecificationAction_valueSpecificationAction_lowerValue_LiteralInteger_UML_A_value_valueSpecificationAction_valueSpecificationAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_value_valueSpecificationAction_valueSpecificationAction_lowerValue_LiteralInteger_UML_A_value_valueSpecificationAction_valueSpecificationAction->setValue(0);
	
	uML_A_value_writeStructuralFeatureAction_writeStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_value_writeStructuralFeatureAction_writeStructuralFeatureAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_value_writeStructuralFeatureAction_writeStructuralFeatureAction_lowerValue_LiteralInteger_UML_A_value_writeStructuralFeatureAction_writeStructuralFeatureAction->setValue(0);
	
	uML_A_value_writeVariableAction_writeVariableAction_lowerValue_LiteralInteger_UML_A_value_writeVariableAction_writeVariableAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_value_writeVariableAction_writeVariableAction_lowerValue_LiteralInteger_UML_A_value_writeVariableAction_writeVariableAction->setValue(0);
	
	uML_A_variable_variableAction_variableAction_lowerValue_LiteralInteger_UML_A_variable_variableAction_variableAction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_variable_variableAction_variableAction_lowerValue_LiteralInteger_UML_A_variable_variableAction_variableAction->setValue(0);
	
	uML_A_variable_variableAction_variableAction_upperValue_LiteralUnlimitedNatural_UML_A_variable_variableAction_variableAction.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_A_variable_variableAction_variableAction_upperValue_LiteralUnlimitedNatural_UML_A_variable_variableAction_variableAction->setValue(-1);
	
	uML_A_weight_activityEdge_activityEdge_lowerValue_LiteralInteger_UML_A_weight_activityEdge_activityEdge.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_weight_activityEdge_activityEdge_lowerValue_LiteralInteger_UML_A_weight_activityEdge_activityEdge->setValue(0);
	
	uML_A_when_timeEvent_timeEvent_lowerValue_LiteralInteger_UML_A_when_timeEvent_timeEvent.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_A_when_timeEvent_timeEvent_lowerValue_LiteralInteger_UML_A_when_timeEvent_timeEvent->setValue(0);
	
	uML_Abstraction_mapping_lowerValue_LiteralInteger_UML_Abstraction_mapping.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Abstraction_mapping_lowerValue_LiteralInteger_UML_Abstraction_mapping->setValue(0);
	
	uML_AcceptCallAction_result_pins_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_AcceptCallAction_trigger_call_event_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_AcceptCallAction_unmarshall_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_AcceptEventAction_conforming_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_AcceptEventAction_isUnmarshall_defaultValue_LiteralBoolean_UML_AcceptEventAction_isUnmarshall.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_AcceptEventAction_isUnmarshall_defaultValue_LiteralBoolean_UML_AcceptEventAction_isUnmarshall->setValue(false);
	
	uML_AcceptEventAction_no_input_pins_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_AcceptEventAction_no_output_pins_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_AcceptEventAction_one_output_pin_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_AcceptEventAction_result_lowerValue_LiteralInteger_UML_AcceptEventAction_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_AcceptEventAction_result_lowerValue_LiteralInteger_UML_AcceptEventAction_result->setValue(0);
	
	uML_AcceptEventAction_result_upperValue_LiteralUnlimitedNatural_UML_AcceptEventAction_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_AcceptEventAction_result_upperValue_LiteralUnlimitedNatural_UML_AcceptEventAction_result->setValue(-1);
	
	uML_AcceptEventAction_trigger_upperValue_LiteralUnlimitedNatural_UML_AcceptEventAction_trigger.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_AcceptEventAction_trigger_upperValue_LiteralUnlimitedNatural_UML_AcceptEventAction_trigger->setValue(-1);
	
	uML_AcceptEventAction_unmarshall_signal_events_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Action_allActions_result_lowerValue_LiteralInteger_UML_Action_allActions_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Action_allActions_result_lowerValue_LiteralInteger_UML_Action_allActions_result->setValue(0);
	
	uML_Action_allActions_result_upperValue_LiteralUnlimitedNatural_UML_Action_allActions_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Action_allActions_result_upperValue_LiteralUnlimitedNatural_UML_Action_allActions_result->setValue(-1);
	
	uML_Action_allActions_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Action_allOwnedNodes_result_lowerValue_LiteralInteger_UML_Action_allOwnedNodes_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Action_allOwnedNodes_result_lowerValue_LiteralInteger_UML_Action_allOwnedNodes_result->setValue(0);
	
	uML_Action_allOwnedNodes_result_upperValue_LiteralUnlimitedNatural_UML_Action_allOwnedNodes_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Action_allOwnedNodes_result_upperValue_LiteralUnlimitedNatural_UML_Action_allOwnedNodes_result->setValue(-1);
	
	uML_Action_allOwnedNodes_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Action_containingBehavior_result_lowerValue_LiteralInteger_UML_Action_containingBehavior_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Action_containingBehavior_result_lowerValue_LiteralInteger_UML_Action_containingBehavior_result->setValue(0);
	
	uML_Action_containingBehavior_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Action_context_result_lowerValue_LiteralInteger_UML_Action_context_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Action_context_result_lowerValue_LiteralInteger_UML_Action_context_result->setValue(0);
	
	uML_Action_context_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Action_context_lowerValue_LiteralInteger_UML_Action_context.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Action_context_lowerValue_LiteralInteger_UML_Action_context->setValue(0);
	
	uML_Action_input_lowerValue_LiteralInteger_UML_Action_input.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Action_input_lowerValue_LiteralInteger_UML_Action_input->setValue(0);
	
	uML_Action_input_upperValue_LiteralUnlimitedNatural_UML_Action_input.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Action_input_upperValue_LiteralUnlimitedNatural_UML_Action_input->setValue(-1);
	
	uML_Action_isLocallyReentrant_defaultValue_LiteralBoolean_UML_Action_isLocallyReentrant.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Action_isLocallyReentrant_defaultValue_LiteralBoolean_UML_Action_isLocallyReentrant->setValue(false);
	
	uML_Action_localPostcondition_lowerValue_LiteralInteger_UML_Action_localPostcondition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Action_localPostcondition_lowerValue_LiteralInteger_UML_Action_localPostcondition->setValue(0);
	
	uML_Action_localPostcondition_upperValue_LiteralUnlimitedNatural_UML_Action_localPostcondition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Action_localPostcondition_upperValue_LiteralUnlimitedNatural_UML_Action_localPostcondition->setValue(-1);
	
	uML_Action_localPrecondition_lowerValue_LiteralInteger_UML_Action_localPrecondition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Action_localPrecondition_lowerValue_LiteralInteger_UML_Action_localPrecondition->setValue(0);
	
	uML_Action_localPrecondition_upperValue_LiteralUnlimitedNatural_UML_Action_localPrecondition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Action_localPrecondition_upperValue_LiteralUnlimitedNatural_UML_Action_localPrecondition->setValue(-1);
	
	uML_Action_output_lowerValue_LiteralInteger_UML_Action_output.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Action_output_lowerValue_LiteralInteger_UML_Action_output->setValue(0);
	
	uML_Action_output_upperValue_LiteralUnlimitedNatural_UML_Action_output.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Action_output_upperValue_LiteralUnlimitedNatural_UML_Action_output->setValue(-1);
	
	uML_ActionExecutionSpecification_action_referenced_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActionInputPin_input_pin_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActionInputPin_no_control_or_object_flow_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActionInputPin_one_output_pin_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Activity_edge_lowerValue_LiteralInteger_UML_Activity_edge.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Activity_edge_lowerValue_LiteralInteger_UML_Activity_edge->setValue(0);
	
	uML_Activity_edge_upperValue_LiteralUnlimitedNatural_UML_Activity_edge.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Activity_edge_upperValue_LiteralUnlimitedNatural_UML_Activity_edge->setValue(-1);
	
	uML_Activity_group_lowerValue_LiteralInteger_UML_Activity_group.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Activity_group_lowerValue_LiteralInteger_UML_Activity_group->setValue(0);
	
	uML_Activity_group_upperValue_LiteralUnlimitedNatural_UML_Activity_group.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Activity_group_upperValue_LiteralUnlimitedNatural_UML_Activity_group->setValue(-1);
	
	uML_Activity_isReadOnly_defaultValue_LiteralBoolean_UML_Activity_isReadOnly.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Activity_isReadOnly_defaultValue_LiteralBoolean_UML_Activity_isReadOnly->setValue(false);
	
	uML_Activity_isSingleExecution_defaultValue_LiteralBoolean_UML_Activity_isSingleExecution.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Activity_isSingleExecution_defaultValue_LiteralBoolean_UML_Activity_isSingleExecution->setValue(false);
	
	uML_Activity_maximum_one_parameter_node_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Activity_maximum_two_parameter_nodes_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Activity_node_lowerValue_LiteralInteger_UML_Activity_node.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Activity_node_lowerValue_LiteralInteger_UML_Activity_node->setValue(0);
	
	uML_Activity_node_upperValue_LiteralUnlimitedNatural_UML_Activity_node.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Activity_node_upperValue_LiteralUnlimitedNatural_UML_Activity_node->setValue(-1);
	
	uML_Activity_ownedGroup_lowerValue_LiteralInteger_UML_Activity_ownedGroup.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Activity_ownedGroup_lowerValue_LiteralInteger_UML_Activity_ownedGroup->setValue(0);
	
	uML_Activity_ownedGroup_upperValue_LiteralUnlimitedNatural_UML_Activity_ownedGroup.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Activity_ownedGroup_upperValue_LiteralUnlimitedNatural_UML_Activity_ownedGroup->setValue(-1);
	
	uML_Activity_ownedNode_lowerValue_LiteralInteger_UML_Activity_ownedNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Activity_ownedNode_lowerValue_LiteralInteger_UML_Activity_ownedNode->setValue(0);
	
	uML_Activity_ownedNode_upperValue_LiteralUnlimitedNatural_UML_Activity_ownedNode.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Activity_ownedNode_upperValue_LiteralUnlimitedNatural_UML_Activity_ownedNode->setValue(-1);
	
	uML_Activity_partition_lowerValue_LiteralInteger_UML_Activity_partition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Activity_partition_lowerValue_LiteralInteger_UML_Activity_partition->setValue(0);
	
	uML_Activity_partition_upperValue_LiteralUnlimitedNatural_UML_Activity_partition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Activity_partition_upperValue_LiteralUnlimitedNatural_UML_Activity_partition->setValue(-1);
	
	uML_Activity_structuredNode_lowerValue_LiteralInteger_UML_Activity_structuredNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Activity_structuredNode_lowerValue_LiteralInteger_UML_Activity_structuredNode->setValue(0);
	
	uML_Activity_structuredNode_upperValue_LiteralUnlimitedNatural_UML_Activity_structuredNode.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Activity_structuredNode_upperValue_LiteralUnlimitedNatural_UML_Activity_structuredNode->setValue(-1);
	
	uML_Activity_variable_lowerValue_LiteralInteger_UML_Activity_variable.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Activity_variable_lowerValue_LiteralInteger_UML_Activity_variable->setValue(0);
	
	uML_Activity_variable_upperValue_LiteralUnlimitedNatural_UML_Activity_variable.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Activity_variable_upperValue_LiteralUnlimitedNatural_UML_Activity_variable->setValue(-1);
	
	uML_ActivityContent_containingActivity_containingActivity_lowerValue_LiteralInteger_UML_ActivityContent_containingActivity_containingActivity.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityContent_containingActivity_containingActivity_lowerValue_LiteralInteger_UML_ActivityContent_containingActivity_containingActivity->setValue(0);
	
	uML_ActivityEdge_activity_lowerValue_LiteralInteger_UML_ActivityEdge_activity.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityEdge_activity_lowerValue_LiteralInteger_UML_ActivityEdge_activity->setValue(0);
	
	uML_ActivityEdge_guard_lowerValue_LiteralInteger_UML_ActivityEdge_guard.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityEdge_guard_lowerValue_LiteralInteger_UML_ActivityEdge_guard->setValue(0);
	
	uML_ActivityEdge_inGroup_lowerValue_LiteralInteger_UML_ActivityEdge_inGroup.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityEdge_inGroup_lowerValue_LiteralInteger_UML_ActivityEdge_inGroup->setValue(0);
	
	uML_ActivityEdge_inGroup_upperValue_LiteralUnlimitedNatural_UML_ActivityEdge_inGroup.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ActivityEdge_inGroup_upperValue_LiteralUnlimitedNatural_UML_ActivityEdge_inGroup->setValue(-1);
	
	uML_ActivityEdge_inPartition_lowerValue_LiteralInteger_UML_ActivityEdge_inPartition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityEdge_inPartition_lowerValue_LiteralInteger_UML_ActivityEdge_inPartition->setValue(0);
	
	uML_ActivityEdge_inPartition_upperValue_LiteralUnlimitedNatural_UML_ActivityEdge_inPartition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ActivityEdge_inPartition_upperValue_LiteralUnlimitedNatural_UML_ActivityEdge_inPartition->setValue(-1);
	
	uML_ActivityEdge_inStructuredNode_lowerValue_LiteralInteger_UML_ActivityEdge_inStructuredNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityEdge_inStructuredNode_lowerValue_LiteralInteger_UML_ActivityEdge_inStructuredNode->setValue(0);
	
	uML_ActivityEdge_interrupts_lowerValue_LiteralInteger_UML_ActivityEdge_interrupts.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityEdge_interrupts_lowerValue_LiteralInteger_UML_ActivityEdge_interrupts->setValue(0);
	
	uML_ActivityEdge_isConsistentWith_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityEdge_redefinedEdge_lowerValue_LiteralInteger_UML_ActivityEdge_redefinedEdge.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityEdge_redefinedEdge_lowerValue_LiteralInteger_UML_ActivityEdge_redefinedEdge->setValue(0);
	
	uML_ActivityEdge_redefinedEdge_upperValue_LiteralUnlimitedNatural_UML_ActivityEdge_redefinedEdge.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ActivityEdge_redefinedEdge_upperValue_LiteralUnlimitedNatural_UML_ActivityEdge_redefinedEdge->setValue(-1);
	
	uML_ActivityEdge_source_and_target_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityEdge_weight_lowerValue_LiteralInteger_UML_ActivityEdge_weight.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityEdge_weight_lowerValue_LiteralInteger_UML_ActivityEdge_weight->setValue(0);
	
	uML_ActivityGroup_containedEdge_lowerValue_LiteralInteger_UML_ActivityGroup_containedEdge.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityGroup_containedEdge_lowerValue_LiteralInteger_UML_ActivityGroup_containedEdge->setValue(0);
	
	uML_ActivityGroup_containedEdge_upperValue_LiteralUnlimitedNatural_UML_ActivityGroup_containedEdge.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ActivityGroup_containedEdge_upperValue_LiteralUnlimitedNatural_UML_ActivityGroup_containedEdge->setValue(-1);
	
	uML_ActivityGroup_containedNode_lowerValue_LiteralInteger_UML_ActivityGroup_containedNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityGroup_containedNode_lowerValue_LiteralInteger_UML_ActivityGroup_containedNode->setValue(0);
	
	uML_ActivityGroup_containedNode_upperValue_LiteralUnlimitedNatural_UML_ActivityGroup_containedNode.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ActivityGroup_containedNode_upperValue_LiteralUnlimitedNatural_UML_ActivityGroup_containedNode->setValue(-1);
	
	uML_ActivityGroup_containingActivity_result_lowerValue_LiteralInteger_UML_ActivityGroup_containingActivity_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityGroup_containingActivity_result_lowerValue_LiteralInteger_UML_ActivityGroup_containingActivity_result->setValue(0);
	
	uML_ActivityGroup_containingActivity_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityGroup_inActivity_lowerValue_LiteralInteger_UML_ActivityGroup_inActivity.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityGroup_inActivity_lowerValue_LiteralInteger_UML_ActivityGroup_inActivity->setValue(0);
	
	uML_ActivityGroup_nodes_and_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityGroup_not_contained_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityGroup_subgroup_lowerValue_LiteralInteger_UML_ActivityGroup_subgroup.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityGroup_subgroup_lowerValue_LiteralInteger_UML_ActivityGroup_subgroup->setValue(0);
	
	uML_ActivityGroup_subgroup_upperValue_LiteralUnlimitedNatural_UML_ActivityGroup_subgroup.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ActivityGroup_subgroup_upperValue_LiteralUnlimitedNatural_UML_ActivityGroup_subgroup->setValue(-1);
	
	uML_ActivityGroup_superGroup_lowerValue_LiteralInteger_UML_ActivityGroup_superGroup.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityGroup_superGroup_lowerValue_LiteralInteger_UML_ActivityGroup_superGroup->setValue(0);
	
	uML_ActivityNode_activity_lowerValue_LiteralInteger_UML_ActivityNode_activity.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityNode_activity_lowerValue_LiteralInteger_UML_ActivityNode_activity->setValue(0);
	
	uML_ActivityNode_containingActivity_result_lowerValue_LiteralInteger_UML_ActivityNode_containingActivity_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityNode_containingActivity_result_lowerValue_LiteralInteger_UML_ActivityNode_containingActivity_result->setValue(0);
	
	uML_ActivityNode_containingActivity_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityNode_inGroup_lowerValue_LiteralInteger_UML_ActivityNode_inGroup.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityNode_inGroup_lowerValue_LiteralInteger_UML_ActivityNode_inGroup->setValue(0);
	
	uML_ActivityNode_inGroup_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_inGroup.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ActivityNode_inGroup_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_inGroup->setValue(-1);
	
	uML_ActivityNode_inInterruptibleRegion_lowerValue_LiteralInteger_UML_ActivityNode_inInterruptibleRegion.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityNode_inInterruptibleRegion_lowerValue_LiteralInteger_UML_ActivityNode_inInterruptibleRegion->setValue(0);
	
	uML_ActivityNode_inInterruptibleRegion_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_inInterruptibleRegion.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ActivityNode_inInterruptibleRegion_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_inInterruptibleRegion->setValue(-1);
	
	uML_ActivityNode_inPartition_lowerValue_LiteralInteger_UML_ActivityNode_inPartition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityNode_inPartition_lowerValue_LiteralInteger_UML_ActivityNode_inPartition->setValue(0);
	
	uML_ActivityNode_inPartition_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_inPartition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ActivityNode_inPartition_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_inPartition->setValue(-1);
	
	uML_ActivityNode_inStructuredNode_lowerValue_LiteralInteger_UML_ActivityNode_inStructuredNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityNode_inStructuredNode_lowerValue_LiteralInteger_UML_ActivityNode_inStructuredNode->setValue(0);
	
	uML_ActivityNode_incoming_lowerValue_LiteralInteger_UML_ActivityNode_incoming.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityNode_incoming_lowerValue_LiteralInteger_UML_ActivityNode_incoming->setValue(0);
	
	uML_ActivityNode_incoming_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_incoming.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ActivityNode_incoming_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_incoming->setValue(-1);
	
	uML_ActivityNode_isConsistentWith_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityNode_outgoing_lowerValue_LiteralInteger_UML_ActivityNode_outgoing.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityNode_outgoing_lowerValue_LiteralInteger_UML_ActivityNode_outgoing->setValue(0);
	
	uML_ActivityNode_outgoing_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_outgoing.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ActivityNode_outgoing_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_outgoing->setValue(-1);
	
	uML_ActivityNode_redefinedNode_lowerValue_LiteralInteger_UML_ActivityNode_redefinedNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityNode_redefinedNode_lowerValue_LiteralInteger_UML_ActivityNode_redefinedNode->setValue(0);
	
	uML_ActivityNode_redefinedNode_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_redefinedNode.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ActivityNode_redefinedNode_upperValue_LiteralUnlimitedNatural_UML_ActivityNode_redefinedNode->setValue(-1);
	
	uML_ActivityParameterNode_has_parameters_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityParameterNode_no_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityParameterNode_no_incoming_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityParameterNode_no_outgoing_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityParameterNode_same_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityPartition_dimension_not_contained_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityPartition_edge_lowerValue_LiteralInteger_UML_ActivityPartition_edge.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityPartition_edge_lowerValue_LiteralInteger_UML_ActivityPartition_edge->setValue(0);
	
	uML_ActivityPartition_edge_upperValue_LiteralUnlimitedNatural_UML_ActivityPartition_edge.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ActivityPartition_edge_upperValue_LiteralUnlimitedNatural_UML_ActivityPartition_edge->setValue(-1);
	
	uML_ActivityPartition_isDimension_defaultValue_LiteralBoolean_UML_ActivityPartition_isDimension.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_ActivityPartition_isDimension_defaultValue_LiteralBoolean_UML_ActivityPartition_isDimension->setValue(false);
	
	uML_ActivityPartition_isExternal_defaultValue_LiteralBoolean_UML_ActivityPartition_isExternal.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_ActivityPartition_isExternal_defaultValue_LiteralBoolean_UML_ActivityPartition_isExternal->setValue(false);
	
	uML_ActivityPartition_node_lowerValue_LiteralInteger_UML_ActivityPartition_node.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityPartition_node_lowerValue_LiteralInteger_UML_ActivityPartition_node->setValue(0);
	
	uML_ActivityPartition_node_upperValue_LiteralUnlimitedNatural_UML_ActivityPartition_node.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ActivityPartition_node_upperValue_LiteralUnlimitedNatural_UML_ActivityPartition_node->setValue(-1);
	
	uML_ActivityPartition_represents_classifier_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityPartition_represents_lowerValue_LiteralInteger_UML_ActivityPartition_represents.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityPartition_represents_lowerValue_LiteralInteger_UML_ActivityPartition_represents->setValue(0);
	
	uML_ActivityPartition_represents_property_and_is_contained_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityPartition_represents_property_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ActivityPartition_subpartition_lowerValue_LiteralInteger_UML_ActivityPartition_subpartition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityPartition_subpartition_lowerValue_LiteralInteger_UML_ActivityPartition_subpartition->setValue(0);
	
	uML_ActivityPartition_subpartition_upperValue_LiteralUnlimitedNatural_UML_ActivityPartition_subpartition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ActivityPartition_subpartition_upperValue_LiteralUnlimitedNatural_UML_ActivityPartition_subpartition->setValue(-1);
	
	uML_ActivityPartition_superPartition_lowerValue_LiteralInteger_UML_ActivityPartition_superPartition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ActivityPartition_superPartition_lowerValue_LiteralInteger_UML_ActivityPartition_superPartition->setValue(0);
	
	uML_Actor_associations_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Actor_must_have_name_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_AddStructuralFeatureValueAction_insertAt_lowerValue_LiteralInteger_UML_AddStructuralFeatureValueAction_insertAt.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_AddStructuralFeatureValueAction_insertAt_lowerValue_LiteralInteger_UML_AddStructuralFeatureValueAction_insertAt->setValue(0);
	
	uML_AddStructuralFeatureValueAction_insertAt_pin_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_AddStructuralFeatureValueAction_isReplaceAll_defaultValue_LiteralBoolean_UML_AddStructuralFeatureValueAction_isReplaceAll.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_AddStructuralFeatureValueAction_isReplaceAll_defaultValue_LiteralBoolean_UML_AddStructuralFeatureValueAction_isReplaceAll->setValue(false);
	
	uML_AddStructuralFeatureValueAction_required_value_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_AddVariableValueAction_insertAt_lowerValue_LiteralInteger_UML_AddVariableValueAction_insertAt.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_AddVariableValueAction_insertAt_lowerValue_LiteralInteger_UML_AddVariableValueAction_insertAt->setValue(0);
	
	uML_AddVariableValueAction_insertAt_pin_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_AddVariableValueAction_isReplaceAll_defaultValue_LiteralBoolean_UML_AddVariableValueAction_isReplaceAll.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_AddVariableValueAction_isReplaceAll_defaultValue_LiteralBoolean_UML_AddVariableValueAction_isReplaceAll->setValue(false);
	
	uML_AddVariableValueAction_required_value_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name_lowerValue_LiteralInteger_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name_lowerValue_LiteralInteger_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name->setValue(0);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name->setValue(1);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type_lowerValue_LiteralInteger_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type_lowerValue_LiteralInteger_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type->setValue(0);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type->setValue(1);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name->setValue(0);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name->setValue(1);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames->setValue(0);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames->setValue(-1);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes->setValue(0);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes->setValue(-1);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType_lowerValue_LiteralInteger_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType->setValue(0);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType_upperValue_LiteralUnlimitedNatural_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType->setValue(1);
	
	uML_Artifact_fileName_lowerValue_LiteralInteger_UML_Artifact_fileName.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Artifact_fileName_lowerValue_LiteralInteger_UML_Artifact_fileName->setValue(0);
	
	uML_Artifact_manifestation_lowerValue_LiteralInteger_UML_Artifact_manifestation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Artifact_manifestation_lowerValue_LiteralInteger_UML_Artifact_manifestation->setValue(0);
	
	uML_Artifact_manifestation_upperValue_LiteralUnlimitedNatural_UML_Artifact_manifestation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Artifact_manifestation_upperValue_LiteralUnlimitedNatural_UML_Artifact_manifestation->setValue(-1);
	
	uML_Artifact_nestedArtifact_lowerValue_LiteralInteger_UML_Artifact_nestedArtifact.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Artifact_nestedArtifact_lowerValue_LiteralInteger_UML_Artifact_nestedArtifact->setValue(0);
	
	uML_Artifact_nestedArtifact_upperValue_LiteralUnlimitedNatural_UML_Artifact_nestedArtifact.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Artifact_nestedArtifact_upperValue_LiteralUnlimitedNatural_UML_Artifact_nestedArtifact->setValue(-1);
	
	uML_Artifact_ownedAttribute_lowerValue_LiteralInteger_UML_Artifact_ownedAttribute.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Artifact_ownedAttribute_lowerValue_LiteralInteger_UML_Artifact_ownedAttribute->setValue(0);
	
	uML_Artifact_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Artifact_ownedAttribute.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Artifact_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Artifact_ownedAttribute->setValue(-1);
	
	uML_Artifact_ownedOperation_lowerValue_LiteralInteger_UML_Artifact_ownedOperation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Artifact_ownedOperation_lowerValue_LiteralInteger_UML_Artifact_ownedOperation->setValue(0);
	
	uML_Artifact_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_Artifact_ownedOperation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Artifact_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_Artifact_ownedOperation->setValue(-1);
	
	uML_Association_association_ends_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Association_binary_associations_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Association_endType_result_upperValue_LiteralUnlimitedNatural_UML_Association_endType_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Association_endType_result_upperValue_LiteralUnlimitedNatural_UML_Association_endType_result->setValue(-1);
	
	uML_Association_endType_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Association_endType_upperValue_LiteralUnlimitedNatural_UML_Association_endType.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Association_endType_upperValue_LiteralUnlimitedNatural_UML_Association_endType->setValue(-1);
	
	uML_Association_ends_must_be_typed_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Association_isDerived_defaultValue_LiteralBoolean_UML_Association_isDerived.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Association_isDerived_defaultValue_LiteralBoolean_UML_Association_isDerived->setValue(false);
	
	uML_Association_memberEnd_lowerValue_LiteralInteger_UML_Association_memberEnd.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Association_memberEnd_lowerValue_LiteralInteger_UML_Association_memberEnd->setValue(2);
	
	uML_Association_memberEnd_upperValue_LiteralUnlimitedNatural_UML_Association_memberEnd.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Association_memberEnd_upperValue_LiteralUnlimitedNatural_UML_Association_memberEnd->setValue(-1);
	
	uML_Association_navigableOwnedEnd_lowerValue_LiteralInteger_UML_Association_navigableOwnedEnd.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Association_navigableOwnedEnd_lowerValue_LiteralInteger_UML_Association_navigableOwnedEnd->setValue(0);
	
	uML_Association_navigableOwnedEnd_upperValue_LiteralUnlimitedNatural_UML_Association_navigableOwnedEnd.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Association_navigableOwnedEnd_upperValue_LiteralUnlimitedNatural_UML_Association_navigableOwnedEnd->setValue(-1);
	
	uML_Association_ownedEnd_lowerValue_LiteralInteger_UML_Association_ownedEnd.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Association_ownedEnd_lowerValue_LiteralInteger_UML_Association_ownedEnd->setValue(0);
	
	uML_Association_ownedEnd_upperValue_LiteralUnlimitedNatural_UML_Association_ownedEnd.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Association_ownedEnd_upperValue_LiteralUnlimitedNatural_UML_Association_ownedEnd->setValue(-1);
	
	uML_Association_specialized_end_number_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Association_specialized_end_types_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_AssociationClass_cannot_be_defined_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_AssociationClass_disjoint_attributes_ends_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Behavior_behavioredClassifier_result_lowerValue_LiteralInteger_UML_Behavior_behavioredClassifier_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Behavior_behavioredClassifier_result_lowerValue_LiteralInteger_UML_Behavior_behavioredClassifier_result->setValue(0);
	
	uML_Behavior_behavioredClassifier_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Behavior_context_result_lowerValue_LiteralInteger_UML_Behavior_context_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Behavior_context_result_lowerValue_LiteralInteger_UML_Behavior_context_result->setValue(0);
	
	uML_Behavior_context_result_upperValue_LiteralUnlimitedNatural_UML_Behavior_context_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Behavior_context_result_upperValue_LiteralUnlimitedNatural_UML_Behavior_context_result->setValue(1);
	
	uML_Behavior_context_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Behavior_context_lowerValue_LiteralInteger_UML_Behavior_context.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Behavior_context_lowerValue_LiteralInteger_UML_Behavior_context->setValue(0);
	
	uML_Behavior_feature_of_context_classifier_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Behavior_inputParameters_result_lowerValue_LiteralInteger_UML_Behavior_inputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Behavior_inputParameters_result_lowerValue_LiteralInteger_UML_Behavior_inputParameters_result->setValue(0);
	
	uML_Behavior_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_Behavior_inputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Behavior_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_Behavior_inputParameters_result->setValue(-1);
	
	uML_Behavior_inputParameters_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Behavior_isReentrant_defaultValue_LiteralBoolean_UML_Behavior_isReentrant.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Behavior_isReentrant_defaultValue_LiteralBoolean_UML_Behavior_isReentrant->setValue(true);
	
	uML_Behavior_isReentrant_lowerValue_LiteralInteger_UML_Behavior_isReentrant.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Behavior_isReentrant_lowerValue_LiteralInteger_UML_Behavior_isReentrant->setValue(0);
	
	uML_Behavior_most_one_behavior_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Behavior_outputParameters_result_lowerValue_LiteralInteger_UML_Behavior_outputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Behavior_outputParameters_result_lowerValue_LiteralInteger_UML_Behavior_outputParameters_result->setValue(0);
	
	uML_Behavior_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_Behavior_outputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Behavior_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_Behavior_outputParameters_result->setValue(-1);
	
	uML_Behavior_outputParameters_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Behavior_ownedParameterSet_lowerValue_LiteralInteger_UML_Behavior_ownedParameterSet.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Behavior_ownedParameterSet_lowerValue_LiteralInteger_UML_Behavior_ownedParameterSet->setValue(0);
	
	uML_Behavior_ownedParameterSet_upperValue_LiteralUnlimitedNatural_UML_Behavior_ownedParameterSet.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Behavior_ownedParameterSet_upperValue_LiteralUnlimitedNatural_UML_Behavior_ownedParameterSet->setValue(-1);
	
	uML_Behavior_ownedParameter_lowerValue_LiteralInteger_UML_Behavior_ownedParameter.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Behavior_ownedParameter_lowerValue_LiteralInteger_UML_Behavior_ownedParameter->setValue(0);
	
	uML_Behavior_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_Behavior_ownedParameter.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Behavior_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_Behavior_ownedParameter->setValue(-1);
	
	uML_Behavior_parameters_match_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Behavior_postcondition_lowerValue_LiteralInteger_UML_Behavior_postcondition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Behavior_postcondition_lowerValue_LiteralInteger_UML_Behavior_postcondition->setValue(0);
	
	uML_Behavior_postcondition_upperValue_LiteralUnlimitedNatural_UML_Behavior_postcondition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Behavior_postcondition_upperValue_LiteralUnlimitedNatural_UML_Behavior_postcondition->setValue(-1);
	
	uML_Behavior_precondition_lowerValue_LiteralInteger_UML_Behavior_precondition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Behavior_precondition_lowerValue_LiteralInteger_UML_Behavior_precondition->setValue(0);
	
	uML_Behavior_precondition_upperValue_LiteralUnlimitedNatural_UML_Behavior_precondition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Behavior_precondition_upperValue_LiteralUnlimitedNatural_UML_Behavior_precondition->setValue(-1);
	
	uML_Behavior_redefinedBehavior_lowerValue_LiteralInteger_UML_Behavior_redefinedBehavior.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Behavior_redefinedBehavior_lowerValue_LiteralInteger_UML_Behavior_redefinedBehavior->setValue(0);
	
	uML_Behavior_redefinedBehavior_upperValue_LiteralUnlimitedNatural_UML_Behavior_redefinedBehavior.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Behavior_redefinedBehavior_upperValue_LiteralUnlimitedNatural_UML_Behavior_redefinedBehavior->setValue(-1);
	
	uML_Behavior_specification_lowerValue_LiteralInteger_UML_Behavior_specification.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Behavior_specification_lowerValue_LiteralInteger_UML_Behavior_specification->setValue(0);
	
	uML_BehaviorExecutionSpecification_behavior_lowerValue_LiteralInteger_UML_BehaviorExecutionSpecification_behavior.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_BehaviorExecutionSpecification_behavior_lowerValue_LiteralInteger_UML_BehaviorExecutionSpecification_behavior->setValue(0);
	
	uML_BehavioralFeature_abstract_no_method_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_BehavioralFeature_concurrency_defaultValue_InstanceValue.reset(uml::UmlFactory::eInstance()->createInstanceValue());
	
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name_lowerValue_LiteralInteger_UML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name_lowerValue_LiteralInteger_UML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name->setValue(0);
	
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name->setValue(1);
	
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type_lowerValue_LiteralInteger_UML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type_lowerValue_LiteralInteger_UML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type->setValue(0);
	
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type->setValue(1);
	
	uML_BehavioralFeature_inputParameters_result_lowerValue_LiteralInteger_UML_BehavioralFeature_inputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_BehavioralFeature_inputParameters_result_lowerValue_LiteralInteger_UML_BehavioralFeature_inputParameters_result->setValue(0);
	
	uML_BehavioralFeature_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_inputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_BehavioralFeature_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_inputParameters_result->setValue(-1);
	
	uML_BehavioralFeature_inputParameters_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_BehavioralFeature_isAbstract_defaultValue_LiteralBoolean_UML_BehavioralFeature_isAbstract.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_BehavioralFeature_isAbstract_defaultValue_LiteralBoolean_UML_BehavioralFeature_isAbstract->setValue(false);
	
	uML_BehavioralFeature_isDistinguishableFrom_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_BehavioralFeature_method_lowerValue_LiteralInteger_UML_BehavioralFeature_method.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_BehavioralFeature_method_lowerValue_LiteralInteger_UML_BehavioralFeature_method->setValue(0);
	
	uML_BehavioralFeature_method_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_method.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_BehavioralFeature_method_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_method->setValue(-1);
	
	uML_BehavioralFeature_outputParameters_result_lowerValue_LiteralInteger_UML_BehavioralFeature_outputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_BehavioralFeature_outputParameters_result_lowerValue_LiteralInteger_UML_BehavioralFeature_outputParameters_result->setValue(0);
	
	uML_BehavioralFeature_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_outputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_BehavioralFeature_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_outputParameters_result->setValue(-1);
	
	uML_BehavioralFeature_outputParameters_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_BehavioralFeature_ownedParameterSet_lowerValue_LiteralInteger_UML_BehavioralFeature_ownedParameterSet.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_BehavioralFeature_ownedParameterSet_lowerValue_LiteralInteger_UML_BehavioralFeature_ownedParameterSet->setValue(0);
	
	uML_BehavioralFeature_ownedParameterSet_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_ownedParameterSet.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_BehavioralFeature_ownedParameterSet_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_ownedParameterSet->setValue(-1);
	
	uML_BehavioralFeature_ownedParameter_lowerValue_LiteralInteger_UML_BehavioralFeature_ownedParameter.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_BehavioralFeature_ownedParameter_lowerValue_LiteralInteger_UML_BehavioralFeature_ownedParameter->setValue(0);
	
	uML_BehavioralFeature_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_ownedParameter.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_BehavioralFeature_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_ownedParameter->setValue(-1);
	
	uML_BehavioralFeature_raisedException_lowerValue_LiteralInteger_UML_BehavioralFeature_raisedException.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_BehavioralFeature_raisedException_lowerValue_LiteralInteger_UML_BehavioralFeature_raisedException->setValue(0);
	
	uML_BehavioralFeature_raisedException_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_raisedException.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_BehavioralFeature_raisedException_upperValue_LiteralUnlimitedNatural_UML_BehavioralFeature_raisedException->setValue(-1);
	
	uML_BehavioredClassifier_class_behavior_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_BehavioredClassifier_classifierBehavior_lowerValue_LiteralInteger_UML_BehavioredClassifier_classifierBehavior.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_BehavioredClassifier_classifierBehavior_lowerValue_LiteralInteger_UML_BehavioredClassifier_classifierBehavior->setValue(0);
	
	uML_BehavioredClassifier_getAllImplementedInterfaces__return_lowerValue_LiteralInteger_UML_BehavioredClassifier_getAllImplementedInterfaces__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_BehavioredClassifier_getAllImplementedInterfaces__return_lowerValue_LiteralInteger_UML_BehavioredClassifier_getAllImplementedInterfaces__return->setValue(0);
	
	uML_BehavioredClassifier_getAllImplementedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_getAllImplementedInterfaces__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_BehavioredClassifier_getAllImplementedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_getAllImplementedInterfaces__return->setValue(-1);
	
	uML_BehavioredClassifier_getImplementedInterfaces__return_lowerValue_LiteralInteger_UML_BehavioredClassifier_getImplementedInterfaces__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_BehavioredClassifier_getImplementedInterfaces__return_lowerValue_LiteralInteger_UML_BehavioredClassifier_getImplementedInterfaces__return->setValue(0);
	
	uML_BehavioredClassifier_getImplementedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_getImplementedInterfaces__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_BehavioredClassifier_getImplementedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_getImplementedInterfaces__return->setValue(-1);
	
	uML_BehavioredClassifier_interfaceRealization_lowerValue_LiteralInteger_UML_BehavioredClassifier_interfaceRealization.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_BehavioredClassifier_interfaceRealization_lowerValue_LiteralInteger_UML_BehavioredClassifier_interfaceRealization->setValue(0);
	
	uML_BehavioredClassifier_interfaceRealization_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_interfaceRealization.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_BehavioredClassifier_interfaceRealization_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_interfaceRealization->setValue(-1);
	
	uML_BehavioredClassifier_ownedBehavior_lowerValue_LiteralInteger_UML_BehavioredClassifier_ownedBehavior.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_BehavioredClassifier_ownedBehavior_lowerValue_LiteralInteger_UML_BehavioredClassifier_ownedBehavior->setValue(0);
	
	uML_BehavioredClassifier_ownedBehavior_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_ownedBehavior.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_BehavioredClassifier_ownedBehavior_upperValue_LiteralUnlimitedNatural_UML_BehavioredClassifier_ownedBehavior->setValue(-1);
	
	uML_BroadcastSignalAction_no_onport_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_BroadcastSignalAction_number_of_arguments_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_BroadcastSignalAction_type_ordering_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CallAction_argument_pins_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CallAction_inputParameters_result_lowerValue_LiteralInteger_UML_CallAction_inputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_CallAction_inputParameters_result_lowerValue_LiteralInteger_UML_CallAction_inputParameters_result->setValue(0);
	
	uML_CallAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallAction_inputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_CallAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallAction_inputParameters_result->setValue(-1);
	
	uML_CallAction_isSynchronous_defaultValue_LiteralBoolean_UML_CallAction_isSynchronous.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_CallAction_isSynchronous_defaultValue_LiteralBoolean_UML_CallAction_isSynchronous->setValue(true);
	
	uML_CallAction_outputParameters_result_lowerValue_LiteralInteger_UML_CallAction_outputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_CallAction_outputParameters_result_lowerValue_LiteralInteger_UML_CallAction_outputParameters_result->setValue(0);
	
	uML_CallAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallAction_outputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_CallAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallAction_outputParameters_result->setValue(-1);
	
	uML_CallAction_result_lowerValue_LiteralInteger_UML_CallAction_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_CallAction_result_lowerValue_LiteralInteger_UML_CallAction_result->setValue(0);
	
	uML_CallAction_result_pins_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CallAction_result_upperValue_LiteralUnlimitedNatural_UML_CallAction_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_CallAction_result_upperValue_LiteralUnlimitedNatural_UML_CallAction_result->setValue(-1);
	
	uML_CallAction_synchronous_call_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CallBehaviorAction_inputParameters_result_lowerValue_LiteralInteger_UML_CallBehaviorAction_inputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_CallBehaviorAction_inputParameters_result_lowerValue_LiteralInteger_UML_CallBehaviorAction_inputParameters_result->setValue(0);
	
	uML_CallBehaviorAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallBehaviorAction_inputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_CallBehaviorAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallBehaviorAction_inputParameters_result->setValue(-1);
	
	uML_CallBehaviorAction_inputParameters_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CallBehaviorAction_no_onport_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CallBehaviorAction_outputParameters_result_lowerValue_LiteralInteger_UML_CallBehaviorAction_outputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_CallBehaviorAction_outputParameters_result_lowerValue_LiteralInteger_UML_CallBehaviorAction_outputParameters_result->setValue(0);
	
	uML_CallBehaviorAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallBehaviorAction_outputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_CallBehaviorAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallBehaviorAction_outputParameters_result->setValue(-1);
	
	uML_CallBehaviorAction_outputParameters_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CallOperationAction_inputParameters_result_lowerValue_LiteralInteger_UML_CallOperationAction_inputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_CallOperationAction_inputParameters_result_lowerValue_LiteralInteger_UML_CallOperationAction_inputParameters_result->setValue(0);
	
	uML_CallOperationAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallOperationAction_inputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_CallOperationAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallOperationAction_inputParameters_result->setValue(-1);
	
	uML_CallOperationAction_inputParameters_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CallOperationAction_outputParameters_result_lowerValue_LiteralInteger_UML_CallOperationAction_outputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_CallOperationAction_outputParameters_result_lowerValue_LiteralInteger_UML_CallOperationAction_outputParameters_result->setValue(0);
	
	uML_CallOperationAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallOperationAction_outputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_CallOperationAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_CallOperationAction_outputParameters_result->setValue(-1);
	
	uML_CallOperationAction_outputParameters_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CallOperationAction_type_target_pin_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name->setValue(0);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name->setValue(1);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames->setValue(0);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames->setValue(-1);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes->setValue(0);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes->setValue(-1);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType_lowerValue_LiteralInteger_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType->setValue(0);
	
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType_upperValue_LiteralUnlimitedNatural_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType->setValue(1);
	
	uML_Class_extension_result_lowerValue_LiteralInteger_UML_Class_extension_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Class_extension_result_lowerValue_LiteralInteger_UML_Class_extension_result->setValue(0);
	
	uML_Class_extension_result_upperValue_LiteralUnlimitedNatural_UML_Class_extension_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Class_extension_result_upperValue_LiteralUnlimitedNatural_UML_Class_extension_result->setValue(-1);
	
	uML_Class_extension_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Class_extension_lowerValue_LiteralInteger_UML_Class_extension.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Class_extension_lowerValue_LiteralInteger_UML_Class_extension->setValue(0);
	
	uML_Class_extension_upperValue_LiteralUnlimitedNatural_UML_Class_extension.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Class_extension_upperValue_LiteralUnlimitedNatural_UML_Class_extension->setValue(-1);
	
	uML_Class_isAbstract_defaultValue_LiteralBoolean_UML_Class_isAbstract.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Class_isAbstract_defaultValue_LiteralBoolean_UML_Class_isAbstract->setValue(false);
	
	uML_Class_isActive_defaultValue_LiteralBoolean_UML_Class_isActive.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Class_isActive_defaultValue_LiteralBoolean_UML_Class_isActive->setValue(false);
	
	uML_Class_nestedClassifier_lowerValue_LiteralInteger_UML_Class_nestedClassifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Class_nestedClassifier_lowerValue_LiteralInteger_UML_Class_nestedClassifier->setValue(0);
	
	uML_Class_nestedClassifier_upperValue_LiteralUnlimitedNatural_UML_Class_nestedClassifier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Class_nestedClassifier_upperValue_LiteralUnlimitedNatural_UML_Class_nestedClassifier->setValue(-1);
	
	uML_Class_ownedAttribute_lowerValue_LiteralInteger_UML_Class_ownedAttribute.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Class_ownedAttribute_lowerValue_LiteralInteger_UML_Class_ownedAttribute->setValue(0);
	
	uML_Class_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Class_ownedAttribute.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Class_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Class_ownedAttribute->setValue(-1);
	
	uML_Class_ownedOperation_lowerValue_LiteralInteger_UML_Class_ownedOperation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Class_ownedOperation_lowerValue_LiteralInteger_UML_Class_ownedOperation->setValue(0);
	
	uML_Class_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_Class_ownedOperation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Class_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_Class_ownedOperation->setValue(-1);
	
	uML_Class_ownedReception_lowerValue_LiteralInteger_UML_Class_ownedReception.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Class_ownedReception_lowerValue_LiteralInteger_UML_Class_ownedReception->setValue(0);
	
	uML_Class_ownedReception_upperValue_LiteralUnlimitedNatural_UML_Class_ownedReception.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Class_ownedReception_upperValue_LiteralUnlimitedNatural_UML_Class_ownedReception->setValue(-1);
	
	uML_Class_passive_class_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Class_superClass_result_lowerValue_LiteralInteger_UML_Class_superClass_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Class_superClass_result_lowerValue_LiteralInteger_UML_Class_superClass_result->setValue(0);
	
	uML_Class_superClass_result_upperValue_LiteralUnlimitedNatural_UML_Class_superClass_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Class_superClass_result_upperValue_LiteralUnlimitedNatural_UML_Class_superClass_result->setValue(-1);
	
	uML_Class_superClass_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Class_superClass_lowerValue_LiteralInteger_UML_Class_superClass.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Class_superClass_lowerValue_LiteralInteger_UML_Class_superClass->setValue(0);
	
	uML_Class_superClass_upperValue_LiteralUnlimitedNatural_UML_Class_superClass.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Class_superClass_upperValue_LiteralUnlimitedNatural_UML_Class_superClass->setValue(-1);
	
	uML_Classifier_allAttributes_result_lowerValue_LiteralInteger_UML_Classifier_allAttributes_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_allAttributes_result_lowerValue_LiteralInteger_UML_Classifier_allAttributes_result->setValue(0);
	
	uML_Classifier_allAttributes_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allAttributes_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_allAttributes_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allAttributes_result->setValue(-1);
	
	uML_Classifier_allAttributes_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_allFeatures_result_lowerValue_LiteralInteger_UML_Classifier_allFeatures_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_allFeatures_result_lowerValue_LiteralInteger_UML_Classifier_allFeatures_result->setValue(0);
	
	uML_Classifier_allFeatures_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allFeatures_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_allFeatures_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allFeatures_result->setValue(-1);
	
	uML_Classifier_allFeatures_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_allParents_result_lowerValue_LiteralInteger_UML_Classifier_allParents_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_allParents_result_lowerValue_LiteralInteger_UML_Classifier_allParents_result->setValue(0);
	
	uML_Classifier_allParents_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allParents_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_allParents_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allParents_result->setValue(-1);
	
	uML_Classifier_allParents_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_allRealizedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_allRealizedInterfaces_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_allRealizedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_allRealizedInterfaces_result->setValue(0);
	
	uML_Classifier_allRealizedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allRealizedInterfaces_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_allRealizedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allRealizedInterfaces_result->setValue(-1);
	
	uML_Classifier_allRealizedInterfaces_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_allSlottableFeatures_result_lowerValue_LiteralInteger_UML_Classifier_allSlottableFeatures_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_allSlottableFeatures_result_lowerValue_LiteralInteger_UML_Classifier_allSlottableFeatures_result->setValue(0);
	
	uML_Classifier_allSlottableFeatures_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allSlottableFeatures_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_allSlottableFeatures_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allSlottableFeatures_result->setValue(-1);
	
	uML_Classifier_allSlottableFeatures_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_allUsedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_allUsedInterfaces_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_allUsedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_allUsedInterfaces_result->setValue(0);
	
	uML_Classifier_allUsedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allUsedInterfaces_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_allUsedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_allUsedInterfaces_result->setValue(-1);
	
	uML_Classifier_allUsedInterfaces_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_attribute_lowerValue_LiteralInteger_UML_Classifier_attribute.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_attribute_lowerValue_LiteralInteger_UML_Classifier_attribute->setValue(0);
	
	uML_Classifier_attribute_upperValue_LiteralUnlimitedNatural_UML_Classifier_attribute.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_attribute_upperValue_LiteralUnlimitedNatural_UML_Classifier_attribute->setValue(-1);
	
	uML_Classifier_collaborationUse_lowerValue_LiteralInteger_UML_Classifier_collaborationUse.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_collaborationUse_lowerValue_LiteralInteger_UML_Classifier_collaborationUse->setValue(0);
	
	uML_Classifier_collaborationUse_upperValue_LiteralUnlimitedNatural_UML_Classifier_collaborationUse.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_collaborationUse_upperValue_LiteralUnlimitedNatural_UML_Classifier_collaborationUse->setValue(-1);
	
	uML_Classifier_conformsTo_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_directlyRealizedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_directlyRealizedInterfaces_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_directlyRealizedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_directlyRealizedInterfaces_result->setValue(0);
	
	uML_Classifier_directlyRealizedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_directlyRealizedInterfaces_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_directlyRealizedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_directlyRealizedInterfaces_result->setValue(-1);
	
	uML_Classifier_directlyRealizedInterfaces_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_directlyUsedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_directlyUsedInterfaces_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_directlyUsedInterfaces_result_lowerValue_LiteralInteger_UML_Classifier_directlyUsedInterfaces_result->setValue(0);
	
	uML_Classifier_directlyUsedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_directlyUsedInterfaces_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_directlyUsedInterfaces_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_directlyUsedInterfaces_result->setValue(-1);
	
	uML_Classifier_directlyUsedInterfaces_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_feature_lowerValue_LiteralInteger_UML_Classifier_feature.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_feature_lowerValue_LiteralInteger_UML_Classifier_feature->setValue(0);
	
	uML_Classifier_feature_upperValue_LiteralUnlimitedNatural_UML_Classifier_feature.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_feature_upperValue_LiteralUnlimitedNatural_UML_Classifier_feature->setValue(-1);
	
	uML_Classifier_general_result_lowerValue_LiteralInteger_UML_Classifier_general_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_general_result_lowerValue_LiteralInteger_UML_Classifier_general_result->setValue(0);
	
	uML_Classifier_general_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_general_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_general_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_general_result->setValue(-1);
	
	uML_Classifier_general_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_general_lowerValue_LiteralInteger_UML_Classifier_general.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_general_lowerValue_LiteralInteger_UML_Classifier_general->setValue(0);
	
	uML_Classifier_general_upperValue_LiteralUnlimitedNatural_UML_Classifier_general.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_general_upperValue_LiteralUnlimitedNatural_UML_Classifier_general->setValue(-1);
	
	uML_Classifier_generalization_lowerValue_LiteralInteger_UML_Classifier_generalization.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_generalization_lowerValue_LiteralInteger_UML_Classifier_generalization->setValue(0);
	
	uML_Classifier_generalization_upperValue_LiteralUnlimitedNatural_UML_Classifier_generalization.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_generalization_upperValue_LiteralUnlimitedNatural_UML_Classifier_generalization->setValue(-1);
	
	uML_Classifier_getAllAttributes__return_lowerValue_LiteralInteger_UML_Classifier_getAllAttributes__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_getAllAttributes__return_lowerValue_LiteralInteger_UML_Classifier_getAllAttributes__return->setValue(0);
	
	uML_Classifier_getAllAttributes__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getAllAttributes__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_getAllAttributes__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getAllAttributes__return->setValue(-1);
	
	uML_Classifier_getAllOperations__return_lowerValue_LiteralInteger_UML_Classifier_getAllOperations__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_getAllOperations__return_lowerValue_LiteralInteger_UML_Classifier_getAllOperations__return->setValue(0);
	
	uML_Classifier_getAllOperations__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getAllOperations__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_getAllOperations__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getAllOperations__return->setValue(-1);
	
	uML_Classifier_getAllUsedInterfaces__return_lowerValue_LiteralInteger_UML_Classifier_getAllUsedInterfaces__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_getAllUsedInterfaces__return_lowerValue_LiteralInteger_UML_Classifier_getAllUsedInterfaces__return->setValue(0);
	
	uML_Classifier_getAllUsedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getAllUsedInterfaces__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_getAllUsedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getAllUsedInterfaces__return->setValue(-1);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name->setValue(0);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name->setValue(1);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames->setValue(0);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames->setValue(-1);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes->setValue(0);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes->setValue(-1);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_return_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_getOperation_String_String_Type_Boolean_return_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_Boolean_return->setValue(0);
	
	uML_Classifier_getOperation_String_String_Type_Boolean_return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_getOperation_String_String_Type_Boolean_return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_Boolean_return->setValue(1);
	
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name->setValue(0);
	
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name->setValue(1);
	
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames->setValue(0);
	
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames->setValue(-1);
	
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes->setValue(0);
	
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes->setValue(-1);
	
	uML_Classifier_getOperation_String_String_Type_return_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_getOperation_String_String_Type_return_lowerValue_LiteralInteger_UML_Classifier_getOperation_String_String_Type_return->setValue(0);
	
	uML_Classifier_getOperation_String_String_Type_return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_getOperation_String_String_Type_return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperation_String_String_Type_return->setValue(1);
	
	uML_Classifier_getOperations__return_lowerValue_LiteralInteger_UML_Classifier_getOperations__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_getOperations__return_lowerValue_LiteralInteger_UML_Classifier_getOperations__return->setValue(0);
	
	uML_Classifier_getOperations__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperations__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_getOperations__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getOperations__return->setValue(-1);
	
	uML_Classifier_getUsedInterfaces__return_lowerValue_LiteralInteger_UML_Classifier_getUsedInterfaces__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_getUsedInterfaces__return_lowerValue_LiteralInteger_UML_Classifier_getUsedInterfaces__return->setValue(0);
	
	uML_Classifier_getUsedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getUsedInterfaces__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_getUsedInterfaces__return_upperValue_LiteralUnlimitedNatural_UML_Classifier_getUsedInterfaces__return->setValue(-1);
	
	uML_Classifier_hasVisibilityOf_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_hasVisibilityOf_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_inherit_result_lowerValue_LiteralInteger_UML_Classifier_inherit_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_inherit_result_lowerValue_LiteralInteger_UML_Classifier_inherit_result->setValue(0);
	
	uML_Classifier_inherit_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_inherit_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_inherit_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_inherit_result->setValue(-1);
	
	uML_Classifier_inherit_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs_lowerValue_LiteralInteger_UML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs_lowerValue_LiteralInteger_UML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs->setValue(0);
	
	uML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs_upperValue_LiteralUnlimitedNatural_UML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs_upperValue_LiteralUnlimitedNatural_UML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs->setValue(-1);
	
	uML_Classifier_inheritableMembers_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_inheritableMembers_result_lowerValue_LiteralInteger_UML_Classifier_inheritableMembers_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_inheritableMembers_result_lowerValue_LiteralInteger_UML_Classifier_inheritableMembers_result->setValue(0);
	
	uML_Classifier_inheritableMembers_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_inheritableMembers_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_inheritableMembers_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_inheritableMembers_result->setValue(-1);
	
	uML_Classifier_inheritableMembers_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_inheritedMember_result_lowerValue_LiteralInteger_UML_Classifier_inheritedMember_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_inheritedMember_result_lowerValue_LiteralInteger_UML_Classifier_inheritedMember_result->setValue(0);
	
	uML_Classifier_inheritedMember_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_inheritedMember_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_inheritedMember_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_inheritedMember_result->setValue(-1);
	
	uML_Classifier_inheritedMember_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_inheritedMember_lowerValue_LiteralInteger_UML_Classifier_inheritedMember.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_inheritedMember_lowerValue_LiteralInteger_UML_Classifier_inheritedMember->setValue(0);
	
	uML_Classifier_inheritedMember_upperValue_LiteralUnlimitedNatural_UML_Classifier_inheritedMember.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_inheritedMember_upperValue_LiteralUnlimitedNatural_UML_Classifier_inheritedMember->setValue(-1);
	
	uML_Classifier_isAbstract_defaultValue_LiteralBoolean_UML_Classifier_isAbstract.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Classifier_isAbstract_defaultValue_LiteralBoolean_UML_Classifier_isAbstract->setValue(false);
	
	uML_Classifier_isFinalSpecialization_defaultValue_LiteralBoolean_UML_Classifier_isFinalSpecialization.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Classifier_isFinalSpecialization_defaultValue_LiteralBoolean_UML_Classifier_isFinalSpecialization->setValue(false);
	
	uML_Classifier_isSubstitutableFor_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_isTemplate_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_maps_to_generalization_set_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_maySpecializeType_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_no_cycles_in_generalization_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_non_final_parents_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_ownedTemplateSignature_lowerValue_LiteralInteger_UML_Classifier_ownedTemplateSignature.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_ownedTemplateSignature_lowerValue_LiteralInteger_UML_Classifier_ownedTemplateSignature->setValue(0);
	
	uML_Classifier_ownedUseCase_lowerValue_LiteralInteger_UML_Classifier_ownedUseCase.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_ownedUseCase_lowerValue_LiteralInteger_UML_Classifier_ownedUseCase->setValue(0);
	
	uML_Classifier_ownedUseCase_upperValue_LiteralUnlimitedNatural_UML_Classifier_ownedUseCase.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_ownedUseCase_upperValue_LiteralUnlimitedNatural_UML_Classifier_ownedUseCase->setValue(-1);
	
	uML_Classifier_parents_result_lowerValue_LiteralInteger_UML_Classifier_parents_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_parents_result_lowerValue_LiteralInteger_UML_Classifier_parents_result->setValue(0);
	
	uML_Classifier_parents_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_parents_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_parents_result_upperValue_LiteralUnlimitedNatural_UML_Classifier_parents_result->setValue(-1);
	
	uML_Classifier_parents_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_powertypeExtent_lowerValue_LiteralInteger_UML_Classifier_powertypeExtent.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_powertypeExtent_lowerValue_LiteralInteger_UML_Classifier_powertypeExtent->setValue(0);
	
	uML_Classifier_powertypeExtent_upperValue_LiteralUnlimitedNatural_UML_Classifier_powertypeExtent.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_powertypeExtent_upperValue_LiteralUnlimitedNatural_UML_Classifier_powertypeExtent->setValue(-1);
	
	uML_Classifier_redefinedClassifier_lowerValue_LiteralInteger_UML_Classifier_redefinedClassifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_redefinedClassifier_lowerValue_LiteralInteger_UML_Classifier_redefinedClassifier->setValue(0);
	
	uML_Classifier_redefinedClassifier_upperValue_LiteralUnlimitedNatural_UML_Classifier_redefinedClassifier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_redefinedClassifier_upperValue_LiteralUnlimitedNatural_UML_Classifier_redefinedClassifier->setValue(-1);
	
	uML_Classifier_representation_lowerValue_LiteralInteger_UML_Classifier_representation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_representation_lowerValue_LiteralInteger_UML_Classifier_representation->setValue(0);
	
	uML_Classifier_specialize_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Classifier_substitution_lowerValue_LiteralInteger_UML_Classifier_substitution.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_substitution_lowerValue_LiteralInteger_UML_Classifier_substitution->setValue(0);
	
	uML_Classifier_substitution_upperValue_LiteralUnlimitedNatural_UML_Classifier_substitution.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_substitution_upperValue_LiteralUnlimitedNatural_UML_Classifier_substitution->setValue(-1);
	
	uML_Classifier_templateParameter_lowerValue_LiteralInteger_UML_Classifier_templateParameter.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_templateParameter_lowerValue_LiteralInteger_UML_Classifier_templateParameter->setValue(0);
	
	uML_Classifier_useCase_lowerValue_LiteralInteger_UML_Classifier_useCase.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Classifier_useCase_lowerValue_LiteralInteger_UML_Classifier_useCase->setValue(0);
	
	uML_Classifier_useCase_upperValue_LiteralUnlimitedNatural_UML_Classifier_useCase.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Classifier_useCase_upperValue_LiteralUnlimitedNatural_UML_Classifier_useCase->setValue(-1);
	
	uML_ClassifierTemplateParameter_actual_is_classifier_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ClassifierTemplateParameter_allowSubstitutable_defaultValue_LiteralBoolean_UML_ClassifierTemplateParameter_allowSubstitutable.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_ClassifierTemplateParameter_allowSubstitutable_defaultValue_LiteralBoolean_UML_ClassifierTemplateParameter_allowSubstitutable->setValue(true);
	
	uML_ClassifierTemplateParameter_constrainingClassifier_lowerValue_LiteralInteger_UML_ClassifierTemplateParameter_constrainingClassifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ClassifierTemplateParameter_constrainingClassifier_lowerValue_LiteralInteger_UML_ClassifierTemplateParameter_constrainingClassifier->setValue(0);
	
	uML_ClassifierTemplateParameter_constrainingClassifier_upperValue_LiteralUnlimitedNatural_UML_ClassifierTemplateParameter_constrainingClassifier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ClassifierTemplateParameter_constrainingClassifier_upperValue_LiteralUnlimitedNatural_UML_ClassifierTemplateParameter_constrainingClassifier->setValue(-1);
	
	uML_ClassifierTemplateParameter_constraining_classifiers_constrain_args_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ClassifierTemplateParameter_constraining_classifiers_constrain_parametered_element_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ClassifierTemplateParameter_has_constraining_classifier_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ClassifierTemplateParameter_matching_abstract_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ClassifierTemplateParameter_parametered_element_no_features_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Clause_bodyOutput_lowerValue_LiteralInteger_UML_Clause_bodyOutput.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Clause_bodyOutput_lowerValue_LiteralInteger_UML_Clause_bodyOutput->setValue(0);
	
	uML_Clause_bodyOutput_upperValue_LiteralUnlimitedNatural_UML_Clause_bodyOutput.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Clause_bodyOutput_upperValue_LiteralUnlimitedNatural_UML_Clause_bodyOutput->setValue(-1);
	
	uML_Clause_body_lowerValue_LiteralInteger_UML_Clause_body.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Clause_body_lowerValue_LiteralInteger_UML_Clause_body->setValue(0);
	
	uML_Clause_body_output_pins_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Clause_body_upperValue_LiteralUnlimitedNatural_UML_Clause_body.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Clause_body_upperValue_LiteralUnlimitedNatural_UML_Clause_body->setValue(-1);
	
	uML_Clause_decider_output_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Clause_predecessorClause_lowerValue_LiteralInteger_UML_Clause_predecessorClause.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Clause_predecessorClause_lowerValue_LiteralInteger_UML_Clause_predecessorClause->setValue(0);
	
	uML_Clause_predecessorClause_upperValue_LiteralUnlimitedNatural_UML_Clause_predecessorClause.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Clause_predecessorClause_upperValue_LiteralUnlimitedNatural_UML_Clause_predecessorClause->setValue(-1);
	
	uML_Clause_successorClause_lowerValue_LiteralInteger_UML_Clause_successorClause.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Clause_successorClause_lowerValue_LiteralInteger_UML_Clause_successorClause->setValue(0);
	
	uML_Clause_successorClause_upperValue_LiteralUnlimitedNatural_UML_Clause_successorClause.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Clause_successorClause_upperValue_LiteralUnlimitedNatural_UML_Clause_successorClause->setValue(-1);
	
	uML_Clause_test_and_body_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Clause_test_upperValue_LiteralUnlimitedNatural_UML_Clause_test.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Clause_test_upperValue_LiteralUnlimitedNatural_UML_Clause_test->setValue(-1);
	
	uML_ClearAssociationAction_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ClearAssociationAction_same_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ClearStructuralFeatureAction_multiplicity_of_result_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ClearStructuralFeatureAction_result_lowerValue_LiteralInteger_UML_ClearStructuralFeatureAction_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ClearStructuralFeatureAction_result_lowerValue_LiteralInteger_UML_ClearStructuralFeatureAction_result->setValue(0);
	
	uML_ClearStructuralFeatureAction_type_of_result_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Collaboration_collaborationRole_lowerValue_LiteralInteger_UML_Collaboration_collaborationRole.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Collaboration_collaborationRole_lowerValue_LiteralInteger_UML_Collaboration_collaborationRole->setValue(0);
	
	uML_Collaboration_collaborationRole_upperValue_LiteralUnlimitedNatural_UML_Collaboration_collaborationRole.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Collaboration_collaborationRole_upperValue_LiteralUnlimitedNatural_UML_Collaboration_collaborationRole->setValue(-1);
	
	uML_CollaborationUse_client_elements_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CollaborationUse_connectors_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CollaborationUse_every_role_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CollaborationUse_roleBinding_lowerValue_LiteralInteger_UML_CollaborationUse_roleBinding.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_CollaborationUse_roleBinding_lowerValue_LiteralInteger_UML_CollaborationUse_roleBinding->setValue(0);
	
	uML_CollaborationUse_roleBinding_upperValue_LiteralUnlimitedNatural_UML_CollaborationUse_roleBinding.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_CollaborationUse_roleBinding_upperValue_LiteralUnlimitedNatural_UML_CollaborationUse_roleBinding->setValue(-1);
	
	uML_CombinedFragment_break_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CombinedFragment_cfragmentGate_lowerValue_LiteralInteger_UML_CombinedFragment_cfragmentGate.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_CombinedFragment_cfragmentGate_lowerValue_LiteralInteger_UML_CombinedFragment_cfragmentGate->setValue(0);
	
	uML_CombinedFragment_cfragmentGate_upperValue_LiteralUnlimitedNatural_UML_CombinedFragment_cfragmentGate.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_CombinedFragment_cfragmentGate_upperValue_LiteralUnlimitedNatural_UML_CombinedFragment_cfragmentGate->setValue(-1);
	
	uML_CombinedFragment_consider_and_ignore_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CombinedFragment_interactionOperator_defaultValue_InstanceValue.reset(uml::UmlFactory::eInstance()->createInstanceValue());
	
	uML_CombinedFragment_operand_upperValue_LiteralUnlimitedNatural_UML_CombinedFragment_operand.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_CombinedFragment_operand_upperValue_LiteralUnlimitedNatural_UML_CombinedFragment_operand->setValue(-1);
	
	uML_CombinedFragment_opt_loop_break_neg_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Comment_annotatedElement_lowerValue_LiteralInteger_UML_Comment_annotatedElement.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Comment_annotatedElement_lowerValue_LiteralInteger_UML_Comment_annotatedElement->setValue(0);
	
	uML_Comment_annotatedElement_upperValue_LiteralUnlimitedNatural_UML_Comment_annotatedElement.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Comment_annotatedElement_upperValue_LiteralUnlimitedNatural_UML_Comment_annotatedElement->setValue(-1);
	
	uML_Comment_body_lowerValue_LiteralInteger_UML_Comment_body.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Comment_body_lowerValue_LiteralInteger_UML_Comment_body->setValue(0);
	
	uML_CommunicationPath_association_ends_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Component_isIndirectlyInstantiated_defaultValue_LiteralBoolean_UML_Component_isIndirectlyInstantiated.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Component_isIndirectlyInstantiated_defaultValue_LiteralBoolean_UML_Component_isIndirectlyInstantiated->setValue(true);
	
	uML_Component_no_nested_classifiers_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Component_no_packaged_elements_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Component_packagedElement_lowerValue_LiteralInteger_UML_Component_packagedElement.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Component_packagedElement_lowerValue_LiteralInteger_UML_Component_packagedElement->setValue(0);
	
	uML_Component_packagedElement_upperValue_LiteralUnlimitedNatural_UML_Component_packagedElement.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Component_packagedElement_upperValue_LiteralUnlimitedNatural_UML_Component_packagedElement->setValue(-1);
	
	uML_Component_provided_result_lowerValue_LiteralInteger_UML_Component_provided_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Component_provided_result_lowerValue_LiteralInteger_UML_Component_provided_result->setValue(0);
	
	uML_Component_provided_result_upperValue_LiteralUnlimitedNatural_UML_Component_provided_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Component_provided_result_upperValue_LiteralUnlimitedNatural_UML_Component_provided_result->setValue(-1);
	
	uML_Component_provided_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Component_provided_lowerValue_LiteralInteger_UML_Component_provided.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Component_provided_lowerValue_LiteralInteger_UML_Component_provided->setValue(0);
	
	uML_Component_provided_upperValue_LiteralUnlimitedNatural_UML_Component_provided.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Component_provided_upperValue_LiteralUnlimitedNatural_UML_Component_provided->setValue(-1);
	
	uML_Component_realization_lowerValue_LiteralInteger_UML_Component_realization.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Component_realization_lowerValue_LiteralInteger_UML_Component_realization->setValue(0);
	
	uML_Component_realization_upperValue_LiteralUnlimitedNatural_UML_Component_realization.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Component_realization_upperValue_LiteralUnlimitedNatural_UML_Component_realization->setValue(-1);
	
	uML_Component_required_result_lowerValue_LiteralInteger_UML_Component_required_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Component_required_result_lowerValue_LiteralInteger_UML_Component_required_result->setValue(0);
	
	uML_Component_required_result_upperValue_LiteralUnlimitedNatural_UML_Component_required_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Component_required_result_upperValue_LiteralUnlimitedNatural_UML_Component_required_result->setValue(-1);
	
	uML_Component_required_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Component_required_lowerValue_LiteralInteger_UML_Component_required.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Component_required_lowerValue_LiteralInteger_UML_Component_required->setValue(0);
	
	uML_Component_required_upperValue_LiteralUnlimitedNatural_UML_Component_required.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Component_required_upperValue_LiteralUnlimitedNatural_UML_Component_required->setValue(-1);
	
	uML_ComponentRealization_abstraction_lowerValue_LiteralInteger_UML_ComponentRealization_abstraction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ComponentRealization_abstraction_lowerValue_LiteralInteger_UML_ComponentRealization_abstraction->setValue(0);
	
	uML_ComponentRealization_realizingClassifier_upperValue_LiteralUnlimitedNatural_UML_ComponentRealization_realizingClassifier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ComponentRealization_realizingClassifier_upperValue_LiteralUnlimitedNatural_UML_ComponentRealization_realizingClassifier->setValue(-1);
	
	uML_ConditionalNode_allActions_result_lowerValue_LiteralInteger_UML_ConditionalNode_allActions_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ConditionalNode_allActions_result_lowerValue_LiteralInteger_UML_ConditionalNode_allActions_result->setValue(0);
	
	uML_ConditionalNode_allActions_result_upperValue_LiteralUnlimitedNatural_UML_ConditionalNode_allActions_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ConditionalNode_allActions_result_upperValue_LiteralUnlimitedNatural_UML_ConditionalNode_allActions_result->setValue(-1);
	
	uML_ConditionalNode_allActions_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConditionalNode_clause_no_predecessor_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConditionalNode_clause_upperValue_LiteralUnlimitedNatural_UML_ConditionalNode_clause.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ConditionalNode_clause_upperValue_LiteralUnlimitedNatural_UML_ConditionalNode_clause->setValue(-1);
	
	uML_ConditionalNode_executable_nodes_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConditionalNode_isAssured_defaultValue_LiteralBoolean_UML_ConditionalNode_isAssured.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_ConditionalNode_isAssured_defaultValue_LiteralBoolean_UML_ConditionalNode_isAssured->setValue(false);
	
	uML_ConditionalNode_isDeterminate_defaultValue_LiteralBoolean_UML_ConditionalNode_isDeterminate.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_ConditionalNode_isDeterminate_defaultValue_LiteralBoolean_UML_ConditionalNode_isDeterminate->setValue(false);
	
	uML_ConditionalNode_matching_output_pins_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConditionalNode_no_input_pins_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConditionalNode_one_clause_with_executable_node_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConditionalNode_result_lowerValue_LiteralInteger_UML_ConditionalNode_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ConditionalNode_result_lowerValue_LiteralInteger_UML_ConditionalNode_result->setValue(0);
	
	uML_ConditionalNode_result_no_incoming_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConditionalNode_result_upperValue_LiteralUnlimitedNatural_UML_ConditionalNode_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ConditionalNode_result_upperValue_LiteralUnlimitedNatural_UML_ConditionalNode_result->setValue(-1);
	
	uML_ConnectableElement_end_result_lowerValue_LiteralInteger_UML_ConnectableElement_end_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ConnectableElement_end_result_lowerValue_LiteralInteger_UML_ConnectableElement_end_result->setValue(0);
	
	uML_ConnectableElement_end_result_upperValue_LiteralUnlimitedNatural_UML_ConnectableElement_end_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ConnectableElement_end_result_upperValue_LiteralUnlimitedNatural_UML_ConnectableElement_end_result->setValue(-1);
	
	uML_ConnectableElement_end_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConnectableElement_end_lowerValue_LiteralInteger_UML_ConnectableElement_end.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ConnectableElement_end_lowerValue_LiteralInteger_UML_ConnectableElement_end->setValue(0);
	
	uML_ConnectableElement_end_upperValue_LiteralUnlimitedNatural_UML_ConnectableElement_end.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ConnectableElement_end_upperValue_LiteralUnlimitedNatural_UML_ConnectableElement_end->setValue(-1);
	
	uML_ConnectableElement_templateParameter_lowerValue_LiteralInteger_UML_ConnectableElement_templateParameter.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ConnectableElement_templateParameter_lowerValue_LiteralInteger_UML_ConnectableElement_templateParameter->setValue(0);
	
	uML_ConnectionPointReference_entry_lowerValue_LiteralInteger_UML_ConnectionPointReference_entry.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ConnectionPointReference_entry_lowerValue_LiteralInteger_UML_ConnectionPointReference_entry->setValue(0);
	
	uML_ConnectionPointReference_entry_pseudostates_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConnectionPointReference_entry_upperValue_LiteralUnlimitedNatural_UML_ConnectionPointReference_entry.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ConnectionPointReference_entry_upperValue_LiteralUnlimitedNatural_UML_ConnectionPointReference_entry->setValue(-1);
	
	uML_ConnectionPointReference_exit_lowerValue_LiteralInteger_UML_ConnectionPointReference_exit.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ConnectionPointReference_exit_lowerValue_LiteralInteger_UML_ConnectionPointReference_exit->setValue(0);
	
	uML_ConnectionPointReference_exit_pseudostates_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConnectionPointReference_exit_upperValue_LiteralUnlimitedNatural_UML_ConnectionPointReference_exit.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ConnectionPointReference_exit_upperValue_LiteralUnlimitedNatural_UML_ConnectionPointReference_exit->setValue(-1);
	
	uML_ConnectionPointReference_state_lowerValue_LiteralInteger_UML_ConnectionPointReference_state.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ConnectionPointReference_state_lowerValue_LiteralInteger_UML_ConnectionPointReference_state->setValue(0);
	
	uML_Connector_contract_lowerValue_LiteralInteger_UML_Connector_contract.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Connector_contract_lowerValue_LiteralInteger_UML_Connector_contract->setValue(0);
	
	uML_Connector_contract_upperValue_LiteralUnlimitedNatural_UML_Connector_contract.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Connector_contract_upperValue_LiteralUnlimitedNatural_UML_Connector_contract->setValue(-1);
	
	uML_Connector_end_lowerValue_LiteralInteger_UML_Connector_end.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Connector_end_lowerValue_LiteralInteger_UML_Connector_end->setValue(2);
	
	uML_Connector_end_upperValue_LiteralUnlimitedNatural_UML_Connector_end.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Connector_end_upperValue_LiteralUnlimitedNatural_UML_Connector_end->setValue(-1);
	
	uML_Connector_kind_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Connector_redefinedConnector_lowerValue_LiteralInteger_UML_Connector_redefinedConnector.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Connector_redefinedConnector_lowerValue_LiteralInteger_UML_Connector_redefinedConnector->setValue(0);
	
	uML_Connector_redefinedConnector_upperValue_LiteralUnlimitedNatural_UML_Connector_redefinedConnector.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Connector_redefinedConnector_upperValue_LiteralUnlimitedNatural_UML_Connector_redefinedConnector->setValue(-1);
	
	uML_Connector_roles_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Connector_type_lowerValue_LiteralInteger_UML_Connector_type.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Connector_type_lowerValue_LiteralInteger_UML_Connector_type->setValue(0);
	
	uML_Connector_types_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConnectorEnd_definingEnd_result_lowerValue_LiteralInteger_UML_ConnectorEnd_definingEnd_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ConnectorEnd_definingEnd_result_lowerValue_LiteralInteger_UML_ConnectorEnd_definingEnd_result->setValue(0);
	
	uML_ConnectorEnd_definingEnd_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConnectorEnd_definingEnd_lowerValue_LiteralInteger_UML_ConnectorEnd_definingEnd.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ConnectorEnd_definingEnd_lowerValue_LiteralInteger_UML_ConnectorEnd_definingEnd->setValue(0);
	
	uML_ConnectorEnd_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConnectorEnd_partWithPort_lowerValue_LiteralInteger_UML_ConnectorEnd_partWithPort.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ConnectorEnd_partWithPort_lowerValue_LiteralInteger_UML_ConnectorEnd_partWithPort->setValue(0);
	
	uML_ConnectorEnd_part_with_port_empty_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConnectorEnd_role_and_part_with_port_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConnectorEnd_role_lowerValue_LiteralInteger_UML_ConnectorEnd_role.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ConnectorEnd_role_lowerValue_LiteralInteger_UML_ConnectorEnd_role->setValue(1);
	
	uML_ConnectorEnd_role_upperValue_LiteralUnlimitedNatural_UML_ConnectorEnd_role.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ConnectorEnd_role_upperValue_LiteralUnlimitedNatural_UML_ConnectorEnd_role->setValue(1);
	
	uML_ConnectorEnd_self_part_with_port_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConsiderIgnoreFragment_consider_or_ignore_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ConsiderIgnoreFragment_message_lowerValue_LiteralInteger_UML_ConsiderIgnoreFragment_message.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ConsiderIgnoreFragment_message_lowerValue_LiteralInteger_UML_ConsiderIgnoreFragment_message->setValue(0);
	
	uML_ConsiderIgnoreFragment_message_upperValue_LiteralUnlimitedNatural_UML_ConsiderIgnoreFragment_message.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ConsiderIgnoreFragment_message_upperValue_LiteralUnlimitedNatural_UML_ConsiderIgnoreFragment_message->setValue(-1);
	
	uML_ConsiderIgnoreFragment_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Constraint_boolean_value_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Constraint_constrainedElement_lowerValue_LiteralInteger_UML_Constraint_constrainedElement.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Constraint_constrainedElement_lowerValue_LiteralInteger_UML_Constraint_constrainedElement->setValue(0);
	
	uML_Constraint_constrainedElement_upperValue_LiteralUnlimitedNatural_UML_Constraint_constrainedElement.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Constraint_constrainedElement_upperValue_LiteralUnlimitedNatural_UML_Constraint_constrainedElement->setValue(-1);
	
	uML_Constraint_context_lowerValue_LiteralInteger_UML_Constraint_context.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Constraint_context_lowerValue_LiteralInteger_UML_Constraint_context->setValue(0);
	
	uML_Constraint_no_side_effects_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Constraint_not_apply_to_self_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Continuation_first_or_last_interaction_fragment_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Continuation_global_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Continuation_same_name_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Continuation_setting_defaultValue_LiteralBoolean_UML_Continuation_setting.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Continuation_setting_defaultValue_LiteralBoolean_UML_Continuation_setting->setValue(true);
	
	uML_ControlFlow_object_nodes_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CreateLinkAction_association_not_abstract_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CreateLinkAction_endData_lowerValue_LiteralInteger_UML_CreateLinkAction_endData.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_CreateLinkAction_endData_lowerValue_LiteralInteger_UML_CreateLinkAction_endData->setValue(2);
	
	uML_CreateLinkAction_endData_upperValue_LiteralUnlimitedNatural_UML_CreateLinkAction_endData.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_CreateLinkAction_endData_upperValue_LiteralUnlimitedNatural_UML_CreateLinkAction_endData->setValue(-1);
	
	uML_CreateLinkObjectAction_association_class_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CreateLinkObjectAction_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CreateLinkObjectAction_type_of_result_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CreateObjectAction_classifier_not_abstract_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CreateObjectAction_classifier_not_association_class_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CreateObjectAction_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_CreateObjectAction_same_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name_lowerValue_LiteralInteger_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name_lowerValue_LiteralInteger_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name->setValue(0);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name->setValue(1);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type_lowerValue_LiteralInteger_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type_lowerValue_LiteralInteger_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type->setValue(0);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type->setValue(1);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name->setValue(0);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name->setValue(1);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames->setValue(0);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames->setValue(-1);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes->setValue(0);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes->setValue(-1);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType_lowerValue_LiteralInteger_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType->setValue(0);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType_upperValue_LiteralUnlimitedNatural_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType->setValue(1);
	
	uML_DataType_ownedAttribute_lowerValue_LiteralInteger_UML_DataType_ownedAttribute.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DataType_ownedAttribute_lowerValue_LiteralInteger_UML_DataType_ownedAttribute->setValue(0);
	
	uML_DataType_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_DataType_ownedAttribute.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DataType_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_DataType_ownedAttribute->setValue(-1);
	
	uML_DataType_ownedOperation_lowerValue_LiteralInteger_UML_DataType_ownedOperation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DataType_ownedOperation_lowerValue_LiteralInteger_UML_DataType_ownedOperation->setValue(0);
	
	uML_DataType_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_DataType_ownedOperation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DataType_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_DataType_ownedOperation->setValue(-1);
	
	uML_DecisionNode_decisionInputFlow_lowerValue_LiteralInteger_UML_DecisionNode_decisionInputFlow.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DecisionNode_decisionInputFlow_lowerValue_LiteralInteger_UML_DecisionNode_decisionInputFlow->setValue(0);
	
	uML_DecisionNode_decisionInput_lowerValue_LiteralInteger_UML_DecisionNode_decisionInput.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DecisionNode_decisionInput_lowerValue_LiteralInteger_UML_DecisionNode_decisionInput->setValue(0);
	
	uML_DecisionNode_decision_input_flow_incoming_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DecisionNode_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DecisionNode_incoming_control_one_input_parameter_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DecisionNode_incoming_object_one_input_parameter_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DecisionNode_incoming_outgoing_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DecisionNode_parameters_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DecisionNode_two_input_parameters_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DecisionNode_zero_input_parameters_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Dependency_client_upperValue_LiteralUnlimitedNatural_UML_Dependency_client.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Dependency_client_upperValue_LiteralUnlimitedNatural_UML_Dependency_client->setValue(-1);
	
	uML_Dependency_supplier_upperValue_LiteralUnlimitedNatural_UML_Dependency_supplier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Dependency_supplier_upperValue_LiteralUnlimitedNatural_UML_Dependency_supplier->setValue(-1);
	
	uML_Deployment_configuration_lowerValue_LiteralInteger_UML_Deployment_configuration.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Deployment_configuration_lowerValue_LiteralInteger_UML_Deployment_configuration->setValue(0);
	
	uML_Deployment_configuration_upperValue_LiteralUnlimitedNatural_UML_Deployment_configuration.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Deployment_configuration_upperValue_LiteralUnlimitedNatural_UML_Deployment_configuration->setValue(-1);
	
	uML_Deployment_deployedArtifact_lowerValue_LiteralInteger_UML_Deployment_deployedArtifact.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Deployment_deployedArtifact_lowerValue_LiteralInteger_UML_Deployment_deployedArtifact->setValue(0);
	
	uML_Deployment_deployedArtifact_upperValue_LiteralUnlimitedNatural_UML_Deployment_deployedArtifact.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Deployment_deployedArtifact_upperValue_LiteralUnlimitedNatural_UML_Deployment_deployedArtifact->setValue(-1);
	
	uML_DeploymentSpecification_deployed_elements_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DeploymentSpecification_deploymentLocation_lowerValue_LiteralInteger_UML_DeploymentSpecification_deploymentLocation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DeploymentSpecification_deploymentLocation_lowerValue_LiteralInteger_UML_DeploymentSpecification_deploymentLocation->setValue(0);
	
	uML_DeploymentSpecification_deployment_lowerValue_LiteralInteger_UML_DeploymentSpecification_deployment.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DeploymentSpecification_deployment_lowerValue_LiteralInteger_UML_DeploymentSpecification_deployment->setValue(0);
	
	uML_DeploymentSpecification_deployment_target_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DeploymentSpecification_executionLocation_lowerValue_LiteralInteger_UML_DeploymentSpecification_executionLocation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DeploymentSpecification_executionLocation_lowerValue_LiteralInteger_UML_DeploymentSpecification_executionLocation->setValue(0);
	
	uML_DeploymentTarget_deployedElement_result_lowerValue_LiteralInteger_UML_DeploymentTarget_deployedElement_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DeploymentTarget_deployedElement_result_lowerValue_LiteralInteger_UML_DeploymentTarget_deployedElement_result->setValue(0);
	
	uML_DeploymentTarget_deployedElement_result_upperValue_LiteralUnlimitedNatural_UML_DeploymentTarget_deployedElement_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DeploymentTarget_deployedElement_result_upperValue_LiteralUnlimitedNatural_UML_DeploymentTarget_deployedElement_result->setValue(-1);
	
	uML_DeploymentTarget_deployedElement_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DeploymentTarget_deployedElement_lowerValue_LiteralInteger_UML_DeploymentTarget_deployedElement.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DeploymentTarget_deployedElement_lowerValue_LiteralInteger_UML_DeploymentTarget_deployedElement->setValue(0);
	
	uML_DeploymentTarget_deployedElement_upperValue_LiteralUnlimitedNatural_UML_DeploymentTarget_deployedElement.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DeploymentTarget_deployedElement_upperValue_LiteralUnlimitedNatural_UML_DeploymentTarget_deployedElement->setValue(-1);
	
	uML_DeploymentTarget_deployment_lowerValue_LiteralInteger_UML_DeploymentTarget_deployment.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DeploymentTarget_deployment_lowerValue_LiteralInteger_UML_DeploymentTarget_deployment->setValue(0);
	
	uML_DeploymentTarget_deployment_upperValue_LiteralUnlimitedNatural_UML_DeploymentTarget_deployment.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DeploymentTarget_deployment_upperValue_LiteralUnlimitedNatural_UML_DeploymentTarget_deployment->setValue(-1);
	
	uML_DestroyLinkAction_endData_lowerValue_LiteralInteger_UML_DestroyLinkAction_endData.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DestroyLinkAction_endData_lowerValue_LiteralInteger_UML_DestroyLinkAction_endData->setValue(2);
	
	uML_DestroyLinkAction_endData_upperValue_LiteralUnlimitedNatural_UML_DestroyLinkAction_endData.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DestroyLinkAction_endData_upperValue_LiteralUnlimitedNatural_UML_DestroyLinkAction_endData->setValue(-1);
	
	uML_DestroyObjectAction_isDestroyLinks_defaultValue_LiteralBoolean_UML_DestroyObjectAction_isDestroyLinks.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_DestroyObjectAction_isDestroyLinks_defaultValue_LiteralBoolean_UML_DestroyObjectAction_isDestroyLinks->setValue(false);
	
	uML_DestroyObjectAction_isDestroyOwnedObjects_defaultValue_LiteralBoolean_UML_DestroyObjectAction_isDestroyOwnedObjects.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_DestroyObjectAction_isDestroyOwnedObjects_defaultValue_LiteralBoolean_UML_DestroyObjectAction_isDestroyOwnedObjects->setValue(false);
	
	uML_DestroyObjectAction_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DestroyObjectAction_no_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DestructionOccurrenceSpecification_no_occurrence_specifications_below_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DirectedRelationship_source_upperValue_LiteralUnlimitedNatural_UML_DirectedRelationship_source.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DirectedRelationship_source_upperValue_LiteralUnlimitedNatural_UML_DirectedRelationship_source->setValue(-1);
	
	uML_DirectedRelationship_target_upperValue_LiteralUnlimitedNatural_UML_DirectedRelationship_target.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DirectedRelationship_target_upperValue_LiteralUnlimitedNatural_UML_DirectedRelationship_target->setValue(-1);
	
	uML_Duration_expr_lowerValue_LiteralInteger_UML_Duration_expr.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Duration_expr_lowerValue_LiteralInteger_UML_Duration_expr->setValue(0);
	
	uML_Duration_no_expr_requires_observation_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Duration_observation_lowerValue_LiteralInteger_UML_Duration_observation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Duration_observation_lowerValue_LiteralInteger_UML_Duration_observation->setValue(0);
	
	uML_Duration_observation_upperValue_LiteralUnlimitedNatural_UML_Duration_observation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Duration_observation_upperValue_LiteralUnlimitedNatural_UML_Duration_observation->setValue(-1);
	
	uML_DurationConstraint_firstEvent_lowerValue_LiteralInteger_UML_DurationConstraint_firstEvent.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DurationConstraint_firstEvent_lowerValue_LiteralInteger_UML_DurationConstraint_firstEvent->setValue(0);
	
	uML_DurationConstraint_firstEvent_upperValue_LiteralUnlimitedNatural_UML_DurationConstraint_firstEvent.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DurationConstraint_firstEvent_upperValue_LiteralUnlimitedNatural_UML_DurationConstraint_firstEvent->setValue(2);
	
	uML_DurationConstraint_first_event_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DurationConstraint_has_one_or_two_constrainedElements_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_DurationObservation_event_upperValue_LiteralUnlimitedNatural_UML_DurationObservation_event.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DurationObservation_event_upperValue_LiteralUnlimitedNatural_UML_DurationObservation_event->setValue(2);
	
	uML_DurationObservation_firstEvent_lowerValue_LiteralInteger_UML_DurationObservation_firstEvent.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_DurationObservation_firstEvent_lowerValue_LiteralInteger_UML_DurationObservation_firstEvent->setValue(0);
	
	uML_DurationObservation_firstEvent_upperValue_LiteralUnlimitedNatural_UML_DurationObservation_firstEvent.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_DurationObservation_firstEvent_upperValue_LiteralUnlimitedNatural_UML_DurationObservation_firstEvent->setValue(2);
	
	uML_DurationObservation_first_event_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Element_allOwnedElements_result_lowerValue_LiteralInteger_UML_Element_allOwnedElements_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_allOwnedElements_result_lowerValue_LiteralInteger_UML_Element_allOwnedElements_result->setValue(0);
	
	uML_Element_allOwnedElements_result_upperValue_LiteralUnlimitedNatural_UML_Element_allOwnedElements_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_allOwnedElements_result_upperValue_LiteralUnlimitedNatural_UML_Element_allOwnedElements_result->setValue(-1);
	
	uML_Element_allOwnedElements_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Element_getApplicableStereotype_String_return_lowerValue_LiteralInteger_UML_Element_getApplicableStereotype_String_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getApplicableStereotype_String_return_lowerValue_LiteralInteger_UML_Element_getApplicableStereotype_String_return->setValue(0);
	
	uML_Element_getApplicableStereotype_String_return_upperValue_LiteralUnlimitedNatural_UML_Element_getApplicableStereotype_String_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getApplicableStereotype_String_return_upperValue_LiteralUnlimitedNatural_UML_Element_getApplicableStereotype_String_return->setValue(1);
	
	uML_Element_getApplicableStereotypes__return_lowerValue_LiteralInteger_UML_Element_getApplicableStereotypes__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getApplicableStereotypes__return_lowerValue_LiteralInteger_UML_Element_getApplicableStereotypes__return->setValue(0);
	
	uML_Element_getApplicableStereotypes__return_upperValue_LiteralUnlimitedNatural_UML_Element_getApplicableStereotypes__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getApplicableStereotypes__return_upperValue_LiteralUnlimitedNatural_UML_Element_getApplicableStereotypes__return->setValue(-1);
	
	uML_Element_getAppliedStereotype_String_return_lowerValue_LiteralInteger_UML_Element_getAppliedStereotype_String_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getAppliedStereotype_String_return_lowerValue_LiteralInteger_UML_Element_getAppliedStereotype_String_return->setValue(0);
	
	uML_Element_getAppliedStereotype_String_return_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedStereotype_String_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getAppliedStereotype_String_return_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedStereotype_String_return->setValue(1);
	
	uML_Element_getAppliedStereotypes__return_lowerValue_LiteralInteger_UML_Element_getAppliedStereotypes__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getAppliedStereotypes__return_lowerValue_LiteralInteger_UML_Element_getAppliedStereotypes__return->setValue(0);
	
	uML_Element_getAppliedStereotypes__return_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedStereotypes__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getAppliedStereotypes__return_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedStereotypes__return->setValue(-1);
	
	uML_Element_getAppliedSubstereotype_Stereotype_String_return_lowerValue_LiteralInteger_UML_Element_getAppliedSubstereotype_Stereotype_String_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getAppliedSubstereotype_Stereotype_String_return_lowerValue_LiteralInteger_UML_Element_getAppliedSubstereotype_Stereotype_String_return->setValue(0);
	
	uML_Element_getAppliedSubstereotype_Stereotype_String_return_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedSubstereotype_Stereotype_String_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getAppliedSubstereotype_Stereotype_String_return_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedSubstereotype_Stereotype_String_return->setValue(1);
	
	uML_Element_getAppliedSubstereotypes_Stereotype_return_lowerValue_LiteralInteger_UML_Element_getAppliedSubstereotypes_Stereotype_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getAppliedSubstereotypes_Stereotype_return_lowerValue_LiteralInteger_UML_Element_getAppliedSubstereotypes_Stereotype_return->setValue(0);
	
	uML_Element_getAppliedSubstereotypes_Stereotype_return_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedSubstereotypes_Stereotype_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getAppliedSubstereotypes_Stereotype_return_upperValue_LiteralUnlimitedNatural_UML_Element_getAppliedSubstereotypes_Stereotype_return->setValue(-1);
	
	uML_Element_getKeywords__return_lowerValue_LiteralInteger_UML_Element_getKeywords__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getKeywords__return_lowerValue_LiteralInteger_UML_Element_getKeywords__return->setValue(0);
	
	uML_Element_getKeywords__return_upperValue_LiteralUnlimitedNatural_UML_Element_getKeywords__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getKeywords__return_upperValue_LiteralUnlimitedNatural_UML_Element_getKeywords__return->setValue(-1);
	
	uML_Element_getModel__return_lowerValue_LiteralInteger_UML_Element_getModel__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getModel__return_lowerValue_LiteralInteger_UML_Element_getModel__return->setValue(0);
	
	uML_Element_getModel__return_upperValue_LiteralUnlimitedNatural_UML_Element_getModel__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getModel__return_upperValue_LiteralUnlimitedNatural_UML_Element_getModel__return->setValue(1);
	
	uML_Element_getNearestPackage__return_lowerValue_LiteralInteger_UML_Element_getNearestPackage__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getNearestPackage__return_lowerValue_LiteralInteger_UML_Element_getNearestPackage__return->setValue(0);
	
	uML_Element_getNearestPackage__return_upperValue_LiteralUnlimitedNatural_UML_Element_getNearestPackage__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getNearestPackage__return_upperValue_LiteralUnlimitedNatural_UML_Element_getNearestPackage__return->setValue(1);
	
	uML_Element_getRelationships_EClass_return_lowerValue_LiteralInteger_UML_Element_getRelationships_EClass_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getRelationships_EClass_return_lowerValue_LiteralInteger_UML_Element_getRelationships_EClass_return->setValue(0);
	
	uML_Element_getRelationships_EClass_return_upperValue_LiteralUnlimitedNatural_UML_Element_getRelationships_EClass_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getRelationships_EClass_return_upperValue_LiteralUnlimitedNatural_UML_Element_getRelationships_EClass_return->setValue(-1);
	
	uML_Element_getRelationships__return_lowerValue_LiteralInteger_UML_Element_getRelationships__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getRelationships__return_lowerValue_LiteralInteger_UML_Element_getRelationships__return->setValue(0);
	
	uML_Element_getRelationships__return_upperValue_LiteralUnlimitedNatural_UML_Element_getRelationships__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getRelationships__return_upperValue_LiteralUnlimitedNatural_UML_Element_getRelationships__return->setValue(-1);
	
	uML_Element_getRequiredStereotype_String_return_lowerValue_LiteralInteger_UML_Element_getRequiredStereotype_String_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getRequiredStereotype_String_return_lowerValue_LiteralInteger_UML_Element_getRequiredStereotype_String_return->setValue(0);
	
	uML_Element_getRequiredStereotype_String_return_upperValue_LiteralUnlimitedNatural_UML_Element_getRequiredStereotype_String_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getRequiredStereotype_String_return_upperValue_LiteralUnlimitedNatural_UML_Element_getRequiredStereotype_String_return->setValue(1);
	
	uML_Element_getRequiredStereotypes__return_lowerValue_LiteralInteger_UML_Element_getRequiredStereotypes__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getRequiredStereotypes__return_lowerValue_LiteralInteger_UML_Element_getRequiredStereotypes__return->setValue(0);
	
	uML_Element_getRequiredStereotypes__return_upperValue_LiteralUnlimitedNatural_UML_Element_getRequiredStereotypes__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getRequiredStereotypes__return_upperValue_LiteralUnlimitedNatural_UML_Element_getRequiredStereotypes__return->setValue(-1);
	
	uML_Element_getSourceDirectedRelationships_EClass_return_lowerValue_LiteralInteger_UML_Element_getSourceDirectedRelationships_EClass_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getSourceDirectedRelationships_EClass_return_lowerValue_LiteralInteger_UML_Element_getSourceDirectedRelationships_EClass_return->setValue(0);
	
	uML_Element_getSourceDirectedRelationships_EClass_return_upperValue_LiteralUnlimitedNatural_UML_Element_getSourceDirectedRelationships_EClass_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getSourceDirectedRelationships_EClass_return_upperValue_LiteralUnlimitedNatural_UML_Element_getSourceDirectedRelationships_EClass_return->setValue(-1);
	
	uML_Element_getSourceDirectedRelationships__return_lowerValue_LiteralInteger_UML_Element_getSourceDirectedRelationships__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getSourceDirectedRelationships__return_lowerValue_LiteralInteger_UML_Element_getSourceDirectedRelationships__return->setValue(0);
	
	uML_Element_getSourceDirectedRelationships__return_upperValue_LiteralUnlimitedNatural_UML_Element_getSourceDirectedRelationships__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getSourceDirectedRelationships__return_upperValue_LiteralUnlimitedNatural_UML_Element_getSourceDirectedRelationships__return->setValue(-1);
	
	uML_Element_getStereotypeApplication_Stereotype_return_lowerValue_LiteralInteger_UML_Element_getStereotypeApplication_Stereotype_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getStereotypeApplication_Stereotype_return_lowerValue_LiteralInteger_UML_Element_getStereotypeApplication_Stereotype_return->setValue(0);
	
	uML_Element_getStereotypeApplication_Stereotype_return_upperValue_LiteralUnlimitedNatural_UML_Element_getStereotypeApplication_Stereotype_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getStereotypeApplication_Stereotype_return_upperValue_LiteralUnlimitedNatural_UML_Element_getStereotypeApplication_Stereotype_return->setValue(1);
	
	uML_Element_getStereotypeApplications__return_lowerValue_LiteralInteger_UML_Element_getStereotypeApplications__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getStereotypeApplications__return_lowerValue_LiteralInteger_UML_Element_getStereotypeApplications__return->setValue(0);
	
	uML_Element_getStereotypeApplications__return_upperValue_LiteralUnlimitedNatural_UML_Element_getStereotypeApplications__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getStereotypeApplications__return_upperValue_LiteralUnlimitedNatural_UML_Element_getStereotypeApplications__return->setValue(-1);
	
	uML_Element_getTargetDirectedRelationships_EClass_return_lowerValue_LiteralInteger_UML_Element_getTargetDirectedRelationships_EClass_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getTargetDirectedRelationships_EClass_return_lowerValue_LiteralInteger_UML_Element_getTargetDirectedRelationships_EClass_return->setValue(0);
	
	uML_Element_getTargetDirectedRelationships_EClass_return_upperValue_LiteralUnlimitedNatural_UML_Element_getTargetDirectedRelationships_EClass_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getTargetDirectedRelationships_EClass_return_upperValue_LiteralUnlimitedNatural_UML_Element_getTargetDirectedRelationships_EClass_return->setValue(-1);
	
	uML_Element_getTargetDirectedRelationships__return_lowerValue_LiteralInteger_UML_Element_getTargetDirectedRelationships__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getTargetDirectedRelationships__return_lowerValue_LiteralInteger_UML_Element_getTargetDirectedRelationships__return->setValue(0);
	
	uML_Element_getTargetDirectedRelationships__return_upperValue_LiteralUnlimitedNatural_UML_Element_getTargetDirectedRelationships__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getTargetDirectedRelationships__return_upperValue_LiteralUnlimitedNatural_UML_Element_getTargetDirectedRelationships__return->setValue(-1);
	
	uML_Element_getValue_Stereotype_String_return_lowerValue_LiteralInteger_UML_Element_getValue_Stereotype_String_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_getValue_Stereotype_String_return_lowerValue_LiteralInteger_UML_Element_getValue_Stereotype_String_return->setValue(0);
	
	uML_Element_getValue_Stereotype_String_return_upperValue_LiteralUnlimitedNatural_UML_Element_getValue_Stereotype_String_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_getValue_Stereotype_String_return_upperValue_LiteralUnlimitedNatural_UML_Element_getValue_Stereotype_String_return->setValue(1);
	
	uML_Element_has_owner_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Element_mustBeOwned_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Element_not_own_self_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Element_ownedComment_lowerValue_LiteralInteger_UML_Element_ownedComment.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_ownedComment_lowerValue_LiteralInteger_UML_Element_ownedComment->setValue(0);
	
	uML_Element_ownedComment_upperValue_LiteralUnlimitedNatural_UML_Element_ownedComment.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_ownedComment_upperValue_LiteralUnlimitedNatural_UML_Element_ownedComment->setValue(-1);
	
	uML_Element_ownedElement_lowerValue_LiteralInteger_UML_Element_ownedElement.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_ownedElement_lowerValue_LiteralInteger_UML_Element_ownedElement->setValue(0);
	
	uML_Element_ownedElement_upperValue_LiteralUnlimitedNatural_UML_Element_ownedElement.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Element_ownedElement_upperValue_LiteralUnlimitedNatural_UML_Element_ownedElement->setValue(-1);
	
	uML_Element_owner_lowerValue_LiteralInteger_UML_Element_owner.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Element_owner_lowerValue_LiteralInteger_UML_Element_owner->setValue(0);
	
	uML_ElementImport_alias_lowerValue_LiteralInteger_UML_ElementImport_alias.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ElementImport_alias_lowerValue_LiteralInteger_UML_ElementImport_alias->setValue(0);
	
	uML_ElementImport_getName_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ElementImport_imported_element_is_public_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ElementImport_visibility_defaultValue_InstanceValue.reset(uml::UmlFactory::eInstance()->createInstanceValue());
	
	uML_ElementImport_visibility_public_or_private_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_EncapsulatedClassifier_ownedPort_result_lowerValue_LiteralInteger_UML_EncapsulatedClassifier_ownedPort_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_EncapsulatedClassifier_ownedPort_result_lowerValue_LiteralInteger_UML_EncapsulatedClassifier_ownedPort_result->setValue(0);
	
	uML_EncapsulatedClassifier_ownedPort_result_upperValue_LiteralUnlimitedNatural_UML_EncapsulatedClassifier_ownedPort_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_EncapsulatedClassifier_ownedPort_result_upperValue_LiteralUnlimitedNatural_UML_EncapsulatedClassifier_ownedPort_result->setValue(-1);
	
	uML_EncapsulatedClassifier_ownedPort_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_EncapsulatedClassifier_ownedPort_lowerValue_LiteralInteger_UML_EncapsulatedClassifier_ownedPort.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_EncapsulatedClassifier_ownedPort_lowerValue_LiteralInteger_UML_EncapsulatedClassifier_ownedPort->setValue(0);
	
	uML_EncapsulatedClassifier_ownedPort_upperValue_LiteralUnlimitedNatural_UML_EncapsulatedClassifier_ownedPort.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_EncapsulatedClassifier_ownedPort_upperValue_LiteralUnlimitedNatural_UML_EncapsulatedClassifier_ownedPort->setValue(-1);
	
	uML_Enumeration_immutable_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Enumeration_ownedLiteral_lowerValue_LiteralInteger_UML_Enumeration_ownedLiteral.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Enumeration_ownedLiteral_lowerValue_LiteralInteger_UML_Enumeration_ownedLiteral->setValue(0);
	
	uML_Enumeration_ownedLiteral_upperValue_LiteralUnlimitedNatural_UML_Enumeration_ownedLiteral.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Enumeration_ownedLiteral_upperValue_LiteralUnlimitedNatural_UML_Enumeration_ownedLiteral->setValue(-1);
	
	uML_EnumerationLiteral_classifier_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_EnumerationLiteral_getClassifiers__return_lowerValue_LiteralInteger_UML_EnumerationLiteral_getClassifiers__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_EnumerationLiteral_getClassifiers__return_lowerValue_LiteralInteger_UML_EnumerationLiteral_getClassifiers__return->setValue(0);
	
	uML_EnumerationLiteral_getClassifiers__return_upperValue_LiteralUnlimitedNatural_UML_EnumerationLiteral_getClassifiers__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_EnumerationLiteral_getClassifiers__return_upperValue_LiteralUnlimitedNatural_UML_EnumerationLiteral_getClassifiers__return->setValue(-1);
	
	uML_ExceptionHandler_edge_source_target_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ExceptionHandler_exceptionType_upperValue_LiteralUnlimitedNatural_UML_ExceptionHandler_exceptionType.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ExceptionHandler_exceptionType_upperValue_LiteralUnlimitedNatural_UML_ExceptionHandler_exceptionType->setValue(-1);
	
	uML_ExceptionHandler_exception_input_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ExceptionHandler_handler_body_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ExceptionHandler_handler_body_owner_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ExceptionHandler_one_input_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ExceptionHandler_output_pins_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ExecutableNode_handler_lowerValue_LiteralInteger_UML_ExecutableNode_handler.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ExecutableNode_handler_lowerValue_LiteralInteger_UML_ExecutableNode_handler->setValue(0);
	
	uML_ExecutableNode_handler_upperValue_LiteralUnlimitedNatural_UML_ExecutableNode_handler.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ExecutableNode_handler_upperValue_LiteralUnlimitedNatural_UML_ExecutableNode_handler->setValue(-1);
	
	uML_ExecutionSpecification_same_lifeline_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ExpansionNode_regionAsInput_lowerValue_LiteralInteger_UML_ExpansionNode_regionAsInput.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ExpansionNode_regionAsInput_lowerValue_LiteralInteger_UML_ExpansionNode_regionAsInput->setValue(0);
	
	uML_ExpansionNode_regionAsOutput_lowerValue_LiteralInteger_UML_ExpansionNode_regionAsOutput.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ExpansionNode_regionAsOutput_lowerValue_LiteralInteger_UML_ExpansionNode_regionAsOutput->setValue(0);
	
	uML_ExpansionNode_region_as_input_or_output_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ExpansionRegion_inputElement_upperValue_LiteralUnlimitedNatural_UML_ExpansionRegion_inputElement.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ExpansionRegion_inputElement_upperValue_LiteralUnlimitedNatural_UML_ExpansionRegion_inputElement->setValue(-1);
	
	uML_ExpansionRegion_mode_defaultValue_InstanceValue.reset(uml::UmlFactory::eInstance()->createInstanceValue());
	
	uML_ExpansionRegion_outputElement_lowerValue_LiteralInteger_UML_ExpansionRegion_outputElement.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ExpansionRegion_outputElement_lowerValue_LiteralInteger_UML_ExpansionRegion_outputElement->setValue(0);
	
	uML_ExpansionRegion_outputElement_upperValue_LiteralUnlimitedNatural_UML_ExpansionRegion_outputElement.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ExpansionRegion_outputElement_upperValue_LiteralUnlimitedNatural_UML_ExpansionRegion_outputElement->setValue(-1);
	
	uML_Expression_operand_lowerValue_LiteralInteger_UML_Expression_operand.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Expression_operand_lowerValue_LiteralInteger_UML_Expression_operand->setValue(0);
	
	uML_Expression_operand_upperValue_LiteralUnlimitedNatural_UML_Expression_operand.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Expression_operand_upperValue_LiteralUnlimitedNatural_UML_Expression_operand->setValue(-1);
	
	uML_Expression_symbol_lowerValue_LiteralInteger_UML_Expression_symbol.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Expression_symbol_lowerValue_LiteralInteger_UML_Expression_symbol->setValue(0);
	
	uML_Extend_condition_lowerValue_LiteralInteger_UML_Extend_condition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Extend_condition_lowerValue_LiteralInteger_UML_Extend_condition->setValue(0);
	
	uML_Extend_extensionLocation_upperValue_LiteralUnlimitedNatural_UML_Extend_extensionLocation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Extend_extensionLocation_upperValue_LiteralUnlimitedNatural_UML_Extend_extensionLocation->setValue(-1);
	
	uML_Extend_extension_points_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Extension_getStereotypeEnd__return_lowerValue_LiteralInteger_UML_Extension_getStereotypeEnd__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Extension_getStereotypeEnd__return_lowerValue_LiteralInteger_UML_Extension_getStereotypeEnd__return->setValue(0);
	
	uML_Extension_getStereotypeEnd__return_upperValue_LiteralUnlimitedNatural_UML_Extension_getStereotypeEnd__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Extension_getStereotypeEnd__return_upperValue_LiteralUnlimitedNatural_UML_Extension_getStereotypeEnd__return->setValue(1);
	
	uML_Extension_getStereotype__return_lowerValue_LiteralInteger_UML_Extension_getStereotype__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Extension_getStereotype__return_lowerValue_LiteralInteger_UML_Extension_getStereotype__return->setValue(0);
	
	uML_Extension_getStereotype__return_upperValue_LiteralUnlimitedNatural_UML_Extension_getStereotype__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Extension_getStereotype__return_upperValue_LiteralUnlimitedNatural_UML_Extension_getStereotype__return->setValue(1);
	
	uML_Extension_isRequired_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Extension_is_binary_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Extension_metaclass_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Extension_metaclassEnd_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Extension_non_owned_end_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ExtensionEnd_aggregation_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ExtensionEnd_lowerBound_result_lowerValue_LiteralInteger_UML_ExtensionEnd_lowerBound_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ExtensionEnd_lowerBound_result_lowerValue_LiteralInteger_UML_ExtensionEnd_lowerBound_result->setValue(0);
	
	uML_ExtensionEnd_lowerBound_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ExtensionEnd_lower_lowerValue_LiteralInteger_UML_ExtensionEnd_lower.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ExtensionEnd_lower_lowerValue_LiteralInteger_UML_ExtensionEnd_lower->setValue(0);
	
	uML_ExtensionEnd_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ExtensionPoint_must_have_name_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Feature_featuringClassifier_lowerValue_LiteralInteger_UML_Feature_featuringClassifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Feature_featuringClassifier_lowerValue_LiteralInteger_UML_Feature_featuringClassifier->setValue(0);
	
	uML_Feature_featuringClassifier_upperValue_LiteralUnlimitedNatural_UML_Feature_featuringClassifier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Feature_featuringClassifier_upperValue_LiteralUnlimitedNatural_UML_Feature_featuringClassifier->setValue(-1);
	
	uML_Feature_isStatic_defaultValue_LiteralBoolean_UML_Feature_isStatic.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Feature_isStatic_defaultValue_LiteralBoolean_UML_Feature_isStatic->setValue(false);
	
	uML_FinalNode_no_outgoing_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_FinalState_cannot_reference_submachine_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_FinalState_no_entry_behavior_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_FinalState_no_exit_behavior_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_FinalState_no_outgoing_transitions_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_FinalState_no_regions_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_FinalState_no_state_behavior_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ForkNode_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ForkNode_one_incoming_edge_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_FunctionBehavior_hasAllDataTypeAttributes_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_FunctionBehavior_one_output_parameter_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_FunctionBehavior_types_of_parameters_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Gate_actual_gate_distinguishable_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Gate_actual_gate_matched_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Gate_formal_gate_distinguishable_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Gate_getName_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Gate_getOperand_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Gate_inside_cf_gate_distinguishable_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Gate_inside_cf_matched_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Gate_isActual_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Gate_isDistinguishableFrom_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Gate_isFormal_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Gate_isInsideCF_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Gate_isOutsideCF_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Gate_matches_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Gate_outside_cf_gate_distinguishable_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Gate_outside_cf_matched_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_GeneralOrdering_irreflexive_transitive_closure_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Generalization_generalizationSet_lowerValue_LiteralInteger_UML_Generalization_generalizationSet.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Generalization_generalizationSet_lowerValue_LiteralInteger_UML_Generalization_generalizationSet->setValue(0);
	
	uML_Generalization_generalizationSet_upperValue_LiteralUnlimitedNatural_UML_Generalization_generalizationSet.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Generalization_generalizationSet_upperValue_LiteralUnlimitedNatural_UML_Generalization_generalizationSet->setValue(-1);
	
	uML_Generalization_isSubstitutable_defaultValue_LiteralBoolean_UML_Generalization_isSubstitutable.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Generalization_isSubstitutable_defaultValue_LiteralBoolean_UML_Generalization_isSubstitutable->setValue(true);
	
	uML_Generalization_isSubstitutable_lowerValue_LiteralInteger_UML_Generalization_isSubstitutable.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Generalization_isSubstitutable_lowerValue_LiteralInteger_UML_Generalization_isSubstitutable->setValue(0);
	
	uML_GeneralizationSet_generalization_lowerValue_LiteralInteger_UML_GeneralizationSet_generalization.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_GeneralizationSet_generalization_lowerValue_LiteralInteger_UML_GeneralizationSet_generalization->setValue(0);
	
	uML_GeneralizationSet_generalization_same_classifier_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_GeneralizationSet_generalization_upperValue_LiteralUnlimitedNatural_UML_GeneralizationSet_generalization.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_GeneralizationSet_generalization_upperValue_LiteralUnlimitedNatural_UML_GeneralizationSet_generalization->setValue(-1);
	
	uML_GeneralizationSet_isCovering_defaultValue_LiteralBoolean_UML_GeneralizationSet_isCovering.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_GeneralizationSet_isCovering_defaultValue_LiteralBoolean_UML_GeneralizationSet_isCovering->setValue(false);
	
	uML_GeneralizationSet_isDisjoint_defaultValue_LiteralBoolean_UML_GeneralizationSet_isDisjoint.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_GeneralizationSet_isDisjoint_defaultValue_LiteralBoolean_UML_GeneralizationSet_isDisjoint->setValue(false);
	
	uML_GeneralizationSet_maps_to_generalization_set_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_GeneralizationSet_powertype_lowerValue_LiteralInteger_UML_GeneralizationSet_powertype.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_GeneralizationSet_powertype_lowerValue_LiteralInteger_UML_GeneralizationSet_powertype->setValue(0);
	
	uML_Image_content_lowerValue_LiteralInteger_UML_Image_content.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Image_content_lowerValue_LiteralInteger_UML_Image_content->setValue(0);
	
	uML_Image_format_lowerValue_LiteralInteger_UML_Image_format.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Image_format_lowerValue_LiteralInteger_UML_Image_format->setValue(0);
	
	uML_Image_location_lowerValue_LiteralInteger_UML_Image_location.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Image_location_lowerValue_LiteralInteger_UML_Image_location->setValue(0);
	
	uML_InformationFlow_convey_classifiers_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InformationFlow_conveyed_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_conveyed.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InformationFlow_conveyed_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_conveyed->setValue(-1);
	
	uML_InformationFlow_informationSource_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_informationSource.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InformationFlow_informationSource_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_informationSource->setValue(-1);
	
	uML_InformationFlow_informationTarget_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_informationTarget.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InformationFlow_informationTarget_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_informationTarget->setValue(-1);
	
	uML_InformationFlow_must_conform_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InformationFlow_realization_lowerValue_LiteralInteger_UML_InformationFlow_realization.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InformationFlow_realization_lowerValue_LiteralInteger_UML_InformationFlow_realization->setValue(0);
	
	uML_InformationFlow_realization_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realization.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InformationFlow_realization_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realization->setValue(-1);
	
	uML_InformationFlow_realizingActivityEdge_lowerValue_LiteralInteger_UML_InformationFlow_realizingActivityEdge.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InformationFlow_realizingActivityEdge_lowerValue_LiteralInteger_UML_InformationFlow_realizingActivityEdge->setValue(0);
	
	uML_InformationFlow_realizingActivityEdge_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realizingActivityEdge.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InformationFlow_realizingActivityEdge_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realizingActivityEdge->setValue(-1);
	
	uML_InformationFlow_realizingConnector_lowerValue_LiteralInteger_UML_InformationFlow_realizingConnector.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InformationFlow_realizingConnector_lowerValue_LiteralInteger_UML_InformationFlow_realizingConnector->setValue(0);
	
	uML_InformationFlow_realizingConnector_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realizingConnector.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InformationFlow_realizingConnector_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realizingConnector->setValue(-1);
	
	uML_InformationFlow_realizingMessage_lowerValue_LiteralInteger_UML_InformationFlow_realizingMessage.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InformationFlow_realizingMessage_lowerValue_LiteralInteger_UML_InformationFlow_realizingMessage->setValue(0);
	
	uML_InformationFlow_realizingMessage_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realizingMessage.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InformationFlow_realizingMessage_upperValue_LiteralUnlimitedNatural_UML_InformationFlow_realizingMessage->setValue(-1);
	
	uML_InformationFlow_sources_and_targets_kind_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InformationItem_has_no_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InformationItem_not_instantiable_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InformationItem_represented_lowerValue_LiteralInteger_UML_InformationItem_represented.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InformationItem_represented_lowerValue_LiteralInteger_UML_InformationItem_represented->setValue(0);
	
	uML_InformationItem_represented_upperValue_LiteralUnlimitedNatural_UML_InformationItem_represented.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InformationItem_represented_upperValue_LiteralUnlimitedNatural_UML_InformationItem_represented->setValue(-1);
	
	uML_InformationItem_sources_and_targets_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InitialNode_control_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InitialNode_no_incoming_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InputPin_outgoing_edges_structured_only_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InstanceSpecification_classifier_lowerValue_LiteralInteger_UML_InstanceSpecification_classifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InstanceSpecification_classifier_lowerValue_LiteralInteger_UML_InstanceSpecification_classifier->setValue(0);
	
	uML_InstanceSpecification_classifier_upperValue_LiteralUnlimitedNatural_UML_InstanceSpecification_classifier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InstanceSpecification_classifier_upperValue_LiteralUnlimitedNatural_UML_InstanceSpecification_classifier->setValue(-1);
	
	uML_InstanceSpecification_defining_feature_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InstanceSpecification_deployment_artifact_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InstanceSpecification_deployment_target_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InstanceSpecification_slot_lowerValue_LiteralInteger_UML_InstanceSpecification_slot.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InstanceSpecification_slot_lowerValue_LiteralInteger_UML_InstanceSpecification_slot->setValue(0);
	
	uML_InstanceSpecification_slot_upperValue_LiteralUnlimitedNatural_UML_InstanceSpecification_slot.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InstanceSpecification_slot_upperValue_LiteralUnlimitedNatural_UML_InstanceSpecification_slot->setValue(-1);
	
	uML_InstanceSpecification_specification_lowerValue_LiteralInteger_UML_InstanceSpecification_specification.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InstanceSpecification_specification_lowerValue_LiteralInteger_UML_InstanceSpecification_specification->setValue(0);
	
	uML_InstanceSpecification_structural_feature_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Interaction_action_lowerValue_LiteralInteger_UML_Interaction_action.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interaction_action_lowerValue_LiteralInteger_UML_Interaction_action->setValue(0);
	
	uML_Interaction_action_upperValue_LiteralUnlimitedNatural_UML_Interaction_action.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interaction_action_upperValue_LiteralUnlimitedNatural_UML_Interaction_action->setValue(-1);
	
	uML_Interaction_formalGate_lowerValue_LiteralInteger_UML_Interaction_formalGate.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interaction_formalGate_lowerValue_LiteralInteger_UML_Interaction_formalGate->setValue(0);
	
	uML_Interaction_formalGate_upperValue_LiteralUnlimitedNatural_UML_Interaction_formalGate.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interaction_formalGate_upperValue_LiteralUnlimitedNatural_UML_Interaction_formalGate->setValue(-1);
	
	uML_Interaction_fragment_lowerValue_LiteralInteger_UML_Interaction_fragment.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interaction_fragment_lowerValue_LiteralInteger_UML_Interaction_fragment->setValue(0);
	
	uML_Interaction_fragment_upperValue_LiteralUnlimitedNatural_UML_Interaction_fragment.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interaction_fragment_upperValue_LiteralUnlimitedNatural_UML_Interaction_fragment->setValue(-1);
	
	uML_Interaction_lifeline_lowerValue_LiteralInteger_UML_Interaction_lifeline.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interaction_lifeline_lowerValue_LiteralInteger_UML_Interaction_lifeline->setValue(0);
	
	uML_Interaction_lifeline_upperValue_LiteralUnlimitedNatural_UML_Interaction_lifeline.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interaction_lifeline_upperValue_LiteralUnlimitedNatural_UML_Interaction_lifeline->setValue(-1);
	
	uML_Interaction_message_lowerValue_LiteralInteger_UML_Interaction_message.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interaction_message_lowerValue_LiteralInteger_UML_Interaction_message->setValue(0);
	
	uML_Interaction_message_upperValue_LiteralUnlimitedNatural_UML_Interaction_message.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interaction_message_upperValue_LiteralUnlimitedNatural_UML_Interaction_message->setValue(-1);
	
	uML_Interaction_not_contained_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InteractionConstraint_dynamic_variables_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InteractionConstraint_global_data_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InteractionConstraint_maxint_greater_equal_minint_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InteractionConstraint_maxint_lowerValue_LiteralInteger_UML_InteractionConstraint_maxint.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InteractionConstraint_maxint_lowerValue_LiteralInteger_UML_InteractionConstraint_maxint->setValue(0);
	
	uML_InteractionConstraint_maxint_positive_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InteractionConstraint_minint_lowerValue_LiteralInteger_UML_InteractionConstraint_minint.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InteractionConstraint_minint_lowerValue_LiteralInteger_UML_InteractionConstraint_minint->setValue(0);
	
	uML_InteractionConstraint_minint_maxint_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InteractionConstraint_minint_non_negative_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InteractionFragment_covered_lowerValue_LiteralInteger_UML_InteractionFragment_covered.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InteractionFragment_covered_lowerValue_LiteralInteger_UML_InteractionFragment_covered->setValue(0);
	
	uML_InteractionFragment_covered_upperValue_LiteralUnlimitedNatural_UML_InteractionFragment_covered.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InteractionFragment_covered_upperValue_LiteralUnlimitedNatural_UML_InteractionFragment_covered->setValue(-1);
	
	uML_InteractionFragment_enclosingInteraction_lowerValue_LiteralInteger_UML_InteractionFragment_enclosingInteraction.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InteractionFragment_enclosingInteraction_lowerValue_LiteralInteger_UML_InteractionFragment_enclosingInteraction->setValue(0);
	
	uML_InteractionFragment_enclosingOperand_lowerValue_LiteralInteger_UML_InteractionFragment_enclosingOperand.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InteractionFragment_enclosingOperand_lowerValue_LiteralInteger_UML_InteractionFragment_enclosingOperand->setValue(0);
	
	uML_InteractionFragment_generalOrdering_lowerValue_LiteralInteger_UML_InteractionFragment_generalOrdering.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InteractionFragment_generalOrdering_lowerValue_LiteralInteger_UML_InteractionFragment_generalOrdering->setValue(0);
	
	uML_InteractionFragment_generalOrdering_upperValue_LiteralUnlimitedNatural_UML_InteractionFragment_generalOrdering.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InteractionFragment_generalOrdering_upperValue_LiteralUnlimitedNatural_UML_InteractionFragment_generalOrdering->setValue(-1);
	
	uML_InteractionOperand_fragment_lowerValue_LiteralInteger_UML_InteractionOperand_fragment.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InteractionOperand_fragment_lowerValue_LiteralInteger_UML_InteractionOperand_fragment->setValue(0);
	
	uML_InteractionOperand_fragment_upperValue_LiteralUnlimitedNatural_UML_InteractionOperand_fragment.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InteractionOperand_fragment_upperValue_LiteralUnlimitedNatural_UML_InteractionOperand_fragment->setValue(-1);
	
	uML_InteractionOperand_guard_contain_references_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InteractionOperand_guard_directly_prior_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InteractionOperand_guard_lowerValue_LiteralInteger_UML_InteractionOperand_guard.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InteractionOperand_guard_lowerValue_LiteralInteger_UML_InteractionOperand_guard->setValue(0);
	
	uML_InteractionUse_actualGate_lowerValue_LiteralInteger_UML_InteractionUse_actualGate.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InteractionUse_actualGate_lowerValue_LiteralInteger_UML_InteractionUse_actualGate->setValue(0);
	
	uML_InteractionUse_actualGate_upperValue_LiteralUnlimitedNatural_UML_InteractionUse_actualGate.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InteractionUse_actualGate_upperValue_LiteralUnlimitedNatural_UML_InteractionUse_actualGate->setValue(-1);
	
	uML_InteractionUse_all_lifelines_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InteractionUse_argument_lowerValue_LiteralInteger_UML_InteractionUse_argument.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InteractionUse_argument_lowerValue_LiteralInteger_UML_InteractionUse_argument->setValue(0);
	
	uML_InteractionUse_argument_upperValue_LiteralUnlimitedNatural_UML_InteractionUse_argument.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InteractionUse_argument_upperValue_LiteralUnlimitedNatural_UML_InteractionUse_argument->setValue(-1);
	
	uML_InteractionUse_arguments_are_constants_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InteractionUse_arguments_correspond_to_parameters_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InteractionUse_gates_match_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InteractionUse_returnValueRecipient_coverage_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InteractionUse_returnValueRecipient_lowerValue_LiteralInteger_UML_InteractionUse_returnValueRecipient.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InteractionUse_returnValueRecipient_lowerValue_LiteralInteger_UML_InteractionUse_returnValueRecipient->setValue(0);
	
	uML_InteractionUse_returnValue_lowerValue_LiteralInteger_UML_InteractionUse_returnValue.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InteractionUse_returnValue_lowerValue_LiteralInteger_UML_InteractionUse_returnValue->setValue(0);
	
	uML_InteractionUse_returnValue_type_recipient_correspondence_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name_lowerValue_LiteralInteger_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name_lowerValue_LiteralInteger_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name->setValue(0);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name->setValue(1);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type_lowerValue_LiteralInteger_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type_lowerValue_LiteralInteger_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type->setValue(0);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type->setValue(1);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name->setValue(0);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name->setValue(1);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames->setValue(0);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames->setValue(-1);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes->setValue(0);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes->setValue(-1);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType_lowerValue_LiteralInteger_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType->setValue(0);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType_upperValue_LiteralUnlimitedNatural_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType->setValue(1);
	
	uML_Interface_nestedClassifier_lowerValue_LiteralInteger_UML_Interface_nestedClassifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interface_nestedClassifier_lowerValue_LiteralInteger_UML_Interface_nestedClassifier->setValue(0);
	
	uML_Interface_nestedClassifier_upperValue_LiteralUnlimitedNatural_UML_Interface_nestedClassifier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interface_nestedClassifier_upperValue_LiteralUnlimitedNatural_UML_Interface_nestedClassifier->setValue(-1);
	
	uML_Interface_ownedAttribute_lowerValue_LiteralInteger_UML_Interface_ownedAttribute.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interface_ownedAttribute_lowerValue_LiteralInteger_UML_Interface_ownedAttribute->setValue(0);
	
	uML_Interface_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Interface_ownedAttribute.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interface_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Interface_ownedAttribute->setValue(-1);
	
	uML_Interface_ownedOperation_lowerValue_LiteralInteger_UML_Interface_ownedOperation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interface_ownedOperation_lowerValue_LiteralInteger_UML_Interface_ownedOperation->setValue(0);
	
	uML_Interface_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_Interface_ownedOperation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interface_ownedOperation_upperValue_LiteralUnlimitedNatural_UML_Interface_ownedOperation->setValue(-1);
	
	uML_Interface_ownedReception_lowerValue_LiteralInteger_UML_Interface_ownedReception.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interface_ownedReception_lowerValue_LiteralInteger_UML_Interface_ownedReception->setValue(0);
	
	uML_Interface_ownedReception_upperValue_LiteralUnlimitedNatural_UML_Interface_ownedReception.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interface_ownedReception_upperValue_LiteralUnlimitedNatural_UML_Interface_ownedReception->setValue(-1);
	
	uML_Interface_protocol_lowerValue_LiteralInteger_UML_Interface_protocol.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interface_protocol_lowerValue_LiteralInteger_UML_Interface_protocol->setValue(0);
	
	uML_Interface_redefinedInterface_lowerValue_LiteralInteger_UML_Interface_redefinedInterface.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Interface_redefinedInterface_lowerValue_LiteralInteger_UML_Interface_redefinedInterface->setValue(0);
	
	uML_Interface_redefinedInterface_upperValue_LiteralUnlimitedNatural_UML_Interface_redefinedInterface.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Interface_redefinedInterface_upperValue_LiteralUnlimitedNatural_UML_Interface_redefinedInterface->setValue(-1);
	
	uML_Interface_visibility_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InterruptibleActivityRegion_interruptingEdge_lowerValue_LiteralInteger_UML_InterruptibleActivityRegion_interruptingEdge.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InterruptibleActivityRegion_interruptingEdge_lowerValue_LiteralInteger_UML_InterruptibleActivityRegion_interruptingEdge->setValue(0);
	
	uML_InterruptibleActivityRegion_interruptingEdge_upperValue_LiteralUnlimitedNatural_UML_InterruptibleActivityRegion_interruptingEdge.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InterruptibleActivityRegion_interruptingEdge_upperValue_LiteralUnlimitedNatural_UML_InterruptibleActivityRegion_interruptingEdge->setValue(-1);
	
	uML_InterruptibleActivityRegion_interrupting_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_InterruptibleActivityRegion_node_lowerValue_LiteralInteger_UML_InterruptibleActivityRegion_node.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InterruptibleActivityRegion_node_lowerValue_LiteralInteger_UML_InterruptibleActivityRegion_node->setValue(0);
	
	uML_InterruptibleActivityRegion_node_upperValue_LiteralUnlimitedNatural_UML_InterruptibleActivityRegion_node.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InterruptibleActivityRegion_node_upperValue_LiteralUnlimitedNatural_UML_InterruptibleActivityRegion_node->setValue(-1);
	
	uML_InvocationAction_argument_lowerValue_LiteralInteger_UML_InvocationAction_argument.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InvocationAction_argument_lowerValue_LiteralInteger_UML_InvocationAction_argument->setValue(0);
	
	uML_InvocationAction_argument_upperValue_LiteralUnlimitedNatural_UML_InvocationAction_argument.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_InvocationAction_argument_upperValue_LiteralUnlimitedNatural_UML_InvocationAction_argument->setValue(-1);
	
	uML_InvocationAction_onPort_lowerValue_LiteralInteger_UML_InvocationAction_onPort.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_InvocationAction_onPort_lowerValue_LiteralInteger_UML_InvocationAction_onPort->setValue(0);
	
	uML_JoinNode_incoming_object_flow_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_JoinNode_isCombineDuplicate_defaultValue_LiteralBoolean_UML_JoinNode_isCombineDuplicate.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_JoinNode_isCombineDuplicate_defaultValue_LiteralBoolean_UML_JoinNode_isCombineDuplicate->setValue(true);
	
	uML_JoinNode_joinSpec_lowerValue_LiteralInteger_UML_JoinNode_joinSpec.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_JoinNode_joinSpec_lowerValue_LiteralInteger_UML_JoinNode_joinSpec->setValue(0);
	
	uML_JoinNode_one_outgoing_edge_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Lifeline_coveredBy_lowerValue_LiteralInteger_UML_Lifeline_coveredBy.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Lifeline_coveredBy_lowerValue_LiteralInteger_UML_Lifeline_coveredBy->setValue(0);
	
	uML_Lifeline_coveredBy_upperValue_LiteralUnlimitedNatural_UML_Lifeline_coveredBy.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Lifeline_coveredBy_upperValue_LiteralUnlimitedNatural_UML_Lifeline_coveredBy->setValue(-1);
	
	uML_Lifeline_decomposedAs_lowerValue_LiteralInteger_UML_Lifeline_decomposedAs.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Lifeline_decomposedAs_lowerValue_LiteralInteger_UML_Lifeline_decomposedAs->setValue(0);
	
	uML_Lifeline_interaction_uses_share_lifeline_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Lifeline_represents_lowerValue_LiteralInteger_UML_Lifeline_represents.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Lifeline_represents_lowerValue_LiteralInteger_UML_Lifeline_represents->setValue(0);
	
	uML_Lifeline_same_classifier_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Lifeline_selector_int_or_string_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Lifeline_selector_lowerValue_LiteralInteger_UML_Lifeline_selector.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Lifeline_selector_lowerValue_LiteralInteger_UML_Lifeline_selector->setValue(0);
	
	uML_Lifeline_selector_specified_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LinkAction_association_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LinkAction_endData_lowerValue_LiteralInteger_UML_LinkAction_endData.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LinkAction_endData_lowerValue_LiteralInteger_UML_LinkAction_endData->setValue(2);
	
	uML_LinkAction_endData_upperValue_LiteralUnlimitedNatural_UML_LinkAction_endData.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LinkAction_endData_upperValue_LiteralUnlimitedNatural_UML_LinkAction_endData->setValue(-1);
	
	uML_LinkAction_inputValue_upperValue_LiteralUnlimitedNatural_UML_LinkAction_inputValue.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LinkAction_inputValue_upperValue_LiteralUnlimitedNatural_UML_LinkAction_inputValue->setValue(-1);
	
	uML_LinkAction_not_static_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LinkAction_same_association_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LinkAction_same_pins_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LinkEndCreationData_allPins_result_lowerValue_LiteralInteger_UML_LinkEndCreationData_allPins_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LinkEndCreationData_allPins_result_lowerValue_LiteralInteger_UML_LinkEndCreationData_allPins_result->setValue(0);
	
	uML_LinkEndCreationData_allPins_result_upperValue_LiteralUnlimitedNatural_UML_LinkEndCreationData_allPins_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LinkEndCreationData_allPins_result_upperValue_LiteralUnlimitedNatural_UML_LinkEndCreationData_allPins_result->setValue(-1);
	
	uML_LinkEndCreationData_allPins_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LinkEndCreationData_insertAt_lowerValue_LiteralInteger_UML_LinkEndCreationData_insertAt.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LinkEndCreationData_insertAt_lowerValue_LiteralInteger_UML_LinkEndCreationData_insertAt->setValue(0);
	
	uML_LinkEndCreationData_insertAt_pin_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LinkEndCreationData_isReplaceAll_defaultValue_LiteralBoolean_UML_LinkEndCreationData_isReplaceAll.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_LinkEndCreationData_isReplaceAll_defaultValue_LiteralBoolean_UML_LinkEndCreationData_isReplaceAll->setValue(false);
	
	uML_LinkEndData_allPins_result_lowerValue_LiteralInteger_UML_LinkEndData_allPins_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LinkEndData_allPins_result_lowerValue_LiteralInteger_UML_LinkEndData_allPins_result->setValue(0);
	
	uML_LinkEndData_allPins_result_upperValue_LiteralUnlimitedNatural_UML_LinkEndData_allPins_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LinkEndData_allPins_result_upperValue_LiteralUnlimitedNatural_UML_LinkEndData_allPins_result->setValue(-1);
	
	uML_LinkEndData_allPins_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LinkEndData_end_object_input_pin_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LinkEndData_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LinkEndData_property_is_association_end_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LinkEndData_qualifier_lowerValue_LiteralInteger_UML_LinkEndData_qualifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LinkEndData_qualifier_lowerValue_LiteralInteger_UML_LinkEndData_qualifier->setValue(0);
	
	uML_LinkEndData_qualifier_upperValue_LiteralUnlimitedNatural_UML_LinkEndData_qualifier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LinkEndData_qualifier_upperValue_LiteralUnlimitedNatural_UML_LinkEndData_qualifier->setValue(-1);
	
	uML_LinkEndData_qualifiers_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LinkEndData_same_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LinkEndData_value_lowerValue_LiteralInteger_UML_LinkEndData_value.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LinkEndData_value_lowerValue_LiteralInteger_UML_LinkEndData_value->setValue(0);
	
	uML_LinkEndDestructionData_allPins_result_lowerValue_LiteralInteger_UML_LinkEndDestructionData_allPins_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LinkEndDestructionData_allPins_result_lowerValue_LiteralInteger_UML_LinkEndDestructionData_allPins_result->setValue(0);
	
	uML_LinkEndDestructionData_allPins_result_upperValue_LiteralUnlimitedNatural_UML_LinkEndDestructionData_allPins_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LinkEndDestructionData_allPins_result_upperValue_LiteralUnlimitedNatural_UML_LinkEndDestructionData_allPins_result->setValue(-1);
	
	uML_LinkEndDestructionData_allPins_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LinkEndDestructionData_destroyAt_lowerValue_LiteralInteger_UML_LinkEndDestructionData_destroyAt.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LinkEndDestructionData_destroyAt_lowerValue_LiteralInteger_UML_LinkEndDestructionData_destroyAt->setValue(0);
	
	uML_LinkEndDestructionData_destroyAt_pin_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LinkEndDestructionData_isDestroyDuplicates_defaultValue_LiteralBoolean_UML_LinkEndDestructionData_isDestroyDuplicates.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_LinkEndDestructionData_isDestroyDuplicates_defaultValue_LiteralBoolean_UML_LinkEndDestructionData_isDestroyDuplicates->setValue(false);
	
	uML_LiteralBoolean_booleanValue_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LiteralBoolean_isComputable_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LiteralBoolean_value_defaultValue_LiteralBoolean_UML_LiteralBoolean_value.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_LiteralBoolean_value_defaultValue_LiteralBoolean_UML_LiteralBoolean_value->setValue(false);
	
	uML_LiteralInteger_integerValue_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LiteralInteger_isComputable_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LiteralInteger_value_defaultValue_LiteralInteger_UML_LiteralInteger_value.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LiteralInteger_value_defaultValue_LiteralInteger_UML_LiteralInteger_value->setValue(0);
	
	uML_LiteralNull_isComputable_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LiteralNull_isNull_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LiteralReal_isComputable_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LiteralReal_realValue_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LiteralString_isComputable_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LiteralString_stringValue_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LiteralString_value_lowerValue_LiteralInteger_UML_LiteralString_value.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LiteralString_value_lowerValue_LiteralInteger_UML_LiteralString_value->setValue(0);
	
	uML_LiteralUnlimitedNatural_isComputable_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LiteralUnlimitedNatural_unlimitedValue_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LiteralUnlimitedNatural_value_defaultValue_LiteralUnlimitedNatural_UML_LiteralUnlimitedNatural_value.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LiteralUnlimitedNatural_value_defaultValue_LiteralUnlimitedNatural_UML_LiteralUnlimitedNatural_value->setValue(0);
	
	uML_LoopNode_allActions_result_lowerValue_LiteralInteger_UML_LoopNode_allActions_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LoopNode_allActions_result_lowerValue_LiteralInteger_UML_LoopNode_allActions_result->setValue(0);
	
	uML_LoopNode_allActions_result_upperValue_LiteralUnlimitedNatural_UML_LoopNode_allActions_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LoopNode_allActions_result_upperValue_LiteralUnlimitedNatural_UML_LoopNode_allActions_result->setValue(-1);
	
	uML_LoopNode_allActions_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LoopNode_bodyOutput_lowerValue_LiteralInteger_UML_LoopNode_bodyOutput.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LoopNode_bodyOutput_lowerValue_LiteralInteger_UML_LoopNode_bodyOutput->setValue(0);
	
	uML_LoopNode_bodyOutput_upperValue_LiteralUnlimitedNatural_UML_LoopNode_bodyOutput.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LoopNode_bodyOutput_upperValue_LiteralUnlimitedNatural_UML_LoopNode_bodyOutput->setValue(-1);
	
	uML_LoopNode_bodyPart_lowerValue_LiteralInteger_UML_LoopNode_bodyPart.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LoopNode_bodyPart_lowerValue_LiteralInteger_UML_LoopNode_bodyPart->setValue(0);
	
	uML_LoopNode_bodyPart_upperValue_LiteralUnlimitedNatural_UML_LoopNode_bodyPart.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LoopNode_bodyPart_upperValue_LiteralUnlimitedNatural_UML_LoopNode_bodyPart->setValue(-1);
	
	uML_LoopNode_body_output_pins_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LoopNode_executable_nodes_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LoopNode_input_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LoopNode_isTestedFirst_defaultValue_LiteralBoolean_UML_LoopNode_isTestedFirst.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_LoopNode_isTestedFirst_defaultValue_LiteralBoolean_UML_LoopNode_isTestedFirst->setValue(false);
	
	uML_LoopNode_loopVariableInput_lowerValue_LiteralInteger_UML_LoopNode_loopVariableInput.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LoopNode_loopVariableInput_lowerValue_LiteralInteger_UML_LoopNode_loopVariableInput->setValue(0);
	
	uML_LoopNode_loopVariableInput_upperValue_LiteralUnlimitedNatural_UML_LoopNode_loopVariableInput.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LoopNode_loopVariableInput_upperValue_LiteralUnlimitedNatural_UML_LoopNode_loopVariableInput->setValue(-1);
	
	uML_LoopNode_loopVariable_lowerValue_LiteralInteger_UML_LoopNode_loopVariable.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LoopNode_loopVariable_lowerValue_LiteralInteger_UML_LoopNode_loopVariable->setValue(0);
	
	uML_LoopNode_loopVariable_upperValue_LiteralUnlimitedNatural_UML_LoopNode_loopVariable.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LoopNode_loopVariable_upperValue_LiteralUnlimitedNatural_UML_LoopNode_loopVariable->setValue(-1);
	
	uML_LoopNode_loop_variable_outgoing_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LoopNode_matching_loop_variables_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LoopNode_matching_output_pins_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LoopNode_matching_result_pins_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LoopNode_result_lowerValue_LiteralInteger_UML_LoopNode_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LoopNode_result_lowerValue_LiteralInteger_UML_LoopNode_result->setValue(0);
	
	uML_LoopNode_result_no_incoming_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LoopNode_result_upperValue_LiteralUnlimitedNatural_UML_LoopNode_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LoopNode_result_upperValue_LiteralUnlimitedNatural_UML_LoopNode_result->setValue(-1);
	
	uML_LoopNode_setupPart_lowerValue_LiteralInteger_UML_LoopNode_setupPart.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LoopNode_setupPart_lowerValue_LiteralInteger_UML_LoopNode_setupPart->setValue(0);
	
	uML_LoopNode_setupPart_upperValue_LiteralUnlimitedNatural_UML_LoopNode_setupPart.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LoopNode_setupPart_upperValue_LiteralUnlimitedNatural_UML_LoopNode_setupPart->setValue(-1);
	
	uML_LoopNode_setup_test_and_body_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LoopNode_sourceNodes_result_lowerValue_LiteralInteger_UML_LoopNode_sourceNodes_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_LoopNode_sourceNodes_result_lowerValue_LiteralInteger_UML_LoopNode_sourceNodes_result->setValue(0);
	
	uML_LoopNode_sourceNodes_result_upperValue_LiteralUnlimitedNatural_UML_LoopNode_sourceNodes_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LoopNode_sourceNodes_result_upperValue_LiteralUnlimitedNatural_UML_LoopNode_sourceNodes_result->setValue(-1);
	
	uML_LoopNode_sourceNodes_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_LoopNode_test_upperValue_LiteralUnlimitedNatural_UML_LoopNode_test.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_LoopNode_test_upperValue_LiteralUnlimitedNatural_UML_LoopNode_test->setValue(-1);
	
	uML_MergeNode_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MergeNode_one_outgoing_edge_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Message_argument_lowerValue_LiteralInteger_UML_Message_argument.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Message_argument_lowerValue_LiteralInteger_UML_Message_argument->setValue(0);
	
	uML_Message_argument_upperValue_LiteralUnlimitedNatural_UML_Message_argument.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Message_argument_upperValue_LiteralUnlimitedNatural_UML_Message_argument->setValue(-1);
	
	uML_Message_arguments_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Message_cannot_cross_boundaries_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Message_connector_lowerValue_LiteralInteger_UML_Message_connector.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Message_connector_lowerValue_LiteralInteger_UML_Message_connector->setValue(0);
	
	uML_Message_isDistinguishableFrom_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Message_messageKind_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Message_messageKind_defaultValue_InstanceValue.reset(uml::UmlFactory::eInstance()->createInstanceValue());
	
	uML_Message_messageSort_defaultValue_InstanceValue.reset(uml::UmlFactory::eInstance()->createInstanceValue());
	
	uML_Message_occurrence_specifications_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Message_receiveEvent_lowerValue_LiteralInteger_UML_Message_receiveEvent.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Message_receiveEvent_lowerValue_LiteralInteger_UML_Message_receiveEvent->setValue(0);
	
	uML_Message_sendEvent_lowerValue_LiteralInteger_UML_Message_sendEvent.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Message_sendEvent_lowerValue_LiteralInteger_UML_Message_sendEvent->setValue(0);
	
	uML_Message_sending_receiving_message_event_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Message_signature_is_operation_reply_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Message_signature_is_operation_request_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Message_signature_is_signal_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Message_signature_lowerValue_LiteralInteger_UML_Message_signature.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Message_signature_lowerValue_LiteralInteger_UML_Message_signature->setValue(0);
	
	uML_Message_signature_refer_to_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MessageEnd_enclosingFragment_result_lowerValue_LiteralInteger_UML_MessageEnd_enclosingFragment_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_MessageEnd_enclosingFragment_result_lowerValue_LiteralInteger_UML_MessageEnd_enclosingFragment_result->setValue(0);
	
	uML_MessageEnd_enclosingFragment_result_upperValue_LiteralUnlimitedNatural_UML_MessageEnd_enclosingFragment_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_MessageEnd_enclosingFragment_result_upperValue_LiteralUnlimitedNatural_UML_MessageEnd_enclosingFragment_result->setValue(-1);
	
	uML_MessageEnd_enclosingFragment_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MessageEnd_isReceive_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MessageEnd_isReceive_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MessageEnd_isSend_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MessageEnd_isSend_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MessageEnd_message_lowerValue_LiteralInteger_UML_MessageEnd_message.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_MessageEnd_message_lowerValue_LiteralInteger_UML_MessageEnd_message->setValue(0);
	
	uML_MessageEnd_oppositeEnd_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MessageEnd_oppositeEnd_result_lowerValue_LiteralInteger_UML_MessageEnd_oppositeEnd_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_MessageEnd_oppositeEnd_result_lowerValue_LiteralInteger_UML_MessageEnd_oppositeEnd_result->setValue(0);
	
	uML_MessageEnd_oppositeEnd_result_upperValue_LiteralUnlimitedNatural_UML_MessageEnd_oppositeEnd_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_MessageEnd_oppositeEnd_result_upperValue_LiteralUnlimitedNatural_UML_MessageEnd_oppositeEnd_result->setValue(-1);
	
	uML_MessageEnd_oppositeEnd_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Model_viewpoint_lowerValue_LiteralInteger_UML_Model_viewpoint.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Model_viewpoint_lowerValue_LiteralInteger_UML_Model_viewpoint->setValue(0);
	
	uML_MultiplicityElement_compatibleWith_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MultiplicityElement_includesMultiplicity_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MultiplicityElement_includesMultiplicity_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MultiplicityElement_is_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MultiplicityElement_isMultivalued_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MultiplicityElement_isMultivalued_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MultiplicityElement_isOrdered_defaultValue_LiteralBoolean_UML_MultiplicityElement_isOrdered.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_MultiplicityElement_isOrdered_defaultValue_LiteralBoolean_UML_MultiplicityElement_isOrdered->setValue(false);
	
	uML_MultiplicityElement_isUnique_defaultValue_LiteralBoolean_UML_MultiplicityElement_isUnique.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_MultiplicityElement_isUnique_defaultValue_LiteralBoolean_UML_MultiplicityElement_isUnique->setValue(true);
	
	uML_MultiplicityElement_lower_result_lowerValue_LiteralInteger_UML_MultiplicityElement_lower_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_MultiplicityElement_lower_result_lowerValue_LiteralInteger_UML_MultiplicityElement_lower_result->setValue(0);
	
	uML_MultiplicityElement_lower_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MultiplicityElement_lowerBound_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MultiplicityElement_lowerValue_lowerValue_LiteralInteger_UML_MultiplicityElement_lowerValue.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_MultiplicityElement_lowerValue_lowerValue_LiteralInteger_UML_MultiplicityElement_lowerValue->setValue(0);
	
	uML_MultiplicityElement_lower_defaultValue_LiteralInteger_UML_MultiplicityElement_lower.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_MultiplicityElement_lower_defaultValue_LiteralInteger_UML_MultiplicityElement_lower->setValue(1);
	
	uML_MultiplicityElement_lower_ge_0_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MultiplicityElement_lower_is_integer_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MultiplicityElement_upper_result_lowerValue_LiteralInteger_UML_MultiplicityElement_upper_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_MultiplicityElement_upper_result_lowerValue_LiteralInteger_UML_MultiplicityElement_upper_result->setValue(0);
	
	uML_MultiplicityElement_upper_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MultiplicityElement_upperBound_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MultiplicityElement_upperValue_lowerValue_LiteralInteger_UML_MultiplicityElement_upperValue.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_MultiplicityElement_upperValue_lowerValue_LiteralInteger_UML_MultiplicityElement_upperValue->setValue(0);
	
	uML_MultiplicityElement_upper_defaultValue_LiteralUnlimitedNatural_UML_MultiplicityElement_upper.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_MultiplicityElement_upper_defaultValue_LiteralUnlimitedNatural_UML_MultiplicityElement_upper->setValue(1);
	
	uML_MultiplicityElement_upper_ge_lower_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MultiplicityElement_upper_is_unlimitedNatural_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MultiplicityElement_value_specification_constant_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_MultiplicityElement_value_specification_no_side_effects_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_NamedElement_allNamespaces_result_lowerValue_LiteralInteger_UML_NamedElement_allNamespaces_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_NamedElement_allNamespaces_result_lowerValue_LiteralInteger_UML_NamedElement_allNamespaces_result->setValue(0);
	
	uML_NamedElement_allNamespaces_result_upperValue_LiteralUnlimitedNatural_UML_NamedElement_allNamespaces_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_NamedElement_allNamespaces_result_upperValue_LiteralUnlimitedNatural_UML_NamedElement_allNamespaces_result->setValue(-1);
	
	uML_NamedElement_allNamespaces_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_NamedElement_allOwningPackages_result_lowerValue_LiteralInteger_UML_NamedElement_allOwningPackages_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_NamedElement_allOwningPackages_result_lowerValue_LiteralInteger_UML_NamedElement_allOwningPackages_result->setValue(0);
	
	uML_NamedElement_allOwningPackages_result_upperValue_LiteralUnlimitedNatural_UML_NamedElement_allOwningPackages_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_NamedElement_allOwningPackages_result_upperValue_LiteralUnlimitedNatural_UML_NamedElement_allOwningPackages_result->setValue(-1);
	
	uML_NamedElement_allOwningPackages_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_NamedElement_clientDependency_result_lowerValue_LiteralInteger_UML_NamedElement_clientDependency_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_NamedElement_clientDependency_result_lowerValue_LiteralInteger_UML_NamedElement_clientDependency_result->setValue(0);
	
	uML_NamedElement_clientDependency_result_upperValue_LiteralUnlimitedNatural_UML_NamedElement_clientDependency_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_NamedElement_clientDependency_result_upperValue_LiteralUnlimitedNatural_UML_NamedElement_clientDependency_result->setValue(-1);
	
	uML_NamedElement_clientDependency_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_NamedElement_clientDependency_lowerValue_LiteralInteger_UML_NamedElement_clientDependency.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_NamedElement_clientDependency_lowerValue_LiteralInteger_UML_NamedElement_clientDependency->setValue(0);
	
	uML_NamedElement_clientDependency_upperValue_LiteralUnlimitedNatural_UML_NamedElement_clientDependency.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_NamedElement_clientDependency_upperValue_LiteralUnlimitedNatural_UML_NamedElement_clientDependency->setValue(-1);
	
	uML_NamedElement_getLabel_Boolean_return_lowerValue_LiteralInteger_UML_NamedElement_getLabel_Boolean_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_NamedElement_getLabel_Boolean_return_lowerValue_LiteralInteger_UML_NamedElement_getLabel_Boolean_return->setValue(0);
	
	uML_NamedElement_getLabel_Boolean_return_upperValue_LiteralUnlimitedNatural_UML_NamedElement_getLabel_Boolean_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_NamedElement_getLabel_Boolean_return_upperValue_LiteralUnlimitedNatural_UML_NamedElement_getLabel_Boolean_return->setValue(1);
	
	uML_NamedElement_getLabel__return_lowerValue_LiteralInteger_UML_NamedElement_getLabel__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_NamedElement_getLabel__return_lowerValue_LiteralInteger_UML_NamedElement_getLabel__return->setValue(0);
	
	uML_NamedElement_getLabel__return_upperValue_LiteralUnlimitedNatural_UML_NamedElement_getLabel__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_NamedElement_getLabel__return_upperValue_LiteralUnlimitedNatural_UML_NamedElement_getLabel__return->setValue(1);
	
	uML_NamedElement_has_no_qualified_name_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_NamedElement_has_qualified_name_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_NamedElement_isDistinguishableFrom_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_NamedElement_nameExpression_lowerValue_LiteralInteger_UML_NamedElement_nameExpression.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_NamedElement_nameExpression_lowerValue_LiteralInteger_UML_NamedElement_nameExpression->setValue(0);
	
	uML_NamedElement_name_lowerValue_LiteralInteger_UML_NamedElement_name.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_NamedElement_name_lowerValue_LiteralInteger_UML_NamedElement_name->setValue(0);
	
	uML_NamedElement_namespace_result_lowerValue_LiteralInteger_UML_NamedElement_namespace_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_NamedElement_namespace_result_lowerValue_LiteralInteger_UML_NamedElement_namespace_result->setValue(0);
	
	uML_NamedElement_namespace_lowerValue_LiteralInteger_UML_NamedElement_namespace.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_NamedElement_namespace_lowerValue_LiteralInteger_UML_NamedElement_namespace->setValue(0);
	
	uML_NamedElement_qualifiedName_result_lowerValue_LiteralInteger_UML_NamedElement_qualifiedName_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_NamedElement_qualifiedName_result_lowerValue_LiteralInteger_UML_NamedElement_qualifiedName_result->setValue(0);
	
	uML_NamedElement_qualifiedName_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_NamedElement_qualifiedName_lowerValue_LiteralInteger_UML_NamedElement_qualifiedName.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_NamedElement_qualifiedName_lowerValue_LiteralInteger_UML_NamedElement_qualifiedName->setValue(0);
	
	uML_NamedElement_separator_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_NamedElement_visibility_lowerValue_LiteralInteger_UML_NamedElement_visibility.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_NamedElement_visibility_lowerValue_LiteralInteger_UML_NamedElement_visibility->setValue(0);
	
	uML_NamedElement_visibility_needs_ownership_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Namespace_cannot_import_ownedMembers_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Namespace_cannot_import_self_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Namespace_elementImport_lowerValue_LiteralInteger_UML_Namespace_elementImport.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Namespace_elementImport_lowerValue_LiteralInteger_UML_Namespace_elementImport->setValue(0);
	
	uML_Namespace_elementImport_upperValue_LiteralUnlimitedNatural_UML_Namespace_elementImport.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Namespace_elementImport_upperValue_LiteralUnlimitedNatural_UML_Namespace_elementImport->setValue(-1);
	
	uML_Namespace_excludeCollisions_result_lowerValue_LiteralInteger_UML_Namespace_excludeCollisions_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Namespace_excludeCollisions_result_lowerValue_LiteralInteger_UML_Namespace_excludeCollisions_result->setValue(0);
	
	uML_Namespace_excludeCollisions_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_excludeCollisions_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Namespace_excludeCollisions_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_excludeCollisions_result->setValue(-1);
	
	uML_Namespace_excludeCollisions_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps_lowerValue_LiteralInteger_UML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps_lowerValue_LiteralInteger_UML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps->setValue(0);
	
	uML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps_upperValue_LiteralUnlimitedNatural_UML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps_upperValue_LiteralUnlimitedNatural_UML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps->setValue(-1);
	
	uML_Namespace_getImportedElements__return_lowerValue_LiteralInteger_UML_Namespace_getImportedElements__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Namespace_getImportedElements__return_lowerValue_LiteralInteger_UML_Namespace_getImportedElements__return->setValue(0);
	
	uML_Namespace_getImportedElements__return_upperValue_LiteralUnlimitedNatural_UML_Namespace_getImportedElements__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Namespace_getImportedElements__return_upperValue_LiteralUnlimitedNatural_UML_Namespace_getImportedElements__return->setValue(-1);
	
	uML_Namespace_getImportedPackages__return_lowerValue_LiteralInteger_UML_Namespace_getImportedPackages__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Namespace_getImportedPackages__return_lowerValue_LiteralInteger_UML_Namespace_getImportedPackages__return->setValue(0);
	
	uML_Namespace_getImportedPackages__return_upperValue_LiteralUnlimitedNatural_UML_Namespace_getImportedPackages__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Namespace_getImportedPackages__return_upperValue_LiteralUnlimitedNatural_UML_Namespace_getImportedPackages__return->setValue(-1);
	
	uML_Namespace_getNamesOfMember_result_lowerValue_LiteralInteger_UML_Namespace_getNamesOfMember_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Namespace_getNamesOfMember_result_lowerValue_LiteralInteger_UML_Namespace_getNamesOfMember_result->setValue(0);
	
	uML_Namespace_getNamesOfMember_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_getNamesOfMember_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Namespace_getNamesOfMember_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_getNamesOfMember_result->setValue(-1);
	
	uML_Namespace_getNamesOfMember_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Namespace_importMembers_result_lowerValue_LiteralInteger_UML_Namespace_importMembers_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Namespace_importMembers_result_lowerValue_LiteralInteger_UML_Namespace_importMembers_result->setValue(0);
	
	uML_Namespace_importMembers_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_importMembers_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Namespace_importMembers_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_importMembers_result->setValue(-1);
	
	uML_Namespace_importMembers_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps_lowerValue_LiteralInteger_UML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps_lowerValue_LiteralInteger_UML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps->setValue(0);
	
	uML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps_upperValue_LiteralUnlimitedNatural_UML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps_upperValue_LiteralUnlimitedNatural_UML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps->setValue(-1);
	
	uML_Namespace_importedMember_result_lowerValue_LiteralInteger_UML_Namespace_importedMember_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Namespace_importedMember_result_lowerValue_LiteralInteger_UML_Namespace_importedMember_result->setValue(0);
	
	uML_Namespace_importedMember_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_importedMember_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Namespace_importedMember_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_importedMember_result->setValue(-1);
	
	uML_Namespace_importedMember_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Namespace_importedMember_lowerValue_LiteralInteger_UML_Namespace_importedMember.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Namespace_importedMember_lowerValue_LiteralInteger_UML_Namespace_importedMember->setValue(0);
	
	uML_Namespace_importedMember_upperValue_LiteralUnlimitedNatural_UML_Namespace_importedMember.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Namespace_importedMember_upperValue_LiteralUnlimitedNatural_UML_Namespace_importedMember->setValue(-1);
	
	uML_Namespace_member_lowerValue_LiteralInteger_UML_Namespace_member.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Namespace_member_lowerValue_LiteralInteger_UML_Namespace_member->setValue(0);
	
	uML_Namespace_member_upperValue_LiteralUnlimitedNatural_UML_Namespace_member.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Namespace_member_upperValue_LiteralUnlimitedNatural_UML_Namespace_member->setValue(-1);
	
	uML_Namespace_membersAreDistinguishable_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Namespace_members_distinguishable_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Namespace_ownedMember_result_lowerValue_LiteralInteger_UML_Namespace_ownedMember_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Namespace_ownedMember_result_lowerValue_LiteralInteger_UML_Namespace_ownedMember_result->setValue(0);
	
	uML_Namespace_ownedMember_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_ownedMember_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Namespace_ownedMember_result_upperValue_LiteralUnlimitedNatural_UML_Namespace_ownedMember_result->setValue(-1);
	
	uML_Namespace_ownedMember_lowerValue_LiteralInteger_UML_Namespace_ownedMember.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Namespace_ownedMember_lowerValue_LiteralInteger_UML_Namespace_ownedMember->setValue(0);
	
	uML_Namespace_ownedMember_upperValue_LiteralUnlimitedNatural_UML_Namespace_ownedMember.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Namespace_ownedMember_upperValue_LiteralUnlimitedNatural_UML_Namespace_ownedMember->setValue(-1);
	
	uML_Namespace_ownedRule_lowerValue_LiteralInteger_UML_Namespace_ownedRule.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Namespace_ownedRule_lowerValue_LiteralInteger_UML_Namespace_ownedRule->setValue(0);
	
	uML_Namespace_ownedRule_upperValue_LiteralUnlimitedNatural_UML_Namespace_ownedRule.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Namespace_ownedRule_upperValue_LiteralUnlimitedNatural_UML_Namespace_ownedRule->setValue(-1);
	
	uML_Namespace_packageImport_lowerValue_LiteralInteger_UML_Namespace_packageImport.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Namespace_packageImport_lowerValue_LiteralInteger_UML_Namespace_packageImport->setValue(0);
	
	uML_Namespace_packageImport_upperValue_LiteralUnlimitedNatural_UML_Namespace_packageImport.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Namespace_packageImport_upperValue_LiteralUnlimitedNatural_UML_Namespace_packageImport->setValue(-1);
	
	uML_Node_getCommunicationPaths__return_lowerValue_LiteralInteger_UML_Node_getCommunicationPaths__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Node_getCommunicationPaths__return_lowerValue_LiteralInteger_UML_Node_getCommunicationPaths__return->setValue(0);
	
	uML_Node_getCommunicationPaths__return_upperValue_LiteralUnlimitedNatural_UML_Node_getCommunicationPaths__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Node_getCommunicationPaths__return_upperValue_LiteralUnlimitedNatural_UML_Node_getCommunicationPaths__return->setValue(-1);
	
	uML_Node_internal_structure_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Node_nestedNode_lowerValue_LiteralInteger_UML_Node_nestedNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Node_nestedNode_lowerValue_LiteralInteger_UML_Node_nestedNode->setValue(0);
	
	uML_Node_nestedNode_upperValue_LiteralUnlimitedNatural_UML_Node_nestedNode.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Node_nestedNode_upperValue_LiteralUnlimitedNatural_UML_Node_nestedNode->setValue(-1);
	
	uML_ObjectFlow_compatible_types_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ObjectFlow_input_and_output_parameter_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ObjectFlow_isMulticast_defaultValue_LiteralBoolean_UML_ObjectFlow_isMulticast.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_ObjectFlow_isMulticast_defaultValue_LiteralBoolean_UML_ObjectFlow_isMulticast->setValue(false);
	
	uML_ObjectFlow_isMultireceive_defaultValue_LiteralBoolean_UML_ObjectFlow_isMultireceive.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_ObjectFlow_isMultireceive_defaultValue_LiteralBoolean_UML_ObjectFlow_isMultireceive->setValue(false);
	
	uML_ObjectFlow_is_multicast_or_is_multireceive_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ObjectFlow_no_executable_nodes_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ObjectFlow_same_upper_bounds_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ObjectFlow_selection_behavior_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ObjectFlow_selection_lowerValue_LiteralInteger_UML_ObjectFlow_selection.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ObjectFlow_selection_lowerValue_LiteralInteger_UML_ObjectFlow_selection->setValue(0);
	
	uML_ObjectFlow_target_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ObjectFlow_transformation_behavior_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ObjectFlow_transformation_lowerValue_LiteralInteger_UML_ObjectFlow_transformation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ObjectFlow_transformation_lowerValue_LiteralInteger_UML_ObjectFlow_transformation->setValue(0);
	
	uML_ObjectNode_inState_lowerValue_LiteralInteger_UML_ObjectNode_inState.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ObjectNode_inState_lowerValue_LiteralInteger_UML_ObjectNode_inState->setValue(0);
	
	uML_ObjectNode_inState_upperValue_LiteralUnlimitedNatural_UML_ObjectNode_inState.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ObjectNode_inState_upperValue_LiteralUnlimitedNatural_UML_ObjectNode_inState->setValue(-1);
	
	uML_ObjectNode_input_output_parameter_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ObjectNode_isControlType_defaultValue_LiteralBoolean_UML_ObjectNode_isControlType.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_ObjectNode_isControlType_defaultValue_LiteralBoolean_UML_ObjectNode_isControlType->setValue(false);
	
	uML_ObjectNode_object_flow_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ObjectNode_ordering_defaultValue_InstanceValue.reset(uml::UmlFactory::eInstance()->createInstanceValue());
	
	uML_ObjectNode_selection_behavior_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ObjectNode_selection_lowerValue_LiteralInteger_UML_ObjectNode_selection.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ObjectNode_selection_lowerValue_LiteralInteger_UML_ObjectNode_selection->setValue(0);
	
	uML_ObjectNode_upperBound_lowerValue_LiteralInteger_UML_ObjectNode_upperBound.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ObjectNode_upperBound_lowerValue_LiteralInteger_UML_ObjectNode_upperBound->setValue(0);
	
	uML_OccurrenceSpecification_getCovered__return_lowerValue_LiteralInteger_UML_OccurrenceSpecification_getCovered__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_OccurrenceSpecification_getCovered__return_lowerValue_LiteralInteger_UML_OccurrenceSpecification_getCovered__return->setValue(0);
	
	uML_OccurrenceSpecification_toAfter_lowerValue_LiteralInteger_UML_OccurrenceSpecification_toAfter.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_OccurrenceSpecification_toAfter_lowerValue_LiteralInteger_UML_OccurrenceSpecification_toAfter->setValue(0);
	
	uML_OccurrenceSpecification_toAfter_upperValue_LiteralUnlimitedNatural_UML_OccurrenceSpecification_toAfter.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_OccurrenceSpecification_toAfter_upperValue_LiteralUnlimitedNatural_UML_OccurrenceSpecification_toAfter->setValue(-1);
	
	uML_OccurrenceSpecification_toBefore_lowerValue_LiteralInteger_UML_OccurrenceSpecification_toBefore.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_OccurrenceSpecification_toBefore_lowerValue_LiteralInteger_UML_OccurrenceSpecification_toBefore->setValue(0);
	
	uML_OccurrenceSpecification_toBefore_upperValue_LiteralUnlimitedNatural_UML_OccurrenceSpecification_toBefore.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_OccurrenceSpecification_toBefore_upperValue_LiteralUnlimitedNatural_UML_OccurrenceSpecification_toBefore->setValue(-1);
	
	uML_OpaqueAction_body_lowerValue_LiteralInteger_UML_OpaqueAction_body.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_OpaqueAction_body_lowerValue_LiteralInteger_UML_OpaqueAction_body->setValue(0);
	
	uML_OpaqueAction_body_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_body.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_OpaqueAction_body_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_body->setValue(-1);
	
	uML_OpaqueAction_inputValue_lowerValue_LiteralInteger_UML_OpaqueAction_inputValue.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_OpaqueAction_inputValue_lowerValue_LiteralInteger_UML_OpaqueAction_inputValue->setValue(0);
	
	uML_OpaqueAction_inputValue_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_inputValue.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_OpaqueAction_inputValue_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_inputValue->setValue(-1);
	
	uML_OpaqueAction_language_body_size_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_OpaqueAction_language_lowerValue_LiteralInteger_UML_OpaqueAction_language.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_OpaqueAction_language_lowerValue_LiteralInteger_UML_OpaqueAction_language->setValue(0);
	
	uML_OpaqueAction_language_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_language.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_OpaqueAction_language_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_language->setValue(-1);
	
	uML_OpaqueAction_outputValue_lowerValue_LiteralInteger_UML_OpaqueAction_outputValue.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_OpaqueAction_outputValue_lowerValue_LiteralInteger_UML_OpaqueAction_outputValue->setValue(0);
	
	uML_OpaqueAction_outputValue_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_outputValue.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_OpaqueAction_outputValue_upperValue_LiteralUnlimitedNatural_UML_OpaqueAction_outputValue->setValue(-1);
	
	uML_OpaqueBehavior_body_lowerValue_LiteralInteger_UML_OpaqueBehavior_body.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_OpaqueBehavior_body_lowerValue_LiteralInteger_UML_OpaqueBehavior_body->setValue(0);
	
	uML_OpaqueBehavior_body_upperValue_LiteralUnlimitedNatural_UML_OpaqueBehavior_body.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_OpaqueBehavior_body_upperValue_LiteralUnlimitedNatural_UML_OpaqueBehavior_body->setValue(-1);
	
	uML_OpaqueBehavior_language_lowerValue_LiteralInteger_UML_OpaqueBehavior_language.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_OpaqueBehavior_language_lowerValue_LiteralInteger_UML_OpaqueBehavior_language->setValue(0);
	
	uML_OpaqueBehavior_language_upperValue_LiteralUnlimitedNatural_UML_OpaqueBehavior_language.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_OpaqueBehavior_language_upperValue_LiteralUnlimitedNatural_UML_OpaqueBehavior_language->setValue(-1);
	
	uML_OpaqueExpression_behavior_lowerValue_LiteralInteger_UML_OpaqueExpression_behavior.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_OpaqueExpression_behavior_lowerValue_LiteralInteger_UML_OpaqueExpression_behavior->setValue(0);
	
	uML_OpaqueExpression_body_lowerValue_LiteralInteger_UML_OpaqueExpression_body.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_OpaqueExpression_body_lowerValue_LiteralInteger_UML_OpaqueExpression_body->setValue(0);
	
	uML_OpaqueExpression_body_upperValue_LiteralUnlimitedNatural_UML_OpaqueExpression_body.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_OpaqueExpression_body_upperValue_LiteralUnlimitedNatural_UML_OpaqueExpression_body->setValue(-1);
	
	uML_OpaqueExpression_isIntegral_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_OpaqueExpression_isNonNegative_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_OpaqueExpression_isNonNegative_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_OpaqueExpression_isPositive_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_OpaqueExpression_isPositive_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_OpaqueExpression_language_body_size_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_OpaqueExpression_language_lowerValue_LiteralInteger_UML_OpaqueExpression_language.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_OpaqueExpression_language_lowerValue_LiteralInteger_UML_OpaqueExpression_language->setValue(0);
	
	uML_OpaqueExpression_language_upperValue_LiteralUnlimitedNatural_UML_OpaqueExpression_language.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_OpaqueExpression_language_upperValue_LiteralUnlimitedNatural_UML_OpaqueExpression_language->setValue(-1);
	
	uML_OpaqueExpression_one_return_result_parameter_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_OpaqueExpression_only_return_result_parameters_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_OpaqueExpression_result_result_lowerValue_LiteralInteger_UML_OpaqueExpression_result_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_OpaqueExpression_result_result_lowerValue_LiteralInteger_UML_OpaqueExpression_result_result->setValue(0);
	
	uML_OpaqueExpression_result_result_upperValue_LiteralUnlimitedNatural_UML_OpaqueExpression_result_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_OpaqueExpression_result_result_upperValue_LiteralUnlimitedNatural_UML_OpaqueExpression_result_result->setValue(1);
	
	uML_OpaqueExpression_result_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_OpaqueExpression_result_lowerValue_LiteralInteger_UML_OpaqueExpression_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_OpaqueExpression_result_lowerValue_LiteralInteger_UML_OpaqueExpression_result->setValue(0);
	
	uML_OpaqueExpression_value_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_OpaqueExpression_value_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Operation_at_most_one_return_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Operation_bodyCondition_lowerValue_LiteralInteger_UML_Operation_bodyCondition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_bodyCondition_lowerValue_LiteralInteger_UML_Operation_bodyCondition->setValue(0);
	
	uML_Operation_class_lowerValue_LiteralInteger_UML_Operation_class.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_class_lowerValue_LiteralInteger_UML_Operation_class->setValue(0);
	
	uML_Operation_datatype_lowerValue_LiteralInteger_UML_Operation_datatype.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_datatype_lowerValue_LiteralInteger_UML_Operation_datatype->setValue(0);
	
	uML_Operation_getReturnResult__return_lowerValue_LiteralInteger_UML_Operation_getReturnResult__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_getReturnResult__return_lowerValue_LiteralInteger_UML_Operation_getReturnResult__return->setValue(0);
	
	uML_Operation_getReturnResult__return_upperValue_LiteralUnlimitedNatural_UML_Operation_getReturnResult__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Operation_getReturnResult__return_upperValue_LiteralUnlimitedNatural_UML_Operation_getReturnResult__return->setValue(1);
	
	uML_Operation_interface_lowerValue_LiteralInteger_UML_Operation_interface.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_interface_lowerValue_LiteralInteger_UML_Operation_interface->setValue(0);
	
	uML_Operation_isConsistentWith_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Operation_isConsistentWith_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Operation_isOrdered_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Operation_isQuery_defaultValue_LiteralBoolean_UML_Operation_isQuery.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Operation_isQuery_defaultValue_LiteralBoolean_UML_Operation_isQuery->setValue(false);
	
	uML_Operation_isUnique_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Operation_isUnique_defaultValue_LiteralBoolean_UML_Operation_isUnique.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Operation_isUnique_defaultValue_LiteralBoolean_UML_Operation_isUnique->setValue(true);
	
	uML_Operation_lower_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Operation_lower_defaultValue_LiteralInteger_UML_Operation_lower.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_lower_defaultValue_LiteralInteger_UML_Operation_lower->setValue(1);
	
	uML_Operation_lower_lowerValue_LiteralInteger_UML_Operation_lower.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_lower_lowerValue_LiteralInteger_UML_Operation_lower->setValue(0);
	
	uML_Operation_only_body_for_query_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Operation_ownedParameter_lowerValue_LiteralInteger_UML_Operation_ownedParameter.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_ownedParameter_lowerValue_LiteralInteger_UML_Operation_ownedParameter->setValue(0);
	
	uML_Operation_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_Operation_ownedParameter.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Operation_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_Operation_ownedParameter->setValue(-1);
	
	uML_Operation_postcondition_lowerValue_LiteralInteger_UML_Operation_postcondition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_postcondition_lowerValue_LiteralInteger_UML_Operation_postcondition->setValue(0);
	
	uML_Operation_postcondition_upperValue_LiteralUnlimitedNatural_UML_Operation_postcondition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Operation_postcondition_upperValue_LiteralUnlimitedNatural_UML_Operation_postcondition->setValue(-1);
	
	uML_Operation_precondition_lowerValue_LiteralInteger_UML_Operation_precondition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_precondition_lowerValue_LiteralInteger_UML_Operation_precondition->setValue(0);
	
	uML_Operation_precondition_upperValue_LiteralUnlimitedNatural_UML_Operation_precondition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Operation_precondition_upperValue_LiteralUnlimitedNatural_UML_Operation_precondition->setValue(-1);
	
	uML_Operation_raisedException_lowerValue_LiteralInteger_UML_Operation_raisedException.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_raisedException_lowerValue_LiteralInteger_UML_Operation_raisedException->setValue(0);
	
	uML_Operation_raisedException_upperValue_LiteralUnlimitedNatural_UML_Operation_raisedException.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Operation_raisedException_upperValue_LiteralUnlimitedNatural_UML_Operation_raisedException->setValue(-1);
	
	uML_Operation_redefinedOperation_lowerValue_LiteralInteger_UML_Operation_redefinedOperation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_redefinedOperation_lowerValue_LiteralInteger_UML_Operation_redefinedOperation->setValue(0);
	
	uML_Operation_redefinedOperation_upperValue_LiteralUnlimitedNatural_UML_Operation_redefinedOperation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Operation_redefinedOperation_upperValue_LiteralUnlimitedNatural_UML_Operation_redefinedOperation->setValue(-1);
	
	uML_Operation_returnResult_result_lowerValue_LiteralInteger_UML_Operation_returnResult_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_returnResult_result_lowerValue_LiteralInteger_UML_Operation_returnResult_result->setValue(0);
	
	uML_Operation_returnResult_result_upperValue_LiteralUnlimitedNatural_UML_Operation_returnResult_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Operation_returnResult_result_upperValue_LiteralUnlimitedNatural_UML_Operation_returnResult_result->setValue(-1);
	
	uML_Operation_returnResult_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Operation_templateParameter_lowerValue_LiteralInteger_UML_Operation_templateParameter.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_templateParameter_lowerValue_LiteralInteger_UML_Operation_templateParameter->setValue(0);
	
	uML_Operation_type_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Operation_type_lowerValue_LiteralInteger_UML_Operation_type.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_type_lowerValue_LiteralInteger_UML_Operation_type->setValue(0);
	
	uML_Operation_upper_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Operation_upper_defaultValue_LiteralUnlimitedNatural_UML_Operation_upper.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Operation_upper_defaultValue_LiteralUnlimitedNatural_UML_Operation_upper->setValue(1);
	
	uML_Operation_upper_lowerValue_LiteralInteger_UML_Operation_upper.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Operation_upper_lowerValue_LiteralInteger_UML_Operation_upper->setValue(0);
	
	uML_OperationTemplateParameter_match_default_signature_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_OutputPin_incoming_edges_structured_only_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Package_URI_lowerValue_LiteralInteger_UML_Package_URI.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_URI_lowerValue_LiteralInteger_UML_Package_URI->setValue(0);
	
	uML_Package_allApplicableStereotypes_result_lowerValue_LiteralInteger_UML_Package_allApplicableStereotypes_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_allApplicableStereotypes_result_lowerValue_LiteralInteger_UML_Package_allApplicableStereotypes_result->setValue(0);
	
	uML_Package_allApplicableStereotypes_result_upperValue_LiteralUnlimitedNatural_UML_Package_allApplicableStereotypes_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_allApplicableStereotypes_result_upperValue_LiteralUnlimitedNatural_UML_Package_allApplicableStereotypes_result->setValue(-1);
	
	uML_Package_allApplicableStereotypes_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Package_applyProfile_Profile_return_lowerValue_LiteralInteger_UML_Package_applyProfile_Profile_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_applyProfile_Profile_return_lowerValue_LiteralInteger_UML_Package_applyProfile_Profile_return->setValue(0);
	
	uML_Package_applyProfile_Profile_return_upperValue_LiteralUnlimitedNatural_UML_Package_applyProfile_Profile_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_applyProfile_Profile_return_upperValue_LiteralUnlimitedNatural_UML_Package_applyProfile_Profile_return->setValue(-1);
	
	uML_Package_containingProfile_result_lowerValue_LiteralInteger_UML_Package_containingProfile_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_containingProfile_result_lowerValue_LiteralInteger_UML_Package_containingProfile_result->setValue(0);
	
	uML_Package_containingProfile_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Package_elements_public_or_private_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Package_getAllAppliedProfiles__return_lowerValue_LiteralInteger_UML_Package_getAllAppliedProfiles__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_getAllAppliedProfiles__return_lowerValue_LiteralInteger_UML_Package_getAllAppliedProfiles__return->setValue(0);
	
	uML_Package_getAllAppliedProfiles__return_upperValue_LiteralUnlimitedNatural_UML_Package_getAllAppliedProfiles__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_getAllAppliedProfiles__return_upperValue_LiteralUnlimitedNatural_UML_Package_getAllAppliedProfiles__return->setValue(-1);
	
	uML_Package_getAllProfileApplications__return_lowerValue_LiteralInteger_UML_Package_getAllProfileApplications__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_getAllProfileApplications__return_lowerValue_LiteralInteger_UML_Package_getAllProfileApplications__return->setValue(0);
	
	uML_Package_getAllProfileApplications__return_upperValue_LiteralUnlimitedNatural_UML_Package_getAllProfileApplications__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_getAllProfileApplications__return_upperValue_LiteralUnlimitedNatural_UML_Package_getAllProfileApplications__return->setValue(-1);
	
	uML_Package_getAppliedProfile_String_Boolean_return_lowerValue_LiteralInteger_UML_Package_getAppliedProfile_String_Boolean_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_getAppliedProfile_String_Boolean_return_lowerValue_LiteralInteger_UML_Package_getAppliedProfile_String_Boolean_return->setValue(0);
	
	uML_Package_getAppliedProfile_String_Boolean_return_upperValue_LiteralUnlimitedNatural_UML_Package_getAppliedProfile_String_Boolean_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_getAppliedProfile_String_Boolean_return_upperValue_LiteralUnlimitedNatural_UML_Package_getAppliedProfile_String_Boolean_return->setValue(1);
	
	uML_Package_getAppliedProfile_String_return_lowerValue_LiteralInteger_UML_Package_getAppliedProfile_String_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_getAppliedProfile_String_return_lowerValue_LiteralInteger_UML_Package_getAppliedProfile_String_return->setValue(0);
	
	uML_Package_getAppliedProfile_String_return_upperValue_LiteralUnlimitedNatural_UML_Package_getAppliedProfile_String_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_getAppliedProfile_String_return_upperValue_LiteralUnlimitedNatural_UML_Package_getAppliedProfile_String_return->setValue(1);
	
	uML_Package_getAppliedProfiles__return_lowerValue_LiteralInteger_UML_Package_getAppliedProfiles__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_getAppliedProfiles__return_lowerValue_LiteralInteger_UML_Package_getAppliedProfiles__return->setValue(0);
	
	uML_Package_getAppliedProfiles__return_upperValue_LiteralUnlimitedNatural_UML_Package_getAppliedProfiles__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_getAppliedProfiles__return_upperValue_LiteralUnlimitedNatural_UML_Package_getAppliedProfiles__return->setValue(-1);
	
	uML_Package_getProfileApplication_Profile_Boolean_return_lowerValue_LiteralInteger_UML_Package_getProfileApplication_Profile_Boolean_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_getProfileApplication_Profile_Boolean_return_lowerValue_LiteralInteger_UML_Package_getProfileApplication_Profile_Boolean_return->setValue(0);
	
	uML_Package_getProfileApplication_Profile_Boolean_return_upperValue_LiteralUnlimitedNatural_UML_Package_getProfileApplication_Profile_Boolean_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_getProfileApplication_Profile_Boolean_return_upperValue_LiteralUnlimitedNatural_UML_Package_getProfileApplication_Profile_Boolean_return->setValue(1);
	
	uML_Package_getProfileApplication_Profile_return_lowerValue_LiteralInteger_UML_Package_getProfileApplication_Profile_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_getProfileApplication_Profile_return_lowerValue_LiteralInteger_UML_Package_getProfileApplication_Profile_return->setValue(0);
	
	uML_Package_getProfileApplication_Profile_return_upperValue_LiteralUnlimitedNatural_UML_Package_getProfileApplication_Profile_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_getProfileApplication_Profile_return_upperValue_LiteralUnlimitedNatural_UML_Package_getProfileApplication_Profile_return->setValue(1);
	
	uML_Package_makesVisible_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Package_makesVisible_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Package_mustBeOwned_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Package_nestedPackage_result_lowerValue_LiteralInteger_UML_Package_nestedPackage_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_nestedPackage_result_lowerValue_LiteralInteger_UML_Package_nestedPackage_result->setValue(0);
	
	uML_Package_nestedPackage_result_upperValue_LiteralUnlimitedNatural_UML_Package_nestedPackage_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_nestedPackage_result_upperValue_LiteralUnlimitedNatural_UML_Package_nestedPackage_result->setValue(-1);
	
	uML_Package_nestedPackage_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Package_nestedPackage_lowerValue_LiteralInteger_UML_Package_nestedPackage.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_nestedPackage_lowerValue_LiteralInteger_UML_Package_nestedPackage->setValue(0);
	
	uML_Package_nestedPackage_upperValue_LiteralUnlimitedNatural_UML_Package_nestedPackage.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_nestedPackage_upperValue_LiteralUnlimitedNatural_UML_Package_nestedPackage->setValue(-1);
	
	uML_Package_nestingPackage_lowerValue_LiteralInteger_UML_Package_nestingPackage.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_nestingPackage_lowerValue_LiteralInteger_UML_Package_nestingPackage->setValue(0);
	
	uML_Package_ownedStereotype_result_lowerValue_LiteralInteger_UML_Package_ownedStereotype_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_ownedStereotype_result_lowerValue_LiteralInteger_UML_Package_ownedStereotype_result->setValue(0);
	
	uML_Package_ownedStereotype_result_upperValue_LiteralUnlimitedNatural_UML_Package_ownedStereotype_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_ownedStereotype_result_upperValue_LiteralUnlimitedNatural_UML_Package_ownedStereotype_result->setValue(-1);
	
	uML_Package_ownedStereotype_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Package_ownedStereotype_lowerValue_LiteralInteger_UML_Package_ownedStereotype.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_ownedStereotype_lowerValue_LiteralInteger_UML_Package_ownedStereotype->setValue(0);
	
	uML_Package_ownedStereotype_upperValue_LiteralUnlimitedNatural_UML_Package_ownedStereotype.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_ownedStereotype_upperValue_LiteralUnlimitedNatural_UML_Package_ownedStereotype->setValue(-1);
	
	uML_Package_ownedType_result_lowerValue_LiteralInteger_UML_Package_ownedType_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_ownedType_result_lowerValue_LiteralInteger_UML_Package_ownedType_result->setValue(0);
	
	uML_Package_ownedType_result_upperValue_LiteralUnlimitedNatural_UML_Package_ownedType_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_ownedType_result_upperValue_LiteralUnlimitedNatural_UML_Package_ownedType_result->setValue(-1);
	
	uML_Package_ownedType_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Package_ownedType_lowerValue_LiteralInteger_UML_Package_ownedType.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_ownedType_lowerValue_LiteralInteger_UML_Package_ownedType->setValue(0);
	
	uML_Package_ownedType_upperValue_LiteralUnlimitedNatural_UML_Package_ownedType.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_ownedType_upperValue_LiteralUnlimitedNatural_UML_Package_ownedType->setValue(-1);
	
	uML_Package_packageMerge_lowerValue_LiteralInteger_UML_Package_packageMerge.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_packageMerge_lowerValue_LiteralInteger_UML_Package_packageMerge->setValue(0);
	
	uML_Package_packageMerge_upperValue_LiteralUnlimitedNatural_UML_Package_packageMerge.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_packageMerge_upperValue_LiteralUnlimitedNatural_UML_Package_packageMerge->setValue(-1);
	
	uML_Package_packagedElement_lowerValue_LiteralInteger_UML_Package_packagedElement.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_packagedElement_lowerValue_LiteralInteger_UML_Package_packagedElement->setValue(0);
	
	uML_Package_packagedElement_upperValue_LiteralUnlimitedNatural_UML_Package_packagedElement.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_packagedElement_upperValue_LiteralUnlimitedNatural_UML_Package_packagedElement->setValue(-1);
	
	uML_Package_profileApplication_lowerValue_LiteralInteger_UML_Package_profileApplication.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_profileApplication_lowerValue_LiteralInteger_UML_Package_profileApplication->setValue(0);
	
	uML_Package_profileApplication_upperValue_LiteralUnlimitedNatural_UML_Package_profileApplication.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_profileApplication_upperValue_LiteralUnlimitedNatural_UML_Package_profileApplication->setValue(-1);
	
	uML_Package_unapplyProfile_Profile_return_lowerValue_LiteralInteger_UML_Package_unapplyProfile_Profile_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_unapplyProfile_Profile_return_lowerValue_LiteralInteger_UML_Package_unapplyProfile_Profile_return->setValue(0);
	
	uML_Package_unapplyProfile_Profile_return_upperValue_LiteralUnlimitedNatural_UML_Package_unapplyProfile_Profile_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_unapplyProfile_Profile_return_upperValue_LiteralUnlimitedNatural_UML_Package_unapplyProfile_Profile_return->setValue(-1);
	
	uML_Package_visibleMembers_result_lowerValue_LiteralInteger_UML_Package_visibleMembers_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Package_visibleMembers_result_lowerValue_LiteralInteger_UML_Package_visibleMembers_result->setValue(0);
	
	uML_Package_visibleMembers_result_upperValue_LiteralUnlimitedNatural_UML_Package_visibleMembers_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Package_visibleMembers_result_upperValue_LiteralUnlimitedNatural_UML_Package_visibleMembers_result->setValue(-1);
	
	uML_Package_visibleMembers_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_PackageImport_public_or_private_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_PackageImport_visibility_defaultValue_InstanceValue.reset(uml::UmlFactory::eInstance()->createInstanceValue());
	
	uML_PackageableElement_namespace_needs_visibility_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_PackageableElement_visibility_defaultValue_InstanceValue.reset(uml::UmlFactory::eInstance()->createInstanceValue());
	
	uML_PackageableElement_visibility_lowerValue_LiteralInteger_UML_PackageableElement_visibility.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_PackageableElement_visibility_lowerValue_LiteralInteger_UML_PackageableElement_visibility->setValue(0);
	
	uML_Parameter_connector_end_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Parameter_default_result_lowerValue_LiteralInteger_UML_Parameter_default_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Parameter_default_result_lowerValue_LiteralInteger_UML_Parameter_default_result->setValue(0);
	
	uML_Parameter_default_result_upperValue_LiteralUnlimitedNatural_UML_Parameter_default_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Parameter_default_result_upperValue_LiteralUnlimitedNatural_UML_Parameter_default_result->setValue(1);
	
	uML_Parameter_default_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Parameter_defaultValue_lowerValue_LiteralInteger_UML_Parameter_defaultValue.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Parameter_defaultValue_lowerValue_LiteralInteger_UML_Parameter_defaultValue->setValue(0);
	
	uML_Parameter_default_lowerValue_LiteralInteger_UML_Parameter_default.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Parameter_default_lowerValue_LiteralInteger_UML_Parameter_default->setValue(0);
	
	uML_Parameter_direction_defaultValue_InstanceValue.reset(uml::UmlFactory::eInstance()->createInstanceValue());
	
	uML_Parameter_effect_lowerValue_LiteralInteger_UML_Parameter_effect.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Parameter_effect_lowerValue_LiteralInteger_UML_Parameter_effect->setValue(0);
	
	uML_Parameter_in_and_out_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Parameter_isException_defaultValue_LiteralBoolean_UML_Parameter_isException.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Parameter_isException_defaultValue_LiteralBoolean_UML_Parameter_isException->setValue(false);
	
	uML_Parameter_isStream_defaultValue_LiteralBoolean_UML_Parameter_isStream.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Parameter_isStream_defaultValue_LiteralBoolean_UML_Parameter_isStream->setValue(false);
	
	uML_Parameter_not_exception_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Parameter_object_effect_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Parameter_operation_lowerValue_LiteralInteger_UML_Parameter_operation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Parameter_operation_lowerValue_LiteralInteger_UML_Parameter_operation->setValue(0);
	
	uML_Parameter_parameterSet_lowerValue_LiteralInteger_UML_Parameter_parameterSet.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Parameter_parameterSet_lowerValue_LiteralInteger_UML_Parameter_parameterSet->setValue(0);
	
	uML_Parameter_parameterSet_upperValue_LiteralUnlimitedNatural_UML_Parameter_parameterSet.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Parameter_parameterSet_upperValue_LiteralUnlimitedNatural_UML_Parameter_parameterSet->setValue(-1);
	
	uML_Parameter_reentrant_behaviors_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Parameter_stream_and_exception_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ParameterSet_condition_lowerValue_LiteralInteger_UML_ParameterSet_condition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ParameterSet_condition_lowerValue_LiteralInteger_UML_ParameterSet_condition->setValue(0);
	
	uML_ParameterSet_condition_upperValue_LiteralUnlimitedNatural_UML_ParameterSet_condition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ParameterSet_condition_upperValue_LiteralUnlimitedNatural_UML_ParameterSet_condition->setValue(-1);
	
	uML_ParameterSet_input_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ParameterSet_parameter_upperValue_LiteralUnlimitedNatural_UML_ParameterSet_parameter.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ParameterSet_parameter_upperValue_LiteralUnlimitedNatural_UML_ParameterSet_parameter->setValue(-1);
	
	uML_ParameterSet_same_parameterized_entity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ParameterSet_two_parameter_sets_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ParameterableElement_isCompatibleWith_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ParameterableElement_isTemplateParameter_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ParameterableElement_owningTemplateParameter_lowerValue_LiteralInteger_UML_ParameterableElement_owningTemplateParameter.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ParameterableElement_owningTemplateParameter_lowerValue_LiteralInteger_UML_ParameterableElement_owningTemplateParameter->setValue(0);
	
	uML_ParameterableElement_templateParameter_lowerValue_LiteralInteger_UML_ParameterableElement_templateParameter.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ParameterableElement_templateParameter_lowerValue_LiteralInteger_UML_ParameterableElement_templateParameter->setValue(0);
	
	uML_PartDecomposition_assume_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_PartDecomposition_commutativity_of_decomposition_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_PartDecomposition_parts_of_internal_structures_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Pin_control_pins_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Pin_isControl_defaultValue_LiteralBoolean_UML_Pin_isControl.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Pin_isControl_defaultValue_LiteralBoolean_UML_Pin_isControl->setValue(false);
	
	uML_Pin_not_unique_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Port_basicProvided_result_lowerValue_LiteralInteger_UML_Port_basicProvided_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Port_basicProvided_result_lowerValue_LiteralInteger_UML_Port_basicProvided_result->setValue(0);
	
	uML_Port_basicProvided_result_upperValue_LiteralUnlimitedNatural_UML_Port_basicProvided_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Port_basicProvided_result_upperValue_LiteralUnlimitedNatural_UML_Port_basicProvided_result->setValue(-1);
	
	uML_Port_basicProvided_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Port_basicRequired_result_lowerValue_LiteralInteger_UML_Port_basicRequired_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Port_basicRequired_result_lowerValue_LiteralInteger_UML_Port_basicRequired_result->setValue(0);
	
	uML_Port_basicRequired_result_upperValue_LiteralUnlimitedNatural_UML_Port_basicRequired_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Port_basicRequired_result_upperValue_LiteralUnlimitedNatural_UML_Port_basicRequired_result->setValue(-1);
	
	uML_Port_basicRequired_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Port_default_value_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Port_encapsulated_owner_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Port_isBehavior_defaultValue_LiteralBoolean_UML_Port_isBehavior.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Port_isBehavior_defaultValue_LiteralBoolean_UML_Port_isBehavior->setValue(false);
	
	uML_Port_isConjugated_defaultValue_LiteralBoolean_UML_Port_isConjugated.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Port_isConjugated_defaultValue_LiteralBoolean_UML_Port_isConjugated->setValue(false);
	
	uML_Port_isService_defaultValue_LiteralBoolean_UML_Port_isService.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Port_isService_defaultValue_LiteralBoolean_UML_Port_isService->setValue(true);
	
	uML_Port_port_aggregation_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Port_protocol_lowerValue_LiteralInteger_UML_Port_protocol.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Port_protocol_lowerValue_LiteralInteger_UML_Port_protocol->setValue(0);
	
	uML_Port_provided_result_lowerValue_LiteralInteger_UML_Port_provided_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Port_provided_result_lowerValue_LiteralInteger_UML_Port_provided_result->setValue(0);
	
	uML_Port_provided_result_upperValue_LiteralUnlimitedNatural_UML_Port_provided_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Port_provided_result_upperValue_LiteralUnlimitedNatural_UML_Port_provided_result->setValue(-1);
	
	uML_Port_provided_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Port_provided_lowerValue_LiteralInteger_UML_Port_provided.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Port_provided_lowerValue_LiteralInteger_UML_Port_provided->setValue(0);
	
	uML_Port_provided_upperValue_LiteralUnlimitedNatural_UML_Port_provided.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Port_provided_upperValue_LiteralUnlimitedNatural_UML_Port_provided->setValue(-1);
	
	uML_Port_redefinedPort_lowerValue_LiteralInteger_UML_Port_redefinedPort.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Port_redefinedPort_lowerValue_LiteralInteger_UML_Port_redefinedPort->setValue(0);
	
	uML_Port_redefinedPort_upperValue_LiteralUnlimitedNatural_UML_Port_redefinedPort.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Port_redefinedPort_upperValue_LiteralUnlimitedNatural_UML_Port_redefinedPort->setValue(-1);
	
	uML_Port_required_result_lowerValue_LiteralInteger_UML_Port_required_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Port_required_result_lowerValue_LiteralInteger_UML_Port_required_result->setValue(0);
	
	uML_Port_required_result_upperValue_LiteralUnlimitedNatural_UML_Port_required_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Port_required_result_upperValue_LiteralUnlimitedNatural_UML_Port_required_result->setValue(-1);
	
	uML_Port_required_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Port_required_lowerValue_LiteralInteger_UML_Port_required.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Port_required_lowerValue_LiteralInteger_UML_Port_required->setValue(0);
	
	uML_Port_required_upperValue_LiteralUnlimitedNatural_UML_Port_required.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Port_required_upperValue_LiteralUnlimitedNatural_UML_Port_required->setValue(-1);
	
	uML_Profile_define__return_lowerValue_LiteralInteger_UML_Profile_define__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Profile_define__return_lowerValue_LiteralInteger_UML_Profile_define__return->setValue(0);
	
	uML_Profile_define__return_upperValue_LiteralUnlimitedNatural_UML_Profile_define__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Profile_define__return_upperValue_LiteralUnlimitedNatural_UML_Profile_define__return->setValue(1);
	
	uML_Profile_getDefinition_NamedElement_return_lowerValue_LiteralInteger_UML_Profile_getDefinition_NamedElement_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Profile_getDefinition_NamedElement_return_lowerValue_LiteralInteger_UML_Profile_getDefinition_NamedElement_return->setValue(0);
	
	uML_Profile_getDefinition_NamedElement_return_upperValue_LiteralUnlimitedNatural_UML_Profile_getDefinition_NamedElement_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Profile_getDefinition_NamedElement_return_upperValue_LiteralUnlimitedNatural_UML_Profile_getDefinition_NamedElement_return->setValue(1);
	
	uML_Profile_getDefinition__return_lowerValue_LiteralInteger_UML_Profile_getDefinition__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Profile_getDefinition__return_lowerValue_LiteralInteger_UML_Profile_getDefinition__return->setValue(0);
	
	uML_Profile_getDefinition__return_upperValue_LiteralUnlimitedNatural_UML_Profile_getDefinition__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Profile_getDefinition__return_upperValue_LiteralUnlimitedNatural_UML_Profile_getDefinition__return->setValue(1);
	
	uML_Profile_getOwnedExtensions_Boolean_return_lowerValue_LiteralInteger_UML_Profile_getOwnedExtensions_Boolean_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Profile_getOwnedExtensions_Boolean_return_lowerValue_LiteralInteger_UML_Profile_getOwnedExtensions_Boolean_return->setValue(0);
	
	uML_Profile_getOwnedExtensions_Boolean_return_upperValue_LiteralUnlimitedNatural_UML_Profile_getOwnedExtensions_Boolean_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Profile_getOwnedExtensions_Boolean_return_upperValue_LiteralUnlimitedNatural_UML_Profile_getOwnedExtensions_Boolean_return->setValue(-1);
	
	uML_Profile_getReferencedMetaclasses__return_lowerValue_LiteralInteger_UML_Profile_getReferencedMetaclasses__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Profile_getReferencedMetaclasses__return_lowerValue_LiteralInteger_UML_Profile_getReferencedMetaclasses__return->setValue(0);
	
	uML_Profile_getReferencedMetaclasses__return_upperValue_LiteralUnlimitedNatural_UML_Profile_getReferencedMetaclasses__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Profile_getReferencedMetaclasses__return_upperValue_LiteralUnlimitedNatural_UML_Profile_getReferencedMetaclasses__return->setValue(-1);
	
	uML_Profile_getReferencedMetamodels__return_lowerValue_LiteralInteger_UML_Profile_getReferencedMetamodels__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Profile_getReferencedMetamodels__return_lowerValue_LiteralInteger_UML_Profile_getReferencedMetamodels__return->setValue(0);
	
	uML_Profile_getReferencedMetamodels__return_upperValue_LiteralUnlimitedNatural_UML_Profile_getReferencedMetamodels__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Profile_getReferencedMetamodels__return_upperValue_LiteralUnlimitedNatural_UML_Profile_getReferencedMetamodels__return->setValue(-1);
	
	uML_Profile_metaclassReference_lowerValue_LiteralInteger_UML_Profile_metaclassReference.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Profile_metaclassReference_lowerValue_LiteralInteger_UML_Profile_metaclassReference->setValue(0);
	
	uML_Profile_metaclassReference_upperValue_LiteralUnlimitedNatural_UML_Profile_metaclassReference.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Profile_metaclassReference_upperValue_LiteralUnlimitedNatural_UML_Profile_metaclassReference->setValue(-1);
	
	uML_Profile_metaclass_reference_not_specialized_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Profile_metamodelReference_lowerValue_LiteralInteger_UML_Profile_metamodelReference.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Profile_metamodelReference_lowerValue_LiteralInteger_UML_Profile_metamodelReference->setValue(0);
	
	uML_Profile_metamodelReference_upperValue_LiteralUnlimitedNatural_UML_Profile_metamodelReference.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Profile_metamodelReference_upperValue_LiteralUnlimitedNatural_UML_Profile_metamodelReference->setValue(-1);
	
	uML_Profile_references_same_metamodel_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ProfileApplication_getAppliedDefinition_NamedElement_return_lowerValue_LiteralInteger_UML_ProfileApplication_getAppliedDefinition_NamedElement_return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ProfileApplication_getAppliedDefinition_NamedElement_return_lowerValue_LiteralInteger_UML_ProfileApplication_getAppliedDefinition_NamedElement_return->setValue(0);
	
	uML_ProfileApplication_getAppliedDefinition_NamedElement_return_upperValue_LiteralUnlimitedNatural_UML_ProfileApplication_getAppliedDefinition_NamedElement_return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ProfileApplication_getAppliedDefinition_NamedElement_return_upperValue_LiteralUnlimitedNatural_UML_ProfileApplication_getAppliedDefinition_NamedElement_return->setValue(1);
	
	uML_ProfileApplication_getAppliedDefinition__return_lowerValue_LiteralInteger_UML_ProfileApplication_getAppliedDefinition__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ProfileApplication_getAppliedDefinition__return_lowerValue_LiteralInteger_UML_ProfileApplication_getAppliedDefinition__return->setValue(0);
	
	uML_ProfileApplication_getAppliedDefinition__return_upperValue_LiteralUnlimitedNatural_UML_ProfileApplication_getAppliedDefinition__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ProfileApplication_getAppliedDefinition__return_upperValue_LiteralUnlimitedNatural_UML_ProfileApplication_getAppliedDefinition__return->setValue(1);
	
	uML_ProfileApplication_isStrict_defaultValue_LiteralBoolean_UML_ProfileApplication_isStrict.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_ProfileApplication_isStrict_defaultValue_LiteralBoolean_UML_ProfileApplication_isStrict->setValue(false);
	
	uML_Property_aggregation_defaultValue_InstanceValue.reset(uml::UmlFactory::eInstance()->createInstanceValue());
	
	uML_Property_associationEnd_lowerValue_LiteralInteger_UML_Property_associationEnd.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_associationEnd_lowerValue_LiteralInteger_UML_Property_associationEnd->setValue(0);
	
	uML_Property_association_lowerValue_LiteralInteger_UML_Property_association.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_association_lowerValue_LiteralInteger_UML_Property_association->setValue(0);
	
	uML_Property_binding_to_attribute_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_class_lowerValue_LiteralInteger_UML_Property_class.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_class_lowerValue_LiteralInteger_UML_Property_class->setValue(0);
	
	uML_Property_datatype_lowerValue_LiteralInteger_UML_Property_datatype.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_datatype_lowerValue_LiteralInteger_UML_Property_datatype->setValue(0);
	
	uML_Property_defaultValue_lowerValue_LiteralInteger_UML_Property_defaultValue.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_defaultValue_lowerValue_LiteralInteger_UML_Property_defaultValue->setValue(0);
	
	uML_Property_default_lowerValue_LiteralInteger_UML_Property_default.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_default_lowerValue_LiteralInteger_UML_Property_default->setValue(0);
	
	uML_Property_deployment_target_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_derived_union_is_derived_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_derived_union_is_read_only_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_getDefault_result_lowerValue_LiteralInteger_UML_Property_getDefault_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_getDefault_result_lowerValue_LiteralInteger_UML_Property_getDefault_result->setValue(0);
	
	uML_Property_getDefault_result_upperValue_LiteralUnlimitedNatural_UML_Property_getDefault_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Property_getDefault_result_upperValue_LiteralUnlimitedNatural_UML_Property_getDefault_result->setValue(1);
	
	uML_Property_getOtherEnd__return_lowerValue_LiteralInteger_UML_Property_getOtherEnd__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_getOtherEnd__return_lowerValue_LiteralInteger_UML_Property_getOtherEnd__return->setValue(0);
	
	uML_Property_getOtherEnd__return_upperValue_LiteralUnlimitedNatural_UML_Property_getOtherEnd__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Property_getOtherEnd__return_upperValue_LiteralUnlimitedNatural_UML_Property_getOtherEnd__return->setValue(1);
	
	uML_Property_interface_lowerValue_LiteralInteger_UML_Property_interface.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_interface_lowerValue_LiteralInteger_UML_Property_interface->setValue(0);
	
	uML_Property_isAttribute_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_isCompatibleWith_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_isComposite_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_isComposite_defaultValue_LiteralBoolean_UML_Property_isComposite.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Property_isComposite_defaultValue_LiteralBoolean_UML_Property_isComposite->setValue(false);
	
	uML_Property_isConsistentWith_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_isConsistentWith_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_isDerivedUnion_defaultValue_LiteralBoolean_UML_Property_isDerivedUnion.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Property_isDerivedUnion_defaultValue_LiteralBoolean_UML_Property_isDerivedUnion->setValue(false);
	
	uML_Property_isDerived_defaultValue_LiteralBoolean_UML_Property_isDerived.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Property_isDerived_defaultValue_LiteralBoolean_UML_Property_isDerived->setValue(false);
	
	uML_Property_isID_defaultValue_LiteralBoolean_UML_Property_isID.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_Property_isID_defaultValue_LiteralBoolean_UML_Property_isID->setValue(false);
	
	uML_Property_isNavigable_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_multiplicity_of_composite_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_opposite_result_lowerValue_LiteralInteger_UML_Property_opposite_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_opposite_result_lowerValue_LiteralInteger_UML_Property_opposite_result->setValue(0);
	
	uML_Property_opposite_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_opposite_lowerValue_LiteralInteger_UML_Property_opposite.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_opposite_lowerValue_LiteralInteger_UML_Property_opposite->setValue(0);
	
	uML_Property_owningAssociation_lowerValue_LiteralInteger_UML_Property_owningAssociation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_owningAssociation_lowerValue_LiteralInteger_UML_Property_owningAssociation->setValue(0);
	
	uML_Property_qualified_is_association_end_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_qualifier_lowerValue_LiteralInteger_UML_Property_qualifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_qualifier_lowerValue_LiteralInteger_UML_Property_qualifier->setValue(0);
	
	uML_Property_qualifier_upperValue_LiteralUnlimitedNatural_UML_Property_qualifier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Property_qualifier_upperValue_LiteralUnlimitedNatural_UML_Property_qualifier->setValue(-1);
	
	uML_Property_redefinedProperty_lowerValue_LiteralInteger_UML_Property_redefinedProperty.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_redefinedProperty_lowerValue_LiteralInteger_UML_Property_redefinedProperty->setValue(0);
	
	uML_Property_redefinedProperty_upperValue_LiteralUnlimitedNatural_UML_Property_redefinedProperty.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Property_redefinedProperty_upperValue_LiteralUnlimitedNatural_UML_Property_redefinedProperty->setValue(-1);
	
	uML_Property_redefined_property_inherited_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_subsettedProperty_lowerValue_LiteralInteger_UML_Property_subsettedProperty.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_subsettedProperty_lowerValue_LiteralInteger_UML_Property_subsettedProperty->setValue(0);
	
	uML_Property_subsettedProperty_upperValue_LiteralUnlimitedNatural_UML_Property_subsettedProperty.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Property_subsettedProperty_upperValue_LiteralUnlimitedNatural_UML_Property_subsettedProperty->setValue(-1);
	
	uML_Property_subsetted_property_names_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_subsettingContext_result_lowerValue_LiteralInteger_UML_Property_subsettingContext_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Property_subsettingContext_result_lowerValue_LiteralInteger_UML_Property_subsettingContext_result->setValue(0);
	
	uML_Property_subsettingContext_result_upperValue_LiteralUnlimitedNatural_UML_Property_subsettingContext_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Property_subsettingContext_result_upperValue_LiteralUnlimitedNatural_UML_Property_subsettingContext_result->setValue(-1);
	
	uML_Property_subsettingContext_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_subsetting_context_conforms_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_subsetting_rules_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Property_type_of_opposite_end_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ProtocolStateMachine_classifier_context_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ProtocolStateMachine_conformance_lowerValue_LiteralInteger_UML_ProtocolStateMachine_conformance.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ProtocolStateMachine_conformance_lowerValue_LiteralInteger_UML_ProtocolStateMachine_conformance->setValue(0);
	
	uML_ProtocolStateMachine_conformance_upperValue_LiteralUnlimitedNatural_UML_ProtocolStateMachine_conformance.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ProtocolStateMachine_conformance_upperValue_LiteralUnlimitedNatural_UML_ProtocolStateMachine_conformance->setValue(-1);
	
	uML_ProtocolStateMachine_deep_or_shallow_history_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ProtocolStateMachine_entry_exit_do_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ProtocolStateMachine_protocol_transitions_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ProtocolTransition_associated_actions_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ProtocolTransition_belongs_to_psm_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ProtocolTransition_postCondition_lowerValue_LiteralInteger_UML_ProtocolTransition_postCondition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ProtocolTransition_postCondition_lowerValue_LiteralInteger_UML_ProtocolTransition_postCondition->setValue(0);
	
	uML_ProtocolTransition_preCondition_lowerValue_LiteralInteger_UML_ProtocolTransition_preCondition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ProtocolTransition_preCondition_lowerValue_LiteralInteger_UML_ProtocolTransition_preCondition->setValue(0);
	
	uML_ProtocolTransition_referred_result_lowerValue_LiteralInteger_UML_ProtocolTransition_referred_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ProtocolTransition_referred_result_lowerValue_LiteralInteger_UML_ProtocolTransition_referred_result->setValue(0);
	
	uML_ProtocolTransition_referred_result_upperValue_LiteralUnlimitedNatural_UML_ProtocolTransition_referred_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ProtocolTransition_referred_result_upperValue_LiteralUnlimitedNatural_UML_ProtocolTransition_referred_result->setValue(-1);
	
	uML_ProtocolTransition_referred_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ProtocolTransition_referred_lowerValue_LiteralInteger_UML_ProtocolTransition_referred.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ProtocolTransition_referred_lowerValue_LiteralInteger_UML_ProtocolTransition_referred->setValue(0);
	
	uML_ProtocolTransition_referred_upperValue_LiteralUnlimitedNatural_UML_ProtocolTransition_referred.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ProtocolTransition_referred_upperValue_LiteralUnlimitedNatural_UML_ProtocolTransition_referred->setValue(-1);
	
	uML_ProtocolTransition_refers_to_operation_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Pseudostate_choice_vertex_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Pseudostate_fork_vertex_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Pseudostate_history_vertices_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Pseudostate_initial_vertex_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Pseudostate_join_vertex_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Pseudostate_junction_vertex_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Pseudostate_kind_defaultValue_InstanceValue.reset(uml::UmlFactory::eInstance()->createInstanceValue());
	
	uML_Pseudostate_outgoing_from_initial_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Pseudostate_stateMachine_lowerValue_LiteralInteger_UML_Pseudostate_stateMachine.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Pseudostate_stateMachine_lowerValue_LiteralInteger_UML_Pseudostate_stateMachine->setValue(0);
	
	uML_Pseudostate_state_lowerValue_LiteralInteger_UML_Pseudostate_state.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Pseudostate_state_lowerValue_LiteralInteger_UML_Pseudostate_state->setValue(0);
	
	uML_Pseudostate_transitions_incoming_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Pseudostate_transitions_outgoing_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_QualifierValue_multiplicity_of_qualifier_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_QualifierValue_qualifier_attribute_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_QualifierValue_type_of_qualifier_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadExtentAction_multiplicity_of_result_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadExtentAction_type_is_classifier_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadIsClassifiedObjectAction_boolean_result_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadIsClassifiedObjectAction_isDirect_defaultValue_LiteralBoolean_UML_ReadIsClassifiedObjectAction_isDirect.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_ReadIsClassifiedObjectAction_isDirect_defaultValue_LiteralBoolean_UML_ReadIsClassifiedObjectAction_isDirect->setValue(false);
	
	uML_ReadIsClassifiedObjectAction_multiplicity_of_input_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadIsClassifiedObjectAction_multiplicity_of_output_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadIsClassifiedObjectAction_no_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkAction_compatible_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkAction_navigable_open_end_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkAction_one_open_end_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkAction_openEnd_result_lowerValue_LiteralInteger_UML_ReadLinkAction_openEnd_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ReadLinkAction_openEnd_result_lowerValue_LiteralInteger_UML_ReadLinkAction_openEnd_result->setValue(0);
	
	uML_ReadLinkAction_openEnd_result_upperValue_LiteralUnlimitedNatural_UML_ReadLinkAction_openEnd_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ReadLinkAction_openEnd_result_upperValue_LiteralUnlimitedNatural_UML_ReadLinkAction_openEnd_result->setValue(-1);
	
	uML_ReadLinkAction_openEnd_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkAction_type_and_ordering_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkAction_visibility_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkObjectEndAction_association_of_association_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkObjectEndAction_ends_of_association_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkObjectEndAction_multiplicity_of_object_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkObjectEndAction_multiplicity_of_result_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkObjectEndAction_property_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkObjectEndAction_type_of_object_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkObjectEndAction_type_of_result_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkObjectEndQualifierAction_association_of_association_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkObjectEndQualifierAction_ends_of_association_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkObjectEndQualifierAction_multiplicity_of_object_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkObjectEndQualifierAction_multiplicity_of_qualifier_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkObjectEndQualifierAction_multiplicity_of_result_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkObjectEndQualifierAction_qualifier_attribute_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkObjectEndQualifierAction_same_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadLinkObjectEndQualifierAction_type_of_object_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadSelfAction_contained_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadSelfAction_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadSelfAction_not_static_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadSelfAction_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadStructuralFeatureAction_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadStructuralFeatureAction_type_and_ordering_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadVariableAction_compatible_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReadVariableAction_type_and_ordering_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Reception_same_name_as_signal_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Reception_same_structure_as_signal_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReclassifyObjectAction_classifier_not_abstract_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReclassifyObjectAction_input_pin_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReclassifyObjectAction_isReplaceAll_defaultValue_LiteralBoolean_UML_ReclassifyObjectAction_isReplaceAll.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_ReclassifyObjectAction_isReplaceAll_defaultValue_LiteralBoolean_UML_ReclassifyObjectAction_isReplaceAll->setValue(false);
	
	uML_ReclassifyObjectAction_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReclassifyObjectAction_newClassifier_lowerValue_LiteralInteger_UML_ReclassifyObjectAction_newClassifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ReclassifyObjectAction_newClassifier_lowerValue_LiteralInteger_UML_ReclassifyObjectAction_newClassifier->setValue(0);
	
	uML_ReclassifyObjectAction_newClassifier_upperValue_LiteralUnlimitedNatural_UML_ReclassifyObjectAction_newClassifier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ReclassifyObjectAction_newClassifier_upperValue_LiteralUnlimitedNatural_UML_ReclassifyObjectAction_newClassifier->setValue(-1);
	
	uML_ReclassifyObjectAction_oldClassifier_lowerValue_LiteralInteger_UML_ReclassifyObjectAction_oldClassifier.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ReclassifyObjectAction_oldClassifier_lowerValue_LiteralInteger_UML_ReclassifyObjectAction_oldClassifier->setValue(0);
	
	uML_ReclassifyObjectAction_oldClassifier_upperValue_LiteralUnlimitedNatural_UML_ReclassifyObjectAction_oldClassifier.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ReclassifyObjectAction_oldClassifier_upperValue_LiteralUnlimitedNatural_UML_ReclassifyObjectAction_oldClassifier->setValue(-1);
	
	uML_RedefinableElement_isConsistentWith_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_RedefinableElement_isConsistentWith_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_RedefinableElement_isLeaf_defaultValue_LiteralBoolean_UML_RedefinableElement_isLeaf.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_RedefinableElement_isLeaf_defaultValue_LiteralBoolean_UML_RedefinableElement_isLeaf->setValue(false);
	
	uML_RedefinableElement_isRedefinitionContextValid_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_RedefinableElement_non_leaf_redefinition_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_RedefinableElement_redefinedElement_lowerValue_LiteralInteger_UML_RedefinableElement_redefinedElement.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_RedefinableElement_redefinedElement_lowerValue_LiteralInteger_UML_RedefinableElement_redefinedElement->setValue(0);
	
	uML_RedefinableElement_redefinedElement_upperValue_LiteralUnlimitedNatural_UML_RedefinableElement_redefinedElement.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_RedefinableElement_redefinedElement_upperValue_LiteralUnlimitedNatural_UML_RedefinableElement_redefinedElement->setValue(-1);
	
	uML_RedefinableElement_redefinitionContext_lowerValue_LiteralInteger_UML_RedefinableElement_redefinitionContext.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_RedefinableElement_redefinitionContext_lowerValue_LiteralInteger_UML_RedefinableElement_redefinitionContext->setValue(0);
	
	uML_RedefinableElement_redefinitionContext_upperValue_LiteralUnlimitedNatural_UML_RedefinableElement_redefinitionContext.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_RedefinableElement_redefinitionContext_upperValue_LiteralUnlimitedNatural_UML_RedefinableElement_redefinitionContext->setValue(-1);
	
	uML_RedefinableElement_redefinition_consistent_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_RedefinableElement_redefinition_context_valid_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_RedefinableTemplateSignature_extendedSignature_lowerValue_LiteralInteger_UML_RedefinableTemplateSignature_extendedSignature.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_RedefinableTemplateSignature_extendedSignature_lowerValue_LiteralInteger_UML_RedefinableTemplateSignature_extendedSignature->setValue(0);
	
	uML_RedefinableTemplateSignature_extendedSignature_upperValue_LiteralUnlimitedNatural_UML_RedefinableTemplateSignature_extendedSignature.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_RedefinableTemplateSignature_extendedSignature_upperValue_LiteralUnlimitedNatural_UML_RedefinableTemplateSignature_extendedSignature->setValue(-1);
	
	uML_RedefinableTemplateSignature_inheritedParameter_result_lowerValue_LiteralInteger_UML_RedefinableTemplateSignature_inheritedParameter_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_RedefinableTemplateSignature_inheritedParameter_result_lowerValue_LiteralInteger_UML_RedefinableTemplateSignature_inheritedParameter_result->setValue(0);
	
	uML_RedefinableTemplateSignature_inheritedParameter_result_upperValue_LiteralUnlimitedNatural_UML_RedefinableTemplateSignature_inheritedParameter_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_RedefinableTemplateSignature_inheritedParameter_result_upperValue_LiteralUnlimitedNatural_UML_RedefinableTemplateSignature_inheritedParameter_result->setValue(-1);
	
	uML_RedefinableTemplateSignature_inheritedParameter_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_RedefinableTemplateSignature_inheritedParameter_lowerValue_LiteralInteger_UML_RedefinableTemplateSignature_inheritedParameter.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_RedefinableTemplateSignature_inheritedParameter_lowerValue_LiteralInteger_UML_RedefinableTemplateSignature_inheritedParameter->setValue(0);
	
	uML_RedefinableTemplateSignature_inheritedParameter_upperValue_LiteralUnlimitedNatural_UML_RedefinableTemplateSignature_inheritedParameter.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_RedefinableTemplateSignature_inheritedParameter_upperValue_LiteralUnlimitedNatural_UML_RedefinableTemplateSignature_inheritedParameter->setValue(-1);
	
	uML_RedefinableTemplateSignature_isConsistentWith_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_RedefinableTemplateSignature_isConsistentWith_specspec.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_RedefinableTemplateSignature_redefines_parents_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReduceAction_input_type_is_collection_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReduceAction_isOrdered_defaultValue_LiteralBoolean_UML_ReduceAction_isOrdered.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_ReduceAction_isOrdered_defaultValue_LiteralBoolean_UML_ReduceAction_isOrdered->setValue(false);
	
	uML_ReduceAction_output_types_are_compatible_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReduceAction_reducer_inputs_output_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Region_belongsToPSM_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Region_containingStateMachine_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Region_deep_history_vertex_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Region_extendedRegion_lowerValue_LiteralInteger_UML_Region_extendedRegion.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Region_extendedRegion_lowerValue_LiteralInteger_UML_Region_extendedRegion->setValue(0);
	
	uML_Region_initial_vertex_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Region_isConsistentWith_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Region_isConsistentWith_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Region_isRedefinitionContextValid_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Region_owned_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Region_redefinitionContext_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Region_shallow_history_vertex_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Region_stateMachine_lowerValue_LiteralInteger_UML_Region_stateMachine.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Region_stateMachine_lowerValue_LiteralInteger_UML_Region_stateMachine->setValue(0);
	
	uML_Region_state_lowerValue_LiteralInteger_UML_Region_state.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Region_state_lowerValue_LiteralInteger_UML_Region_state->setValue(0);
	
	uML_Region_subvertex_lowerValue_LiteralInteger_UML_Region_subvertex.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Region_subvertex_lowerValue_LiteralInteger_UML_Region_subvertex->setValue(0);
	
	uML_Region_subvertex_upperValue_LiteralUnlimitedNatural_UML_Region_subvertex.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Region_subvertex_upperValue_LiteralUnlimitedNatural_UML_Region_subvertex->setValue(-1);
	
	uML_Region_transition_lowerValue_LiteralInteger_UML_Region_transition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Region_transition_lowerValue_LiteralInteger_UML_Region_transition->setValue(0);
	
	uML_Region_transition_upperValue_LiteralUnlimitedNatural_UML_Region_transition.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Region_transition_upperValue_LiteralUnlimitedNatural_UML_Region_transition->setValue(-1);
	
	uML_Relationship_relatedElement_upperValue_LiteralUnlimitedNatural_UML_Relationship_relatedElement.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Relationship_relatedElement_upperValue_LiteralUnlimitedNatural_UML_Relationship_relatedElement->setValue(-1);
	
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates_defaultValue_LiteralBoolean_UML_RemoveStructuralFeatureValueAction_isRemoveDuplicates.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates_defaultValue_LiteralBoolean_UML_RemoveStructuralFeatureValueAction_isRemoveDuplicates->setValue(false);
	
	uML_RemoveStructuralFeatureValueAction_removeAt_and_value_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_RemoveStructuralFeatureValueAction_removeAt_lowerValue_LiteralInteger_UML_RemoveStructuralFeatureValueAction_removeAt.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_RemoveStructuralFeatureValueAction_removeAt_lowerValue_LiteralInteger_UML_RemoveStructuralFeatureValueAction_removeAt->setValue(0);
	
	uML_RemoveVariableValueAction_isRemoveDuplicates_defaultValue_LiteralBoolean_UML_RemoveVariableValueAction_isRemoveDuplicates.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_RemoveVariableValueAction_isRemoveDuplicates_defaultValue_LiteralBoolean_UML_RemoveVariableValueAction_isRemoveDuplicates->setValue(false);
	
	uML_RemoveVariableValueAction_removeAt_and_value_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_RemoveVariableValueAction_removeAt_lowerValue_LiteralInteger_UML_RemoveVariableValueAction_removeAt.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_RemoveVariableValueAction_removeAt_lowerValue_LiteralInteger_UML_RemoveVariableValueAction_removeAt->setValue(0);
	
	uML_ReplyAction_event_on_reply_to_call_trigger_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReplyAction_pins_match_parameter_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ReplyAction_replyValue_lowerValue_LiteralInteger_UML_ReplyAction_replyValue.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ReplyAction_replyValue_lowerValue_LiteralInteger_UML_ReplyAction_replyValue->setValue(0);
	
	uML_ReplyAction_replyValue_upperValue_LiteralUnlimitedNatural_UML_ReplyAction_replyValue.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_ReplyAction_replyValue_upperValue_LiteralUnlimitedNatural_UML_ReplyAction_replyValue->setValue(-1);
	
	uML_SendObjectAction_type_target_pin_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_SendSignalAction_number_order_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_SendSignalAction_type_ordering_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_SendSignalAction_type_target_pin_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_SequenceNode_executableNode_lowerValue_LiteralInteger_UML_SequenceNode_executableNode.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_SequenceNode_executableNode_lowerValue_LiteralInteger_UML_SequenceNode_executableNode->setValue(0);
	
	uML_SequenceNode_executableNode_upperValue_LiteralUnlimitedNatural_UML_SequenceNode_executableNode.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_SequenceNode_executableNode_upperValue_LiteralUnlimitedNatural_UML_SequenceNode_executableNode->setValue(-1);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name_lowerValue_LiteralInteger_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name_lowerValue_LiteralInteger_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name->setValue(0);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name_upperValue_LiteralUnlimitedNatural_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name_upperValue_LiteralUnlimitedNatural_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name->setValue(1);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type_lowerValue_LiteralInteger_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type_lowerValue_LiteralInteger_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type->setValue(0);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type_upperValue_LiteralUnlimitedNatural_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type_upperValue_LiteralUnlimitedNatural_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type->setValue(1);
	
	uML_Signal_ownedAttribute_lowerValue_LiteralInteger_UML_Signal_ownedAttribute.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Signal_ownedAttribute_lowerValue_LiteralInteger_UML_Signal_ownedAttribute->setValue(0);
	
	uML_Signal_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Signal_ownedAttribute.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Signal_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_Signal_ownedAttribute->setValue(-1);
	
	uML_Slot_value_lowerValue_LiteralInteger_UML_Slot_value.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Slot_value_lowerValue_LiteralInteger_UML_Slot_value->setValue(0);
	
	uML_Slot_value_upperValue_LiteralUnlimitedNatural_UML_Slot_value.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Slot_value_upperValue_LiteralUnlimitedNatural_UML_Slot_value->setValue(-1);
	
	uML_StartClassifierBehaviorAction_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StartClassifierBehaviorAction_type_has_classifier_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StartObjectBehaviorAction_behavior_result_lowerValue_LiteralInteger_UML_StartObjectBehaviorAction_behavior_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StartObjectBehaviorAction_behavior_result_lowerValue_LiteralInteger_UML_StartObjectBehaviorAction_behavior_result->setValue(0);
	
	uML_StartObjectBehaviorAction_behavior_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StartObjectBehaviorAction_inputParameters_result_lowerValue_LiteralInteger_UML_StartObjectBehaviorAction_inputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StartObjectBehaviorAction_inputParameters_result_lowerValue_LiteralInteger_UML_StartObjectBehaviorAction_inputParameters_result->setValue(0);
	
	uML_StartObjectBehaviorAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_StartObjectBehaviorAction_inputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StartObjectBehaviorAction_inputParameters_result_upperValue_LiteralUnlimitedNatural_UML_StartObjectBehaviorAction_inputParameters_result->setValue(-1);
	
	uML_StartObjectBehaviorAction_inputParameters_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StartObjectBehaviorAction_multiplicity_of_object_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StartObjectBehaviorAction_no_onport_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StartObjectBehaviorAction_outputParameters_result_lowerValue_LiteralInteger_UML_StartObjectBehaviorAction_outputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StartObjectBehaviorAction_outputParameters_result_lowerValue_LiteralInteger_UML_StartObjectBehaviorAction_outputParameters_result->setValue(0);
	
	uML_StartObjectBehaviorAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_StartObjectBehaviorAction_outputParameters_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StartObjectBehaviorAction_outputParameters_result_upperValue_LiteralUnlimitedNatural_UML_StartObjectBehaviorAction_outputParameters_result->setValue(-1);
	
	uML_StartObjectBehaviorAction_outputParameters_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StartObjectBehaviorAction_type_of_object_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_State_composite_states_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_State_connectionPoint_lowerValue_LiteralInteger_UML_State_connectionPoint.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_State_connectionPoint_lowerValue_LiteralInteger_UML_State_connectionPoint->setValue(0);
	
	uML_State_connectionPoint_upperValue_LiteralUnlimitedNatural_UML_State_connectionPoint.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_State_connectionPoint_upperValue_LiteralUnlimitedNatural_UML_State_connectionPoint->setValue(-1);
	
	uML_State_connection_lowerValue_LiteralInteger_UML_State_connection.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_State_connection_lowerValue_LiteralInteger_UML_State_connection->setValue(0);
	
	uML_State_connection_upperValue_LiteralUnlimitedNatural_UML_State_connection.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_State_connection_upperValue_LiteralUnlimitedNatural_UML_State_connection->setValue(-1);
	
	uML_State_containingStateMachine_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_State_deferrableTrigger_lowerValue_LiteralInteger_UML_State_deferrableTrigger.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_State_deferrableTrigger_lowerValue_LiteralInteger_UML_State_deferrableTrigger->setValue(0);
	
	uML_State_deferrableTrigger_upperValue_LiteralUnlimitedNatural_UML_State_deferrableTrigger.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_State_deferrableTrigger_upperValue_LiteralUnlimitedNatural_UML_State_deferrableTrigger->setValue(-1);
	
	uML_State_destinations_or_sources_of_transitions_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_State_doActivity_lowerValue_LiteralInteger_UML_State_doActivity.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_State_doActivity_lowerValue_LiteralInteger_UML_State_doActivity->setValue(0);
	
	uML_State_entry_lowerValue_LiteralInteger_UML_State_entry.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_State_entry_lowerValue_LiteralInteger_UML_State_entry->setValue(0);
	
	uML_State_entry_or_exit_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_State_exit_lowerValue_LiteralInteger_UML_State_exit.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_State_exit_lowerValue_LiteralInteger_UML_State_exit->setValue(0);
	
	uML_State_isComposite_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_State_isConsistentWith_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_State_isConsistentWith_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_State_isOrthogonal_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_State_isRedefinitionContextValid_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_State_isSimple_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_State_isSimple_defaultValue_LiteralBoolean_UML_State_isSimple.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_State_isSimple_defaultValue_LiteralBoolean_UML_State_isSimple->setValue(true);
	
	uML_State_isSubmachineState_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_State_redefinedState_lowerValue_LiteralInteger_UML_State_redefinedState.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_State_redefinedState_lowerValue_LiteralInteger_UML_State_redefinedState->setValue(0);
	
	uML_State_redefinitionContext_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_State_region_lowerValue_LiteralInteger_UML_State_region.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_State_region_lowerValue_LiteralInteger_UML_State_region->setValue(0);
	
	uML_State_region_upperValue_LiteralUnlimitedNatural_UML_State_region.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_State_region_upperValue_LiteralUnlimitedNatural_UML_State_region->setValue(-1);
	
	uML_State_stateInvariant_lowerValue_LiteralInteger_UML_State_stateInvariant.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_State_stateInvariant_lowerValue_LiteralInteger_UML_State_stateInvariant->setValue(0);
	
	uML_State_submachine_lowerValue_LiteralInteger_UML_State_submachine.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_State_submachine_lowerValue_LiteralInteger_UML_State_submachine->setValue(0);
	
	uML_State_submachine_or_regions_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_State_submachine_states_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StateMachine_LCA_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StateMachine_LCAState_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StateMachine_ancestor_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StateMachine_classifier_context_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StateMachine_connectionPoint_lowerValue_LiteralInteger_UML_StateMachine_connectionPoint.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StateMachine_connectionPoint_lowerValue_LiteralInteger_UML_StateMachine_connectionPoint->setValue(0);
	
	uML_StateMachine_connectionPoint_upperValue_LiteralUnlimitedNatural_UML_StateMachine_connectionPoint.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StateMachine_connectionPoint_upperValue_LiteralUnlimitedNatural_UML_StateMachine_connectionPoint->setValue(-1);
	
	uML_StateMachine_connection_points_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StateMachine_context_classifier_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StateMachine_extendedStateMachine_lowerValue_LiteralInteger_UML_StateMachine_extendedStateMachine.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StateMachine_extendedStateMachine_lowerValue_LiteralInteger_UML_StateMachine_extendedStateMachine->setValue(0);
	
	uML_StateMachine_extendedStateMachine_upperValue_LiteralUnlimitedNatural_UML_StateMachine_extendedStateMachine.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StateMachine_extendedStateMachine_upperValue_LiteralUnlimitedNatural_UML_StateMachine_extendedStateMachine->setValue(-1);
	
	uML_StateMachine_isConsistentWith_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StateMachine_isRedefinitionContextValid_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StateMachine_method_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StateMachine_region_upperValue_LiteralUnlimitedNatural_UML_StateMachine_region.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StateMachine_region_upperValue_LiteralUnlimitedNatural_UML_StateMachine_region->setValue(-1);
	
	uML_StateMachine_submachineState_lowerValue_LiteralInteger_UML_StateMachine_submachineState.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StateMachine_submachineState_lowerValue_LiteralInteger_UML_StateMachine_submachineState->setValue(0);
	
	uML_StateMachine_submachineState_upperValue_LiteralUnlimitedNatural_UML_StateMachine_submachineState.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StateMachine_submachineState_upperValue_LiteralUnlimitedNatural_UML_StateMachine_submachineState->setValue(-1);
	
	uML_Stereotype_associationEndOwnership_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Stereotype_base_property_multiplicity_multiple_extension_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Stereotype_base_property_multiplicity_single_extension_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Stereotype_base_property_upper_bound_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Stereotype_binaryAssociationsOnly_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Stereotype_containingProfile_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Stereotype_generalize_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Stereotype_getAllExtendedMetaclasses__return_lowerValue_LiteralInteger_UML_Stereotype_getAllExtendedMetaclasses__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Stereotype_getAllExtendedMetaclasses__return_lowerValue_LiteralInteger_UML_Stereotype_getAllExtendedMetaclasses__return->setValue(0);
	
	uML_Stereotype_getAllExtendedMetaclasses__return_upperValue_LiteralUnlimitedNatural_UML_Stereotype_getAllExtendedMetaclasses__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Stereotype_getAllExtendedMetaclasses__return_upperValue_LiteralUnlimitedNatural_UML_Stereotype_getAllExtendedMetaclasses__return->setValue(-1);
	
	uML_Stereotype_getDefinition__return_lowerValue_LiteralInteger_UML_Stereotype_getDefinition__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Stereotype_getDefinition__return_lowerValue_LiteralInteger_UML_Stereotype_getDefinition__return->setValue(0);
	
	uML_Stereotype_getDefinition__return_upperValue_LiteralUnlimitedNatural_UML_Stereotype_getDefinition__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Stereotype_getDefinition__return_upperValue_LiteralUnlimitedNatural_UML_Stereotype_getDefinition__return->setValue(1);
	
	uML_Stereotype_getExtendedMetaclasses__return_lowerValue_LiteralInteger_UML_Stereotype_getExtendedMetaclasses__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Stereotype_getExtendedMetaclasses__return_lowerValue_LiteralInteger_UML_Stereotype_getExtendedMetaclasses__return->setValue(0);
	
	uML_Stereotype_getExtendedMetaclasses__return_upperValue_LiteralUnlimitedNatural_UML_Stereotype_getExtendedMetaclasses__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Stereotype_getExtendedMetaclasses__return_upperValue_LiteralUnlimitedNatural_UML_Stereotype_getExtendedMetaclasses__return->setValue(-1);
	
	uML_Stereotype_icon_lowerValue_LiteralInteger_UML_Stereotype_icon.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Stereotype_icon_lowerValue_LiteralInteger_UML_Stereotype_icon->setValue(0);
	
	uML_Stereotype_icon_upperValue_LiteralUnlimitedNatural_UML_Stereotype_icon.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Stereotype_icon_upperValue_LiteralUnlimitedNatural_UML_Stereotype_icon->setValue(-1);
	
	uML_Stereotype_name_not_clash_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Stereotype_profile_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StringExpression_operands_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StringExpression_owningExpression_lowerValue_LiteralInteger_UML_StringExpression_owningExpression.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StringExpression_owningExpression_lowerValue_LiteralInteger_UML_StringExpression_owningExpression->setValue(0);
	
	uML_StringExpression_stringValue_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StringExpression_subExpression_lowerValue_LiteralInteger_UML_StringExpression_subExpression.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StringExpression_subExpression_lowerValue_LiteralInteger_UML_StringExpression_subExpression->setValue(0);
	
	uML_StringExpression_subExpression_upperValue_LiteralUnlimitedNatural_UML_StringExpression_subExpression.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StringExpression_subExpression_upperValue_LiteralUnlimitedNatural_UML_StringExpression_subExpression->setValue(-1);
	
	uML_StringExpression_subexpressions_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuralFeature_isReadOnly_defaultValue_LiteralBoolean_UML_StructuralFeature_isReadOnly.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_StructuralFeature_isReadOnly_defaultValue_LiteralBoolean_UML_StructuralFeature_isReadOnly->setValue(false);
	
	uML_StructuralFeatureAction_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuralFeatureAction_not_static_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuralFeatureAction_object_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuralFeatureAction_one_featuring_classifier_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuralFeatureAction_visibility_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuredActivityNode_activity_lowerValue_LiteralInteger_UML_StructuredActivityNode_activity.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredActivityNode_activity_lowerValue_LiteralInteger_UML_StructuredActivityNode_activity->setValue(0);
	
	uML_StructuredActivityNode_allActions_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_allActions_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredActivityNode_allActions_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_allActions_result->setValue(0);
	
	uML_StructuredActivityNode_allActions_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_allActions_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredActivityNode_allActions_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_allActions_result->setValue(-1);
	
	uML_StructuredActivityNode_allActions_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuredActivityNode_allOwnedNodes_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_allOwnedNodes_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredActivityNode_allOwnedNodes_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_allOwnedNodes_result->setValue(0);
	
	uML_StructuredActivityNode_allOwnedNodes_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_allOwnedNodes_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredActivityNode_allOwnedNodes_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_allOwnedNodes_result->setValue(-1);
	
	uML_StructuredActivityNode_allOwnedNodes_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuredActivityNode_containingActivity_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_containingActivity_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredActivityNode_containingActivity_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_containingActivity_result->setValue(0);
	
	uML_StructuredActivityNode_containingActivity_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuredActivityNode_edge_lowerValue_LiteralInteger_UML_StructuredActivityNode_edge.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredActivityNode_edge_lowerValue_LiteralInteger_UML_StructuredActivityNode_edge->setValue(0);
	
	uML_StructuredActivityNode_edge_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_edge.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredActivityNode_edge_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_edge->setValue(-1);
	
	uML_StructuredActivityNode_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuredActivityNode_input_pin_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuredActivityNode_mustIsolate_defaultValue_LiteralBoolean_UML_StructuredActivityNode_mustIsolate.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_StructuredActivityNode_mustIsolate_defaultValue_LiteralBoolean_UML_StructuredActivityNode_mustIsolate->setValue(false);
	
	uML_StructuredActivityNode_node_lowerValue_LiteralInteger_UML_StructuredActivityNode_node.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredActivityNode_node_lowerValue_LiteralInteger_UML_StructuredActivityNode_node->setValue(0);
	
	uML_StructuredActivityNode_node_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_node.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredActivityNode_node_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_node->setValue(-1);
	
	uML_StructuredActivityNode_output_pin_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuredActivityNode_sourceNodes_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_sourceNodes_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredActivityNode_sourceNodes_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_sourceNodes_result->setValue(0);
	
	uML_StructuredActivityNode_sourceNodes_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_sourceNodes_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredActivityNode_sourceNodes_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_sourceNodes_result->setValue(-1);
	
	uML_StructuredActivityNode_sourceNodes_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuredActivityNode_structuredNodeInput_lowerValue_LiteralInteger_UML_StructuredActivityNode_structuredNodeInput.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredActivityNode_structuredNodeInput_lowerValue_LiteralInteger_UML_StructuredActivityNode_structuredNodeInput->setValue(0);
	
	uML_StructuredActivityNode_structuredNodeInput_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_structuredNodeInput.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredActivityNode_structuredNodeInput_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_structuredNodeInput->setValue(-1);
	
	uML_StructuredActivityNode_structuredNodeOutput_lowerValue_LiteralInteger_UML_StructuredActivityNode_structuredNodeOutput.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredActivityNode_structuredNodeOutput_lowerValue_LiteralInteger_UML_StructuredActivityNode_structuredNodeOutput->setValue(0);
	
	uML_StructuredActivityNode_structuredNodeOutput_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_structuredNodeOutput.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredActivityNode_structuredNodeOutput_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_structuredNodeOutput->setValue(-1);
	
	uML_StructuredActivityNode_targetNodes_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_targetNodes_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredActivityNode_targetNodes_result_lowerValue_LiteralInteger_UML_StructuredActivityNode_targetNodes_result->setValue(0);
	
	uML_StructuredActivityNode_targetNodes_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_targetNodes_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredActivityNode_targetNodes_result_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_targetNodes_result->setValue(-1);
	
	uML_StructuredActivityNode_targetNodes_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuredActivityNode_variable_lowerValue_LiteralInteger_UML_StructuredActivityNode_variable.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredActivityNode_variable_lowerValue_LiteralInteger_UML_StructuredActivityNode_variable->setValue(0);
	
	uML_StructuredActivityNode_variable_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_variable.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredActivityNode_variable_upperValue_LiteralUnlimitedNatural_UML_StructuredActivityNode_variable->setValue(-1);
	
	uML_StructuredClassifier_allRoles_result_lowerValue_LiteralInteger_UML_StructuredClassifier_allRoles_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredClassifier_allRoles_result_lowerValue_LiteralInteger_UML_StructuredClassifier_allRoles_result->setValue(0);
	
	uML_StructuredClassifier_allRoles_result_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_allRoles_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredClassifier_allRoles_result_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_allRoles_result->setValue(-1);
	
	uML_StructuredClassifier_allRoles_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name_lowerValue_LiteralInteger_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name_lowerValue_LiteralInteger_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name->setValue(0);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name->setValue(1);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type_lowerValue_LiteralInteger_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type_lowerValue_LiteralInteger_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type->setValue(0);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type->setValue(1);
	
	uML_StructuredClassifier_ownedAttribute_lowerValue_LiteralInteger_UML_StructuredClassifier_ownedAttribute.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredClassifier_ownedAttribute_lowerValue_LiteralInteger_UML_StructuredClassifier_ownedAttribute->setValue(0);
	
	uML_StructuredClassifier_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_ownedAttribute.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredClassifier_ownedAttribute_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_ownedAttribute->setValue(-1);
	
	uML_StructuredClassifier_ownedConnector_lowerValue_LiteralInteger_UML_StructuredClassifier_ownedConnector.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredClassifier_ownedConnector_lowerValue_LiteralInteger_UML_StructuredClassifier_ownedConnector->setValue(0);
	
	uML_StructuredClassifier_ownedConnector_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_ownedConnector.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredClassifier_ownedConnector_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_ownedConnector->setValue(-1);
	
	uML_StructuredClassifier_part_result_lowerValue_LiteralInteger_UML_StructuredClassifier_part_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredClassifier_part_result_lowerValue_LiteralInteger_UML_StructuredClassifier_part_result->setValue(0);
	
	uML_StructuredClassifier_part_result_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_part_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredClassifier_part_result_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_part_result->setValue(-1);
	
	uML_StructuredClassifier_part_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_StructuredClassifier_part_lowerValue_LiteralInteger_UML_StructuredClassifier_part.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredClassifier_part_lowerValue_LiteralInteger_UML_StructuredClassifier_part->setValue(0);
	
	uML_StructuredClassifier_part_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_part.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredClassifier_part_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_part->setValue(-1);
	
	uML_StructuredClassifier_role_lowerValue_LiteralInteger_UML_StructuredClassifier_role.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_StructuredClassifier_role_lowerValue_LiteralInteger_UML_StructuredClassifier_role->setValue(0);
	
	uML_StructuredClassifier_role_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_role.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_StructuredClassifier_role_upperValue_LiteralUnlimitedNatural_UML_StructuredClassifier_role->setValue(-1);
	
	uML_TemplateBinding_one_parameter_substitution_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_TemplateBinding_parameterSubstitution_lowerValue_LiteralInteger_UML_TemplateBinding_parameterSubstitution.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_TemplateBinding_parameterSubstitution_lowerValue_LiteralInteger_UML_TemplateBinding_parameterSubstitution->setValue(0);
	
	uML_TemplateBinding_parameterSubstitution_upperValue_LiteralUnlimitedNatural_UML_TemplateBinding_parameterSubstitution.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_TemplateBinding_parameterSubstitution_upperValue_LiteralUnlimitedNatural_UML_TemplateBinding_parameterSubstitution->setValue(-1);
	
	uML_TemplateBinding_parameter_substitution_formal_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_TemplateParameter_default_lowerValue_LiteralInteger_UML_TemplateParameter_default.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_TemplateParameter_default_lowerValue_LiteralInteger_UML_TemplateParameter_default->setValue(0);
	
	uML_TemplateParameter_must_be_compatible_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_TemplateParameter_ownedDefault_lowerValue_LiteralInteger_UML_TemplateParameter_ownedDefault.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_TemplateParameter_ownedDefault_lowerValue_LiteralInteger_UML_TemplateParameter_ownedDefault->setValue(0);
	
	uML_TemplateParameter_ownedParameteredElement_lowerValue_LiteralInteger_UML_TemplateParameter_ownedParameteredElement.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_TemplateParameter_ownedParameteredElement_lowerValue_LiteralInteger_UML_TemplateParameter_ownedParameteredElement->setValue(0);
	
	uML_TemplateParameterSubstitution_must_be_compatible_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_TemplateParameterSubstitution_ownedActual_lowerValue_LiteralInteger_UML_TemplateParameterSubstitution_ownedActual.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_TemplateParameterSubstitution_ownedActual_lowerValue_LiteralInteger_UML_TemplateParameterSubstitution_ownedActual->setValue(0);
	
	uML_TemplateSignature_own_elements_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_TemplateSignature_ownedParameter_lowerValue_LiteralInteger_UML_TemplateSignature_ownedParameter.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_TemplateSignature_ownedParameter_lowerValue_LiteralInteger_UML_TemplateSignature_ownedParameter->setValue(0);
	
	uML_TemplateSignature_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_TemplateSignature_ownedParameter.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_TemplateSignature_ownedParameter_upperValue_LiteralUnlimitedNatural_UML_TemplateSignature_ownedParameter->setValue(-1);
	
	uML_TemplateSignature_parameter_upperValue_LiteralUnlimitedNatural_UML_TemplateSignature_parameter.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_TemplateSignature_parameter_upperValue_LiteralUnlimitedNatural_UML_TemplateSignature_parameter->setValue(-1);
	
	uML_TemplateSignature_unique_parameters_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_TemplateableElement_isTemplate_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_TemplateableElement_ownedTemplateSignature_lowerValue_LiteralInteger_UML_TemplateableElement_ownedTemplateSignature.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_TemplateableElement_ownedTemplateSignature_lowerValue_LiteralInteger_UML_TemplateableElement_ownedTemplateSignature->setValue(0);
	
	uML_TemplateableElement_parameterableElements_result_lowerValue_LiteralInteger_UML_TemplateableElement_parameterableElements_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_TemplateableElement_parameterableElements_result_lowerValue_LiteralInteger_UML_TemplateableElement_parameterableElements_result->setValue(0);
	
	uML_TemplateableElement_parameterableElements_result_upperValue_LiteralUnlimitedNatural_UML_TemplateableElement_parameterableElements_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_TemplateableElement_parameterableElements_result_upperValue_LiteralUnlimitedNatural_UML_TemplateableElement_parameterableElements_result->setValue(-1);
	
	uML_TemplateableElement_parameterableElements_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_TemplateableElement_templateBinding_lowerValue_LiteralInteger_UML_TemplateableElement_templateBinding.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_TemplateableElement_templateBinding_lowerValue_LiteralInteger_UML_TemplateableElement_templateBinding->setValue(0);
	
	uML_TemplateableElement_templateBinding_upperValue_LiteralUnlimitedNatural_UML_TemplateableElement_templateBinding.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_TemplateableElement_templateBinding_upperValue_LiteralUnlimitedNatural_UML_TemplateableElement_templateBinding->setValue(-1);
	
	uML_TestIdentityAction_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_TestIdentityAction_no_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_TestIdentityAction_result_is_boolean_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_TimeConstraint_firstEvent_defaultValue_LiteralBoolean_UML_TimeConstraint_firstEvent.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_TimeConstraint_firstEvent_defaultValue_LiteralBoolean_UML_TimeConstraint_firstEvent->setValue(true);
	
	uML_TimeConstraint_firstEvent_lowerValue_LiteralInteger_UML_TimeConstraint_firstEvent.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_TimeConstraint_firstEvent_lowerValue_LiteralInteger_UML_TimeConstraint_firstEvent->setValue(0);
	
	uML_TimeConstraint_has_one_constrainedElement_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_TimeEvent_isRelative_defaultValue_LiteralBoolean_UML_TimeEvent_isRelative.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_TimeEvent_isRelative_defaultValue_LiteralBoolean_UML_TimeEvent_isRelative->setValue(false);
	
	uML_TimeEvent_when_non_negative_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_TimeExpression_expr_lowerValue_LiteralInteger_UML_TimeExpression_expr.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_TimeExpression_expr_lowerValue_LiteralInteger_UML_TimeExpression_expr->setValue(0);
	
	uML_TimeExpression_no_expr_requires_observation_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_TimeExpression_observation_lowerValue_LiteralInteger_UML_TimeExpression_observation.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_TimeExpression_observation_lowerValue_LiteralInteger_UML_TimeExpression_observation->setValue(0);
	
	uML_TimeExpression_observation_upperValue_LiteralUnlimitedNatural_UML_TimeExpression_observation.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_TimeExpression_observation_upperValue_LiteralUnlimitedNatural_UML_TimeExpression_observation->setValue(-1);
	
	uML_TimeObservation_firstEvent_defaultValue_LiteralBoolean_UML_TimeObservation_firstEvent.reset(uml::UmlFactory::eInstance()->createLiteralBoolean());
	uML_TimeObservation_firstEvent_defaultValue_LiteralBoolean_UML_TimeObservation_firstEvent->setValue(true);
	
	uML_Transition_containingStateMachine_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Transition_effect_lowerValue_LiteralInteger_UML_Transition_effect.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Transition_effect_lowerValue_LiteralInteger_UML_Transition_effect->setValue(0);
	
	uML_Transition_fork_segment_guards_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Transition_fork_segment_state_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Transition_guard_lowerValue_LiteralInteger_UML_Transition_guard.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Transition_guard_lowerValue_LiteralInteger_UML_Transition_guard->setValue(0);
	
	uML_Transition_initial_transition_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Transition_isConsistentWith_pre_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Transition_isConsistentWith_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Transition_join_segment_guards_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Transition_join_segment_state_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Transition_kind_defaultValue_InstanceValue.reset(uml::UmlFactory::eInstance()->createInstanceValue());
	
	uML_Transition_outgoing_pseudostates_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Transition_redefinedTransition_lowerValue_LiteralInteger_UML_Transition_redefinedTransition.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Transition_redefinedTransition_lowerValue_LiteralInteger_UML_Transition_redefinedTransition->setValue(0);
	
	uML_Transition_redefinitionContext_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Transition_source_lowerValue_LiteralInteger_UML_Transition_source.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Transition_source_lowerValue_LiteralInteger_UML_Transition_source->setValue(1);
	
	uML_Transition_source_upperValue_LiteralUnlimitedNatural_UML_Transition_source.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Transition_source_upperValue_LiteralUnlimitedNatural_UML_Transition_source->setValue(1);
	
	uML_Transition_state_is_external_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Transition_state_is_internal_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Transition_state_is_local_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Transition_target_lowerValue_LiteralInteger_UML_Transition_target.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Transition_target_lowerValue_LiteralInteger_UML_Transition_target->setValue(1);
	
	uML_Transition_target_upperValue_LiteralUnlimitedNatural_UML_Transition_target.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Transition_target_upperValue_LiteralUnlimitedNatural_UML_Transition_target->setValue(1);
	
	uML_Transition_trigger_lowerValue_LiteralInteger_UML_Transition_trigger.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Transition_trigger_lowerValue_LiteralInteger_UML_Transition_trigger->setValue(0);
	
	uML_Transition_trigger_upperValue_LiteralUnlimitedNatural_UML_Transition_trigger.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Transition_trigger_upperValue_LiteralUnlimitedNatural_UML_Transition_trigger->setValue(-1);
	
	uML_Trigger_port_lowerValue_LiteralInteger_UML_Trigger_port.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Trigger_port_lowerValue_LiteralInteger_UML_Trigger_port->setValue(0);
	
	uML_Trigger_port_upperValue_LiteralUnlimitedNatural_UML_Trigger_port.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Trigger_port_upperValue_LiteralUnlimitedNatural_UML_Trigger_port->setValue(-1);
	
	uML_Trigger_trigger_with_ports_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Type_conformsTo_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Type_getAssociations__return_lowerValue_LiteralInteger_UML_Type_getAssociations__return.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Type_getAssociations__return_lowerValue_LiteralInteger_UML_Type_getAssociations__return->setValue(0);
	
	uML_Type_getAssociations__return_upperValue_LiteralUnlimitedNatural_UML_Type_getAssociations__return.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Type_getAssociations__return_upperValue_LiteralUnlimitedNatural_UML_Type_getAssociations__return->setValue(-1);
	
	uML_Type_package_lowerValue_LiteralInteger_UML_Type_package.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Type_package_lowerValue_LiteralInteger_UML_Type_package->setValue(0);
	
	uML_TypedElement_type_lowerValue_LiteralInteger_UML_TypedElement_type.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_TypedElement_type_lowerValue_LiteralInteger_UML_TypedElement_type->setValue(0);
	
	uML_UnmarshallAction_multiplicity_of_object_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_UnmarshallAction_number_of_result_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_UnmarshallAction_object_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_UnmarshallAction_result_upperValue_LiteralUnlimitedNatural_UML_UnmarshallAction_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_UnmarshallAction_result_upperValue_LiteralUnlimitedNatural_UML_UnmarshallAction_result->setValue(-1);
	
	uML_UnmarshallAction_structural_feature_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_UnmarshallAction_type_ordering_and_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_UseCase_allIncludedUseCases_result_lowerValue_LiteralInteger_UML_UseCase_allIncludedUseCases_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_UseCase_allIncludedUseCases_result_lowerValue_LiteralInteger_UML_UseCase_allIncludedUseCases_result->setValue(0);
	
	uML_UseCase_allIncludedUseCases_result_upperValue_LiteralUnlimitedNatural_UML_UseCase_allIncludedUseCases_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_UseCase_allIncludedUseCases_result_upperValue_LiteralUnlimitedNatural_UML_UseCase_allIncludedUseCases_result->setValue(-1);
	
	uML_UseCase_allIncludedUseCases_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_UseCase_binary_associations_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_UseCase_cannot_include_self_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_UseCase_extend_lowerValue_LiteralInteger_UML_UseCase_extend.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_UseCase_extend_lowerValue_LiteralInteger_UML_UseCase_extend->setValue(0);
	
	uML_UseCase_extend_upperValue_LiteralUnlimitedNatural_UML_UseCase_extend.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_UseCase_extend_upperValue_LiteralUnlimitedNatural_UML_UseCase_extend->setValue(-1);
	
	uML_UseCase_extensionPoint_lowerValue_LiteralInteger_UML_UseCase_extensionPoint.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_UseCase_extensionPoint_lowerValue_LiteralInteger_UML_UseCase_extensionPoint->setValue(0);
	
	uML_UseCase_extensionPoint_upperValue_LiteralUnlimitedNatural_UML_UseCase_extensionPoint.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_UseCase_extensionPoint_upperValue_LiteralUnlimitedNatural_UML_UseCase_extensionPoint->setValue(-1);
	
	uML_UseCase_include_lowerValue_LiteralInteger_UML_UseCase_include.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_UseCase_include_lowerValue_LiteralInteger_UML_UseCase_include->setValue(0);
	
	uML_UseCase_include_upperValue_LiteralUnlimitedNatural_UML_UseCase_include.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_UseCase_include_upperValue_LiteralUnlimitedNatural_UML_UseCase_include->setValue(-1);
	
	uML_UseCase_must_have_name_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_UseCase_no_association_to_use_case_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_UseCase_subject_lowerValue_LiteralInteger_UML_UseCase_subject.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_UseCase_subject_lowerValue_LiteralInteger_UML_UseCase_subject->setValue(0);
	
	uML_UseCase_subject_upperValue_LiteralUnlimitedNatural_UML_UseCase_subject.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_UseCase_subject_upperValue_LiteralUnlimitedNatural_UML_UseCase_subject->setValue(-1);
	
	uML_ValuePin_compatible_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ValuePin_no_incoming_edges_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ValueSpecification_booleanValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_booleanValue_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ValueSpecification_booleanValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_booleanValue_result->setValue(0);
	
	uML_ValueSpecification_booleanValue_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ValueSpecification_integerValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_integerValue_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ValueSpecification_integerValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_integerValue_result->setValue(0);
	
	uML_ValueSpecification_integerValue_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ValueSpecification_isCompatibleWith_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ValueSpecification_isComputable_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ValueSpecification_isNull_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ValueSpecification_realValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_realValue_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ValueSpecification_realValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_realValue_result->setValue(0);
	
	uML_ValueSpecification_realValue_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ValueSpecification_stringValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_stringValue_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ValueSpecification_stringValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_stringValue_result->setValue(0);
	
	uML_ValueSpecification_stringValue_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ValueSpecification_unlimitedValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_unlimitedValue_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_ValueSpecification_unlimitedValue_result_lowerValue_LiteralInteger_UML_ValueSpecification_unlimitedValue_result->setValue(0);
	
	uML_ValueSpecification_unlimitedValue_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ValueSpecificationAction_compatible_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_ValueSpecificationAction_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Variable_activityScope_lowerValue_LiteralInteger_UML_Variable_activityScope.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Variable_activityScope_lowerValue_LiteralInteger_UML_Variable_activityScope->setValue(0);
	
	uML_Variable_isAccessibleBy_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Variable_scope_lowerValue_LiteralInteger_UML_Variable_scope.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Variable_scope_lowerValue_LiteralInteger_UML_Variable_scope->setValue(0);
	
	uML_VariableAction_scope_of_variable_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Vertex_container_lowerValue_LiteralInteger_UML_Vertex_container.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Vertex_container_lowerValue_LiteralInteger_UML_Vertex_container->setValue(0);
	
	uML_Vertex_containingStateMachine_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Vertex_incoming_result_lowerValue_LiteralInteger_UML_Vertex_incoming_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Vertex_incoming_result_lowerValue_LiteralInteger_UML_Vertex_incoming_result->setValue(0);
	
	uML_Vertex_incoming_result_upperValue_LiteralUnlimitedNatural_UML_Vertex_incoming_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Vertex_incoming_result_upperValue_LiteralUnlimitedNatural_UML_Vertex_incoming_result->setValue(-1);
	
	uML_Vertex_incoming_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Vertex_incoming_lowerValue_LiteralInteger_UML_Vertex_incoming.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Vertex_incoming_lowerValue_LiteralInteger_UML_Vertex_incoming->setValue(0);
	
	uML_Vertex_incoming_upperValue_LiteralUnlimitedNatural_UML_Vertex_incoming.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Vertex_incoming_upperValue_LiteralUnlimitedNatural_UML_Vertex_incoming->setValue(-1);
	
	uML_Vertex_isContainedInRegion_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Vertex_isContainedInState_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Vertex_outgoing_result_lowerValue_LiteralInteger_UML_Vertex_outgoing_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Vertex_outgoing_result_lowerValue_LiteralInteger_UML_Vertex_outgoing_result->setValue(0);
	
	uML_Vertex_outgoing_result_upperValue_LiteralUnlimitedNatural_UML_Vertex_outgoing_result.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Vertex_outgoing_result_upperValue_LiteralUnlimitedNatural_UML_Vertex_outgoing_result->setValue(-1);
	
	uML_Vertex_outgoing_spec_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_Vertex_outgoing_lowerValue_LiteralInteger_UML_Vertex_outgoing.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_Vertex_outgoing_lowerValue_LiteralInteger_UML_Vertex_outgoing->setValue(0);
	
	uML_Vertex_outgoing_upperValue_LiteralUnlimitedNatural_UML_Vertex_outgoing.reset(uml::UmlFactory::eInstance()->createLiteralUnlimitedNatural());
	uML_Vertex_outgoing_upperValue_LiteralUnlimitedNatural_UML_Vertex_outgoing->setValue(-1);
	
	uML_WriteLinkAction_allow_access_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_WriteStructuralFeatureAction_multiplicity_of_result_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_WriteStructuralFeatureAction_multiplicity_of_value_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_WriteStructuralFeatureAction_result_lowerValue_LiteralInteger_UML_WriteStructuralFeatureAction_result.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_WriteStructuralFeatureAction_result_lowerValue_LiteralInteger_UML_WriteStructuralFeatureAction_result->setValue(0);
	
	uML_WriteStructuralFeatureAction_type_of_result_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_WriteStructuralFeatureAction_type_of_value_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_WriteStructuralFeatureAction_value_lowerValue_LiteralInteger_UML_WriteStructuralFeatureAction_value.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_WriteStructuralFeatureAction_value_lowerValue_LiteralInteger_UML_WriteStructuralFeatureAction_value->setValue(0);
	
	uML_WriteVariableAction_multiplicity_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	uML_WriteVariableAction_value_lowerValue_LiteralInteger_UML_WriteVariableAction_value.reset(uml::UmlFactory::eInstance()->createLiteralInteger());
	uML_WriteVariableAction_value_lowerValue_LiteralInteger_UML_WriteVariableAction_value->setValue(0);
	
	uML_WriteVariableAction_value_type_specification_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	


	uML_Abstraction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Abstraction->setName("Abstraction");
	uML_Abstraction->setIsAbstract(false);
	uML_Abstraction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Abstraction);
	
	//constraints
	
	
	uML_Abstraction_mapping.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Abstraction_mapping->setName("mapping");
	uML_Abstraction_mapping->setType(get_UML_OpaqueExpression());
	uML_Abstraction_mapping->setLower(0);
	uML_Abstraction_mapping->setUpper(1);
	uML_Abstraction->getOwnedAttribute()->push_back(uML_Abstraction_mapping);
	uML_Abstraction_mapping->setClass(uML_Abstraction);
	
	
	
	
	


	uML_AcceptCallAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_AcceptCallAction->setName("AcceptCallAction");
	uML_AcceptCallAction->setIsAbstract(false);
	uML_AcceptCallAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_AcceptCallAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("result_pins");
	con->getConstrainedElement()->push_back(uML_AcceptCallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let parameter: OrderedSet(Parameter) = trigger.event->asSequence()->first().oclAsType(CallEvent).operation.inputParameters() in"\
	"result->size() = parameter->size() and"\
	"Sequence{1..result->size()}->forAll(i | "\
	"	parameter->at(i).type.conformsTo(result->at(i).type) and "\
	"	parameter->at(i).isOrdered = result->at(i).isOrdered and"\
	"	parameter->at(i).compatibleWith(result->at(i)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_AcceptCallAction->getOwnedRule()->push_back(con);
	con->setContext(uML_AcceptCallAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("unmarshall");
	con->getConstrainedElement()->push_back(uML_AcceptCallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isUnmarshall = true");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_AcceptCallAction->getOwnedRule()->push_back(con);
	con->setContext(uML_AcceptCallAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("trigger_call_event");
	con->getConstrainedElement()->push_back(uML_AcceptCallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("trigger->size()=1 and"\
	"trigger->asSequence()->first().event.oclIsKindOf(CallEvent)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_AcceptCallAction->getOwnedRule()->push_back(con);
	con->setContext(uML_AcceptCallAction->getNamespace());
	
	
	uML_AcceptCallAction_returnInformation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_AcceptCallAction_returnInformation->setName("returnInformation");
	uML_AcceptCallAction_returnInformation->setType(get_UML_OutputPin());
	uML_AcceptCallAction_returnInformation->setLower(1);
	uML_AcceptCallAction_returnInformation->setUpper(1);
	uML_AcceptCallAction->getOwnedAttribute()->push_back(uML_AcceptCallAction_returnInformation);
	uML_AcceptCallAction_returnInformation->setClass(uML_AcceptCallAction);
	
	
	
	
	


	uML_AcceptEventAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_AcceptEventAction->setName("AcceptEventAction");
	uML_AcceptEventAction->setIsAbstract(false);
	uML_AcceptEventAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_AcceptEventAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_input_pins");
	con->getConstrainedElement()->push_back(uML_AcceptEventAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("input->size() = 0");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_AcceptEventAction->getOwnedRule()->push_back(con);
	con->setContext(uML_AcceptEventAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("conforming_type");
	con->getConstrainedElement()->push_back(uML_AcceptEventAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not isUnmarshall implies "\
	"	result->isEmpty() or"\
	"	let type: Type = result->first().type in"\
	"	type=null or "\
	"		(trigger->forAll(event.oclIsKindOf(SignalEvent)) and "\
	"		 trigger.event.oclAsType(SignalEvent).signal->forAll(s | s.conformsTo(type)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_AcceptEventAction->getOwnedRule()->push_back(con);
	con->setContext(uML_AcceptEventAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("unmarshall_signal_events");
	con->getConstrainedElement()->push_back(uML_AcceptEventAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isUnmarshall and self.oclIsTypeOf(AcceptEventAction) implies"\
	"	trigger->size()=1 and"\
	"	trigger->asSequence()->first().event.oclIsKindOf(SignalEvent) and"\
	"	let attribute: OrderedSet(Property) = trigger->asSequence()->first().event.oclAsType(SignalEvent).signal.allAttributes() in"\
	"	attribute->size()>0 and result->size() = attribute->size() and"\
	"	Sequence{1..result->size()}->forAll(i | "\
	"		result->at(i).type = attribute->at(i).type and "\
	"		result->at(i).isOrdered = attribute->at(i).isOrdered and"\
	"		result->at(i).includesMultiplicity(attribute->at(i)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_AcceptEventAction->getOwnedRule()->push_back(con);
	con->setContext(uML_AcceptEventAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_output_pins");
	con->getConstrainedElement()->push_back(uML_AcceptEventAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(self.oclIsTypeOf(AcceptEventAction) and"\
	"   (trigger->forAll(event.oclIsKindOf(ChangeEvent) or  "\
	"                             event.oclIsKindOf(CallEvent))))"\
	"implies output->size() = 0");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_AcceptEventAction->getOwnedRule()->push_back(con);
	con->setContext(uML_AcceptEventAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("one_output_pin");
	con->getConstrainedElement()->push_back(uML_AcceptEventAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not isUnmarshall and trigger->exists(event.oclIsKindOf(SignalEvent) or event.oclIsKindOf(TimeEvent)) implies "\
	"	output->size() = 1 and output->first().is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_AcceptEventAction->getOwnedRule()->push_back(con);
	con->setContext(uML_AcceptEventAction->getNamespace());
	
	
	uML_AcceptEventAction_isUnmarshall.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_AcceptEventAction_isUnmarshall->setName("isUnmarshall");
	uML_AcceptEventAction_isUnmarshall->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_AcceptEventAction_isUnmarshall->setLower(1);
	uML_AcceptEventAction_isUnmarshall->setUpper(1);
	uML_AcceptEventAction->getOwnedAttribute()->push_back(uML_AcceptEventAction_isUnmarshall);
	uML_AcceptEventAction_isUnmarshall->setClass(uML_AcceptEventAction);
	uML_AcceptEventAction_isUnmarshall->setDefaultValue(uML_AcceptEventAction_isUnmarshall_defaultValue_LiteralBoolean_UML_AcceptEventAction_isUnmarshall);
	
	uML_AcceptEventAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_AcceptEventAction_result->setName("result");
	uML_AcceptEventAction_result->setType(get_UML_OutputPin());
	uML_AcceptEventAction_result->setLower(0);
	uML_AcceptEventAction_result->setUpper(-1);
	uML_AcceptEventAction->getOwnedAttribute()->push_back(uML_AcceptEventAction_result);
	uML_AcceptEventAction_result->setClass(uML_AcceptEventAction);
	
	
	uML_AcceptEventAction_trigger.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_AcceptEventAction_trigger->setName("trigger");
	uML_AcceptEventAction_trigger->setType(get_UML_Trigger());
	uML_AcceptEventAction_trigger->setLower(1);
	uML_AcceptEventAction_trigger->setUpper(-1);
	uML_AcceptEventAction->getOwnedAttribute()->push_back(uML_AcceptEventAction_trigger);
	uML_AcceptEventAction_trigger->setClass(uML_AcceptEventAction);
	
	
	
	
	


	uML_Action.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Action->setName("Action");
	uML_Action->setIsAbstract(true);
	uML_Action->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Action);
	
	//constraints
	
	
	uML_Action_context.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Action_context->setName("context");
	uML_Action_context->setType(get_UML_Classifier());
	uML_Action_context->setLower(0);
	uML_Action_context->setUpper(1);
	uML_Action->getOwnedAttribute()->push_back(uML_Action_context);
	uML_Action_context->setClass(uML_Action);
	
	
	uML_Action_input.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Action_input->setName("input");
	uML_Action_input->setType(get_UML_InputPin());
	uML_Action_input->setLower(0);
	uML_Action_input->setUpper(-1);
	uML_Action->getOwnedAttribute()->push_back(uML_Action_input);
	uML_Action_input->setClass(uML_Action);
	
	
	uML_Action_isLocallyReentrant.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Action_isLocallyReentrant->setName("isLocallyReentrant");
	uML_Action_isLocallyReentrant->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Action_isLocallyReentrant->setLower(1);
	uML_Action_isLocallyReentrant->setUpper(1);
	uML_Action->getOwnedAttribute()->push_back(uML_Action_isLocallyReentrant);
	uML_Action_isLocallyReentrant->setClass(uML_Action);
	uML_Action_isLocallyReentrant->setDefaultValue(uML_Action_isLocallyReentrant_defaultValue_LiteralBoolean_UML_Action_isLocallyReentrant);
	
	uML_Action_localPostcondition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Action_localPostcondition->setName("localPostcondition");
	uML_Action_localPostcondition->setType(get_UML_Constraint());
	uML_Action_localPostcondition->setLower(0);
	uML_Action_localPostcondition->setUpper(-1);
	uML_Action->getOwnedAttribute()->push_back(uML_Action_localPostcondition);
	uML_Action_localPostcondition->setClass(uML_Action);
	
	
	uML_Action_localPrecondition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Action_localPrecondition->setName("localPrecondition");
	uML_Action_localPrecondition->setType(get_UML_Constraint());
	uML_Action_localPrecondition->setLower(0);
	uML_Action_localPrecondition->setUpper(-1);
	uML_Action->getOwnedAttribute()->push_back(uML_Action_localPrecondition);
	uML_Action_localPrecondition->setClass(uML_Action);
	
	
	uML_Action_output.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Action_output->setName("output");
	uML_Action_output->setType(get_UML_OutputPin());
	uML_Action_output->setLower(0);
	uML_Action_output->setUpper(-1);
	uML_Action->getOwnedAttribute()->push_back(uML_Action_output);
	uML_Action_output->setClass(uML_Action);
	
	
	
	uML_Action_allActions_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Action_allActions_->setName("allActions");
	uML_Action_allActions_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Action_allActions_result->setName("result");
	uML_Action_allActions_result->setType(get_UML_Action());
	uML_Action_allActions_result->setLower(0);
	uML_Action_allActions_result->setUpper(-1);
	uML_Action_allActions_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Action_allActions_->getOwnedParameter()->push_back(uML_Action_allActions_result);
	
	
	uML_Action->getOwnedOperation()->push_back(uML_Action_allActions_); 
	uML_Action_allOwnedNodes_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Action_allOwnedNodes_->setName("allOwnedNodes");
	uML_Action_allOwnedNodes_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Action_allOwnedNodes_result->setName("result");
	uML_Action_allOwnedNodes_result->setType(get_UML_ActivityNode());
	uML_Action_allOwnedNodes_result->setLower(0);
	uML_Action_allOwnedNodes_result->setUpper(-1);
	uML_Action_allOwnedNodes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Action_allOwnedNodes_->getOwnedParameter()->push_back(uML_Action_allOwnedNodes_result);
	
	
	uML_Action->getOwnedOperation()->push_back(uML_Action_allOwnedNodes_); 
	uML_Action_containingBehavior_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Action_containingBehavior_->setName("containingBehavior");
	uML_Action_containingBehavior_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Action_containingBehavior_result->setName("result");
	uML_Action_containingBehavior_result->setType(get_UML_Behavior());
	uML_Action_containingBehavior_result->setLower(0);
	uML_Action_containingBehavior_result->setUpper(1);
	uML_Action_containingBehavior_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Action_containingBehavior_->getOwnedParameter()->push_back(uML_Action_containingBehavior_result);
	
	
	uML_Action->getOwnedOperation()->push_back(uML_Action_containingBehavior_); 
	uML_Action_context_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Action_context_->setName("context");
	uML_Action_context_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Action_context_result->setName("result");
	uML_Action_context_result->setType(get_UML_Classifier());
	uML_Action_context_result->setLower(0);
	uML_Action_context_result->setUpper(1);
	uML_Action_context_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Action_context_->getOwnedParameter()->push_back(uML_Action_context_result);
	
	
	uML_Action->getOwnedOperation()->push_back(uML_Action_context_); 
	
	


	uML_ActionExecutionSpecification.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ActionExecutionSpecification->setName("ActionExecutionSpecification");
	uML_ActionExecutionSpecification->setIsAbstract(false);
	uML_ActionExecutionSpecification->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ActionExecutionSpecification);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("action_referenced");
	con->getConstrainedElement()->push_back(uML_ActionExecutionSpecification);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(enclosingInteraction->notEmpty() or enclosingOperand.combinedFragment->notEmpty()) and"\
	"let parentInteraction : Set(Interaction) = enclosingInteraction.oclAsType(Interaction)->asSet()->union("\
	"enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->"\
	"collect(enclosingInteraction).oclAsType(Interaction)->asSet()) in"\
	"(parentInteraction->size() = 1) and self.action.interaction->asSet() = parentInteraction");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActionExecutionSpecification->getOwnedRule()->push_back(con);
	con->setContext(uML_ActionExecutionSpecification->getNamespace());
	
	
	uML_ActionExecutionSpecification_action.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActionExecutionSpecification_action->setName("action");
	uML_ActionExecutionSpecification_action->setType(get_UML_Action());
	uML_ActionExecutionSpecification_action->setLower(1);
	uML_ActionExecutionSpecification_action->setUpper(1);
	uML_ActionExecutionSpecification->getOwnedAttribute()->push_back(uML_ActionExecutionSpecification_action);
	uML_ActionExecutionSpecification_action->setClass(uML_ActionExecutionSpecification);
	
	
	
	
	


	uML_ActionInputPin.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ActionInputPin->setName("ActionInputPin");
	uML_ActionInputPin->setIsAbstract(false);
	uML_ActionInputPin->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ActionInputPin);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_control_or_object_flow");
	con->getConstrainedElement()->push_back(uML_ActionInputPin);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("fromAction.incoming->union(outgoing)->isEmpty() and"\
	"fromAction.input.incoming->isEmpty() and"\
	"fromAction.output.outgoing->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActionInputPin->getOwnedRule()->push_back(con);
	con->setContext(uML_ActionInputPin->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("input_pin");
	con->getConstrainedElement()->push_back(uML_ActionInputPin);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("fromAction.input->forAll(oclIsKindOf(ActionInputPin))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActionInputPin->getOwnedRule()->push_back(con);
	con->setContext(uML_ActionInputPin->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("one_output_pin");
	con->getConstrainedElement()->push_back(uML_ActionInputPin);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("fromAction.output->size() = 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActionInputPin->getOwnedRule()->push_back(con);
	con->setContext(uML_ActionInputPin->getNamespace());
	
	
	uML_ActionInputPin_fromAction.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActionInputPin_fromAction->setName("fromAction");
	uML_ActionInputPin_fromAction->setType(get_UML_Action());
	uML_ActionInputPin_fromAction->setLower(1);
	uML_ActionInputPin_fromAction->setUpper(1);
	uML_ActionInputPin->getOwnedAttribute()->push_back(uML_ActionInputPin_fromAction);
	uML_ActionInputPin_fromAction->setClass(uML_ActionInputPin);
	
	
	
	
	


	uML_Activity.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Activity->setName("Activity");
	uML_Activity->setIsAbstract(false);
	uML_Activity->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Activity);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("maximum_one_parameter_node");
	con->getConstrainedElement()->push_back(uML_Activity);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("ownedParameter->forAll(p | "\
	"   p.direction <> ParameterDirectionKind::inout implies node->select("\
	"       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p)->size()= 1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Activity->getOwnedRule()->push_back(con);
	con->setContext(uML_Activity->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("maximum_two_parameter_nodes");
	con->getConstrainedElement()->push_back(uML_Activity);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("ownedParameter->forAll(p | "\
	"p.direction = ParameterDirectionKind::inout implies"\
	"let associatedNodes : Set(ActivityNode) = node->select("\
	"       oclIsKindOf(ActivityParameterNode) and oclAsType(ActivityParameterNode).parameter = p) in "\
	"  associatedNodes->size()=2 and"\
	"  associatedNodes->select(incoming->notEmpty())->size()<=1 and"\
	"  associatedNodes->select(outgoing->notEmpty())->size()<=1"\
	")");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Activity->getOwnedRule()->push_back(con);
	con->setContext(uML_Activity->getNamespace());
	
	
	uML_Activity_edge.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Activity_edge->setName("edge");
	uML_Activity_edge->setType(get_UML_ActivityEdge());
	uML_Activity_edge->setLower(0);
	uML_Activity_edge->setUpper(-1);
	uML_Activity->getOwnedAttribute()->push_back(uML_Activity_edge);
	uML_Activity_edge->setClass(uML_Activity);
	
	
	uML_Activity_group.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Activity_group->setName("group");
	uML_Activity_group->setType(get_UML_ActivityGroup());
	uML_Activity_group->setLower(0);
	uML_Activity_group->setUpper(-1);
	uML_Activity->getOwnedAttribute()->push_back(uML_Activity_group);
	uML_Activity_group->setClass(uML_Activity);
	
	
	uML_Activity_isReadOnly.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Activity_isReadOnly->setName("isReadOnly");
	uML_Activity_isReadOnly->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Activity_isReadOnly->setLower(1);
	uML_Activity_isReadOnly->setUpper(1);
	uML_Activity->getOwnedAttribute()->push_back(uML_Activity_isReadOnly);
	uML_Activity_isReadOnly->setClass(uML_Activity);
	uML_Activity_isReadOnly->setDefaultValue(uML_Activity_isReadOnly_defaultValue_LiteralBoolean_UML_Activity_isReadOnly);
	
	uML_Activity_isSingleExecution.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Activity_isSingleExecution->setName("isSingleExecution");
	uML_Activity_isSingleExecution->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Activity_isSingleExecution->setLower(1);
	uML_Activity_isSingleExecution->setUpper(1);
	uML_Activity->getOwnedAttribute()->push_back(uML_Activity_isSingleExecution);
	uML_Activity_isSingleExecution->setClass(uML_Activity);
	uML_Activity_isSingleExecution->setDefaultValue(uML_Activity_isSingleExecution_defaultValue_LiteralBoolean_UML_Activity_isSingleExecution);
	
	uML_Activity_node.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Activity_node->setName("node");
	uML_Activity_node->setType(get_UML_ActivityNode());
	uML_Activity_node->setLower(0);
	uML_Activity_node->setUpper(-1);
	uML_Activity->getOwnedAttribute()->push_back(uML_Activity_node);
	uML_Activity_node->setClass(uML_Activity);
	
	
	uML_Activity_ownedGroup.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Activity_ownedGroup->setName("ownedGroup");
	uML_Activity_ownedGroup->setType(get_UML_ActivityGroup());
	uML_Activity_ownedGroup->setLower(0);
	uML_Activity_ownedGroup->setUpper(-1);
	uML_Activity->getOwnedAttribute()->push_back(uML_Activity_ownedGroup);
	uML_Activity_ownedGroup->setClass(uML_Activity);
	
	
	uML_Activity_ownedNode.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Activity_ownedNode->setName("ownedNode");
	uML_Activity_ownedNode->setType(get_UML_ActivityNode());
	uML_Activity_ownedNode->setLower(0);
	uML_Activity_ownedNode->setUpper(-1);
	uML_Activity->getOwnedAttribute()->push_back(uML_Activity_ownedNode);
	uML_Activity_ownedNode->setClass(uML_Activity);
	
	
	uML_Activity_partition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Activity_partition->setName("partition");
	uML_Activity_partition->setType(get_UML_ActivityPartition());
	uML_Activity_partition->setLower(0);
	uML_Activity_partition->setUpper(-1);
	uML_Activity->getOwnedAttribute()->push_back(uML_Activity_partition);
	uML_Activity_partition->setClass(uML_Activity);
	
	
	uML_Activity_structuredNode.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Activity_structuredNode->setName("structuredNode");
	uML_Activity_structuredNode->setType(get_UML_StructuredActivityNode());
	uML_Activity_structuredNode->setLower(0);
	uML_Activity_structuredNode->setUpper(-1);
	uML_Activity->getOwnedAttribute()->push_back(uML_Activity_structuredNode);
	uML_Activity_structuredNode->setClass(uML_Activity);
	
	
	uML_Activity_variable.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Activity_variable->setName("variable");
	uML_Activity_variable->setType(get_UML_Variable());
	uML_Activity_variable->setLower(0);
	uML_Activity_variable->setUpper(-1);
	uML_Activity->getOwnedAttribute()->push_back(uML_Activity_variable);
	uML_Activity_variable->setClass(uML_Activity);
	
	
	
	
	


	uML_ActivityEdge.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ActivityEdge->setName("ActivityEdge");
	uML_ActivityEdge->setIsAbstract(true);
	uML_ActivityEdge->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ActivityEdge);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("source_and_target");
	con->getConstrainedElement()->push_back(uML_ActivityEdge);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("activity<>null implies source.containingActivity() = activity and target.containingActivity() = activity");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActivityEdge->getOwnedRule()->push_back(con);
	con->setContext(uML_ActivityEdge->getNamespace());
	
	
	uML_ActivityEdge_activity.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityEdge_activity->setName("activity");
	uML_ActivityEdge_activity->setType(get_UML_Activity());
	uML_ActivityEdge_activity->setLower(0);
	uML_ActivityEdge_activity->setUpper(1);
	uML_ActivityEdge->getOwnedAttribute()->push_back(uML_ActivityEdge_activity);
	uML_ActivityEdge_activity->setClass(uML_ActivityEdge);
	
	
	uML_ActivityEdge_guard.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityEdge_guard->setName("guard");
	uML_ActivityEdge_guard->setType(get_UML_ValueSpecification());
	uML_ActivityEdge_guard->setLower(0);
	uML_ActivityEdge_guard->setUpper(1);
	uML_ActivityEdge->getOwnedAttribute()->push_back(uML_ActivityEdge_guard);
	uML_ActivityEdge_guard->setClass(uML_ActivityEdge);
	
	
	uML_ActivityEdge_inGroup.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityEdge_inGroup->setName("inGroup");
	uML_ActivityEdge_inGroup->setType(get_UML_ActivityGroup());
	uML_ActivityEdge_inGroup->setLower(0);
	uML_ActivityEdge_inGroup->setUpper(-1);
	uML_ActivityEdge->getOwnedAttribute()->push_back(uML_ActivityEdge_inGroup);
	uML_ActivityEdge_inGroup->setClass(uML_ActivityEdge);
	
	
	uML_ActivityEdge_inPartition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityEdge_inPartition->setName("inPartition");
	uML_ActivityEdge_inPartition->setType(get_UML_ActivityPartition());
	uML_ActivityEdge_inPartition->setLower(0);
	uML_ActivityEdge_inPartition->setUpper(-1);
	uML_ActivityEdge->getOwnedAttribute()->push_back(uML_ActivityEdge_inPartition);
	uML_ActivityEdge_inPartition->setClass(uML_ActivityEdge);
	
	
	uML_ActivityEdge_inStructuredNode.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityEdge_inStructuredNode->setName("inStructuredNode");
	uML_ActivityEdge_inStructuredNode->setType(get_UML_StructuredActivityNode());
	uML_ActivityEdge_inStructuredNode->setLower(0);
	uML_ActivityEdge_inStructuredNode->setUpper(1);
	uML_ActivityEdge->getOwnedAttribute()->push_back(uML_ActivityEdge_inStructuredNode);
	uML_ActivityEdge_inStructuredNode->setClass(uML_ActivityEdge);
	
	
	uML_ActivityEdge_interrupts.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityEdge_interrupts->setName("interrupts");
	uML_ActivityEdge_interrupts->setType(get_UML_InterruptibleActivityRegion());
	uML_ActivityEdge_interrupts->setLower(0);
	uML_ActivityEdge_interrupts->setUpper(1);
	uML_ActivityEdge->getOwnedAttribute()->push_back(uML_ActivityEdge_interrupts);
	uML_ActivityEdge_interrupts->setClass(uML_ActivityEdge);
	
	
	uML_ActivityEdge_redefinedEdge.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityEdge_redefinedEdge->setName("redefinedEdge");
	uML_ActivityEdge_redefinedEdge->setType(get_UML_ActivityEdge());
	uML_ActivityEdge_redefinedEdge->setLower(0);
	uML_ActivityEdge_redefinedEdge->setUpper(-1);
	uML_ActivityEdge->getOwnedAttribute()->push_back(uML_ActivityEdge_redefinedEdge);
	uML_ActivityEdge_redefinedEdge->setClass(uML_ActivityEdge);
	
	
	uML_ActivityEdge_source.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityEdge_source->setName("source");
	uML_ActivityEdge_source->setType(get_UML_ActivityNode());
	uML_ActivityEdge_source->setLower(1);
	uML_ActivityEdge_source->setUpper(1);
	uML_ActivityEdge->getOwnedAttribute()->push_back(uML_ActivityEdge_source);
	uML_ActivityEdge_source->setClass(uML_ActivityEdge);
	
	
	uML_ActivityEdge_target.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityEdge_target->setName("target");
	uML_ActivityEdge_target->setType(get_UML_ActivityNode());
	uML_ActivityEdge_target->setLower(1);
	uML_ActivityEdge_target->setUpper(1);
	uML_ActivityEdge->getOwnedAttribute()->push_back(uML_ActivityEdge_target);
	uML_ActivityEdge_target->setClass(uML_ActivityEdge);
	
	
	uML_ActivityEdge_weight.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityEdge_weight->setName("weight");
	uML_ActivityEdge_weight->setType(get_UML_ValueSpecification());
	uML_ActivityEdge_weight->setLower(0);
	uML_ActivityEdge_weight->setUpper(1);
	uML_ActivityEdge->getOwnedAttribute()->push_back(uML_ActivityEdge_weight);
	uML_ActivityEdge_weight->setClass(uML_ActivityEdge);
	
	
	
	uML_ActivityEdge_isConsistentWith_RedefinableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ActivityEdge_isConsistentWith_RedefinableElement->setName("isConsistentWith");
	uML_ActivityEdge_isConsistentWith_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ActivityEdge_isConsistentWith_result->setName("result");
	uML_ActivityEdge_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ActivityEdge_isConsistentWith_result->setLower(1);
	uML_ActivityEdge_isConsistentWith_result->setUpper(1);
	uML_ActivityEdge_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ActivityEdge_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_ActivityEdge_isConsistentWith_result);
	uML_ActivityEdge_isConsistentWith_RedefinableElement_UML_ActivityEdge_isConsistentWith_redefiningElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ActivityEdge_isConsistentWith_RedefinableElement_UML_ActivityEdge_isConsistentWith_redefiningElement->setName("redefiningElement");
	uML_ActivityEdge_isConsistentWith_RedefinableElement_UML_ActivityEdge_isConsistentWith_redefiningElement->setType(get_UML_RedefinableElement());
	uML_ActivityEdge_isConsistentWith_RedefinableElement_UML_ActivityEdge_isConsistentWith_redefiningElement->setLower(1);
	uML_ActivityEdge_isConsistentWith_RedefinableElement_UML_ActivityEdge_isConsistentWith_redefiningElement->setUpper(1);
	uML_ActivityEdge_isConsistentWith_RedefinableElement_UML_ActivityEdge_isConsistentWith_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_ActivityEdge_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_ActivityEdge_isConsistentWith_RedefinableElement_UML_ActivityEdge_isConsistentWith_redefiningElement);
	
	
	uML_ActivityEdge->getOwnedOperation()->push_back(uML_ActivityEdge_isConsistentWith_RedefinableElement); 
	
	


	uML_ActivityFinalNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ActivityFinalNode->setName("ActivityFinalNode");
	uML_ActivityFinalNode->setIsAbstract(false);
	uML_ActivityFinalNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ActivityFinalNode);
	
	//constraints
	
	
	
	
	


	uML_ActivityGroup.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ActivityGroup->setName("ActivityGroup");
	uML_ActivityGroup->setIsAbstract(true);
	uML_ActivityGroup->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ActivityGroup);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("not_contained");
	con->getConstrainedElement()->push_back(uML_ActivityGroup);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("subgroup->closure(subgroup).containedNode->excludesAll(containedNode) and"\
	"superGroup->closure(superGroup).containedNode->excludesAll(containedNode) and "\
	"subgroup->closure(subgroup).containedEdge->excludesAll(containedEdge) and "\
	"superGroup->closure(superGroup).containedEdge->excludesAll(containedEdge)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActivityGroup->getOwnedRule()->push_back(con);
	con->setContext(uML_ActivityGroup->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("nodes_and_edges");
	con->getConstrainedElement()->push_back(uML_ActivityGroup);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("containedNode->forAll(activity = self.containingActivity()) and "\
	"containedEdge->forAll(activity = self.containingActivity())");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActivityGroup->getOwnedRule()->push_back(con);
	con->setContext(uML_ActivityGroup->getNamespace());
	
	
	uML_ActivityGroup_containedEdge.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityGroup_containedEdge->setName("containedEdge");
	uML_ActivityGroup_containedEdge->setType(get_UML_ActivityEdge());
	uML_ActivityGroup_containedEdge->setLower(0);
	uML_ActivityGroup_containedEdge->setUpper(-1);
	uML_ActivityGroup->getOwnedAttribute()->push_back(uML_ActivityGroup_containedEdge);
	uML_ActivityGroup_containedEdge->setClass(uML_ActivityGroup);
	
	
	uML_ActivityGroup_containedNode.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityGroup_containedNode->setName("containedNode");
	uML_ActivityGroup_containedNode->setType(get_UML_ActivityNode());
	uML_ActivityGroup_containedNode->setLower(0);
	uML_ActivityGroup_containedNode->setUpper(-1);
	uML_ActivityGroup->getOwnedAttribute()->push_back(uML_ActivityGroup_containedNode);
	uML_ActivityGroup_containedNode->setClass(uML_ActivityGroup);
	
	
	uML_ActivityGroup_inActivity.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityGroup_inActivity->setName("inActivity");
	uML_ActivityGroup_inActivity->setType(get_UML_Activity());
	uML_ActivityGroup_inActivity->setLower(0);
	uML_ActivityGroup_inActivity->setUpper(1);
	uML_ActivityGroup->getOwnedAttribute()->push_back(uML_ActivityGroup_inActivity);
	uML_ActivityGroup_inActivity->setClass(uML_ActivityGroup);
	
	
	uML_ActivityGroup_subgroup.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityGroup_subgroup->setName("subgroup");
	uML_ActivityGroup_subgroup->setType(get_UML_ActivityGroup());
	uML_ActivityGroup_subgroup->setLower(0);
	uML_ActivityGroup_subgroup->setUpper(-1);
	uML_ActivityGroup->getOwnedAttribute()->push_back(uML_ActivityGroup_subgroup);
	uML_ActivityGroup_subgroup->setClass(uML_ActivityGroup);
	
	
	uML_ActivityGroup_superGroup.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityGroup_superGroup->setName("superGroup");
	uML_ActivityGroup_superGroup->setType(get_UML_ActivityGroup());
	uML_ActivityGroup_superGroup->setLower(0);
	uML_ActivityGroup_superGroup->setUpper(1);
	uML_ActivityGroup->getOwnedAttribute()->push_back(uML_ActivityGroup_superGroup);
	uML_ActivityGroup_superGroup->setClass(uML_ActivityGroup);
	
	
	
	uML_ActivityGroup_containingActivity_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ActivityGroup_containingActivity_->setName("containingActivity");
	uML_ActivityGroup_containingActivity_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ActivityGroup_containingActivity_result->setName("result");
	uML_ActivityGroup_containingActivity_result->setType(get_UML_Activity());
	uML_ActivityGroup_containingActivity_result->setLower(0);
	uML_ActivityGroup_containingActivity_result->setUpper(1);
	uML_ActivityGroup_containingActivity_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ActivityGroup_containingActivity_->getOwnedParameter()->push_back(uML_ActivityGroup_containingActivity_result);
	
	
	uML_ActivityGroup->getOwnedOperation()->push_back(uML_ActivityGroup_containingActivity_); 
	
	


	uML_ActivityNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ActivityNode->setName("ActivityNode");
	uML_ActivityNode->setIsAbstract(true);
	uML_ActivityNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ActivityNode);
	
	//constraints
	
	
	uML_ActivityNode_activity.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityNode_activity->setName("activity");
	uML_ActivityNode_activity->setType(get_UML_Activity());
	uML_ActivityNode_activity->setLower(0);
	uML_ActivityNode_activity->setUpper(1);
	uML_ActivityNode->getOwnedAttribute()->push_back(uML_ActivityNode_activity);
	uML_ActivityNode_activity->setClass(uML_ActivityNode);
	
	
	uML_ActivityNode_inGroup.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityNode_inGroup->setName("inGroup");
	uML_ActivityNode_inGroup->setType(get_UML_ActivityGroup());
	uML_ActivityNode_inGroup->setLower(0);
	uML_ActivityNode_inGroup->setUpper(-1);
	uML_ActivityNode->getOwnedAttribute()->push_back(uML_ActivityNode_inGroup);
	uML_ActivityNode_inGroup->setClass(uML_ActivityNode);
	
	
	uML_ActivityNode_inInterruptibleRegion.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityNode_inInterruptibleRegion->setName("inInterruptibleRegion");
	uML_ActivityNode_inInterruptibleRegion->setType(get_UML_InterruptibleActivityRegion());
	uML_ActivityNode_inInterruptibleRegion->setLower(0);
	uML_ActivityNode_inInterruptibleRegion->setUpper(-1);
	uML_ActivityNode->getOwnedAttribute()->push_back(uML_ActivityNode_inInterruptibleRegion);
	uML_ActivityNode_inInterruptibleRegion->setClass(uML_ActivityNode);
	
	
	uML_ActivityNode_inPartition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityNode_inPartition->setName("inPartition");
	uML_ActivityNode_inPartition->setType(get_UML_ActivityPartition());
	uML_ActivityNode_inPartition->setLower(0);
	uML_ActivityNode_inPartition->setUpper(-1);
	uML_ActivityNode->getOwnedAttribute()->push_back(uML_ActivityNode_inPartition);
	uML_ActivityNode_inPartition->setClass(uML_ActivityNode);
	
	
	uML_ActivityNode_inStructuredNode.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityNode_inStructuredNode->setName("inStructuredNode");
	uML_ActivityNode_inStructuredNode->setType(get_UML_StructuredActivityNode());
	uML_ActivityNode_inStructuredNode->setLower(0);
	uML_ActivityNode_inStructuredNode->setUpper(1);
	uML_ActivityNode->getOwnedAttribute()->push_back(uML_ActivityNode_inStructuredNode);
	uML_ActivityNode_inStructuredNode->setClass(uML_ActivityNode);
	
	
	uML_ActivityNode_incoming.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityNode_incoming->setName("incoming");
	uML_ActivityNode_incoming->setType(get_UML_ActivityEdge());
	uML_ActivityNode_incoming->setLower(0);
	uML_ActivityNode_incoming->setUpper(-1);
	uML_ActivityNode->getOwnedAttribute()->push_back(uML_ActivityNode_incoming);
	uML_ActivityNode_incoming->setClass(uML_ActivityNode);
	
	
	uML_ActivityNode_outgoing.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityNode_outgoing->setName("outgoing");
	uML_ActivityNode_outgoing->setType(get_UML_ActivityEdge());
	uML_ActivityNode_outgoing->setLower(0);
	uML_ActivityNode_outgoing->setUpper(-1);
	uML_ActivityNode->getOwnedAttribute()->push_back(uML_ActivityNode_outgoing);
	uML_ActivityNode_outgoing->setClass(uML_ActivityNode);
	
	
	uML_ActivityNode_redefinedNode.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityNode_redefinedNode->setName("redefinedNode");
	uML_ActivityNode_redefinedNode->setType(get_UML_ActivityNode());
	uML_ActivityNode_redefinedNode->setLower(0);
	uML_ActivityNode_redefinedNode->setUpper(-1);
	uML_ActivityNode->getOwnedAttribute()->push_back(uML_ActivityNode_redefinedNode);
	uML_ActivityNode_redefinedNode->setClass(uML_ActivityNode);
	
	
	
	uML_ActivityNode_containingActivity_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ActivityNode_containingActivity_->setName("containingActivity");
	uML_ActivityNode_containingActivity_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ActivityNode_containingActivity_result->setName("result");
	uML_ActivityNode_containingActivity_result->setType(get_UML_Activity());
	uML_ActivityNode_containingActivity_result->setLower(0);
	uML_ActivityNode_containingActivity_result->setUpper(1);
	uML_ActivityNode_containingActivity_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ActivityNode_containingActivity_->getOwnedParameter()->push_back(uML_ActivityNode_containingActivity_result);
	
	
	uML_ActivityNode->getOwnedOperation()->push_back(uML_ActivityNode_containingActivity_); 
	uML_ActivityNode_isConsistentWith_RedefinableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ActivityNode_isConsistentWith_RedefinableElement->setName("isConsistentWith");
	uML_ActivityNode_isConsistentWith_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ActivityNode_isConsistentWith_result->setName("result");
	uML_ActivityNode_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ActivityNode_isConsistentWith_result->setLower(1);
	uML_ActivityNode_isConsistentWith_result->setUpper(1);
	uML_ActivityNode_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ActivityNode_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_ActivityNode_isConsistentWith_result);
	uML_ActivityNode_isConsistentWith_RedefinableElement_UML_ActivityNode_isConsistentWith_redefiningElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ActivityNode_isConsistentWith_RedefinableElement_UML_ActivityNode_isConsistentWith_redefiningElement->setName("redefiningElement");
	uML_ActivityNode_isConsistentWith_RedefinableElement_UML_ActivityNode_isConsistentWith_redefiningElement->setType(get_UML_RedefinableElement());
	uML_ActivityNode_isConsistentWith_RedefinableElement_UML_ActivityNode_isConsistentWith_redefiningElement->setLower(1);
	uML_ActivityNode_isConsistentWith_RedefinableElement_UML_ActivityNode_isConsistentWith_redefiningElement->setUpper(1);
	uML_ActivityNode_isConsistentWith_RedefinableElement_UML_ActivityNode_isConsistentWith_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_ActivityNode_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_ActivityNode_isConsistentWith_RedefinableElement_UML_ActivityNode_isConsistentWith_redefiningElement);
	
	
	uML_ActivityNode->getOwnedOperation()->push_back(uML_ActivityNode_isConsistentWith_RedefinableElement); 
	
	


	uML_ActivityParameterNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ActivityParameterNode->setName("ActivityParameterNode");
	uML_ActivityParameterNode->setIsAbstract(false);
	uML_ActivityParameterNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ActivityParameterNode);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("has_parameters");
	con->getConstrainedElement()->push_back(uML_ActivityParameterNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("activity.ownedParameter->includes(parameter)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActivityParameterNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ActivityParameterNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_edges");
	con->getConstrainedElement()->push_back(uML_ActivityParameterNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("incoming->isEmpty() or outgoing->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActivityParameterNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ActivityParameterNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_outgoing_edges");
	con->getConstrainedElement()->push_back(uML_ActivityParameterNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(incoming->notEmpty() and outgoing->isEmpty()) implies "\
	"	(parameter.direction = ParameterDirectionKind::out or "\
	"	 parameter.direction = ParameterDirectionKind::inout or "\
	"	 parameter.direction = ParameterDirectionKind::return)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActivityParameterNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ActivityParameterNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("same_type");
	con->getConstrainedElement()->push_back(uML_ActivityParameterNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("type = parameter.type");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActivityParameterNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ActivityParameterNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_incoming_edges");
	con->getConstrainedElement()->push_back(uML_ActivityParameterNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(outgoing->notEmpty() and incoming->isEmpty()) implies "\
	"	(parameter.direction = ParameterDirectionKind::_'in' or "\
	"	 parameter.direction = ParameterDirectionKind::inout)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActivityParameterNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ActivityParameterNode->getNamespace());
	
	
	uML_ActivityParameterNode_parameter.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityParameterNode_parameter->setName("parameter");
	uML_ActivityParameterNode_parameter->setType(get_UML_Parameter());
	uML_ActivityParameterNode_parameter->setLower(1);
	uML_ActivityParameterNode_parameter->setUpper(1);
	uML_ActivityParameterNode->getOwnedAttribute()->push_back(uML_ActivityParameterNode_parameter);
	uML_ActivityParameterNode_parameter->setClass(uML_ActivityParameterNode);
	
	
	
	
	


	uML_ActivityPartition.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ActivityPartition->setName("ActivityPartition");
	uML_ActivityPartition->setIsAbstract(false);
	uML_ActivityPartition->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ActivityPartition);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("represents_property_and_is_contained");
	con->getConstrainedElement()->push_back(uML_ActivityPartition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(represents.oclIsKindOf(Property) and superPartition->notEmpty()) implies"\
	"("\
	"  (superPartition.represents.oclIsKindOf(Classifier) and represents.owner = superPartition.represents) or "\
	"  (superPartition.represents.oclIsKindOf(Property) and represents.owner = superPartition.represents.oclAsType(Property).type)"\
	")");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActivityPartition->getOwnedRule()->push_back(con);
	con->setContext(uML_ActivityPartition->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("represents_classifier");
	con->getConstrainedElement()->push_back(uML_ActivityPartition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(not isExternal and represents.oclIsKindOf(Classifier) and superPartition->notEmpty()) implies"\
	"("\
	"   let representedClassifier : Classifier = represents.oclAsType(Classifier) in"\
	"     superPartition.represents.oclIsKindOf(Classifier) and"\
	"      let representedSuperClassifier : Classifier = superPartition.represents.oclAsType(Classifier) in"\
	"       (representedSuperClassifier.oclIsKindOf(BehavioredClassifier) and representedClassifier.oclIsKindOf(Behavior) and "\
	"        representedSuperClassifier.oclAsType(BehavioredClassifier).ownedBehavior->includes(representedClassifier.oclAsType(Behavior))) "\
	"       or"\
	"       (representedSuperClassifier.oclIsKindOf(Class) and  representedSuperClassifier.oclAsType(Class).nestedClassifier->includes(representedClassifier))"\
	"       or"\
	"       (Association.allInstances()->exists(a | a.memberEnd->exists(end1 | end1.isComposite and end1.type = representedClassifier and "\
	"                                                                      a.memberEnd->exists(end2 | end1<>end2 and end2.type = representedSuperClassifier))))"\
	")");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActivityPartition->getOwnedRule()->push_back(con);
	con->setContext(uML_ActivityPartition->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("dimension_not_contained");
	con->getConstrainedElement()->push_back(uML_ActivityPartition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isDimension implies superPartition->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActivityPartition->getOwnedRule()->push_back(con);
	con->setContext(uML_ActivityPartition->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("represents_property");
	con->getConstrainedElement()->push_back(uML_ActivityPartition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(represents.oclIsKindOf(Property) and superPartition->notEmpty() and superPartition.represents.oclIsKindOf(Classifier)) implies"\
	"("\
	"  let representedClassifier : Classifier = superPartition.represents.oclAsType(Classifier)"\
	"  in"\
	"    superPartition.subpartition->reject(isExternal)->forAll(p | "\
	"       p.represents.oclIsKindOf(Property) and p.owner=representedClassifier)"\
	")");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ActivityPartition->getOwnedRule()->push_back(con);
	con->setContext(uML_ActivityPartition->getNamespace());
	
	
	uML_ActivityPartition_edge.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityPartition_edge->setName("edge");
	uML_ActivityPartition_edge->setType(get_UML_ActivityEdge());
	uML_ActivityPartition_edge->setLower(0);
	uML_ActivityPartition_edge->setUpper(-1);
	uML_ActivityPartition->getOwnedAttribute()->push_back(uML_ActivityPartition_edge);
	uML_ActivityPartition_edge->setClass(uML_ActivityPartition);
	
	
	uML_ActivityPartition_isDimension.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityPartition_isDimension->setName("isDimension");
	uML_ActivityPartition_isDimension->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ActivityPartition_isDimension->setLower(1);
	uML_ActivityPartition_isDimension->setUpper(1);
	uML_ActivityPartition->getOwnedAttribute()->push_back(uML_ActivityPartition_isDimension);
	uML_ActivityPartition_isDimension->setClass(uML_ActivityPartition);
	uML_ActivityPartition_isDimension->setDefaultValue(uML_ActivityPartition_isDimension_defaultValue_LiteralBoolean_UML_ActivityPartition_isDimension);
	
	uML_ActivityPartition_isExternal.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityPartition_isExternal->setName("isExternal");
	uML_ActivityPartition_isExternal->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ActivityPartition_isExternal->setLower(1);
	uML_ActivityPartition_isExternal->setUpper(1);
	uML_ActivityPartition->getOwnedAttribute()->push_back(uML_ActivityPartition_isExternal);
	uML_ActivityPartition_isExternal->setClass(uML_ActivityPartition);
	uML_ActivityPartition_isExternal->setDefaultValue(uML_ActivityPartition_isExternal_defaultValue_LiteralBoolean_UML_ActivityPartition_isExternal);
	
	uML_ActivityPartition_node.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityPartition_node->setName("node");
	uML_ActivityPartition_node->setType(get_UML_ActivityNode());
	uML_ActivityPartition_node->setLower(0);
	uML_ActivityPartition_node->setUpper(-1);
	uML_ActivityPartition->getOwnedAttribute()->push_back(uML_ActivityPartition_node);
	uML_ActivityPartition_node->setClass(uML_ActivityPartition);
	
	
	uML_ActivityPartition_represents.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityPartition_represents->setName("represents");
	uML_ActivityPartition_represents->setType(get_UML_Element());
	uML_ActivityPartition_represents->setLower(0);
	uML_ActivityPartition_represents->setUpper(1);
	uML_ActivityPartition->getOwnedAttribute()->push_back(uML_ActivityPartition_represents);
	uML_ActivityPartition_represents->setClass(uML_ActivityPartition);
	
	
	uML_ActivityPartition_subpartition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityPartition_subpartition->setName("subpartition");
	uML_ActivityPartition_subpartition->setType(get_UML_ActivityPartition());
	uML_ActivityPartition_subpartition->setLower(0);
	uML_ActivityPartition_subpartition->setUpper(-1);
	uML_ActivityPartition->getOwnedAttribute()->push_back(uML_ActivityPartition_subpartition);
	uML_ActivityPartition_subpartition->setClass(uML_ActivityPartition);
	
	
	uML_ActivityPartition_superPartition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ActivityPartition_superPartition->setName("superPartition");
	uML_ActivityPartition_superPartition->setType(get_UML_ActivityPartition());
	uML_ActivityPartition_superPartition->setLower(0);
	uML_ActivityPartition_superPartition->setUpper(1);
	uML_ActivityPartition->getOwnedAttribute()->push_back(uML_ActivityPartition_superPartition);
	uML_ActivityPartition_superPartition->setClass(uML_ActivityPartition);
	
	
	
	
	


	uML_Actor.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Actor->setName("Actor");
	uML_Actor->setIsAbstract(false);
	uML_Actor->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Actor);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("must_have_name");
	con->getConstrainedElement()->push_back(uML_Actor);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("name->notEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Actor->getOwnedRule()->push_back(con);
	con->setContext(uML_Actor->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("associations");
	con->getConstrainedElement()->push_back(uML_Actor);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("Association.allInstances()->forAll( a |  a.memberEnd->collect(type)->includes(self) implies  (    a.memberEnd->size() = 2 and    let actorEnd : Property = a.memberEnd->any(type = self) in      actorEnd.opposite.class.oclIsKindOf(UseCase) or      ( actorEnd.opposite.class.oclIsKindOf(Class) and not         actorEnd.opposite.class.oclIsKindOf(Behavior))      )  )");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Actor->getOwnedRule()->push_back(con);
	con->setContext(uML_Actor->getNamespace());
	
	
	
	
	


	uML_AddStructuralFeatureValueAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_AddStructuralFeatureValueAction->setName("AddStructuralFeatureValueAction");
	uML_AddStructuralFeatureValueAction->setIsAbstract(false);
	uML_AddStructuralFeatureValueAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_AddStructuralFeatureValueAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("insertAt_pin");
	con->getConstrainedElement()->push_back(uML_AddStructuralFeatureValueAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("if not structuralFeature.isOrdered then insertAt = nullelse   not isReplaceAll implies  	insertAt<>null and   	insertAt->forAll(type=UnlimitedNatural and is(1,1.oclAsType(UnlimitedNatural)))endif");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_AddStructuralFeatureValueAction->getOwnedRule()->push_back(con);
	con->setContext(uML_AddStructuralFeatureValueAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("required_value");
	con->getConstrainedElement()->push_back(uML_AddStructuralFeatureValueAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("value<>null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_AddStructuralFeatureValueAction->getOwnedRule()->push_back(con);
	con->setContext(uML_AddStructuralFeatureValueAction->getNamespace());
	
	
	uML_AddStructuralFeatureValueAction_insertAt.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_AddStructuralFeatureValueAction_insertAt->setName("insertAt");
	uML_AddStructuralFeatureValueAction_insertAt->setType(get_UML_InputPin());
	uML_AddStructuralFeatureValueAction_insertAt->setLower(0);
	uML_AddStructuralFeatureValueAction_insertAt->setUpper(1);
	uML_AddStructuralFeatureValueAction->getOwnedAttribute()->push_back(uML_AddStructuralFeatureValueAction_insertAt);
	uML_AddStructuralFeatureValueAction_insertAt->setClass(uML_AddStructuralFeatureValueAction);
	
	
	uML_AddStructuralFeatureValueAction_isReplaceAll.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_AddStructuralFeatureValueAction_isReplaceAll->setName("isReplaceAll");
	uML_AddStructuralFeatureValueAction_isReplaceAll->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_AddStructuralFeatureValueAction_isReplaceAll->setLower(1);
	uML_AddStructuralFeatureValueAction_isReplaceAll->setUpper(1);
	uML_AddStructuralFeatureValueAction->getOwnedAttribute()->push_back(uML_AddStructuralFeatureValueAction_isReplaceAll);
	uML_AddStructuralFeatureValueAction_isReplaceAll->setClass(uML_AddStructuralFeatureValueAction);
	uML_AddStructuralFeatureValueAction_isReplaceAll->setDefaultValue(uML_AddStructuralFeatureValueAction_isReplaceAll_defaultValue_LiteralBoolean_UML_AddStructuralFeatureValueAction_isReplaceAll);
	
	
	
	


	uML_AddVariableValueAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_AddVariableValueAction->setName("AddVariableValueAction");
	uML_AddVariableValueAction->setIsAbstract(false);
	uML_AddVariableValueAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_AddVariableValueAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("insertAt_pin");
	con->getConstrainedElement()->push_back(uML_AddVariableValueAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("if not variable.isOrdered then insertAt = nullelse   not isReplaceAll implies  	insertAt<>null and   	insertAt->forAll(type=UnlimitedNatural and is(1,1.oclAsType(UnlimitedNatural)))endif");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_AddVariableValueAction->getOwnedRule()->push_back(con);
	con->setContext(uML_AddVariableValueAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("required_value");
	con->getConstrainedElement()->push_back(uML_AddVariableValueAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("value <> null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_AddVariableValueAction->getOwnedRule()->push_back(con);
	con->setContext(uML_AddVariableValueAction->getNamespace());
	
	
	uML_AddVariableValueAction_insertAt.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_AddVariableValueAction_insertAt->setName("insertAt");
	uML_AddVariableValueAction_insertAt->setType(get_UML_InputPin());
	uML_AddVariableValueAction_insertAt->setLower(0);
	uML_AddVariableValueAction_insertAt->setUpper(1);
	uML_AddVariableValueAction->getOwnedAttribute()->push_back(uML_AddVariableValueAction_insertAt);
	uML_AddVariableValueAction_insertAt->setClass(uML_AddVariableValueAction);
	
	
	uML_AddVariableValueAction_isReplaceAll.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_AddVariableValueAction_isReplaceAll->setName("isReplaceAll");
	uML_AddVariableValueAction_isReplaceAll->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_AddVariableValueAction_isReplaceAll->setLower(1);
	uML_AddVariableValueAction_isReplaceAll->setUpper(1);
	uML_AddVariableValueAction->getOwnedAttribute()->push_back(uML_AddVariableValueAction_isReplaceAll);
	uML_AddVariableValueAction_isReplaceAll->setClass(uML_AddVariableValueAction);
	uML_AddVariableValueAction_isReplaceAll->setDefaultValue(uML_AddVariableValueAction_isReplaceAll_defaultValue_LiteralBoolean_UML_AddVariableValueAction_isReplaceAll);
	
	
	
	


	uML_AnyReceiveEvent.reset(uml::UmlFactory::eInstance()->createClass());
	uML_AnyReceiveEvent->setName("AnyReceiveEvent");
	uML_AnyReceiveEvent->setIsAbstract(false);
	uML_AnyReceiveEvent->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_AnyReceiveEvent);
	
	//constraints
	
	
	
	
	


	uML_Artifact.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Artifact->setName("Artifact");
	uML_Artifact->setIsAbstract(false);
	uML_Artifact->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Artifact);
	
	//constraints
	
	
	uML_Artifact_fileName.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Artifact_fileName->setName("fileName");
	uML_Artifact_fileName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Artifact_fileName->setLower(0);
	uML_Artifact_fileName->setUpper(1);
	uML_Artifact->getOwnedAttribute()->push_back(uML_Artifact_fileName);
	uML_Artifact_fileName->setClass(uML_Artifact);
	
	
	uML_Artifact_manifestation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Artifact_manifestation->setName("manifestation");
	uML_Artifact_manifestation->setType(get_UML_Manifestation());
	uML_Artifact_manifestation->setLower(0);
	uML_Artifact_manifestation->setUpper(-1);
	uML_Artifact->getOwnedAttribute()->push_back(uML_Artifact_manifestation);
	uML_Artifact_manifestation->setClass(uML_Artifact);
	
	
	uML_Artifact_nestedArtifact.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Artifact_nestedArtifact->setName("nestedArtifact");
	uML_Artifact_nestedArtifact->setType(get_UML_Artifact());
	uML_Artifact_nestedArtifact->setLower(0);
	uML_Artifact_nestedArtifact->setUpper(-1);
	uML_Artifact->getOwnedAttribute()->push_back(uML_Artifact_nestedArtifact);
	uML_Artifact_nestedArtifact->setClass(uML_Artifact);
	
	
	uML_Artifact_ownedAttribute.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Artifact_ownedAttribute->setName("ownedAttribute");
	uML_Artifact_ownedAttribute->setType(get_UML_Property());
	uML_Artifact_ownedAttribute->setLower(0);
	uML_Artifact_ownedAttribute->setUpper(-1);
	uML_Artifact->getOwnedAttribute()->push_back(uML_Artifact_ownedAttribute);
	uML_Artifact_ownedAttribute->setClass(uML_Artifact);
	
	
	uML_Artifact_ownedOperation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Artifact_ownedOperation->setName("ownedOperation");
	uML_Artifact_ownedOperation->setType(get_UML_Operation());
	uML_Artifact_ownedOperation->setLower(0);
	uML_Artifact_ownedOperation->setUpper(-1);
	uML_Artifact->getOwnedAttribute()->push_back(uML_Artifact_ownedOperation);
	uML_Artifact_ownedOperation->setClass(uML_Artifact);
	
	
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->setName("createOwnedAttribute");
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setName("");
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setType(get_UML_Property());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setLower(1);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setUpper(1);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name->setName("name");
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name->setLower(0);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name->setUpper(1);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type->setName("type");
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type->setType(get_UML_Type());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type->setLower(0);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type->setUpper(1);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_lower.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_lower->setName("lower");
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_lower->setLower(1);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_lower->setUpper(1);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_lower->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_lower);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_upper.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_upper->setName("upper");
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_upper->setLower(1);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_upper->setUpper(1);
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_upper->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_upper);
	
	
	uML_Artifact->getOwnedOperation()->push_back(uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural); 
	uML_Artifact_createOwnedOperation_String_String_Type_Type.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Artifact_createOwnedOperation_String_String_Type_Type->setName("createOwnedOperation");
	uML_Artifact_createOwnedOperation_String_String_Type_Type_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_return->setName("");
	uML_Artifact_createOwnedOperation_String_String_Type_Type_return->setType(get_UML_Operation());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_return->setLower(1);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_return->setUpper(1);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_Artifact_createOwnedOperation_String_String_Type_Type_return);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name->setName("name");
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name->setLower(0);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name->setUpper(1);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames->setName("parameterNames");
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames->setLower(0);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames->setUpper(-1);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes->setName("parameterTypes");
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes->setType(get_UML_Type());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes->setLower(0);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes->setUpper(-1);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType->setName("returnType");
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType->setType(get_UML_Type());
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType->setLower(0);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType->setUpper(1);
	uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Artifact_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType);
	
	
	uML_Artifact->getOwnedOperation()->push_back(uML_Artifact_createOwnedOperation_String_String_Type_Type); 
	
	


	uML_Association.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Association->setName("Association");
	uML_Association->setIsAbstract(false);
	uML_Association->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Association);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("specialized_end_types");
	con->getConstrainedElement()->push_back(uML_Association);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("Sequence{1..memberEnd->size()}->"\
	"	forAll(i | general->select(oclIsKindOf(Association)).oclAsType(Association)->"\
	"		forAll(ga | self.memberEnd->at(i).type.conformsTo(ga.memberEnd->at(i).type)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Association->getOwnedRule()->push_back(con);
	con->setContext(uML_Association->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("ends_must_be_typed");
	con->getConstrainedElement()->push_back(uML_Association);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("memberEnd->forAll(type->notEmpty())");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Association->getOwnedRule()->push_back(con);
	con->setContext(uML_Association->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("specialized_end_number");
	con->getConstrainedElement()->push_back(uML_Association);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("parents()->select(oclIsKindOf(Association)).oclAsType(Association)->forAll(p | p.memberEnd->size() = self.memberEnd->size())");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Association->getOwnedRule()->push_back(con);
	con->setContext(uML_Association->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("association_ends");
	con->getConstrainedElement()->push_back(uML_Association);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("memberEnd->size() > 2 implies ownedEnd->includesAll(memberEnd)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Association->getOwnedRule()->push_back(con);
	con->setContext(uML_Association->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("binary_associations");
	con->getConstrainedElement()->push_back(uML_Association);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("memberEnd->exists(aggregation <> AggregationKind::none) implies (memberEnd->size() = 2 and memberEnd->exists(aggregation = AggregationKind::none))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Association->getOwnedRule()->push_back(con);
	con->setContext(uML_Association->getNamespace());
	
	
	uML_Association_endType.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Association_endType->setName("endType");
	uML_Association_endType->setType(get_UML_Type());
	uML_Association_endType->setLower(1);
	uML_Association_endType->setUpper(-1);
	uML_Association->getOwnedAttribute()->push_back(uML_Association_endType);
	uML_Association_endType->setClass(uML_Association);
	
	
	uML_Association_isDerived.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Association_isDerived->setName("isDerived");
	uML_Association_isDerived->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Association_isDerived->setLower(1);
	uML_Association_isDerived->setUpper(1);
	uML_Association->getOwnedAttribute()->push_back(uML_Association_isDerived);
	uML_Association_isDerived->setClass(uML_Association);
	uML_Association_isDerived->setDefaultValue(uML_Association_isDerived_defaultValue_LiteralBoolean_UML_Association_isDerived);
	
	uML_Association_memberEnd.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Association_memberEnd->setName("memberEnd");
	uML_Association_memberEnd->setType(get_UML_Property());
	uML_Association_memberEnd->setLower(2);
	uML_Association_memberEnd->setUpper(-1);
	uML_Association->getOwnedAttribute()->push_back(uML_Association_memberEnd);
	uML_Association_memberEnd->setClass(uML_Association);
	
	
	uML_Association_navigableOwnedEnd.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Association_navigableOwnedEnd->setName("navigableOwnedEnd");
	uML_Association_navigableOwnedEnd->setType(get_UML_Property());
	uML_Association_navigableOwnedEnd->setLower(0);
	uML_Association_navigableOwnedEnd->setUpper(-1);
	uML_Association->getOwnedAttribute()->push_back(uML_Association_navigableOwnedEnd);
	uML_Association_navigableOwnedEnd->setClass(uML_Association);
	
	
	uML_Association_ownedEnd.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Association_ownedEnd->setName("ownedEnd");
	uML_Association_ownedEnd->setType(get_UML_Property());
	uML_Association_ownedEnd->setLower(0);
	uML_Association_ownedEnd->setUpper(-1);
	uML_Association->getOwnedAttribute()->push_back(uML_Association_ownedEnd);
	uML_Association_ownedEnd->setClass(uML_Association);
	
	
	
	uML_Association_endType_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Association_endType_->setName("endType");
	uML_Association_endType_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Association_endType_result->setName("result");
	uML_Association_endType_result->setType(get_UML_Type());
	uML_Association_endType_result->setLower(1);
	uML_Association_endType_result->setUpper(-1);
	uML_Association_endType_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Association_endType_->getOwnedParameter()->push_back(uML_Association_endType_result);
	
	
	uML_Association->getOwnedOperation()->push_back(uML_Association_endType_); 
	uML_Association_isBinary_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Association_isBinary_->setName("isBinary");
	uML_Association_isBinary__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Association_isBinary__return->setName("");
	uML_Association_isBinary__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Association_isBinary__return->setLower(1);
	uML_Association_isBinary__return->setUpper(1);
	uML_Association_isBinary__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Association_isBinary_->getOwnedParameter()->push_back(uML_Association_isBinary__return);
	
	
	uML_Association->getOwnedOperation()->push_back(uML_Association_isBinary_); 
	
	


	uML_AssociationClass.reset(uml::UmlFactory::eInstance()->createClass());
	uML_AssociationClass->setName("AssociationClass");
	uML_AssociationClass->setIsAbstract(false);
	uML_AssociationClass->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_AssociationClass);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("cannot_be_defined");
	con->getConstrainedElement()->push_back(uML_AssociationClass);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.endType()->excludes(self) and self.endType()->collect(et|et.oclAsType(Classifier).allParents())->flatten()->excludes(self)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_AssociationClass->getOwnedRule()->push_back(con);
	con->setContext(uML_AssociationClass->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("disjoint_attributes_ends");
	con->getConstrainedElement()->push_back(uML_AssociationClass);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("ownedAttribute->intersection(ownedEnd)->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_AssociationClass->getOwnedRule()->push_back(con);
	con->setContext(uML_AssociationClass->getNamespace());
	
	
	
	
	


	uML_Behavior.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Behavior->setName("Behavior");
	uML_Behavior->setIsAbstract(true);
	uML_Behavior->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Behavior);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("most_one_behavior");
	con->getConstrainedElement()->push_back(uML_Behavior);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("specification <> null implies _'context'.ownedBehavior->select(specification=self.specification)->size() = 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Behavior->getOwnedRule()->push_back(con);
	con->setContext(uML_Behavior->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("parameters_match");
	con->getConstrainedElement()->push_back(uML_Behavior);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("specification <> null implies ownedParameter->size() = specification.ownedParameter->size()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Behavior->getOwnedRule()->push_back(con);
	con->setContext(uML_Behavior->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("feature_of_context_classifier");
	con->getConstrainedElement()->push_back(uML_Behavior);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("_'context'.feature->includes(specification)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Behavior->getOwnedRule()->push_back(con);
	con->setContext(uML_Behavior->getNamespace());
	
	
	uML_Behavior_context.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Behavior_context->setName("context");
	uML_Behavior_context->setType(get_UML_BehavioredClassifier());
	uML_Behavior_context->setLower(0);
	uML_Behavior_context->setUpper(1);
	uML_Behavior->getOwnedAttribute()->push_back(uML_Behavior_context);
	uML_Behavior_context->setClass(uML_Behavior);
	
	
	uML_Behavior_isReentrant.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Behavior_isReentrant->setName("isReentrant");
	uML_Behavior_isReentrant->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Behavior_isReentrant->setLower(0);
	uML_Behavior_isReentrant->setUpper(1);
	uML_Behavior->getOwnedAttribute()->push_back(uML_Behavior_isReentrant);
	uML_Behavior_isReentrant->setClass(uML_Behavior);
	uML_Behavior_isReentrant->setDefaultValue(uML_Behavior_isReentrant_defaultValue_LiteralBoolean_UML_Behavior_isReentrant);
	
	uML_Behavior_ownedParameter.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Behavior_ownedParameter->setName("ownedParameter");
	uML_Behavior_ownedParameter->setType(get_UML_Parameter());
	uML_Behavior_ownedParameter->setLower(0);
	uML_Behavior_ownedParameter->setUpper(-1);
	uML_Behavior->getOwnedAttribute()->push_back(uML_Behavior_ownedParameter);
	uML_Behavior_ownedParameter->setClass(uML_Behavior);
	
	
	uML_Behavior_ownedParameterSet.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Behavior_ownedParameterSet->setName("ownedParameterSet");
	uML_Behavior_ownedParameterSet->setType(get_UML_ParameterSet());
	uML_Behavior_ownedParameterSet->setLower(0);
	uML_Behavior_ownedParameterSet->setUpper(-1);
	uML_Behavior->getOwnedAttribute()->push_back(uML_Behavior_ownedParameterSet);
	uML_Behavior_ownedParameterSet->setClass(uML_Behavior);
	
	
	uML_Behavior_postcondition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Behavior_postcondition->setName("postcondition");
	uML_Behavior_postcondition->setType(get_UML_Constraint());
	uML_Behavior_postcondition->setLower(0);
	uML_Behavior_postcondition->setUpper(-1);
	uML_Behavior->getOwnedAttribute()->push_back(uML_Behavior_postcondition);
	uML_Behavior_postcondition->setClass(uML_Behavior);
	
	
	uML_Behavior_precondition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Behavior_precondition->setName("precondition");
	uML_Behavior_precondition->setType(get_UML_Constraint());
	uML_Behavior_precondition->setLower(0);
	uML_Behavior_precondition->setUpper(-1);
	uML_Behavior->getOwnedAttribute()->push_back(uML_Behavior_precondition);
	uML_Behavior_precondition->setClass(uML_Behavior);
	
	
	uML_Behavior_redefinedBehavior.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Behavior_redefinedBehavior->setName("redefinedBehavior");
	uML_Behavior_redefinedBehavior->setType(get_UML_Behavior());
	uML_Behavior_redefinedBehavior->setLower(0);
	uML_Behavior_redefinedBehavior->setUpper(-1);
	uML_Behavior->getOwnedAttribute()->push_back(uML_Behavior_redefinedBehavior);
	uML_Behavior_redefinedBehavior->setClass(uML_Behavior);
	
	
	uML_Behavior_specification.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Behavior_specification->setName("specification");
	uML_Behavior_specification->setType(get_UML_BehavioralFeature());
	uML_Behavior_specification->setLower(0);
	uML_Behavior_specification->setUpper(1);
	uML_Behavior->getOwnedAttribute()->push_back(uML_Behavior_specification);
	uML_Behavior_specification->setClass(uML_Behavior);
	
	
	
	uML_Behavior_behavioredClassifier_Element.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Behavior_behavioredClassifier_Element->setName("behavioredClassifier");
	uML_Behavior_behavioredClassifier_Element_UML_Behavior_behavioredClassifier_from.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Behavior_behavioredClassifier_Element_UML_Behavior_behavioredClassifier_from->setName("from");
	uML_Behavior_behavioredClassifier_Element_UML_Behavior_behavioredClassifier_from->setType(get_UML_Element());
	uML_Behavior_behavioredClassifier_Element_UML_Behavior_behavioredClassifier_from->setLower(1);
	uML_Behavior_behavioredClassifier_Element_UML_Behavior_behavioredClassifier_from->setUpper(1);
	uML_Behavior_behavioredClassifier_Element_UML_Behavior_behavioredClassifier_from->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Behavior_behavioredClassifier_Element->getOwnedParameter()->push_back(uML_Behavior_behavioredClassifier_Element_UML_Behavior_behavioredClassifier_from);
	uML_Behavior_behavioredClassifier_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Behavior_behavioredClassifier_result->setName("result");
	uML_Behavior_behavioredClassifier_result->setType(get_UML_BehavioredClassifier());
	uML_Behavior_behavioredClassifier_result->setLower(0);
	uML_Behavior_behavioredClassifier_result->setUpper(1);
	uML_Behavior_behavioredClassifier_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Behavior_behavioredClassifier_Element->getOwnedParameter()->push_back(uML_Behavior_behavioredClassifier_result);
	
	
	uML_Behavior->getOwnedOperation()->push_back(uML_Behavior_behavioredClassifier_Element); 
	uML_Behavior_context_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Behavior_context_->setName("context");
	uML_Behavior_context_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Behavior_context_result->setName("result");
	uML_Behavior_context_result->setType(get_UML_BehavioredClassifier());
	uML_Behavior_context_result->setLower(0);
	uML_Behavior_context_result->setUpper(1);
	uML_Behavior_context_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Behavior_context_->getOwnedParameter()->push_back(uML_Behavior_context_result);
	
	
	uML_Behavior->getOwnedOperation()->push_back(uML_Behavior_context_); 
	uML_Behavior_inputParameters_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Behavior_inputParameters_->setName("inputParameters");
	uML_Behavior_inputParameters_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Behavior_inputParameters_result->setName("result");
	uML_Behavior_inputParameters_result->setType(get_UML_Parameter());
	uML_Behavior_inputParameters_result->setLower(0);
	uML_Behavior_inputParameters_result->setUpper(-1);
	uML_Behavior_inputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Behavior_inputParameters_->getOwnedParameter()->push_back(uML_Behavior_inputParameters_result);
	
	
	uML_Behavior->getOwnedOperation()->push_back(uML_Behavior_inputParameters_); 
	uML_Behavior_outputParameters_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Behavior_outputParameters_->setName("outputParameters");
	uML_Behavior_outputParameters_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Behavior_outputParameters_result->setName("result");
	uML_Behavior_outputParameters_result->setType(get_UML_Parameter());
	uML_Behavior_outputParameters_result->setLower(0);
	uML_Behavior_outputParameters_result->setUpper(-1);
	uML_Behavior_outputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Behavior_outputParameters_->getOwnedParameter()->push_back(uML_Behavior_outputParameters_result);
	
	
	uML_Behavior->getOwnedOperation()->push_back(uML_Behavior_outputParameters_); 
	
	


	uML_BehaviorExecutionSpecification.reset(uml::UmlFactory::eInstance()->createClass());
	uML_BehaviorExecutionSpecification->setName("BehaviorExecutionSpecification");
	uML_BehaviorExecutionSpecification->setIsAbstract(false);
	uML_BehaviorExecutionSpecification->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_BehaviorExecutionSpecification);
	
	//constraints
	
	
	uML_BehaviorExecutionSpecification_behavior.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_BehaviorExecutionSpecification_behavior->setName("behavior");
	uML_BehaviorExecutionSpecification_behavior->setType(get_UML_Behavior());
	uML_BehaviorExecutionSpecification_behavior->setLower(0);
	uML_BehaviorExecutionSpecification_behavior->setUpper(1);
	uML_BehaviorExecutionSpecification->getOwnedAttribute()->push_back(uML_BehaviorExecutionSpecification_behavior);
	uML_BehaviorExecutionSpecification_behavior->setClass(uML_BehaviorExecutionSpecification);
	
	
	
	
	


	uML_BehavioralFeature.reset(uml::UmlFactory::eInstance()->createClass());
	uML_BehavioralFeature->setName("BehavioralFeature");
	uML_BehavioralFeature->setIsAbstract(true);
	uML_BehavioralFeature->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_BehavioralFeature);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("abstract_no_method");
	con->getConstrainedElement()->push_back(uML_BehavioralFeature);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isAbstract implies method->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_BehavioralFeature->getOwnedRule()->push_back(con);
	con->setContext(uML_BehavioralFeature->getNamespace());
	
	
	uML_BehavioralFeature_concurrency.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_BehavioralFeature_concurrency->setName("concurrency");
	uML_BehavioralFeature_concurrency->setType(get_UML_CallConcurrencyKind());
	uML_BehavioralFeature_concurrency->setLower(1);
	uML_BehavioralFeature_concurrency->setUpper(1);
	uML_BehavioralFeature->getOwnedAttribute()->push_back(uML_BehavioralFeature_concurrency);
	uML_BehavioralFeature_concurrency->setClass(uML_BehavioralFeature);
	uML_BehavioralFeature_concurrency->setDefaultValue(uML_BehavioralFeature_concurrency_defaultValue_InstanceValue);
	
	uML_BehavioralFeature_isAbstract.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_BehavioralFeature_isAbstract->setName("isAbstract");
	uML_BehavioralFeature_isAbstract->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_BehavioralFeature_isAbstract->setLower(1);
	uML_BehavioralFeature_isAbstract->setUpper(1);
	uML_BehavioralFeature->getOwnedAttribute()->push_back(uML_BehavioralFeature_isAbstract);
	uML_BehavioralFeature_isAbstract->setClass(uML_BehavioralFeature);
	uML_BehavioralFeature_isAbstract->setDefaultValue(uML_BehavioralFeature_isAbstract_defaultValue_LiteralBoolean_UML_BehavioralFeature_isAbstract);
	
	uML_BehavioralFeature_method.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_BehavioralFeature_method->setName("method");
	uML_BehavioralFeature_method->setType(get_UML_Behavior());
	uML_BehavioralFeature_method->setLower(0);
	uML_BehavioralFeature_method->setUpper(-1);
	uML_BehavioralFeature->getOwnedAttribute()->push_back(uML_BehavioralFeature_method);
	uML_BehavioralFeature_method->setClass(uML_BehavioralFeature);
	
	
	uML_BehavioralFeature_ownedParameter.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_BehavioralFeature_ownedParameter->setName("ownedParameter");
	uML_BehavioralFeature_ownedParameter->setType(get_UML_Parameter());
	uML_BehavioralFeature_ownedParameter->setLower(0);
	uML_BehavioralFeature_ownedParameter->setUpper(-1);
	uML_BehavioralFeature->getOwnedAttribute()->push_back(uML_BehavioralFeature_ownedParameter);
	uML_BehavioralFeature_ownedParameter->setClass(uML_BehavioralFeature);
	
	
	uML_BehavioralFeature_ownedParameterSet.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_BehavioralFeature_ownedParameterSet->setName("ownedParameterSet");
	uML_BehavioralFeature_ownedParameterSet->setType(get_UML_ParameterSet());
	uML_BehavioralFeature_ownedParameterSet->setLower(0);
	uML_BehavioralFeature_ownedParameterSet->setUpper(-1);
	uML_BehavioralFeature->getOwnedAttribute()->push_back(uML_BehavioralFeature_ownedParameterSet);
	uML_BehavioralFeature_ownedParameterSet->setClass(uML_BehavioralFeature);
	
	
	uML_BehavioralFeature_raisedException.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_BehavioralFeature_raisedException->setName("raisedException");
	uML_BehavioralFeature_raisedException->setType(get_UML_Type());
	uML_BehavioralFeature_raisedException->setLower(0);
	uML_BehavioralFeature_raisedException->setUpper(-1);
	uML_BehavioralFeature->getOwnedAttribute()->push_back(uML_BehavioralFeature_raisedException);
	uML_BehavioralFeature_raisedException->setClass(uML_BehavioralFeature);
	
	
	
	uML_BehavioralFeature_createReturnResult_String_Type.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_BehavioralFeature_createReturnResult_String_Type->setName("createReturnResult");
	uML_BehavioralFeature_createReturnResult_String_Type_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_BehavioralFeature_createReturnResult_String_Type_return->setName("");
	uML_BehavioralFeature_createReturnResult_String_Type_return->setType(get_UML_Parameter());
	uML_BehavioralFeature_createReturnResult_String_Type_return->setLower(1);
	uML_BehavioralFeature_createReturnResult_String_Type_return->setUpper(1);
	uML_BehavioralFeature_createReturnResult_String_Type_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_BehavioralFeature_createReturnResult_String_Type->getOwnedParameter()->push_back(uML_BehavioralFeature_createReturnResult_String_Type_return);
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name->setName("name");
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name->setLower(0);
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name->setUpper(1);
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_BehavioralFeature_createReturnResult_String_Type->getOwnedParameter()->push_back(uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name);
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type->setName("type");
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type->setType(get_UML_Type());
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type->setLower(0);
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type->setUpper(1);
	uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_BehavioralFeature_createReturnResult_String_Type->getOwnedParameter()->push_back(uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type);
	
	
	uML_BehavioralFeature->getOwnedOperation()->push_back(uML_BehavioralFeature_createReturnResult_String_Type); 
	uML_BehavioralFeature_inputParameters_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_BehavioralFeature_inputParameters_->setName("inputParameters");
	uML_BehavioralFeature_inputParameters_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_BehavioralFeature_inputParameters_result->setName("result");
	uML_BehavioralFeature_inputParameters_result->setType(get_UML_Parameter());
	uML_BehavioralFeature_inputParameters_result->setLower(0);
	uML_BehavioralFeature_inputParameters_result->setUpper(-1);
	uML_BehavioralFeature_inputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_BehavioralFeature_inputParameters_->getOwnedParameter()->push_back(uML_BehavioralFeature_inputParameters_result);
	
	
	uML_BehavioralFeature->getOwnedOperation()->push_back(uML_BehavioralFeature_inputParameters_); 
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace->setName("isDistinguishableFrom");
	uML_BehavioralFeature_isDistinguishableFrom_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_BehavioralFeature_isDistinguishableFrom_result->setName("result");
	uML_BehavioralFeature_isDistinguishableFrom_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_BehavioralFeature_isDistinguishableFrom_result->setLower(1);
	uML_BehavioralFeature_isDistinguishableFrom_result->setUpper(1);
	uML_BehavioralFeature_isDistinguishableFrom_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace->getOwnedParameter()->push_back(uML_BehavioralFeature_isDistinguishableFrom_result);
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_n.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_n->setName("n");
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_n->setType(get_UML_NamedElement());
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_n->setLower(1);
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_n->setUpper(1);
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_n->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace->getOwnedParameter()->push_back(uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_n);
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_ns.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_ns->setName("ns");
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_ns->setType(get_UML_Namespace());
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_ns->setLower(1);
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_ns->setUpper(1);
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_ns->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace->getOwnedParameter()->push_back(uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_ns);
	
	
	uML_BehavioralFeature->getOwnedOperation()->push_back(uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace); 
	uML_BehavioralFeature_outputParameters_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_BehavioralFeature_outputParameters_->setName("outputParameters");
	uML_BehavioralFeature_outputParameters_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_BehavioralFeature_outputParameters_result->setName("result");
	uML_BehavioralFeature_outputParameters_result->setType(get_UML_Parameter());
	uML_BehavioralFeature_outputParameters_result->setLower(0);
	uML_BehavioralFeature_outputParameters_result->setUpper(-1);
	uML_BehavioralFeature_outputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_BehavioralFeature_outputParameters_->getOwnedParameter()->push_back(uML_BehavioralFeature_outputParameters_result);
	
	
	uML_BehavioralFeature->getOwnedOperation()->push_back(uML_BehavioralFeature_outputParameters_); 
	
	


	uML_BehavioredClassifier.reset(uml::UmlFactory::eInstance()->createClass());
	uML_BehavioredClassifier->setName("BehavioredClassifier");
	uML_BehavioredClassifier->setIsAbstract(true);
	uML_BehavioredClassifier->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_BehavioredClassifier);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("class_behavior");
	con->getConstrainedElement()->push_back(uML_BehavioredClassifier);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("classifierBehavior->notEmpty() implies classifierBehavior.specification->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_BehavioredClassifier->getOwnedRule()->push_back(con);
	con->setContext(uML_BehavioredClassifier->getNamespace());
	
	
	uML_BehavioredClassifier_classifierBehavior.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_BehavioredClassifier_classifierBehavior->setName("classifierBehavior");
	uML_BehavioredClassifier_classifierBehavior->setType(get_UML_Behavior());
	uML_BehavioredClassifier_classifierBehavior->setLower(0);
	uML_BehavioredClassifier_classifierBehavior->setUpper(1);
	uML_BehavioredClassifier->getOwnedAttribute()->push_back(uML_BehavioredClassifier_classifierBehavior);
	uML_BehavioredClassifier_classifierBehavior->setClass(uML_BehavioredClassifier);
	
	
	uML_BehavioredClassifier_interfaceRealization.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_BehavioredClassifier_interfaceRealization->setName("interfaceRealization");
	uML_BehavioredClassifier_interfaceRealization->setType(get_UML_InterfaceRealization());
	uML_BehavioredClassifier_interfaceRealization->setLower(0);
	uML_BehavioredClassifier_interfaceRealization->setUpper(-1);
	uML_BehavioredClassifier->getOwnedAttribute()->push_back(uML_BehavioredClassifier_interfaceRealization);
	uML_BehavioredClassifier_interfaceRealization->setClass(uML_BehavioredClassifier);
	
	
	uML_BehavioredClassifier_ownedBehavior.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_BehavioredClassifier_ownedBehavior->setName("ownedBehavior");
	uML_BehavioredClassifier_ownedBehavior->setType(get_UML_Behavior());
	uML_BehavioredClassifier_ownedBehavior->setLower(0);
	uML_BehavioredClassifier_ownedBehavior->setUpper(-1);
	uML_BehavioredClassifier->getOwnedAttribute()->push_back(uML_BehavioredClassifier_ownedBehavior);
	uML_BehavioredClassifier_ownedBehavior->setClass(uML_BehavioredClassifier);
	
	
	
	uML_BehavioredClassifier_getAllImplementedInterfaces_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_BehavioredClassifier_getAllImplementedInterfaces_->setName("getAllImplementedInterfaces");
	uML_BehavioredClassifier_getAllImplementedInterfaces__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_BehavioredClassifier_getAllImplementedInterfaces__return->setName("");
	uML_BehavioredClassifier_getAllImplementedInterfaces__return->setType(get_UML_Interface());
	uML_BehavioredClassifier_getAllImplementedInterfaces__return->setLower(0);
	uML_BehavioredClassifier_getAllImplementedInterfaces__return->setUpper(-1);
	uML_BehavioredClassifier_getAllImplementedInterfaces__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_BehavioredClassifier_getAllImplementedInterfaces_->getOwnedParameter()->push_back(uML_BehavioredClassifier_getAllImplementedInterfaces__return);
	
	
	uML_BehavioredClassifier->getOwnedOperation()->push_back(uML_BehavioredClassifier_getAllImplementedInterfaces_); 
	uML_BehavioredClassifier_getImplementedInterfaces_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_BehavioredClassifier_getImplementedInterfaces_->setName("getImplementedInterfaces");
	uML_BehavioredClassifier_getImplementedInterfaces__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_BehavioredClassifier_getImplementedInterfaces__return->setName("");
	uML_BehavioredClassifier_getImplementedInterfaces__return->setType(get_UML_Interface());
	uML_BehavioredClassifier_getImplementedInterfaces__return->setLower(0);
	uML_BehavioredClassifier_getImplementedInterfaces__return->setUpper(-1);
	uML_BehavioredClassifier_getImplementedInterfaces__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_BehavioredClassifier_getImplementedInterfaces_->getOwnedParameter()->push_back(uML_BehavioredClassifier_getImplementedInterfaces__return);
	
	
	uML_BehavioredClassifier->getOwnedOperation()->push_back(uML_BehavioredClassifier_getImplementedInterfaces_); 
	
	


	uML_BroadcastSignalAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_BroadcastSignalAction->setName("BroadcastSignalAction");
	uML_BroadcastSignalAction->setIsAbstract(false);
	uML_BroadcastSignalAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_BroadcastSignalAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("number_of_arguments");
	con->getConstrainedElement()->push_back(uML_BroadcastSignalAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("argument->size() = signal.allAttributes()->size()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_BroadcastSignalAction->getOwnedRule()->push_back(con);
	con->setContext(uML_BroadcastSignalAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_onport");
	con->getConstrainedElement()->push_back(uML_BroadcastSignalAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("onPort=null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_BroadcastSignalAction->getOwnedRule()->push_back(con);
	con->setContext(uML_BroadcastSignalAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_ordering_multiplicity");
	con->getConstrainedElement()->push_back(uML_BroadcastSignalAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let attribute: OrderedSet(Property) = signal.allAttributes() in"\
	"Sequence{1..argument->size()}->forAll(i | "\
	"	argument->at(i).type.conformsTo(attribute->at(i).type) and "\
	"	argument->at(i).isOrdered = attribute->at(i).isOrdered and"\
	"	argument->at(i).compatibleWith(attribute->at(i)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_BroadcastSignalAction->getOwnedRule()->push_back(con);
	con->setContext(uML_BroadcastSignalAction->getNamespace());
	
	
	uML_BroadcastSignalAction_signal.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_BroadcastSignalAction_signal->setName("signal");
	uML_BroadcastSignalAction_signal->setType(get_UML_Signal());
	uML_BroadcastSignalAction_signal->setLower(1);
	uML_BroadcastSignalAction_signal->setUpper(1);
	uML_BroadcastSignalAction->getOwnedAttribute()->push_back(uML_BroadcastSignalAction_signal);
	uML_BroadcastSignalAction_signal->setClass(uML_BroadcastSignalAction);
	
	
	
	
	


	uML_CallAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_CallAction->setName("CallAction");
	uML_CallAction->setIsAbstract(true);
	uML_CallAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_CallAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("result_pins");
	con->getConstrainedElement()->push_back(uML_CallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let parameter: OrderedSet(Parameter) = self.outputParameters() in"\
	"result->size() = parameter->size() and"\
	"Sequence{1..result->size()}->forAll(i | "\
	"	parameter->at(i).type.conformsTo(result->at(i).type) and "\
	"	parameter->at(i).isOrdered = result->at(i).isOrdered and"\
	"	parameter->at(i).compatibleWith(result->at(i)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CallAction->getOwnedRule()->push_back(con);
	con->setContext(uML_CallAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("argument_pins");
	con->getConstrainedElement()->push_back(uML_CallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let parameter: OrderedSet(Parameter) = self.inputParameters() in"\
	"argument->size() = parameter->size() and"\
	"Sequence{1..argument->size()}->forAll(i | "\
	"	argument->at(i).type.conformsTo(parameter->at(i).type) and "\
	"	argument->at(i).isOrdered = parameter->at(i).isOrdered and"\
	"	argument->at(i).compatibleWith(parameter->at(i)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CallAction->getOwnedRule()->push_back(con);
	con->setContext(uML_CallAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("synchronous_call");
	con->getConstrainedElement()->push_back(uML_CallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result->notEmpty() implies isSynchronous");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CallAction->getOwnedRule()->push_back(con);
	con->setContext(uML_CallAction->getNamespace());
	
	
	uML_CallAction_isSynchronous.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_CallAction_isSynchronous->setName("isSynchronous");
	uML_CallAction_isSynchronous->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_CallAction_isSynchronous->setLower(1);
	uML_CallAction_isSynchronous->setUpper(1);
	uML_CallAction->getOwnedAttribute()->push_back(uML_CallAction_isSynchronous);
	uML_CallAction_isSynchronous->setClass(uML_CallAction);
	uML_CallAction_isSynchronous->setDefaultValue(uML_CallAction_isSynchronous_defaultValue_LiteralBoolean_UML_CallAction_isSynchronous);
	
	uML_CallAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_CallAction_result->setName("result");
	uML_CallAction_result->setType(get_UML_OutputPin());
	uML_CallAction_result->setLower(0);
	uML_CallAction_result->setUpper(-1);
	uML_CallAction->getOwnedAttribute()->push_back(uML_CallAction_result);
	uML_CallAction_result->setClass(uML_CallAction);
	
	
	
	uML_CallAction_inputParameters_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_CallAction_inputParameters_->setName("inputParameters");
	uML_CallAction_inputParameters_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_CallAction_inputParameters_result->setName("result");
	uML_CallAction_inputParameters_result->setType(get_UML_Parameter());
	uML_CallAction_inputParameters_result->setLower(0);
	uML_CallAction_inputParameters_result->setUpper(-1);
	uML_CallAction_inputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_CallAction_inputParameters_->getOwnedParameter()->push_back(uML_CallAction_inputParameters_result);
	
	
	uML_CallAction->getOwnedOperation()->push_back(uML_CallAction_inputParameters_); 
	uML_CallAction_outputParameters_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_CallAction_outputParameters_->setName("outputParameters");
	uML_CallAction_outputParameters_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_CallAction_outputParameters_result->setName("result");
	uML_CallAction_outputParameters_result->setType(get_UML_Parameter());
	uML_CallAction_outputParameters_result->setLower(0);
	uML_CallAction_outputParameters_result->setUpper(-1);
	uML_CallAction_outputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_CallAction_outputParameters_->getOwnedParameter()->push_back(uML_CallAction_outputParameters_result);
	
	
	uML_CallAction->getOwnedOperation()->push_back(uML_CallAction_outputParameters_); 
	
	


	uML_CallBehaviorAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_CallBehaviorAction->setName("CallBehaviorAction");
	uML_CallBehaviorAction->setIsAbstract(false);
	uML_CallBehaviorAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_CallBehaviorAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_onport");
	con->getConstrainedElement()->push_back(uML_CallBehaviorAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("onPort=null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CallBehaviorAction->getOwnedRule()->push_back(con);
	con->setContext(uML_CallBehaviorAction->getNamespace());
	
	
	uML_CallBehaviorAction_behavior.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_CallBehaviorAction_behavior->setName("behavior");
	uML_CallBehaviorAction_behavior->setType(get_UML_Behavior());
	uML_CallBehaviorAction_behavior->setLower(1);
	uML_CallBehaviorAction_behavior->setUpper(1);
	uML_CallBehaviorAction->getOwnedAttribute()->push_back(uML_CallBehaviorAction_behavior);
	uML_CallBehaviorAction_behavior->setClass(uML_CallBehaviorAction);
	
	
	
	uML_CallBehaviorAction_inputParameters_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_CallBehaviorAction_inputParameters_->setName("inputParameters");
	uML_CallBehaviorAction_inputParameters_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_CallBehaviorAction_inputParameters_result->setName("result");
	uML_CallBehaviorAction_inputParameters_result->setType(get_UML_Parameter());
	uML_CallBehaviorAction_inputParameters_result->setLower(0);
	uML_CallBehaviorAction_inputParameters_result->setUpper(-1);
	uML_CallBehaviorAction_inputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_CallBehaviorAction_inputParameters_->getOwnedParameter()->push_back(uML_CallBehaviorAction_inputParameters_result);
	
	
	uML_CallBehaviorAction->getOwnedOperation()->push_back(uML_CallBehaviorAction_inputParameters_); 
	uML_CallBehaviorAction_outputParameters_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_CallBehaviorAction_outputParameters_->setName("outputParameters");
	uML_CallBehaviorAction_outputParameters_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_CallBehaviorAction_outputParameters_result->setName("result");
	uML_CallBehaviorAction_outputParameters_result->setType(get_UML_Parameter());
	uML_CallBehaviorAction_outputParameters_result->setLower(0);
	uML_CallBehaviorAction_outputParameters_result->setUpper(-1);
	uML_CallBehaviorAction_outputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_CallBehaviorAction_outputParameters_->getOwnedParameter()->push_back(uML_CallBehaviorAction_outputParameters_result);
	
	
	uML_CallBehaviorAction->getOwnedOperation()->push_back(uML_CallBehaviorAction_outputParameters_); 
	
	


	uML_CallEvent.reset(uml::UmlFactory::eInstance()->createClass());
	uML_CallEvent->setName("CallEvent");
	uML_CallEvent->setIsAbstract(false);
	uML_CallEvent->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_CallEvent);
	
	//constraints
	
	
	uML_CallEvent_operation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_CallEvent_operation->setName("operation");
	uML_CallEvent_operation->setType(get_UML_Operation());
	uML_CallEvent_operation->setLower(1);
	uML_CallEvent_operation->setUpper(1);
	uML_CallEvent->getOwnedAttribute()->push_back(uML_CallEvent_operation);
	uML_CallEvent_operation->setClass(uML_CallEvent);
	
	
	
	
	


	uML_CallOperationAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_CallOperationAction->setName("CallOperationAction");
	uML_CallOperationAction->setIsAbstract(false);
	uML_CallOperationAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_CallOperationAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_target_pin");
	con->getConstrainedElement()->push_back(uML_CallOperationAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("if onPort=null then  target.type.oclAsType(Classifier).allFeatures()->includes(operation)"\
	"else target.type.oclAsType(Classifier).allFeatures()->includes(onPort) and onPort.provided->union(onPort.required).allFeatures()->includes(operation)"\
	"endif");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CallOperationAction->getOwnedRule()->push_back(con);
	con->setContext(uML_CallOperationAction->getNamespace());
	
	
	uML_CallOperationAction_operation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_CallOperationAction_operation->setName("operation");
	uML_CallOperationAction_operation->setType(get_UML_Operation());
	uML_CallOperationAction_operation->setLower(1);
	uML_CallOperationAction_operation->setUpper(1);
	uML_CallOperationAction->getOwnedAttribute()->push_back(uML_CallOperationAction_operation);
	uML_CallOperationAction_operation->setClass(uML_CallOperationAction);
	
	
	uML_CallOperationAction_target.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_CallOperationAction_target->setName("target");
	uML_CallOperationAction_target->setType(get_UML_InputPin());
	uML_CallOperationAction_target->setLower(1);
	uML_CallOperationAction_target->setUpper(1);
	uML_CallOperationAction->getOwnedAttribute()->push_back(uML_CallOperationAction_target);
	uML_CallOperationAction_target->setClass(uML_CallOperationAction);
	
	
	
	uML_CallOperationAction_inputParameters_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_CallOperationAction_inputParameters_->setName("inputParameters");
	uML_CallOperationAction_inputParameters_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_CallOperationAction_inputParameters_result->setName("result");
	uML_CallOperationAction_inputParameters_result->setType(get_UML_Parameter());
	uML_CallOperationAction_inputParameters_result->setLower(0);
	uML_CallOperationAction_inputParameters_result->setUpper(-1);
	uML_CallOperationAction_inputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_CallOperationAction_inputParameters_->getOwnedParameter()->push_back(uML_CallOperationAction_inputParameters_result);
	
	
	uML_CallOperationAction->getOwnedOperation()->push_back(uML_CallOperationAction_inputParameters_); 
	uML_CallOperationAction_outputParameters_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_CallOperationAction_outputParameters_->setName("outputParameters");
	uML_CallOperationAction_outputParameters_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_CallOperationAction_outputParameters_result->setName("result");
	uML_CallOperationAction_outputParameters_result->setType(get_UML_Parameter());
	uML_CallOperationAction_outputParameters_result->setLower(0);
	uML_CallOperationAction_outputParameters_result->setUpper(-1);
	uML_CallOperationAction_outputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_CallOperationAction_outputParameters_->getOwnedParameter()->push_back(uML_CallOperationAction_outputParameters_result);
	
	
	uML_CallOperationAction->getOwnedOperation()->push_back(uML_CallOperationAction_outputParameters_); 
	
	


	uML_CentralBufferNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_CentralBufferNode->setName("CentralBufferNode");
	uML_CentralBufferNode->setIsAbstract(false);
	uML_CentralBufferNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_CentralBufferNode);
	
	//constraints
	
	
	
	
	


	uML_ChangeEvent.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ChangeEvent->setName("ChangeEvent");
	uML_ChangeEvent->setIsAbstract(false);
	uML_ChangeEvent->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ChangeEvent);
	
	//constraints
	
	
	uML_ChangeEvent_changeExpression.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ChangeEvent_changeExpression->setName("changeExpression");
	uML_ChangeEvent_changeExpression->setType(get_UML_ValueSpecification());
	uML_ChangeEvent_changeExpression->setLower(1);
	uML_ChangeEvent_changeExpression->setUpper(1);
	uML_ChangeEvent->getOwnedAttribute()->push_back(uML_ChangeEvent_changeExpression);
	uML_ChangeEvent_changeExpression->setClass(uML_ChangeEvent);
	
	
	
	
	


	uML_Class.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Class->setName("Class");
	uML_Class->setIsAbstract(false);
	uML_Class->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Class);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("passive_class");
	con->getConstrainedElement()->push_back(uML_Class);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not isActive implies (ownedReception->isEmpty() and classifierBehavior = null)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Class->getOwnedRule()->push_back(con);
	con->setContext(uML_Class->getNamespace());
	
	
	uML_Class_extension.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Class_extension->setName("extension");
	uML_Class_extension->setType(get_UML_Extension());
	uML_Class_extension->setLower(0);
	uML_Class_extension->setUpper(-1);
	uML_Class->getOwnedAttribute()->push_back(uML_Class_extension);
	uML_Class_extension->setClass(uML_Class);
	
	
	uML_Class_isAbstract.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Class_isAbstract->setName("isAbstract");
	uML_Class_isAbstract->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Class_isAbstract->setLower(1);
	uML_Class_isAbstract->setUpper(1);
	uML_Class->getOwnedAttribute()->push_back(uML_Class_isAbstract);
	uML_Class_isAbstract->setClass(uML_Class);
	uML_Class_isAbstract->setDefaultValue(uML_Class_isAbstract_defaultValue_LiteralBoolean_UML_Class_isAbstract);
	
	uML_Class_isActive.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Class_isActive->setName("isActive");
	uML_Class_isActive->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Class_isActive->setLower(1);
	uML_Class_isActive->setUpper(1);
	uML_Class->getOwnedAttribute()->push_back(uML_Class_isActive);
	uML_Class_isActive->setClass(uML_Class);
	uML_Class_isActive->setDefaultValue(uML_Class_isActive_defaultValue_LiteralBoolean_UML_Class_isActive);
	
	uML_Class_nestedClassifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Class_nestedClassifier->setName("nestedClassifier");
	uML_Class_nestedClassifier->setType(get_UML_Classifier());
	uML_Class_nestedClassifier->setLower(0);
	uML_Class_nestedClassifier->setUpper(-1);
	uML_Class->getOwnedAttribute()->push_back(uML_Class_nestedClassifier);
	uML_Class_nestedClassifier->setClass(uML_Class);
	
	
	uML_Class_ownedAttribute.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Class_ownedAttribute->setName("ownedAttribute");
	uML_Class_ownedAttribute->setType(get_UML_Property());
	uML_Class_ownedAttribute->setLower(0);
	uML_Class_ownedAttribute->setUpper(-1);
	uML_Class->getOwnedAttribute()->push_back(uML_Class_ownedAttribute);
	uML_Class_ownedAttribute->setClass(uML_Class);
	
	
	uML_Class_ownedOperation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Class_ownedOperation->setName("ownedOperation");
	uML_Class_ownedOperation->setType(get_UML_Operation());
	uML_Class_ownedOperation->setLower(0);
	uML_Class_ownedOperation->setUpper(-1);
	uML_Class->getOwnedAttribute()->push_back(uML_Class_ownedOperation);
	uML_Class_ownedOperation->setClass(uML_Class);
	
	
	uML_Class_ownedReception.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Class_ownedReception->setName("ownedReception");
	uML_Class_ownedReception->setType(get_UML_Reception());
	uML_Class_ownedReception->setLower(0);
	uML_Class_ownedReception->setUpper(-1);
	uML_Class->getOwnedAttribute()->push_back(uML_Class_ownedReception);
	uML_Class_ownedReception->setClass(uML_Class);
	
	
	uML_Class_superClass.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Class_superClass->setName("superClass");
	uML_Class_superClass->setType(get_UML_Class());
	uML_Class_superClass->setLower(0);
	uML_Class_superClass->setUpper(-1);
	uML_Class->getOwnedAttribute()->push_back(uML_Class_superClass);
	uML_Class_superClass->setClass(uML_Class);
	
	
	
	uML_Class_createOwnedOperation_String_String_Type_Type.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Class_createOwnedOperation_String_String_Type_Type->setName("createOwnedOperation");
	uML_Class_createOwnedOperation_String_String_Type_Type_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Class_createOwnedOperation_String_String_Type_Type_return->setName("");
	uML_Class_createOwnedOperation_String_String_Type_Type_return->setType(get_UML_Operation());
	uML_Class_createOwnedOperation_String_String_Type_Type_return->setLower(1);
	uML_Class_createOwnedOperation_String_String_Type_Type_return->setUpper(1);
	uML_Class_createOwnedOperation_String_String_Type_Type_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Class_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_Class_createOwnedOperation_String_String_Type_Type_return);
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name->setName("name");
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name->setLower(0);
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name->setUpper(1);
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Class_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name);
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames->setName("parameterNames");
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames->setLower(0);
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames->setUpper(-1);
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Class_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames);
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes->setName("parameterTypes");
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes->setType(get_UML_Type());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes->setLower(0);
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes->setUpper(-1);
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Class_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes);
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType->setName("returnType");
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType->setType(get_UML_Type());
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType->setLower(0);
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType->setUpper(1);
	uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Class_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType);
	
	
	uML_Class->getOwnedOperation()->push_back(uML_Class_createOwnedOperation_String_String_Type_Type); 
	uML_Class_extension_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Class_extension_->setName("extension");
	uML_Class_extension_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Class_extension_result->setName("result");
	uML_Class_extension_result->setType(get_UML_Extension());
	uML_Class_extension_result->setLower(0);
	uML_Class_extension_result->setUpper(-1);
	uML_Class_extension_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Class_extension_->getOwnedParameter()->push_back(uML_Class_extension_result);
	
	
	uML_Class->getOwnedOperation()->push_back(uML_Class_extension_); 
	uML_Class_isMetaclass_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Class_isMetaclass_->setName("isMetaclass");
	uML_Class_isMetaclass__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Class_isMetaclass__return->setName("");
	uML_Class_isMetaclass__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Class_isMetaclass__return->setLower(1);
	uML_Class_isMetaclass__return->setUpper(1);
	uML_Class_isMetaclass__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Class_isMetaclass_->getOwnedParameter()->push_back(uML_Class_isMetaclass__return);
	
	
	uML_Class->getOwnedOperation()->push_back(uML_Class_isMetaclass_); 
	uML_Class_superClass_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Class_superClass_->setName("superClass");
	uML_Class_superClass_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Class_superClass_result->setName("result");
	uML_Class_superClass_result->setType(get_UML_Class());
	uML_Class_superClass_result->setLower(0);
	uML_Class_superClass_result->setUpper(-1);
	uML_Class_superClass_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Class_superClass_->getOwnedParameter()->push_back(uML_Class_superClass_result);
	
	
	uML_Class->getOwnedOperation()->push_back(uML_Class_superClass_); 
	
	


	uML_Classifier.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Classifier->setName("Classifier");
	uML_Classifier->setIsAbstract(true);
	uML_Classifier->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Classifier);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("maps_to_generalization_set");
	con->getConstrainedElement()->push_back(uML_Classifier);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("powertypeExtent->forAll( gs | "\
	"  gs.generalization->forAll( gen | "\
	"    not (gen.general = self) and not gen.general.allParents()->includes(self) and not (gen.specific = self) and not self.allParents()->includes(gen.specific) "\
	"  ))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Classifier->getOwnedRule()->push_back(con);
	con->setContext(uML_Classifier->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_cycles_in_generalization");
	con->getConstrainedElement()->push_back(uML_Classifier);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not allParents()->includes(self)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Classifier->getOwnedRule()->push_back(con);
	con->setContext(uML_Classifier->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("non_final_parents");
	con->getConstrainedElement()->push_back(uML_Classifier);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("parents()->forAll(not isFinalSpecialization)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Classifier->getOwnedRule()->push_back(con);
	con->setContext(uML_Classifier->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("specialize_type");
	con->getConstrainedElement()->push_back(uML_Classifier);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("parents()->forAll(c | self.maySpecializeType(c))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Classifier->getOwnedRule()->push_back(con);
	con->setContext(uML_Classifier->getNamespace());
	
	
	uML_Classifier_attribute.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_attribute->setName("attribute");
	uML_Classifier_attribute->setType(get_UML_Property());
	uML_Classifier_attribute->setLower(0);
	uML_Classifier_attribute->setUpper(-1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_attribute);
	uML_Classifier_attribute->setClass(uML_Classifier);
	
	
	uML_Classifier_collaborationUse.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_collaborationUse->setName("collaborationUse");
	uML_Classifier_collaborationUse->setType(get_UML_CollaborationUse());
	uML_Classifier_collaborationUse->setLower(0);
	uML_Classifier_collaborationUse->setUpper(-1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_collaborationUse);
	uML_Classifier_collaborationUse->setClass(uML_Classifier);
	
	
	uML_Classifier_feature.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_feature->setName("feature");
	uML_Classifier_feature->setType(get_UML_Feature());
	uML_Classifier_feature->setLower(0);
	uML_Classifier_feature->setUpper(-1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_feature);
	uML_Classifier_feature->setClass(uML_Classifier);
	
	
	uML_Classifier_general.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_general->setName("general");
	uML_Classifier_general->setType(get_UML_Classifier());
	uML_Classifier_general->setLower(0);
	uML_Classifier_general->setUpper(-1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_general);
	uML_Classifier_general->setClass(uML_Classifier);
	
	
	uML_Classifier_generalization.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_generalization->setName("generalization");
	uML_Classifier_generalization->setType(get_UML_Generalization());
	uML_Classifier_generalization->setLower(0);
	uML_Classifier_generalization->setUpper(-1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_generalization);
	uML_Classifier_generalization->setClass(uML_Classifier);
	
	
	uML_Classifier_inheritedMember.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_inheritedMember->setName("inheritedMember");
	uML_Classifier_inheritedMember->setType(get_UML_NamedElement());
	uML_Classifier_inheritedMember->setLower(0);
	uML_Classifier_inheritedMember->setUpper(-1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_inheritedMember);
	uML_Classifier_inheritedMember->setClass(uML_Classifier);
	
	
	uML_Classifier_isAbstract.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_isAbstract->setName("isAbstract");
	uML_Classifier_isAbstract->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Classifier_isAbstract->setLower(1);
	uML_Classifier_isAbstract->setUpper(1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_isAbstract);
	uML_Classifier_isAbstract->setClass(uML_Classifier);
	uML_Classifier_isAbstract->setDefaultValue(uML_Classifier_isAbstract_defaultValue_LiteralBoolean_UML_Classifier_isAbstract);
	
	uML_Classifier_isFinalSpecialization.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_isFinalSpecialization->setName("isFinalSpecialization");
	uML_Classifier_isFinalSpecialization->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Classifier_isFinalSpecialization->setLower(1);
	uML_Classifier_isFinalSpecialization->setUpper(1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_isFinalSpecialization);
	uML_Classifier_isFinalSpecialization->setClass(uML_Classifier);
	uML_Classifier_isFinalSpecialization->setDefaultValue(uML_Classifier_isFinalSpecialization_defaultValue_LiteralBoolean_UML_Classifier_isFinalSpecialization);
	
	uML_Classifier_ownedTemplateSignature.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_ownedTemplateSignature->setName("ownedTemplateSignature");
	uML_Classifier_ownedTemplateSignature->setType(get_UML_RedefinableTemplateSignature());
	uML_Classifier_ownedTemplateSignature->setLower(0);
	uML_Classifier_ownedTemplateSignature->setUpper(1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_ownedTemplateSignature);
	uML_Classifier_ownedTemplateSignature->setClass(uML_Classifier);
	
	
	uML_Classifier_ownedUseCase.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_ownedUseCase->setName("ownedUseCase");
	uML_Classifier_ownedUseCase->setType(get_UML_UseCase());
	uML_Classifier_ownedUseCase->setLower(0);
	uML_Classifier_ownedUseCase->setUpper(-1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_ownedUseCase);
	uML_Classifier_ownedUseCase->setClass(uML_Classifier);
	
	
	uML_Classifier_powertypeExtent.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_powertypeExtent->setName("powertypeExtent");
	uML_Classifier_powertypeExtent->setType(get_UML_GeneralizationSet());
	uML_Classifier_powertypeExtent->setLower(0);
	uML_Classifier_powertypeExtent->setUpper(-1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_powertypeExtent);
	uML_Classifier_powertypeExtent->setClass(uML_Classifier);
	
	
	uML_Classifier_redefinedClassifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_redefinedClassifier->setName("redefinedClassifier");
	uML_Classifier_redefinedClassifier->setType(get_UML_Classifier());
	uML_Classifier_redefinedClassifier->setLower(0);
	uML_Classifier_redefinedClassifier->setUpper(-1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_redefinedClassifier);
	uML_Classifier_redefinedClassifier->setClass(uML_Classifier);
	
	
	uML_Classifier_representation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_representation->setName("representation");
	uML_Classifier_representation->setType(get_UML_CollaborationUse());
	uML_Classifier_representation->setLower(0);
	uML_Classifier_representation->setUpper(1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_representation);
	uML_Classifier_representation->setClass(uML_Classifier);
	
	
	uML_Classifier_substitution.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_substitution->setName("substitution");
	uML_Classifier_substitution->setType(get_UML_Substitution());
	uML_Classifier_substitution->setLower(0);
	uML_Classifier_substitution->setUpper(-1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_substitution);
	uML_Classifier_substitution->setClass(uML_Classifier);
	
	
	uML_Classifier_templateParameter.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_templateParameter->setName("templateParameter");
	uML_Classifier_templateParameter->setType(get_UML_ClassifierTemplateParameter());
	uML_Classifier_templateParameter->setLower(0);
	uML_Classifier_templateParameter->setUpper(1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_templateParameter);
	uML_Classifier_templateParameter->setClass(uML_Classifier);
	
	
	uML_Classifier_useCase.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Classifier_useCase->setName("useCase");
	uML_Classifier_useCase->setType(get_UML_UseCase());
	uML_Classifier_useCase->setLower(0);
	uML_Classifier_useCase->setUpper(-1);
	uML_Classifier->getOwnedAttribute()->push_back(uML_Classifier_useCase);
	uML_Classifier_useCase->setClass(uML_Classifier);
	
	
	
	uML_Classifier_allAttributes_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_allAttributes_->setName("allAttributes");
	uML_Classifier_allAttributes_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_allAttributes_result->setName("result");
	uML_Classifier_allAttributes_result->setType(get_UML_Property());
	uML_Classifier_allAttributes_result->setLower(0);
	uML_Classifier_allAttributes_result->setUpper(-1);
	uML_Classifier_allAttributes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_allAttributes_->getOwnedParameter()->push_back(uML_Classifier_allAttributes_result);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_allAttributes_); 
	uML_Classifier_allFeatures_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_allFeatures_->setName("allFeatures");
	uML_Classifier_allFeatures_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_allFeatures_result->setName("result");
	uML_Classifier_allFeatures_result->setType(get_UML_Feature());
	uML_Classifier_allFeatures_result->setLower(0);
	uML_Classifier_allFeatures_result->setUpper(-1);
	uML_Classifier_allFeatures_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_allFeatures_->getOwnedParameter()->push_back(uML_Classifier_allFeatures_result);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_allFeatures_); 
	uML_Classifier_allParents_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_allParents_->setName("allParents");
	uML_Classifier_allParents_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_allParents_result->setName("result");
	uML_Classifier_allParents_result->setType(get_UML_Classifier());
	uML_Classifier_allParents_result->setLower(0);
	uML_Classifier_allParents_result->setUpper(-1);
	uML_Classifier_allParents_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_allParents_->getOwnedParameter()->push_back(uML_Classifier_allParents_result);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_allParents_); 
	uML_Classifier_allRealizedInterfaces_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_allRealizedInterfaces_->setName("allRealizedInterfaces");
	uML_Classifier_allRealizedInterfaces_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_allRealizedInterfaces_result->setName("result");
	uML_Classifier_allRealizedInterfaces_result->setType(get_UML_Interface());
	uML_Classifier_allRealizedInterfaces_result->setLower(0);
	uML_Classifier_allRealizedInterfaces_result->setUpper(-1);
	uML_Classifier_allRealizedInterfaces_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_allRealizedInterfaces_->getOwnedParameter()->push_back(uML_Classifier_allRealizedInterfaces_result);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_allRealizedInterfaces_); 
	uML_Classifier_allSlottableFeatures_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_allSlottableFeatures_->setName("allSlottableFeatures");
	uML_Classifier_allSlottableFeatures_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_allSlottableFeatures_result->setName("result");
	uML_Classifier_allSlottableFeatures_result->setType(get_UML_StructuralFeature());
	uML_Classifier_allSlottableFeatures_result->setLower(0);
	uML_Classifier_allSlottableFeatures_result->setUpper(-1);
	uML_Classifier_allSlottableFeatures_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_allSlottableFeatures_->getOwnedParameter()->push_back(uML_Classifier_allSlottableFeatures_result);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_allSlottableFeatures_); 
	uML_Classifier_allUsedInterfaces_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_allUsedInterfaces_->setName("allUsedInterfaces");
	uML_Classifier_allUsedInterfaces_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_allUsedInterfaces_result->setName("result");
	uML_Classifier_allUsedInterfaces_result->setType(get_UML_Interface());
	uML_Classifier_allUsedInterfaces_result->setLower(0);
	uML_Classifier_allUsedInterfaces_result->setUpper(-1);
	uML_Classifier_allUsedInterfaces_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_allUsedInterfaces_->getOwnedParameter()->push_back(uML_Classifier_allUsedInterfaces_result);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_allUsedInterfaces_); 
	uML_Classifier_conformsTo_Type.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_conformsTo_Type->setName("conformsTo");
	uML_Classifier_conformsTo_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_conformsTo_result->setName("result");
	uML_Classifier_conformsTo_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Classifier_conformsTo_result->setLower(1);
	uML_Classifier_conformsTo_result->setUpper(1);
	uML_Classifier_conformsTo_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_conformsTo_Type->getOwnedParameter()->push_back(uML_Classifier_conformsTo_result);
	uML_Classifier_conformsTo_Type_UML_Classifier_conformsTo_other.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_conformsTo_Type_UML_Classifier_conformsTo_other->setName("other");
	uML_Classifier_conformsTo_Type_UML_Classifier_conformsTo_other->setType(get_UML_Type());
	uML_Classifier_conformsTo_Type_UML_Classifier_conformsTo_other->setLower(1);
	uML_Classifier_conformsTo_Type_UML_Classifier_conformsTo_other->setUpper(1);
	uML_Classifier_conformsTo_Type_UML_Classifier_conformsTo_other->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Classifier_conformsTo_Type->getOwnedParameter()->push_back(uML_Classifier_conformsTo_Type_UML_Classifier_conformsTo_other);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_conformsTo_Type); 
	uML_Classifier_directlyRealizedInterfaces_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_directlyRealizedInterfaces_->setName("directlyRealizedInterfaces");
	uML_Classifier_directlyRealizedInterfaces_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_directlyRealizedInterfaces_result->setName("result");
	uML_Classifier_directlyRealizedInterfaces_result->setType(get_UML_Interface());
	uML_Classifier_directlyRealizedInterfaces_result->setLower(0);
	uML_Classifier_directlyRealizedInterfaces_result->setUpper(-1);
	uML_Classifier_directlyRealizedInterfaces_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_directlyRealizedInterfaces_->getOwnedParameter()->push_back(uML_Classifier_directlyRealizedInterfaces_result);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_directlyRealizedInterfaces_); 
	uML_Classifier_directlyUsedInterfaces_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_directlyUsedInterfaces_->setName("directlyUsedInterfaces");
	uML_Classifier_directlyUsedInterfaces_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_directlyUsedInterfaces_result->setName("result");
	uML_Classifier_directlyUsedInterfaces_result->setType(get_UML_Interface());
	uML_Classifier_directlyUsedInterfaces_result->setLower(0);
	uML_Classifier_directlyUsedInterfaces_result->setUpper(-1);
	uML_Classifier_directlyUsedInterfaces_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_directlyUsedInterfaces_->getOwnedParameter()->push_back(uML_Classifier_directlyUsedInterfaces_result);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_directlyUsedInterfaces_); 
	uML_Classifier_general_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_general_->setName("general");
	uML_Classifier_general_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_general_result->setName("result");
	uML_Classifier_general_result->setType(get_UML_Classifier());
	uML_Classifier_general_result->setLower(0);
	uML_Classifier_general_result->setUpper(-1);
	uML_Classifier_general_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_general_->getOwnedParameter()->push_back(uML_Classifier_general_result);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_general_); 
	uML_Classifier_getAllAttributes_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_getAllAttributes_->setName("getAllAttributes");
	uML_Classifier_getAllAttributes__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_getAllAttributes__return->setName("");
	uML_Classifier_getAllAttributes__return->setType(get_UML_Property());
	uML_Classifier_getAllAttributes__return->setLower(0);
	uML_Classifier_getAllAttributes__return->setUpper(-1);
	uML_Classifier_getAllAttributes__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_getAllAttributes_->getOwnedParameter()->push_back(uML_Classifier_getAllAttributes__return);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_getAllAttributes_); 
	uML_Classifier_getAllOperations_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_getAllOperations_->setName("getAllOperations");
	uML_Classifier_getAllOperations__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_getAllOperations__return->setName("");
	uML_Classifier_getAllOperations__return->setType(get_UML_Operation());
	uML_Classifier_getAllOperations__return->setLower(0);
	uML_Classifier_getAllOperations__return->setUpper(-1);
	uML_Classifier_getAllOperations__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_getAllOperations_->getOwnedParameter()->push_back(uML_Classifier_getAllOperations__return);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_getAllOperations_); 
	uML_Classifier_getAllUsedInterfaces_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_getAllUsedInterfaces_->setName("getAllUsedInterfaces");
	uML_Classifier_getAllUsedInterfaces__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_getAllUsedInterfaces__return->setName("");
	uML_Classifier_getAllUsedInterfaces__return->setType(get_UML_Interface());
	uML_Classifier_getAllUsedInterfaces__return->setLower(0);
	uML_Classifier_getAllUsedInterfaces__return->setUpper(-1);
	uML_Classifier_getAllUsedInterfaces__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_getAllUsedInterfaces_->getOwnedParameter()->push_back(uML_Classifier_getAllUsedInterfaces__return);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_getAllUsedInterfaces_); 
	uML_Classifier_getOperation_String_String_Type.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_getOperation_String_String_Type->setName("getOperation");
	uML_Classifier_getOperation_String_String_Type_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_getOperation_String_String_Type_return->setName("");
	uML_Classifier_getOperation_String_String_Type_return->setType(get_UML_Operation());
	uML_Classifier_getOperation_String_String_Type_return->setLower(0);
	uML_Classifier_getOperation_String_String_Type_return->setUpper(1);
	uML_Classifier_getOperation_String_String_Type_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_getOperation_String_String_Type->getOwnedParameter()->push_back(uML_Classifier_getOperation_String_String_Type_return);
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name->setName("name");
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name->setLower(0);
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name->setUpper(1);
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Classifier_getOperation_String_String_Type->getOwnedParameter()->push_back(uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name);
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames->setName("parameterNames");
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames->setLower(0);
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames->setUpper(-1);
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Classifier_getOperation_String_String_Type->getOwnedParameter()->push_back(uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames);
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes->setName("parameterTypes");
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes->setType(get_UML_Type());
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes->setLower(0);
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes->setUpper(-1);
	uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Classifier_getOperation_String_String_Type->getOwnedParameter()->push_back(uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_getOperation_String_String_Type); 
	uML_Classifier_getOperation_String_String_Type_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_getOperation_String_String_Type_Boolean->setName("getOperation");
	uML_Classifier_getOperation_String_String_Type_Boolean_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_getOperation_String_String_Type_Boolean_return->setName("");
	uML_Classifier_getOperation_String_String_Type_Boolean_return->setType(get_UML_Operation());
	uML_Classifier_getOperation_String_String_Type_Boolean_return->setLower(0);
	uML_Classifier_getOperation_String_String_Type_Boolean_return->setUpper(1);
	uML_Classifier_getOperation_String_String_Type_Boolean_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_getOperation_String_String_Type_Boolean->getOwnedParameter()->push_back(uML_Classifier_getOperation_String_String_Type_Boolean_return);
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name->setName("name");
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name->setLower(0);
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name->setUpper(1);
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Classifier_getOperation_String_String_Type_Boolean->getOwnedParameter()->push_back(uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name);
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames->setName("parameterNames");
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames->setLower(0);
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames->setUpper(-1);
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Classifier_getOperation_String_String_Type_Boolean->getOwnedParameter()->push_back(uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames);
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes->setName("parameterTypes");
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes->setType(get_UML_Type());
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes->setLower(0);
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes->setUpper(-1);
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Classifier_getOperation_String_String_Type_Boolean->getOwnedParameter()->push_back(uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes);
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_ignoreCase.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_ignoreCase->setName("ignoreCase");
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_ignoreCase->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_ignoreCase->setLower(1);
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_ignoreCase->setUpper(1);
	uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_ignoreCase->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Classifier_getOperation_String_String_Type_Boolean->getOwnedParameter()->push_back(uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_ignoreCase);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_getOperation_String_String_Type_Boolean); 
	uML_Classifier_getOperations_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_getOperations_->setName("getOperations");
	uML_Classifier_getOperations__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_getOperations__return->setName("");
	uML_Classifier_getOperations__return->setType(get_UML_Operation());
	uML_Classifier_getOperations__return->setLower(0);
	uML_Classifier_getOperations__return->setUpper(-1);
	uML_Classifier_getOperations__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_getOperations_->getOwnedParameter()->push_back(uML_Classifier_getOperations__return);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_getOperations_); 
	uML_Classifier_getUsedInterfaces_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_getUsedInterfaces_->setName("getUsedInterfaces");
	uML_Classifier_getUsedInterfaces__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_getUsedInterfaces__return->setName("");
	uML_Classifier_getUsedInterfaces__return->setType(get_UML_Interface());
	uML_Classifier_getUsedInterfaces__return->setLower(0);
	uML_Classifier_getUsedInterfaces__return->setUpper(-1);
	uML_Classifier_getUsedInterfaces__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_getUsedInterfaces_->getOwnedParameter()->push_back(uML_Classifier_getUsedInterfaces__return);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_getUsedInterfaces_); 
	uML_Classifier_hasVisibilityOf_NamedElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_hasVisibilityOf_NamedElement->setName("hasVisibilityOf");
	uML_Classifier_hasVisibilityOf_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_hasVisibilityOf_result->setName("result");
	uML_Classifier_hasVisibilityOf_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Classifier_hasVisibilityOf_result->setLower(1);
	uML_Classifier_hasVisibilityOf_result->setUpper(1);
	uML_Classifier_hasVisibilityOf_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_hasVisibilityOf_NamedElement->getOwnedParameter()->push_back(uML_Classifier_hasVisibilityOf_result);
	uML_Classifier_hasVisibilityOf_NamedElement_UML_Classifier_hasVisibilityOf_n.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_hasVisibilityOf_NamedElement_UML_Classifier_hasVisibilityOf_n->setName("n");
	uML_Classifier_hasVisibilityOf_NamedElement_UML_Classifier_hasVisibilityOf_n->setType(get_UML_NamedElement());
	uML_Classifier_hasVisibilityOf_NamedElement_UML_Classifier_hasVisibilityOf_n->setLower(1);
	uML_Classifier_hasVisibilityOf_NamedElement_UML_Classifier_hasVisibilityOf_n->setUpper(1);
	uML_Classifier_hasVisibilityOf_NamedElement_UML_Classifier_hasVisibilityOf_n->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Classifier_hasVisibilityOf_NamedElement->getOwnedParameter()->push_back(uML_Classifier_hasVisibilityOf_NamedElement_UML_Classifier_hasVisibilityOf_n);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_hasVisibilityOf_NamedElement); 
	uML_Classifier_inherit_NamedElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_inherit_NamedElement->setName("inherit");
	uML_Classifier_inherit_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_inherit_result->setName("result");
	uML_Classifier_inherit_result->setType(get_UML_NamedElement());
	uML_Classifier_inherit_result->setLower(0);
	uML_Classifier_inherit_result->setUpper(-1);
	uML_Classifier_inherit_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_inherit_NamedElement->getOwnedParameter()->push_back(uML_Classifier_inherit_result);
	uML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs->setName("inhs");
	uML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs->setType(get_UML_NamedElement());
	uML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs->setLower(0);
	uML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs->setUpper(-1);
	uML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Classifier_inherit_NamedElement->getOwnedParameter()->push_back(uML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_inherit_NamedElement); 
	uML_Classifier_inheritableMembers_Classifier.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_inheritableMembers_Classifier->setName("inheritableMembers");
	uML_Classifier_inheritableMembers_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_inheritableMembers_result->setName("result");
	uML_Classifier_inheritableMembers_result->setType(get_UML_NamedElement());
	uML_Classifier_inheritableMembers_result->setLower(0);
	uML_Classifier_inheritableMembers_result->setUpper(-1);
	uML_Classifier_inheritableMembers_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_inheritableMembers_Classifier->getOwnedParameter()->push_back(uML_Classifier_inheritableMembers_result);
	uML_Classifier_inheritableMembers_Classifier_UML_Classifier_inheritableMembers_c.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_inheritableMembers_Classifier_UML_Classifier_inheritableMembers_c->setName("c");
	uML_Classifier_inheritableMembers_Classifier_UML_Classifier_inheritableMembers_c->setType(get_UML_Classifier());
	uML_Classifier_inheritableMembers_Classifier_UML_Classifier_inheritableMembers_c->setLower(1);
	uML_Classifier_inheritableMembers_Classifier_UML_Classifier_inheritableMembers_c->setUpper(1);
	uML_Classifier_inheritableMembers_Classifier_UML_Classifier_inheritableMembers_c->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Classifier_inheritableMembers_Classifier->getOwnedParameter()->push_back(uML_Classifier_inheritableMembers_Classifier_UML_Classifier_inheritableMembers_c);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_inheritableMembers_Classifier); 
	uML_Classifier_inheritedMember_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_inheritedMember_->setName("inheritedMember");
	uML_Classifier_inheritedMember_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_inheritedMember_result->setName("result");
	uML_Classifier_inheritedMember_result->setType(get_UML_NamedElement());
	uML_Classifier_inheritedMember_result->setLower(0);
	uML_Classifier_inheritedMember_result->setUpper(-1);
	uML_Classifier_inheritedMember_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_inheritedMember_->getOwnedParameter()->push_back(uML_Classifier_inheritedMember_result);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_inheritedMember_); 
	uML_Classifier_isSubstitutableFor_Classifier.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_isSubstitutableFor_Classifier->setName("isSubstitutableFor");
	uML_Classifier_isSubstitutableFor_Classifier_UML_Classifier_isSubstitutableFor_contract.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_isSubstitutableFor_Classifier_UML_Classifier_isSubstitutableFor_contract->setName("contract");
	uML_Classifier_isSubstitutableFor_Classifier_UML_Classifier_isSubstitutableFor_contract->setType(get_UML_Classifier());
	uML_Classifier_isSubstitutableFor_Classifier_UML_Classifier_isSubstitutableFor_contract->setLower(1);
	uML_Classifier_isSubstitutableFor_Classifier_UML_Classifier_isSubstitutableFor_contract->setUpper(1);
	uML_Classifier_isSubstitutableFor_Classifier_UML_Classifier_isSubstitutableFor_contract->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Classifier_isSubstitutableFor_Classifier->getOwnedParameter()->push_back(uML_Classifier_isSubstitutableFor_Classifier_UML_Classifier_isSubstitutableFor_contract);
	uML_Classifier_isSubstitutableFor_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_isSubstitutableFor_result->setName("result");
	uML_Classifier_isSubstitutableFor_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Classifier_isSubstitutableFor_result->setLower(1);
	uML_Classifier_isSubstitutableFor_result->setUpper(1);
	uML_Classifier_isSubstitutableFor_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_isSubstitutableFor_Classifier->getOwnedParameter()->push_back(uML_Classifier_isSubstitutableFor_result);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_isSubstitutableFor_Classifier); 
	uML_Classifier_isTemplate_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_isTemplate_->setName("isTemplate");
	uML_Classifier_isTemplate_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_isTemplate_result->setName("result");
	uML_Classifier_isTemplate_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Classifier_isTemplate_result->setLower(1);
	uML_Classifier_isTemplate_result->setUpper(1);
	uML_Classifier_isTemplate_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_isTemplate_->getOwnedParameter()->push_back(uML_Classifier_isTemplate_result);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_isTemplate_); 
	uML_Classifier_maySpecializeType_Classifier.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_maySpecializeType_Classifier->setName("maySpecializeType");
	uML_Classifier_maySpecializeType_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_maySpecializeType_result->setName("result");
	uML_Classifier_maySpecializeType_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Classifier_maySpecializeType_result->setLower(1);
	uML_Classifier_maySpecializeType_result->setUpper(1);
	uML_Classifier_maySpecializeType_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_maySpecializeType_Classifier->getOwnedParameter()->push_back(uML_Classifier_maySpecializeType_result);
	uML_Classifier_maySpecializeType_Classifier_UML_Classifier_maySpecializeType_c.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_maySpecializeType_Classifier_UML_Classifier_maySpecializeType_c->setName("c");
	uML_Classifier_maySpecializeType_Classifier_UML_Classifier_maySpecializeType_c->setType(get_UML_Classifier());
	uML_Classifier_maySpecializeType_Classifier_UML_Classifier_maySpecializeType_c->setLower(1);
	uML_Classifier_maySpecializeType_Classifier_UML_Classifier_maySpecializeType_c->setUpper(1);
	uML_Classifier_maySpecializeType_Classifier_UML_Classifier_maySpecializeType_c->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Classifier_maySpecializeType_Classifier->getOwnedParameter()->push_back(uML_Classifier_maySpecializeType_Classifier_UML_Classifier_maySpecializeType_c);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_maySpecializeType_Classifier); 
	uML_Classifier_parents_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Classifier_parents_->setName("parents");
	uML_Classifier_parents_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Classifier_parents_result->setName("result");
	uML_Classifier_parents_result->setType(get_UML_Classifier());
	uML_Classifier_parents_result->setLower(0);
	uML_Classifier_parents_result->setUpper(-1);
	uML_Classifier_parents_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Classifier_parents_->getOwnedParameter()->push_back(uML_Classifier_parents_result);
	
	
	uML_Classifier->getOwnedOperation()->push_back(uML_Classifier_parents_); 
	
	


	uML_ClassifierTemplateParameter.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ClassifierTemplateParameter->setName("ClassifierTemplateParameter");
	uML_ClassifierTemplateParameter->setIsAbstract(false);
	uML_ClassifierTemplateParameter->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ClassifierTemplateParameter);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("constraining_classifiers_constrain_args");
	con->getConstrainedElement()->push_back(uML_ClassifierTemplateParameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("templateParameterSubstitution.actual->forAll( a |"\
	"  let arg : Classifier = a.oclAsType(Classifier) in"\
	"    constrainingClassifier->forAll("\
	"      cc |  "\
	"         arg = cc or arg.conformsTo(cc) or (allowSubstitutable and arg.isSubstitutableFor(cc))"\
	"      )"\
	")");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ClassifierTemplateParameter->getOwnedRule()->push_back(con);
	con->setContext(uML_ClassifierTemplateParameter->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("has_constraining_classifier");
	con->getConstrainedElement()->push_back(uML_ClassifierTemplateParameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("allowSubstitutable implies constrainingClassifier->notEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ClassifierTemplateParameter->getOwnedRule()->push_back(con);
	con->setContext(uML_ClassifierTemplateParameter->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("constraining_classifiers_constrain_parametered_element");
	con->getConstrainedElement()->push_back(uML_ClassifierTemplateParameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("constrainingClassifier->forAll("\
	"     cc |  parameteredElement = cc or parameteredElement.conformsTo(cc) or (allowSubstitutable and parameteredElement.isSubstitutableFor(cc))"\
	")");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ClassifierTemplateParameter->getOwnedRule()->push_back(con);
	con->setContext(uML_ClassifierTemplateParameter->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("actual_is_classifier");
	con->getConstrainedElement()->push_back(uML_ClassifierTemplateParameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back(" templateParameterSubstitution.actual->forAll(a | a.oclIsKindOf(Classifier))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ClassifierTemplateParameter->getOwnedRule()->push_back(con);
	con->setContext(uML_ClassifierTemplateParameter->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("parametered_element_no_features");
	con->getConstrainedElement()->push_back(uML_ClassifierTemplateParameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("parameteredElement.feature->isEmpty() and (constrainingClassifier->isEmpty() implies  parameteredElement.allParents()->isEmpty())");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ClassifierTemplateParameter->getOwnedRule()->push_back(con);
	con->setContext(uML_ClassifierTemplateParameter->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("matching_abstract");
	con->getConstrainedElement()->push_back(uML_ClassifierTemplateParameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(not parameteredElement.isAbstract) implies templateParameterSubstitution.actual->forAll(a | not a.oclAsType(Classifier).isAbstract)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ClassifierTemplateParameter->getOwnedRule()->push_back(con);
	con->setContext(uML_ClassifierTemplateParameter->getNamespace());
	
	
	uML_ClassifierTemplateParameter_allowSubstitutable.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ClassifierTemplateParameter_allowSubstitutable->setName("allowSubstitutable");
	uML_ClassifierTemplateParameter_allowSubstitutable->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ClassifierTemplateParameter_allowSubstitutable->setLower(1);
	uML_ClassifierTemplateParameter_allowSubstitutable->setUpper(1);
	uML_ClassifierTemplateParameter->getOwnedAttribute()->push_back(uML_ClassifierTemplateParameter_allowSubstitutable);
	uML_ClassifierTemplateParameter_allowSubstitutable->setClass(uML_ClassifierTemplateParameter);
	uML_ClassifierTemplateParameter_allowSubstitutable->setDefaultValue(uML_ClassifierTemplateParameter_allowSubstitutable_defaultValue_LiteralBoolean_UML_ClassifierTemplateParameter_allowSubstitutable);
	
	uML_ClassifierTemplateParameter_constrainingClassifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ClassifierTemplateParameter_constrainingClassifier->setName("constrainingClassifier");
	uML_ClassifierTemplateParameter_constrainingClassifier->setType(get_UML_Classifier());
	uML_ClassifierTemplateParameter_constrainingClassifier->setLower(0);
	uML_ClassifierTemplateParameter_constrainingClassifier->setUpper(-1);
	uML_ClassifierTemplateParameter->getOwnedAttribute()->push_back(uML_ClassifierTemplateParameter_constrainingClassifier);
	uML_ClassifierTemplateParameter_constrainingClassifier->setClass(uML_ClassifierTemplateParameter);
	
	
	uML_ClassifierTemplateParameter_parameteredElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ClassifierTemplateParameter_parameteredElement->setName("parameteredElement");
	uML_ClassifierTemplateParameter_parameteredElement->setType(get_UML_Classifier());
	uML_ClassifierTemplateParameter_parameteredElement->setLower(1);
	uML_ClassifierTemplateParameter_parameteredElement->setUpper(1);
	uML_ClassifierTemplateParameter->getOwnedAttribute()->push_back(uML_ClassifierTemplateParameter_parameteredElement);
	uML_ClassifierTemplateParameter_parameteredElement->setClass(uML_ClassifierTemplateParameter);
	
	
	
	
	


	uML_Clause.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Clause->setName("Clause");
	uML_Clause->setIsAbstract(false);
	uML_Clause->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Clause);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("test_and_body");
	con->getConstrainedElement()->push_back(uML_Clause);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("test->intersection(_'body')->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Clause->getOwnedRule()->push_back(con);
	con->setContext(uML_Clause->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("decider_output");
	con->getConstrainedElement()->push_back(uML_Clause);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("test.oclAsType(Action).allActions().output->includes(decider) and"\
	"decider.type = Boolean and"\
	"decider.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Clause->getOwnedRule()->push_back(con);
	con->setContext(uML_Clause->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("body_output_pins");
	con->getConstrainedElement()->push_back(uML_Clause);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("_'body'.oclAsType(Action).allActions().output->includesAll(bodyOutput)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Clause->getOwnedRule()->push_back(con);
	con->setContext(uML_Clause->getNamespace());
	
	
	uML_Clause_body.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Clause_body->setName("body");
	uML_Clause_body->setType(get_UML_ExecutableNode());
	uML_Clause_body->setLower(0);
	uML_Clause_body->setUpper(-1);
	uML_Clause->getOwnedAttribute()->push_back(uML_Clause_body);
	uML_Clause_body->setClass(uML_Clause);
	
	
	uML_Clause_bodyOutput.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Clause_bodyOutput->setName("bodyOutput");
	uML_Clause_bodyOutput->setType(get_UML_OutputPin());
	uML_Clause_bodyOutput->setLower(0);
	uML_Clause_bodyOutput->setUpper(-1);
	uML_Clause->getOwnedAttribute()->push_back(uML_Clause_bodyOutput);
	uML_Clause_bodyOutput->setClass(uML_Clause);
	
	
	uML_Clause_decider.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Clause_decider->setName("decider");
	uML_Clause_decider->setType(get_UML_OutputPin());
	uML_Clause_decider->setLower(1);
	uML_Clause_decider->setUpper(1);
	uML_Clause->getOwnedAttribute()->push_back(uML_Clause_decider);
	uML_Clause_decider->setClass(uML_Clause);
	
	
	uML_Clause_predecessorClause.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Clause_predecessorClause->setName("predecessorClause");
	uML_Clause_predecessorClause->setType(get_UML_Clause());
	uML_Clause_predecessorClause->setLower(0);
	uML_Clause_predecessorClause->setUpper(-1);
	uML_Clause->getOwnedAttribute()->push_back(uML_Clause_predecessorClause);
	uML_Clause_predecessorClause->setClass(uML_Clause);
	
	
	uML_Clause_successorClause.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Clause_successorClause->setName("successorClause");
	uML_Clause_successorClause->setType(get_UML_Clause());
	uML_Clause_successorClause->setLower(0);
	uML_Clause_successorClause->setUpper(-1);
	uML_Clause->getOwnedAttribute()->push_back(uML_Clause_successorClause);
	uML_Clause_successorClause->setClass(uML_Clause);
	
	
	uML_Clause_test.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Clause_test->setName("test");
	uML_Clause_test->setType(get_UML_ExecutableNode());
	uML_Clause_test->setLower(1);
	uML_Clause_test->setUpper(-1);
	uML_Clause->getOwnedAttribute()->push_back(uML_Clause_test);
	uML_Clause_test->setClass(uML_Clause);
	
	
	
	
	


	uML_ClearAssociationAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ClearAssociationAction->setName("ClearAssociationAction");
	uML_ClearAssociationAction->setIsAbstract(false);
	uML_ClearAssociationAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ClearAssociationAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("same_type");
	con->getConstrainedElement()->push_back(uML_ClearAssociationAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("association.memberEnd->exists(self.object.type.conformsTo(type))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ClearAssociationAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ClearAssociationAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_ClearAssociationAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ClearAssociationAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ClearAssociationAction->getNamespace());
	
	
	uML_ClearAssociationAction_association.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ClearAssociationAction_association->setName("association");
	uML_ClearAssociationAction_association->setType(get_UML_Association());
	uML_ClearAssociationAction_association->setLower(1);
	uML_ClearAssociationAction_association->setUpper(1);
	uML_ClearAssociationAction->getOwnedAttribute()->push_back(uML_ClearAssociationAction_association);
	uML_ClearAssociationAction_association->setClass(uML_ClearAssociationAction);
	
	
	uML_ClearAssociationAction_object.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ClearAssociationAction_object->setName("object");
	uML_ClearAssociationAction_object->setType(get_UML_InputPin());
	uML_ClearAssociationAction_object->setLower(1);
	uML_ClearAssociationAction_object->setUpper(1);
	uML_ClearAssociationAction->getOwnedAttribute()->push_back(uML_ClearAssociationAction_object);
	uML_ClearAssociationAction_object->setClass(uML_ClearAssociationAction);
	
	
	
	
	


	uML_ClearStructuralFeatureAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ClearStructuralFeatureAction->setName("ClearStructuralFeatureAction");
	uML_ClearStructuralFeatureAction->setIsAbstract(false);
	uML_ClearStructuralFeatureAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ClearStructuralFeatureAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_of_result");
	con->getConstrainedElement()->push_back(uML_ClearStructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result<>null implies result.type = object.type");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ClearStructuralFeatureAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ClearStructuralFeatureAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity_of_result");
	con->getConstrainedElement()->push_back(uML_ClearStructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result<>null implies result.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ClearStructuralFeatureAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ClearStructuralFeatureAction->getNamespace());
	
	
	uML_ClearStructuralFeatureAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ClearStructuralFeatureAction_result->setName("result");
	uML_ClearStructuralFeatureAction_result->setType(get_UML_OutputPin());
	uML_ClearStructuralFeatureAction_result->setLower(0);
	uML_ClearStructuralFeatureAction_result->setUpper(1);
	uML_ClearStructuralFeatureAction->getOwnedAttribute()->push_back(uML_ClearStructuralFeatureAction_result);
	uML_ClearStructuralFeatureAction_result->setClass(uML_ClearStructuralFeatureAction);
	
	
	
	
	


	uML_ClearVariableAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ClearVariableAction->setName("ClearVariableAction");
	uML_ClearVariableAction->setIsAbstract(false);
	uML_ClearVariableAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ClearVariableAction);
	
	//constraints
	
	
	
	
	


	uML_Collaboration.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Collaboration->setName("Collaboration");
	uML_Collaboration->setIsAbstract(false);
	uML_Collaboration->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Collaboration);
	
	//constraints
	
	
	uML_Collaboration_collaborationRole.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Collaboration_collaborationRole->setName("collaborationRole");
	uML_Collaboration_collaborationRole->setType(get_UML_ConnectableElement());
	uML_Collaboration_collaborationRole->setLower(0);
	uML_Collaboration_collaborationRole->setUpper(-1);
	uML_Collaboration->getOwnedAttribute()->push_back(uML_Collaboration_collaborationRole);
	uML_Collaboration_collaborationRole->setClass(uML_Collaboration);
	
	
	
	
	


	uML_CollaborationUse.reset(uml::UmlFactory::eInstance()->createClass());
	uML_CollaborationUse->setName("CollaborationUse");
	uML_CollaborationUse->setIsAbstract(false);
	uML_CollaborationUse->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_CollaborationUse);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("every_role");
	con->getConstrainedElement()->push_back(uML_CollaborationUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("type.collaborationRole->forAll(role | roleBinding->exists(rb | rb.supplier->includes(role)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CollaborationUse->getOwnedRule()->push_back(con);
	con->setContext(uML_CollaborationUse->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("client_elements");
	con->getConstrainedElement()->push_back(uML_CollaborationUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("roleBinding->collect(client)->forAll(ne1, ne2 |"\
	"  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and"\
	"    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in"\
	"      ce1.structuredClassifier = ce2.structuredClassifier)"\
	"and"\
	"  roleBinding->collect(supplier)->forAll(ne1, ne2 |"\
	"  ne1.oclIsKindOf(ConnectableElement) and ne2.oclIsKindOf(ConnectableElement) and"\
	"    let ce1 : ConnectableElement = ne1.oclAsType(ConnectableElement), ce2 : ConnectableElement = ne2.oclAsType(ConnectableElement) in"\
	"      ce1.collaboration = ce2.collaboration)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CollaborationUse->getOwnedRule()->push_back(con);
	con->setContext(uML_CollaborationUse->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("connectors");
	con->getConstrainedElement()->push_back(uML_CollaborationUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("type.ownedConnector->forAll(connector |"\
	"  let rolesConnectedInCollab : Set(ConnectableElement) = connector.end.role->asSet(),"\
	"        relevantBindings : Set(Dependency) = roleBinding->select(rb | rb.supplier->intersection(rolesConnectedInCollab)->notEmpty()),"\
	"        boundRoles : Set(ConnectableElement) = relevantBindings->collect(client.oclAsType(ConnectableElement))->asSet(),"\
	"        contextClassifier : StructuredClassifier = boundRoles->any(true).structuredClassifier->any(true) in"\
	"          contextClassifier.ownedConnector->exists( correspondingConnector | "\
	"              correspondingConnector.end.role->forAll( role | boundRoles->includes(role) )"\
	"              and (connector.type->notEmpty() and correspondingConnector.type->notEmpty()) implies connector.type->forAll(conformsTo(correspondingConnector.type)) )"\
	")");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CollaborationUse->getOwnedRule()->push_back(con);
	con->setContext(uML_CollaborationUse->getNamespace());
	
	
	uML_CollaborationUse_roleBinding.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_CollaborationUse_roleBinding->setName("roleBinding");
	uML_CollaborationUse_roleBinding->setType(get_UML_Dependency());
	uML_CollaborationUse_roleBinding->setLower(0);
	uML_CollaborationUse_roleBinding->setUpper(-1);
	uML_CollaborationUse->getOwnedAttribute()->push_back(uML_CollaborationUse_roleBinding);
	uML_CollaborationUse_roleBinding->setClass(uML_CollaborationUse);
	
	
	uML_CollaborationUse_type.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_CollaborationUse_type->setName("type");
	uML_CollaborationUse_type->setType(get_UML_Collaboration());
	uML_CollaborationUse_type->setLower(1);
	uML_CollaborationUse_type->setUpper(1);
	uML_CollaborationUse->getOwnedAttribute()->push_back(uML_CollaborationUse_type);
	uML_CollaborationUse_type->setClass(uML_CollaborationUse);
	
	
	
	
	


	uML_CombinedFragment.reset(uml::UmlFactory::eInstance()->createClass());
	uML_CombinedFragment->setName("CombinedFragment");
	uML_CombinedFragment->setIsAbstract(false);
	uML_CombinedFragment->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_CombinedFragment);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("consider_and_ignore");
	con->getConstrainedElement()->push_back(uML_CombinedFragment);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("((interactionOperator = InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)) implies oclIsKindOf(ConsiderIgnoreFragment)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CombinedFragment->getOwnedRule()->push_back(con);
	con->setContext(uML_CombinedFragment->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("opt_loop_break_neg");
	con->getConstrainedElement()->push_back(uML_CombinedFragment);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(interactionOperator =  InteractionOperatorKind::opt or interactionOperator = InteractionOperatorKind::loop or"\
	"interactionOperator = InteractionOperatorKind::break or interactionOperator = InteractionOperatorKind::assert or"\
	"interactionOperator = InteractionOperatorKind::neg)"\
	"implies operand->size()=1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CombinedFragment->getOwnedRule()->push_back(con);
	con->setContext(uML_CombinedFragment->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("break");
	con->getConstrainedElement()->push_back(uML_CombinedFragment);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("interactionOperator=InteractionOperatorKind::break  implies   "\
	"enclosingInteraction.oclAsType(InteractionFragment)->asSet()->union("\
	"   enclosingOperand.oclAsType(InteractionFragment)->asSet()).covered->asSet() = self.covered->asSet()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CombinedFragment->getOwnedRule()->push_back(con);
	con->setContext(uML_CombinedFragment->getNamespace());
	
	
	uML_CombinedFragment_cfragmentGate.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_CombinedFragment_cfragmentGate->setName("cfragmentGate");
	uML_CombinedFragment_cfragmentGate->setType(get_UML_Gate());
	uML_CombinedFragment_cfragmentGate->setLower(0);
	uML_CombinedFragment_cfragmentGate->setUpper(-1);
	uML_CombinedFragment->getOwnedAttribute()->push_back(uML_CombinedFragment_cfragmentGate);
	uML_CombinedFragment_cfragmentGate->setClass(uML_CombinedFragment);
	
	
	uML_CombinedFragment_interactionOperator.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_CombinedFragment_interactionOperator->setName("interactionOperator");
	uML_CombinedFragment_interactionOperator->setType(get_UML_InteractionOperatorKind());
	uML_CombinedFragment_interactionOperator->setLower(1);
	uML_CombinedFragment_interactionOperator->setUpper(1);
	uML_CombinedFragment->getOwnedAttribute()->push_back(uML_CombinedFragment_interactionOperator);
	uML_CombinedFragment_interactionOperator->setClass(uML_CombinedFragment);
	uML_CombinedFragment_interactionOperator->setDefaultValue(uML_CombinedFragment_interactionOperator_defaultValue_InstanceValue);
	
	uML_CombinedFragment_operand.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_CombinedFragment_operand->setName("operand");
	uML_CombinedFragment_operand->setType(get_UML_InteractionOperand());
	uML_CombinedFragment_operand->setLower(1);
	uML_CombinedFragment_operand->setUpper(-1);
	uML_CombinedFragment->getOwnedAttribute()->push_back(uML_CombinedFragment_operand);
	uML_CombinedFragment_operand->setClass(uML_CombinedFragment);
	
	
	
	
	


	uML_Comment.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Comment->setName("Comment");
	uML_Comment->setIsAbstract(false);
	uML_Comment->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Comment);
	
	//constraints
	
	
	uML_Comment_annotatedElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Comment_annotatedElement->setName("annotatedElement");
	uML_Comment_annotatedElement->setType(get_UML_Element());
	uML_Comment_annotatedElement->setLower(0);
	uML_Comment_annotatedElement->setUpper(-1);
	uML_Comment->getOwnedAttribute()->push_back(uML_Comment_annotatedElement);
	uML_Comment_annotatedElement->setClass(uML_Comment);
	
	
	uML_Comment_body.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Comment_body->setName("body");
	uML_Comment_body->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Comment_body->setLower(0);
	uML_Comment_body->setUpper(1);
	uML_Comment->getOwnedAttribute()->push_back(uML_Comment_body);
	uML_Comment_body->setClass(uML_Comment);
	
	
	
	
	


	uML_CommunicationPath.reset(uml::UmlFactory::eInstance()->createClass());
	uML_CommunicationPath->setName("CommunicationPath");
	uML_CommunicationPath->setIsAbstract(false);
	uML_CommunicationPath->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_CommunicationPath);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("association_ends");
	con->getConstrainedElement()->push_back(uML_CommunicationPath);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("endType->forAll (oclIsKindOf(DeploymentTarget))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CommunicationPath->getOwnedRule()->push_back(con);
	con->setContext(uML_CommunicationPath->getNamespace());
	
	
	
	
	


	uML_Component.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Component->setName("Component");
	uML_Component->setIsAbstract(false);
	uML_Component->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Component);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_packaged_elements");
	con->getConstrainedElement()->push_back(uML_Component);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("nestingClass <> null implies packagedElement->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Component->getOwnedRule()->push_back(con);
	con->setContext(uML_Component->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_nested_classifiers");
	con->getConstrainedElement()->push_back(uML_Component);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("nestedClassifier->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Component->getOwnedRule()->push_back(con);
	con->setContext(uML_Component->getNamespace());
	
	
	uML_Component_isIndirectlyInstantiated.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Component_isIndirectlyInstantiated->setName("isIndirectlyInstantiated");
	uML_Component_isIndirectlyInstantiated->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Component_isIndirectlyInstantiated->setLower(1);
	uML_Component_isIndirectlyInstantiated->setUpper(1);
	uML_Component->getOwnedAttribute()->push_back(uML_Component_isIndirectlyInstantiated);
	uML_Component_isIndirectlyInstantiated->setClass(uML_Component);
	uML_Component_isIndirectlyInstantiated->setDefaultValue(uML_Component_isIndirectlyInstantiated_defaultValue_LiteralBoolean_UML_Component_isIndirectlyInstantiated);
	
	uML_Component_packagedElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Component_packagedElement->setName("packagedElement");
	uML_Component_packagedElement->setType(get_UML_PackageableElement());
	uML_Component_packagedElement->setLower(0);
	uML_Component_packagedElement->setUpper(-1);
	uML_Component->getOwnedAttribute()->push_back(uML_Component_packagedElement);
	uML_Component_packagedElement->setClass(uML_Component);
	
	
	uML_Component_provided.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Component_provided->setName("provided");
	uML_Component_provided->setType(get_UML_Interface());
	uML_Component_provided->setLower(0);
	uML_Component_provided->setUpper(-1);
	uML_Component->getOwnedAttribute()->push_back(uML_Component_provided);
	uML_Component_provided->setClass(uML_Component);
	
	
	uML_Component_realization.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Component_realization->setName("realization");
	uML_Component_realization->setType(get_UML_ComponentRealization());
	uML_Component_realization->setLower(0);
	uML_Component_realization->setUpper(-1);
	uML_Component->getOwnedAttribute()->push_back(uML_Component_realization);
	uML_Component_realization->setClass(uML_Component);
	
	
	uML_Component_required.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Component_required->setName("required");
	uML_Component_required->setType(get_UML_Interface());
	uML_Component_required->setLower(0);
	uML_Component_required->setUpper(-1);
	uML_Component->getOwnedAttribute()->push_back(uML_Component_required);
	uML_Component_required->setClass(uML_Component);
	
	
	
	uML_Component_createOwnedClass_String_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Component_createOwnedClass_String_Boolean->setName("createOwnedClass");
	uML_Component_createOwnedClass_String_Boolean_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Component_createOwnedClass_String_Boolean_return->setName("");
	uML_Component_createOwnedClass_String_Boolean_return->setType(get_UML_Class());
	uML_Component_createOwnedClass_String_Boolean_return->setLower(1);
	uML_Component_createOwnedClass_String_Boolean_return->setUpper(1);
	uML_Component_createOwnedClass_String_Boolean_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Component_createOwnedClass_String_Boolean->getOwnedParameter()->push_back(uML_Component_createOwnedClass_String_Boolean_return);
	uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_name->setName("name");
	uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_name->setLower(1);
	uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_name->setUpper(1);
	uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Component_createOwnedClass_String_Boolean->getOwnedParameter()->push_back(uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_name);
	uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_isAbstract.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_isAbstract->setName("isAbstract");
	uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_isAbstract->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_isAbstract->setLower(1);
	uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_isAbstract->setUpper(1);
	uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_isAbstract->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Component_createOwnedClass_String_Boolean->getOwnedParameter()->push_back(uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_isAbstract);
	
	
	uML_Component->getOwnedOperation()->push_back(uML_Component_createOwnedClass_String_Boolean); 
	uML_Component_createOwnedEnumeration_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Component_createOwnedEnumeration_String->setName("createOwnedEnumeration");
	uML_Component_createOwnedEnumeration_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Component_createOwnedEnumeration_String_return->setName("");
	uML_Component_createOwnedEnumeration_String_return->setType(get_UML_Enumeration());
	uML_Component_createOwnedEnumeration_String_return->setLower(1);
	uML_Component_createOwnedEnumeration_String_return->setUpper(1);
	uML_Component_createOwnedEnumeration_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Component_createOwnedEnumeration_String->getOwnedParameter()->push_back(uML_Component_createOwnedEnumeration_String_return);
	uML_Component_createOwnedEnumeration_String_UML_Component_createOwnedEnumeration_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Component_createOwnedEnumeration_String_UML_Component_createOwnedEnumeration_name->setName("name");
	uML_Component_createOwnedEnumeration_String_UML_Component_createOwnedEnumeration_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Component_createOwnedEnumeration_String_UML_Component_createOwnedEnumeration_name->setLower(1);
	uML_Component_createOwnedEnumeration_String_UML_Component_createOwnedEnumeration_name->setUpper(1);
	uML_Component_createOwnedEnumeration_String_UML_Component_createOwnedEnumeration_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Component_createOwnedEnumeration_String->getOwnedParameter()->push_back(uML_Component_createOwnedEnumeration_String_UML_Component_createOwnedEnumeration_name);
	
	
	uML_Component->getOwnedOperation()->push_back(uML_Component_createOwnedEnumeration_String); 
	uML_Component_createOwnedInterface_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Component_createOwnedInterface_String->setName("createOwnedInterface");
	uML_Component_createOwnedInterface_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Component_createOwnedInterface_String_return->setName("");
	uML_Component_createOwnedInterface_String_return->setType(get_UML_Interface());
	uML_Component_createOwnedInterface_String_return->setLower(1);
	uML_Component_createOwnedInterface_String_return->setUpper(1);
	uML_Component_createOwnedInterface_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Component_createOwnedInterface_String->getOwnedParameter()->push_back(uML_Component_createOwnedInterface_String_return);
	uML_Component_createOwnedInterface_String_UML_Component_createOwnedInterface_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Component_createOwnedInterface_String_UML_Component_createOwnedInterface_name->setName("name");
	uML_Component_createOwnedInterface_String_UML_Component_createOwnedInterface_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Component_createOwnedInterface_String_UML_Component_createOwnedInterface_name->setLower(1);
	uML_Component_createOwnedInterface_String_UML_Component_createOwnedInterface_name->setUpper(1);
	uML_Component_createOwnedInterface_String_UML_Component_createOwnedInterface_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Component_createOwnedInterface_String->getOwnedParameter()->push_back(uML_Component_createOwnedInterface_String_UML_Component_createOwnedInterface_name);
	
	
	uML_Component->getOwnedOperation()->push_back(uML_Component_createOwnedInterface_String); 
	uML_Component_createOwnedPrimitiveType_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Component_createOwnedPrimitiveType_String->setName("createOwnedPrimitiveType");
	uML_Component_createOwnedPrimitiveType_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Component_createOwnedPrimitiveType_String_return->setName("");
	uML_Component_createOwnedPrimitiveType_String_return->setType(get_UML_PrimitiveType());
	uML_Component_createOwnedPrimitiveType_String_return->setLower(1);
	uML_Component_createOwnedPrimitiveType_String_return->setUpper(1);
	uML_Component_createOwnedPrimitiveType_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Component_createOwnedPrimitiveType_String->getOwnedParameter()->push_back(uML_Component_createOwnedPrimitiveType_String_return);
	uML_Component_createOwnedPrimitiveType_String_UML_Component_createOwnedPrimitiveType_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Component_createOwnedPrimitiveType_String_UML_Component_createOwnedPrimitiveType_name->setName("name");
	uML_Component_createOwnedPrimitiveType_String_UML_Component_createOwnedPrimitiveType_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Component_createOwnedPrimitiveType_String_UML_Component_createOwnedPrimitiveType_name->setLower(1);
	uML_Component_createOwnedPrimitiveType_String_UML_Component_createOwnedPrimitiveType_name->setUpper(1);
	uML_Component_createOwnedPrimitiveType_String_UML_Component_createOwnedPrimitiveType_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Component_createOwnedPrimitiveType_String->getOwnedParameter()->push_back(uML_Component_createOwnedPrimitiveType_String_UML_Component_createOwnedPrimitiveType_name);
	
	
	uML_Component->getOwnedOperation()->push_back(uML_Component_createOwnedPrimitiveType_String); 
	uML_Component_provided_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Component_provided_->setName("provided");
	uML_Component_provided_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Component_provided_result->setName("result");
	uML_Component_provided_result->setType(get_UML_Interface());
	uML_Component_provided_result->setLower(0);
	uML_Component_provided_result->setUpper(-1);
	uML_Component_provided_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Component_provided_->getOwnedParameter()->push_back(uML_Component_provided_result);
	
	
	uML_Component->getOwnedOperation()->push_back(uML_Component_provided_); 
	uML_Component_required_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Component_required_->setName("required");
	uML_Component_required_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Component_required_result->setName("result");
	uML_Component_required_result->setType(get_UML_Interface());
	uML_Component_required_result->setLower(0);
	uML_Component_required_result->setUpper(-1);
	uML_Component_required_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Component_required_->getOwnedParameter()->push_back(uML_Component_required_result);
	
	
	uML_Component->getOwnedOperation()->push_back(uML_Component_required_); 
	
	


	uML_ComponentRealization.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ComponentRealization->setName("ComponentRealization");
	uML_ComponentRealization->setIsAbstract(false);
	uML_ComponentRealization->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ComponentRealization);
	
	//constraints
	
	
	uML_ComponentRealization_abstraction.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ComponentRealization_abstraction->setName("abstraction");
	uML_ComponentRealization_abstraction->setType(get_UML_Component());
	uML_ComponentRealization_abstraction->setLower(0);
	uML_ComponentRealization_abstraction->setUpper(1);
	uML_ComponentRealization->getOwnedAttribute()->push_back(uML_ComponentRealization_abstraction);
	uML_ComponentRealization_abstraction->setClass(uML_ComponentRealization);
	
	
	uML_ComponentRealization_realizingClassifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ComponentRealization_realizingClassifier->setName("realizingClassifier");
	uML_ComponentRealization_realizingClassifier->setType(get_UML_Classifier());
	uML_ComponentRealization_realizingClassifier->setLower(1);
	uML_ComponentRealization_realizingClassifier->setUpper(-1);
	uML_ComponentRealization->getOwnedAttribute()->push_back(uML_ComponentRealization_realizingClassifier);
	uML_ComponentRealization_realizingClassifier->setClass(uML_ComponentRealization);
	
	
	
	
	


	uML_ConditionalNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ConditionalNode->setName("ConditionalNode");
	uML_ConditionalNode->setIsAbstract(false);
	uML_ConditionalNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ConditionalNode);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_input_pins");
	con->getConstrainedElement()->push_back(uML_ConditionalNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("input->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ConditionalNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ConditionalNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("result_no_incoming");
	con->getConstrainedElement()->push_back(uML_ConditionalNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.incoming->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ConditionalNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ConditionalNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("executable_nodes");
	con->getConstrainedElement()->push_back(uML_ConditionalNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("clause.test->union(clause._'body') = node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ConditionalNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ConditionalNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("clause_no_predecessor");
	con->getConstrainedElement()->push_back(uML_ConditionalNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("clause->closure(predecessorClause)->intersection(clause)->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ConditionalNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ConditionalNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("one_clause_with_executable_node");
	con->getConstrainedElement()->push_back(uML_ConditionalNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->forAll(n | "\
	"	self.clause->select(test->union(_'body')->includes(n))->size()=1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ConditionalNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ConditionalNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("matching_output_pins");
	con->getConstrainedElement()->push_back(uML_ConditionalNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("clause->forAll("\
	"	bodyOutput->size()=self.result->size() and"\
	"	Sequence{1..self.result->size()}->forAll(i |"\
	"		bodyOutput->at(i).type.conformsTo(result->at(i).type) and"\
	"		bodyOutput->at(i).isOrdered = result->at(i).isOrdered and"\
	"		bodyOutput->at(i).isUnique = result->at(i).isUnique and"\
	"		bodyOutput->at(i).compatibleWith(result->at(i))))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ConditionalNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ConditionalNode->getNamespace());
	
	
	uML_ConditionalNode_clause.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ConditionalNode_clause->setName("clause");
	uML_ConditionalNode_clause->setType(get_UML_Clause());
	uML_ConditionalNode_clause->setLower(1);
	uML_ConditionalNode_clause->setUpper(-1);
	uML_ConditionalNode->getOwnedAttribute()->push_back(uML_ConditionalNode_clause);
	uML_ConditionalNode_clause->setClass(uML_ConditionalNode);
	
	
	uML_ConditionalNode_isAssured.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ConditionalNode_isAssured->setName("isAssured");
	uML_ConditionalNode_isAssured->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ConditionalNode_isAssured->setLower(1);
	uML_ConditionalNode_isAssured->setUpper(1);
	uML_ConditionalNode->getOwnedAttribute()->push_back(uML_ConditionalNode_isAssured);
	uML_ConditionalNode_isAssured->setClass(uML_ConditionalNode);
	uML_ConditionalNode_isAssured->setDefaultValue(uML_ConditionalNode_isAssured_defaultValue_LiteralBoolean_UML_ConditionalNode_isAssured);
	
	uML_ConditionalNode_isDeterminate.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ConditionalNode_isDeterminate->setName("isDeterminate");
	uML_ConditionalNode_isDeterminate->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ConditionalNode_isDeterminate->setLower(1);
	uML_ConditionalNode_isDeterminate->setUpper(1);
	uML_ConditionalNode->getOwnedAttribute()->push_back(uML_ConditionalNode_isDeterminate);
	uML_ConditionalNode_isDeterminate->setClass(uML_ConditionalNode);
	uML_ConditionalNode_isDeterminate->setDefaultValue(uML_ConditionalNode_isDeterminate_defaultValue_LiteralBoolean_UML_ConditionalNode_isDeterminate);
	
	uML_ConditionalNode_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ConditionalNode_result->setName("result");
	uML_ConditionalNode_result->setType(get_UML_OutputPin());
	uML_ConditionalNode_result->setLower(0);
	uML_ConditionalNode_result->setUpper(-1);
	uML_ConditionalNode->getOwnedAttribute()->push_back(uML_ConditionalNode_result);
	uML_ConditionalNode_result->setClass(uML_ConditionalNode);
	
	
	
	uML_ConditionalNode_allActions_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ConditionalNode_allActions_->setName("allActions");
	uML_ConditionalNode_allActions_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ConditionalNode_allActions_result->setName("result");
	uML_ConditionalNode_allActions_result->setType(get_UML_Action());
	uML_ConditionalNode_allActions_result->setLower(0);
	uML_ConditionalNode_allActions_result->setUpper(-1);
	uML_ConditionalNode_allActions_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ConditionalNode_allActions_->getOwnedParameter()->push_back(uML_ConditionalNode_allActions_result);
	
	
	uML_ConditionalNode->getOwnedOperation()->push_back(uML_ConditionalNode_allActions_); 
	
	


	uML_ConnectableElement.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ConnectableElement->setName("ConnectableElement");
	uML_ConnectableElement->setIsAbstract(true);
	uML_ConnectableElement->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ConnectableElement);
	
	//constraints
	
	
	uML_ConnectableElement_end.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ConnectableElement_end->setName("end");
	uML_ConnectableElement_end->setType(get_UML_ConnectorEnd());
	uML_ConnectableElement_end->setLower(0);
	uML_ConnectableElement_end->setUpper(-1);
	uML_ConnectableElement->getOwnedAttribute()->push_back(uML_ConnectableElement_end);
	uML_ConnectableElement_end->setClass(uML_ConnectableElement);
	
	
	uML_ConnectableElement_templateParameter.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ConnectableElement_templateParameter->setName("templateParameter");
	uML_ConnectableElement_templateParameter->setType(get_UML_ConnectableElementTemplateParameter());
	uML_ConnectableElement_templateParameter->setLower(0);
	uML_ConnectableElement_templateParameter->setUpper(1);
	uML_ConnectableElement->getOwnedAttribute()->push_back(uML_ConnectableElement_templateParameter);
	uML_ConnectableElement_templateParameter->setClass(uML_ConnectableElement);
	
	
	
	uML_ConnectableElement_end_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ConnectableElement_end_->setName("end");
	uML_ConnectableElement_end_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ConnectableElement_end_result->setName("result");
	uML_ConnectableElement_end_result->setType(get_UML_ConnectorEnd());
	uML_ConnectableElement_end_result->setLower(0);
	uML_ConnectableElement_end_result->setUpper(-1);
	uML_ConnectableElement_end_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ConnectableElement_end_->getOwnedParameter()->push_back(uML_ConnectableElement_end_result);
	
	
	uML_ConnectableElement->getOwnedOperation()->push_back(uML_ConnectableElement_end_); 
	
	


	uML_ConnectableElementTemplateParameter.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ConnectableElementTemplateParameter->setName("ConnectableElementTemplateParameter");
	uML_ConnectableElementTemplateParameter->setIsAbstract(false);
	uML_ConnectableElementTemplateParameter->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ConnectableElementTemplateParameter);
	
	//constraints
	
	
	uML_ConnectableElementTemplateParameter_parameteredElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ConnectableElementTemplateParameter_parameteredElement->setName("parameteredElement");
	uML_ConnectableElementTemplateParameter_parameteredElement->setType(get_UML_ConnectableElement());
	uML_ConnectableElementTemplateParameter_parameteredElement->setLower(1);
	uML_ConnectableElementTemplateParameter_parameteredElement->setUpper(1);
	uML_ConnectableElementTemplateParameter->getOwnedAttribute()->push_back(uML_ConnectableElementTemplateParameter_parameteredElement);
	uML_ConnectableElementTemplateParameter_parameteredElement->setClass(uML_ConnectableElementTemplateParameter);
	
	
	
	
	


	uML_ConnectionPointReference.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ConnectionPointReference->setName("ConnectionPointReference");
	uML_ConnectionPointReference->setIsAbstract(false);
	uML_ConnectionPointReference->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ConnectionPointReference);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("exit_pseudostates");
	con->getConstrainedElement()->push_back(uML_ConnectionPointReference);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("exit->forAll(kind = PseudostateKind::exitPoint)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ConnectionPointReference->getOwnedRule()->push_back(con);
	con->setContext(uML_ConnectionPointReference->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("entry_pseudostates");
	con->getConstrainedElement()->push_back(uML_ConnectionPointReference);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("entry->forAll(kind = PseudostateKind::entryPoint)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ConnectionPointReference->getOwnedRule()->push_back(con);
	con->setContext(uML_ConnectionPointReference->getNamespace());
	
	
	uML_ConnectionPointReference_entry.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ConnectionPointReference_entry->setName("entry");
	uML_ConnectionPointReference_entry->setType(get_UML_Pseudostate());
	uML_ConnectionPointReference_entry->setLower(0);
	uML_ConnectionPointReference_entry->setUpper(-1);
	uML_ConnectionPointReference->getOwnedAttribute()->push_back(uML_ConnectionPointReference_entry);
	uML_ConnectionPointReference_entry->setClass(uML_ConnectionPointReference);
	
	
	uML_ConnectionPointReference_exit.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ConnectionPointReference_exit->setName("exit");
	uML_ConnectionPointReference_exit->setType(get_UML_Pseudostate());
	uML_ConnectionPointReference_exit->setLower(0);
	uML_ConnectionPointReference_exit->setUpper(-1);
	uML_ConnectionPointReference->getOwnedAttribute()->push_back(uML_ConnectionPointReference_exit);
	uML_ConnectionPointReference_exit->setClass(uML_ConnectionPointReference);
	
	
	uML_ConnectionPointReference_state.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ConnectionPointReference_state->setName("state");
	uML_ConnectionPointReference_state->setType(get_UML_State());
	uML_ConnectionPointReference_state->setLower(0);
	uML_ConnectionPointReference_state->setUpper(1);
	uML_ConnectionPointReference->getOwnedAttribute()->push_back(uML_ConnectionPointReference_state);
	uML_ConnectionPointReference_state->setClass(uML_ConnectionPointReference);
	
	
	
	
	


	uML_Connector.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Connector->setName("Connector");
	uML_Connector->setIsAbstract(false);
	uML_Connector->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Connector);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("roles");
	con->getConstrainedElement()->push_back(uML_Connector);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("structuredClassifier <> null"\
	"and"\
	"  end->forAll( e | structuredClassifier.allRoles()->includes(e.role)"\
	"or"\
	"  e.role.oclIsKindOf(Port) and structuredClassifier.allRoles()->includes(e.partWithPort))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Connector->getOwnedRule()->push_back(con);
	con->setContext(uML_Connector->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("types");
	con->getConstrainedElement()->push_back(uML_Connector);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("type<>null implies "\
	"  let noOfEnds : Integer = end->size() in "\
	"  (type.memberEnd->size() = noOfEnds) and Sequence{1..noOfEnds}->forAll(i | end->at(i).role.type.conformsTo(type.memberEnd->at(i).type))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Connector->getOwnedRule()->push_back(con);
	con->setContext(uML_Connector->getNamespace());
	
	
	uML_Connector_contract.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Connector_contract->setName("contract");
	uML_Connector_contract->setType(get_UML_Behavior());
	uML_Connector_contract->setLower(0);
	uML_Connector_contract->setUpper(-1);
	uML_Connector->getOwnedAttribute()->push_back(uML_Connector_contract);
	uML_Connector_contract->setClass(uML_Connector);
	
	
	uML_Connector_end.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Connector_end->setName("end");
	uML_Connector_end->setType(get_UML_ConnectorEnd());
	uML_Connector_end->setLower(2);
	uML_Connector_end->setUpper(-1);
	uML_Connector->getOwnedAttribute()->push_back(uML_Connector_end);
	uML_Connector_end->setClass(uML_Connector);
	
	
	uML_Connector_kind.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Connector_kind->setName("kind");
	uML_Connector_kind->setType(get_UML_ConnectorKind());
	uML_Connector_kind->setLower(1);
	uML_Connector_kind->setUpper(1);
	uML_Connector->getOwnedAttribute()->push_back(uML_Connector_kind);
	uML_Connector_kind->setClass(uML_Connector);
	
	
	uML_Connector_redefinedConnector.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Connector_redefinedConnector->setName("redefinedConnector");
	uML_Connector_redefinedConnector->setType(get_UML_Connector());
	uML_Connector_redefinedConnector->setLower(0);
	uML_Connector_redefinedConnector->setUpper(-1);
	uML_Connector->getOwnedAttribute()->push_back(uML_Connector_redefinedConnector);
	uML_Connector_redefinedConnector->setClass(uML_Connector);
	
	
	uML_Connector_type.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Connector_type->setName("type");
	uML_Connector_type->setType(get_UML_Association());
	uML_Connector_type->setLower(0);
	uML_Connector_type->setUpper(1);
	uML_Connector->getOwnedAttribute()->push_back(uML_Connector_type);
	uML_Connector_type->setClass(uML_Connector);
	
	
	
	uML_Connector_kind_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Connector_kind_->setName("kind");
	uML_Connector_kind_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Connector_kind_result->setName("result");
	uML_Connector_kind_result->setType(get_UML_ConnectorKind());
	uML_Connector_kind_result->setLower(1);
	uML_Connector_kind_result->setUpper(1);
	uML_Connector_kind_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Connector_kind_->getOwnedParameter()->push_back(uML_Connector_kind_result);
	
	
	uML_Connector->getOwnedOperation()->push_back(uML_Connector_kind_); 
	
	


	uML_ConnectorEnd.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ConnectorEnd->setName("ConnectorEnd");
	uML_ConnectorEnd->setIsAbstract(false);
	uML_ConnectorEnd->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ConnectorEnd);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("self_part_with_port");
	con->getConstrainedElement()->push_back(uML_ConnectorEnd);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("partWithPort->notEmpty() implies not partWithPort.oclIsKindOf(Port)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ConnectorEnd->getOwnedRule()->push_back(con);
	con->setContext(uML_ConnectorEnd->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_ConnectorEnd);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.compatibleWith(definingEnd)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ConnectorEnd->getOwnedRule()->push_back(con);
	con->setContext(uML_ConnectorEnd->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("part_with_port_empty");
	con->getConstrainedElement()->push_back(uML_ConnectorEnd);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(role.oclIsKindOf(Port) and role.owner = connector.owner) implies partWithPort->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ConnectorEnd->getOwnedRule()->push_back(con);
	con->setContext(uML_ConnectorEnd->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("role_and_part_with_port");
	con->getConstrainedElement()->push_back(uML_ConnectorEnd);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("partWithPort->notEmpty() implies "\
	"  (role.oclIsKindOf(Port) and partWithPort.type.oclAsType(Namespace).member->includes(role))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ConnectorEnd->getOwnedRule()->push_back(con);
	con->setContext(uML_ConnectorEnd->getNamespace());
	
	
	uML_ConnectorEnd_definingEnd.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ConnectorEnd_definingEnd->setName("definingEnd");
	uML_ConnectorEnd_definingEnd->setType(get_UML_Property());
	uML_ConnectorEnd_definingEnd->setLower(0);
	uML_ConnectorEnd_definingEnd->setUpper(1);
	uML_ConnectorEnd->getOwnedAttribute()->push_back(uML_ConnectorEnd_definingEnd);
	uML_ConnectorEnd_definingEnd->setClass(uML_ConnectorEnd);
	
	
	uML_ConnectorEnd_partWithPort.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ConnectorEnd_partWithPort->setName("partWithPort");
	uML_ConnectorEnd_partWithPort->setType(get_UML_Property());
	uML_ConnectorEnd_partWithPort->setLower(0);
	uML_ConnectorEnd_partWithPort->setUpper(1);
	uML_ConnectorEnd->getOwnedAttribute()->push_back(uML_ConnectorEnd_partWithPort);
	uML_ConnectorEnd_partWithPort->setClass(uML_ConnectorEnd);
	
	
	uML_ConnectorEnd_role.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ConnectorEnd_role->setName("role");
	uML_ConnectorEnd_role->setType(get_UML_ConnectableElement());
	uML_ConnectorEnd_role->setLower(1);
	uML_ConnectorEnd_role->setUpper(1);
	uML_ConnectorEnd->getOwnedAttribute()->push_back(uML_ConnectorEnd_role);
	uML_ConnectorEnd_role->setClass(uML_ConnectorEnd);
	
	
	
	uML_ConnectorEnd_definingEnd_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ConnectorEnd_definingEnd_->setName("definingEnd");
	uML_ConnectorEnd_definingEnd_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ConnectorEnd_definingEnd_result->setName("result");
	uML_ConnectorEnd_definingEnd_result->setType(get_UML_Property());
	uML_ConnectorEnd_definingEnd_result->setLower(0);
	uML_ConnectorEnd_definingEnd_result->setUpper(1);
	uML_ConnectorEnd_definingEnd_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ConnectorEnd_definingEnd_->getOwnedParameter()->push_back(uML_ConnectorEnd_definingEnd_result);
	
	
	uML_ConnectorEnd->getOwnedOperation()->push_back(uML_ConnectorEnd_definingEnd_); 
	
	


	uML_ConsiderIgnoreFragment.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ConsiderIgnoreFragment->setName("ConsiderIgnoreFragment");
	uML_ConsiderIgnoreFragment->setIsAbstract(false);
	uML_ConsiderIgnoreFragment->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ConsiderIgnoreFragment);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("consider_or_ignore");
	con->getConstrainedElement()->push_back(uML_ConsiderIgnoreFragment);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(interactionOperator =  InteractionOperatorKind::consider) or (interactionOperator =  InteractionOperatorKind::ignore)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ConsiderIgnoreFragment->getOwnedRule()->push_back(con);
	con->setContext(uML_ConsiderIgnoreFragment->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type");
	con->getConstrainedElement()->push_back(uML_ConsiderIgnoreFragment);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("message->forAll(m | m.oclIsKindOf(Operation) or m.oclIsKindOf(Signal))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ConsiderIgnoreFragment->getOwnedRule()->push_back(con);
	con->setContext(uML_ConsiderIgnoreFragment->getNamespace());
	
	
	uML_ConsiderIgnoreFragment_message.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ConsiderIgnoreFragment_message->setName("message");
	uML_ConsiderIgnoreFragment_message->setType(get_UML_NamedElement());
	uML_ConsiderIgnoreFragment_message->setLower(0);
	uML_ConsiderIgnoreFragment_message->setUpper(-1);
	uML_ConsiderIgnoreFragment->getOwnedAttribute()->push_back(uML_ConsiderIgnoreFragment_message);
	uML_ConsiderIgnoreFragment_message->setClass(uML_ConsiderIgnoreFragment);
	
	
	
	
	


	uML_Constraint.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Constraint->setName("Constraint");
	uML_Constraint->setIsAbstract(false);
	uML_Constraint->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Constraint);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("boolean_value");
	con->getConstrainedElement()->push_back(uML_Constraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Constraint->getOwnedRule()->push_back(con);
	con->setContext(uML_Constraint->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_side_effects");
	con->getConstrainedElement()->push_back(uML_Constraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Constraint->getOwnedRule()->push_back(con);
	con->setContext(uML_Constraint->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("not_apply_to_self");
	con->getConstrainedElement()->push_back(uML_Constraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not constrainedElement->includes(self)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Constraint->getOwnedRule()->push_back(con);
	con->setContext(uML_Constraint->getNamespace());
	
	
	uML_Constraint_constrainedElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Constraint_constrainedElement->setName("constrainedElement");
	uML_Constraint_constrainedElement->setType(get_UML_Element());
	uML_Constraint_constrainedElement->setLower(0);
	uML_Constraint_constrainedElement->setUpper(-1);
	uML_Constraint->getOwnedAttribute()->push_back(uML_Constraint_constrainedElement);
	uML_Constraint_constrainedElement->setClass(uML_Constraint);
	
	
	uML_Constraint_context.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Constraint_context->setName("context");
	uML_Constraint_context->setType(get_UML_Namespace());
	uML_Constraint_context->setLower(0);
	uML_Constraint_context->setUpper(1);
	uML_Constraint->getOwnedAttribute()->push_back(uML_Constraint_context);
	uML_Constraint_context->setClass(uML_Constraint);
	
	
	uML_Constraint_specification.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Constraint_specification->setName("specification");
	uML_Constraint_specification->setType(get_UML_ValueSpecification());
	uML_Constraint_specification->setLower(1);
	uML_Constraint_specification->setUpper(1);
	uML_Constraint->getOwnedAttribute()->push_back(uML_Constraint_specification);
	uML_Constraint_specification->setClass(uML_Constraint);
	
	
	
	
	


	uML_Continuation.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Continuation->setName("Continuation");
	uML_Continuation->setIsAbstract(false);
	uML_Continuation->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Continuation);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("same_name");
	con->getConstrainedElement()->push_back(uML_Continuation);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("enclosingOperand.combinedFragment->notEmpty() and"\
	"let parentInteraction : Set(Interaction) = "\
	"enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->"\
	"collect(enclosingInteraction).oclAsType(Interaction)->asSet()"\
	"in "\
	"(parentInteraction->size() = 1) "\
	"and let peerInteractions : Set(Interaction) ="\
	" (parentInteraction->union(parentInteraction->collect(_'context')->collect(behavior)->"\
	" select(oclIsKindOf(Interaction)).oclAsType(Interaction)->asSet())->asSet()) in"\
	" (peerInteractions->notEmpty()) and "\
	"  let combinedFragments1 : Set(CombinedFragment) = peerInteractions.fragment->"\
	" select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet() in"\
	"   combinedFragments1->notEmpty() and  combinedFragments1->closure(operand.fragment->"\
	"   select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment))->asSet().operand.fragment->"\
	"   select(oclIsKindOf(Continuation)).oclAsType(Continuation)->asSet()->"\
	"   forAll(c : Continuation |  (c.name = self.name) implies "\
	"  (c.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by self"\
	"  self.covered->asSet()->"\
	"  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))"\
	"   and"\
	" (self.covered->asSet()->forAll(cl : Lifeline | --  cl must be common to one lifeline covered by c"\
	" c.covered->asSet()->"\
	"  select(represents = cl.represents and selector = cl.selector)->asSet()->size()=1))"\
	"  )");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Continuation->getOwnedRule()->push_back(con);
	con->setContext(uML_Continuation->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("first_or_last_interaction_fragment");
	con->getConstrainedElement()->push_back(uML_Continuation);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back(" enclosingOperand->notEmpty() and "\
	" let peerFragments : OrderedSet(InteractionFragment) =  enclosingOperand.fragment in "\
	"   ( peerFragments->notEmpty() and "\
	"   ((peerFragments->first() = self) or  (peerFragments->last() = self)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Continuation->getOwnedRule()->push_back(con);
	con->setContext(uML_Continuation->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("global");
	con->getConstrainedElement()->push_back(uML_Continuation);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("enclosingOperand->notEmpty() and"\
	"  let operandLifelines : Set(Lifeline) =  enclosingOperand.covered in "\
	"    (operandLifelines->notEmpty() and "\
	"    operandLifelines->forAll(ol :Lifeline |self.covered->includes(ol)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Continuation->getOwnedRule()->push_back(con);
	con->setContext(uML_Continuation->getNamespace());
	
	
	uML_Continuation_setting.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Continuation_setting->setName("setting");
	uML_Continuation_setting->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Continuation_setting->setLower(1);
	uML_Continuation_setting->setUpper(1);
	uML_Continuation->getOwnedAttribute()->push_back(uML_Continuation_setting);
	uML_Continuation_setting->setClass(uML_Continuation);
	uML_Continuation_setting->setDefaultValue(uML_Continuation_setting_defaultValue_LiteralBoolean_UML_Continuation_setting);
	
	
	
	


	uML_ControlFlow.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ControlFlow->setName("ControlFlow");
	uML_ControlFlow->setIsAbstract(false);
	uML_ControlFlow->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ControlFlow);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("object_nodes");
	con->getConstrainedElement()->push_back(uML_ControlFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(source.oclIsKindOf(ObjectNode) implies source.oclAsType(ObjectNode).isControlType) and "\
	"(target.oclIsKindOf(ObjectNode) implies target.oclAsType(ObjectNode).isControlType)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ControlFlow->getOwnedRule()->push_back(con);
	con->setContext(uML_ControlFlow->getNamespace());
	
	
	
	
	


	uML_ControlNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ControlNode->setName("ControlNode");
	uML_ControlNode->setIsAbstract(true);
	uML_ControlNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ControlNode);
	
	//constraints
	
	
	
	
	


	uML_CreateLinkAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_CreateLinkAction->setName("CreateLinkAction");
	uML_CreateLinkAction->setIsAbstract(false);
	uML_CreateLinkAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_CreateLinkAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("association_not_abstract");
	con->getConstrainedElement()->push_back(uML_CreateLinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not self.association().isAbstract");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CreateLinkAction->getOwnedRule()->push_back(con);
	con->setContext(uML_CreateLinkAction->getNamespace());
	
	
	uML_CreateLinkAction_endData.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_CreateLinkAction_endData->setName("endData");
	uML_CreateLinkAction_endData->setType(get_UML_LinkEndCreationData());
	uML_CreateLinkAction_endData->setLower(2);
	uML_CreateLinkAction_endData->setUpper(-1);
	uML_CreateLinkAction->getOwnedAttribute()->push_back(uML_CreateLinkAction_endData);
	uML_CreateLinkAction_endData->setClass(uML_CreateLinkAction);
	
	
	
	
	


	uML_CreateLinkObjectAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_CreateLinkObjectAction->setName("CreateLinkObjectAction");
	uML_CreateLinkObjectAction->setIsAbstract(false);
	uML_CreateLinkObjectAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_CreateLinkObjectAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_of_result");
	con->getConstrainedElement()->push_back(uML_CreateLinkObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.type = association()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CreateLinkObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_CreateLinkObjectAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_CreateLinkObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CreateLinkObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_CreateLinkObjectAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("association_class");
	con->getConstrainedElement()->push_back(uML_CreateLinkObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.association().oclIsKindOf(AssociationClass)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CreateLinkObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_CreateLinkObjectAction->getNamespace());
	
	
	uML_CreateLinkObjectAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_CreateLinkObjectAction_result->setName("result");
	uML_CreateLinkObjectAction_result->setType(get_UML_OutputPin());
	uML_CreateLinkObjectAction_result->setLower(1);
	uML_CreateLinkObjectAction_result->setUpper(1);
	uML_CreateLinkObjectAction->getOwnedAttribute()->push_back(uML_CreateLinkObjectAction_result);
	uML_CreateLinkObjectAction_result->setClass(uML_CreateLinkObjectAction);
	
	
	
	
	


	uML_CreateObjectAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_CreateObjectAction->setName("CreateObjectAction");
	uML_CreateObjectAction->setIsAbstract(false);
	uML_CreateObjectAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_CreateObjectAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_CreateObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CreateObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_CreateObjectAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("same_type");
	con->getConstrainedElement()->push_back(uML_CreateObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.type = classifier");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CreateObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_CreateObjectAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("classifier_not_association_class");
	con->getConstrainedElement()->push_back(uML_CreateObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not classifier.oclIsKindOf(AssociationClass)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CreateObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_CreateObjectAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("classifier_not_abstract");
	con->getConstrainedElement()->push_back(uML_CreateObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not classifier.isAbstract");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_CreateObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_CreateObjectAction->getNamespace());
	
	
	uML_CreateObjectAction_classifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_CreateObjectAction_classifier->setName("classifier");
	uML_CreateObjectAction_classifier->setType(get_UML_Classifier());
	uML_CreateObjectAction_classifier->setLower(1);
	uML_CreateObjectAction_classifier->setUpper(1);
	uML_CreateObjectAction->getOwnedAttribute()->push_back(uML_CreateObjectAction_classifier);
	uML_CreateObjectAction_classifier->setClass(uML_CreateObjectAction);
	
	
	uML_CreateObjectAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_CreateObjectAction_result->setName("result");
	uML_CreateObjectAction_result->setType(get_UML_OutputPin());
	uML_CreateObjectAction_result->setLower(1);
	uML_CreateObjectAction_result->setUpper(1);
	uML_CreateObjectAction->getOwnedAttribute()->push_back(uML_CreateObjectAction_result);
	uML_CreateObjectAction_result->setClass(uML_CreateObjectAction);
	
	
	
	
	


	uML_DataStoreNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_DataStoreNode->setName("DataStoreNode");
	uML_DataStoreNode->setIsAbstract(false);
	uML_DataStoreNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_DataStoreNode);
	
	//constraints
	
	
	
	
	


	uML_DataType.reset(uml::UmlFactory::eInstance()->createClass());
	uML_DataType->setName("DataType");
	uML_DataType->setIsAbstract(false);
	uML_DataType->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_DataType);
	
	//constraints
	
	
	uML_DataType_ownedAttribute.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DataType_ownedAttribute->setName("ownedAttribute");
	uML_DataType_ownedAttribute->setType(get_UML_Property());
	uML_DataType_ownedAttribute->setLower(0);
	uML_DataType_ownedAttribute->setUpper(-1);
	uML_DataType->getOwnedAttribute()->push_back(uML_DataType_ownedAttribute);
	uML_DataType_ownedAttribute->setClass(uML_DataType);
	
	
	uML_DataType_ownedOperation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DataType_ownedOperation->setName("ownedOperation");
	uML_DataType_ownedOperation->setType(get_UML_Operation());
	uML_DataType_ownedOperation->setLower(0);
	uML_DataType_ownedOperation->setUpper(-1);
	uML_DataType->getOwnedAttribute()->push_back(uML_DataType_ownedOperation);
	uML_DataType_ownedOperation->setClass(uML_DataType);
	
	
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->setName("createOwnedAttribute");
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setName("");
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setType(get_UML_Property());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setLower(1);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setUpper(1);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name->setName("name");
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name->setLower(0);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name->setUpper(1);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type->setName("type");
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type->setType(get_UML_Type());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type->setLower(0);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type->setUpper(1);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_lower.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_lower->setName("lower");
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_lower->setLower(1);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_lower->setUpper(1);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_lower->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_lower);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_upper.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_upper->setName("upper");
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_upper->setLower(1);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_upper->setUpper(1);
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_upper->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_upper);
	
	
	uML_DataType->getOwnedOperation()->push_back(uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural); 
	uML_DataType_createOwnedOperation_String_String_Type_Type.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_DataType_createOwnedOperation_String_String_Type_Type->setName("createOwnedOperation");
	uML_DataType_createOwnedOperation_String_String_Type_Type_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_DataType_createOwnedOperation_String_String_Type_Type_return->setName("");
	uML_DataType_createOwnedOperation_String_String_Type_Type_return->setType(get_UML_Operation());
	uML_DataType_createOwnedOperation_String_String_Type_Type_return->setLower(1);
	uML_DataType_createOwnedOperation_String_String_Type_Type_return->setUpper(1);
	uML_DataType_createOwnedOperation_String_String_Type_Type_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_DataType_createOwnedOperation_String_String_Type_Type_return);
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name->setName("name");
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name->setLower(0);
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name->setUpper(1);
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name);
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames->setName("parameterNames");
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames->setLower(0);
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames->setUpper(-1);
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames);
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes->setName("parameterTypes");
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes->setType(get_UML_Type());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes->setLower(0);
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes->setUpper(-1);
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes);
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType->setName("returnType");
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType->setType(get_UML_Type());
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType->setLower(0);
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType->setUpper(1);
	uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_DataType_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType);
	
	
	uML_DataType->getOwnedOperation()->push_back(uML_DataType_createOwnedOperation_String_String_Type_Type); 
	
	


	uML_DecisionNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_DecisionNode->setName("DecisionNode");
	uML_DecisionNode->setIsAbstract(false);
	uML_DecisionNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_DecisionNode);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("zero_input_parameters");
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(decisionInput<>null and decisionInputFlow=null and incoming->exists(oclIsKindOf(ControlFlow))) implies"\
	"   decisionInput.inputParameters()->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DecisionNode->getOwnedRule()->push_back(con);
	con->setContext(uML_DecisionNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("incoming_outgoing_edges");
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(incoming->size() = 1 or incoming->size() = 2) and outgoing->size() > 0");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DecisionNode->getOwnedRule()->push_back(con);
	con->setContext(uML_DecisionNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("decision_input_flow_incoming");
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("incoming->includes(decisionInputFlow)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DecisionNode->getOwnedRule()->push_back(con);
	con->setContext(uML_DecisionNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("incoming_control_one_input_parameter");
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(decisionInput<>null and decisionInputFlow<>null and incoming->exists(oclIsKindOf(ControlFlow))) implies"\
	"	decisionInput.inputParameters()->size()=1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DecisionNode->getOwnedRule()->push_back(con);
	con->setContext(uML_DecisionNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("edges");
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let allEdges: Set(ActivityEdge) = incoming->union(outgoing) in"\
	"let allRelevantEdges: Set(ActivityEdge) = if decisionInputFlow->notEmpty() then allEdges->excluding(decisionInputFlow) else allEdges endif in"\
	"allRelevantEdges->forAll(oclIsKindOf(ControlFlow)) or allRelevantEdges->forAll(oclIsKindOf(ObjectFlow))"\
	"");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DecisionNode->getOwnedRule()->push_back(con);
	con->setContext(uML_DecisionNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("incoming_object_one_input_parameter");
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(decisionInput<>null and decisionInputFlow=null and incoming->forAll(oclIsKindOf(ObjectFlow))) implies"\
	"	decisionInput.inputParameters()->size()=1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DecisionNode->getOwnedRule()->push_back(con);
	con->setContext(uML_DecisionNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("two_input_parameters");
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(decisionInput<>null and decisionInputFlow<>null and incoming->forAll(oclIsKindOf(ObjectFlow))) implies"\
	"	decisionInput.inputParameters()->size()=2");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DecisionNode->getOwnedRule()->push_back(con);
	con->setContext(uML_DecisionNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("parameters");
	con->getConstrainedElement()->push_back(uML_DecisionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("decisionInput<>null implies "\
	"  (decisionInput.ownedParameter->forAll(par | "\
	"     par.direction <> ParameterDirectionKind::out and "\
	"     par.direction <> ParameterDirectionKind::inout ) and"\
	"   decisionInput.ownedParameter->one(par | "\
	"     par.direction <> ParameterDirectionKind::return))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DecisionNode->getOwnedRule()->push_back(con);
	con->setContext(uML_DecisionNode->getNamespace());
	
	
	uML_DecisionNode_decisionInput.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DecisionNode_decisionInput->setName("decisionInput");
	uML_DecisionNode_decisionInput->setType(get_UML_Behavior());
	uML_DecisionNode_decisionInput->setLower(0);
	uML_DecisionNode_decisionInput->setUpper(1);
	uML_DecisionNode->getOwnedAttribute()->push_back(uML_DecisionNode_decisionInput);
	uML_DecisionNode_decisionInput->setClass(uML_DecisionNode);
	
	
	uML_DecisionNode_decisionInputFlow.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DecisionNode_decisionInputFlow->setName("decisionInputFlow");
	uML_DecisionNode_decisionInputFlow->setType(get_UML_ObjectFlow());
	uML_DecisionNode_decisionInputFlow->setLower(0);
	uML_DecisionNode_decisionInputFlow->setUpper(1);
	uML_DecisionNode->getOwnedAttribute()->push_back(uML_DecisionNode_decisionInputFlow);
	uML_DecisionNode_decisionInputFlow->setClass(uML_DecisionNode);
	
	
	
	
	


	uML_Dependency.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Dependency->setName("Dependency");
	uML_Dependency->setIsAbstract(false);
	uML_Dependency->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Dependency);
	
	//constraints
	
	
	uML_Dependency_client.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Dependency_client->setName("client");
	uML_Dependency_client->setType(get_UML_NamedElement());
	uML_Dependency_client->setLower(1);
	uML_Dependency_client->setUpper(-1);
	uML_Dependency->getOwnedAttribute()->push_back(uML_Dependency_client);
	uML_Dependency_client->setClass(uML_Dependency);
	
	
	uML_Dependency_supplier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Dependency_supplier->setName("supplier");
	uML_Dependency_supplier->setType(get_UML_NamedElement());
	uML_Dependency_supplier->setLower(1);
	uML_Dependency_supplier->setUpper(-1);
	uML_Dependency->getOwnedAttribute()->push_back(uML_Dependency_supplier);
	uML_Dependency_supplier->setClass(uML_Dependency);
	
	
	
	
	


	uML_DeployedArtifact.reset(uml::UmlFactory::eInstance()->createClass());
	uML_DeployedArtifact->setName("DeployedArtifact");
	uML_DeployedArtifact->setIsAbstract(true);
	uML_DeployedArtifact->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_DeployedArtifact);
	
	//constraints
	
	
	
	
	


	uML_Deployment.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Deployment->setName("Deployment");
	uML_Deployment->setIsAbstract(false);
	uML_Deployment->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Deployment);
	
	//constraints
	
	
	uML_Deployment_configuration.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Deployment_configuration->setName("configuration");
	uML_Deployment_configuration->setType(get_UML_DeploymentSpecification());
	uML_Deployment_configuration->setLower(0);
	uML_Deployment_configuration->setUpper(-1);
	uML_Deployment->getOwnedAttribute()->push_back(uML_Deployment_configuration);
	uML_Deployment_configuration->setClass(uML_Deployment);
	
	
	uML_Deployment_deployedArtifact.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Deployment_deployedArtifact->setName("deployedArtifact");
	uML_Deployment_deployedArtifact->setType(get_UML_DeployedArtifact());
	uML_Deployment_deployedArtifact->setLower(0);
	uML_Deployment_deployedArtifact->setUpper(-1);
	uML_Deployment->getOwnedAttribute()->push_back(uML_Deployment_deployedArtifact);
	uML_Deployment_deployedArtifact->setClass(uML_Deployment);
	
	
	uML_Deployment_location.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Deployment_location->setName("location");
	uML_Deployment_location->setType(get_UML_DeploymentTarget());
	uML_Deployment_location->setLower(1);
	uML_Deployment_location->setUpper(1);
	uML_Deployment->getOwnedAttribute()->push_back(uML_Deployment_location);
	uML_Deployment_location->setClass(uML_Deployment);
	
	
	
	
	


	uML_DeploymentSpecification.reset(uml::UmlFactory::eInstance()->createClass());
	uML_DeploymentSpecification->setName("DeploymentSpecification");
	uML_DeploymentSpecification->setIsAbstract(false);
	uML_DeploymentSpecification->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_DeploymentSpecification);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("deployment_target");
	con->getConstrainedElement()->push_back(uML_DeploymentSpecification);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("deployment->forAll (location.oclIsKindOf(ExecutionEnvironment))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DeploymentSpecification->getOwnedRule()->push_back(con);
	con->setContext(uML_DeploymentSpecification->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("deployed_elements");
	con->getConstrainedElement()->push_back(uML_DeploymentSpecification);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("deployment->forAll (location.deployedElement->forAll (oclIsKindOf(Component)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DeploymentSpecification->getOwnedRule()->push_back(con);
	con->setContext(uML_DeploymentSpecification->getNamespace());
	
	
	uML_DeploymentSpecification_deployment.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DeploymentSpecification_deployment->setName("deployment");
	uML_DeploymentSpecification_deployment->setType(get_UML_Deployment());
	uML_DeploymentSpecification_deployment->setLower(0);
	uML_DeploymentSpecification_deployment->setUpper(1);
	uML_DeploymentSpecification->getOwnedAttribute()->push_back(uML_DeploymentSpecification_deployment);
	uML_DeploymentSpecification_deployment->setClass(uML_DeploymentSpecification);
	
	
	uML_DeploymentSpecification_deploymentLocation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DeploymentSpecification_deploymentLocation->setName("deploymentLocation");
	uML_DeploymentSpecification_deploymentLocation->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_DeploymentSpecification_deploymentLocation->setLower(0);
	uML_DeploymentSpecification_deploymentLocation->setUpper(1);
	uML_DeploymentSpecification->getOwnedAttribute()->push_back(uML_DeploymentSpecification_deploymentLocation);
	uML_DeploymentSpecification_deploymentLocation->setClass(uML_DeploymentSpecification);
	
	
	uML_DeploymentSpecification_executionLocation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DeploymentSpecification_executionLocation->setName("executionLocation");
	uML_DeploymentSpecification_executionLocation->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_DeploymentSpecification_executionLocation->setLower(0);
	uML_DeploymentSpecification_executionLocation->setUpper(1);
	uML_DeploymentSpecification->getOwnedAttribute()->push_back(uML_DeploymentSpecification_executionLocation);
	uML_DeploymentSpecification_executionLocation->setClass(uML_DeploymentSpecification);
	
	
	
	
	


	uML_DeploymentTarget.reset(uml::UmlFactory::eInstance()->createClass());
	uML_DeploymentTarget->setName("DeploymentTarget");
	uML_DeploymentTarget->setIsAbstract(true);
	uML_DeploymentTarget->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_DeploymentTarget);
	
	//constraints
	
	
	uML_DeploymentTarget_deployedElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DeploymentTarget_deployedElement->setName("deployedElement");
	uML_DeploymentTarget_deployedElement->setType(get_UML_PackageableElement());
	uML_DeploymentTarget_deployedElement->setLower(0);
	uML_DeploymentTarget_deployedElement->setUpper(-1);
	uML_DeploymentTarget->getOwnedAttribute()->push_back(uML_DeploymentTarget_deployedElement);
	uML_DeploymentTarget_deployedElement->setClass(uML_DeploymentTarget);
	
	
	uML_DeploymentTarget_deployment.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DeploymentTarget_deployment->setName("deployment");
	uML_DeploymentTarget_deployment->setType(get_UML_Deployment());
	uML_DeploymentTarget_deployment->setLower(0);
	uML_DeploymentTarget_deployment->setUpper(-1);
	uML_DeploymentTarget->getOwnedAttribute()->push_back(uML_DeploymentTarget_deployment);
	uML_DeploymentTarget_deployment->setClass(uML_DeploymentTarget);
	
	
	
	uML_DeploymentTarget_deployedElement_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_DeploymentTarget_deployedElement_->setName("deployedElement");
	uML_DeploymentTarget_deployedElement_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_DeploymentTarget_deployedElement_result->setName("result");
	uML_DeploymentTarget_deployedElement_result->setType(get_UML_PackageableElement());
	uML_DeploymentTarget_deployedElement_result->setLower(0);
	uML_DeploymentTarget_deployedElement_result->setUpper(-1);
	uML_DeploymentTarget_deployedElement_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_DeploymentTarget_deployedElement_->getOwnedParameter()->push_back(uML_DeploymentTarget_deployedElement_result);
	
	
	uML_DeploymentTarget->getOwnedOperation()->push_back(uML_DeploymentTarget_deployedElement_); 
	
	


	uML_DestroyLinkAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_DestroyLinkAction->setName("DestroyLinkAction");
	uML_DestroyLinkAction->setIsAbstract(false);
	uML_DestroyLinkAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_DestroyLinkAction);
	
	//constraints
	
	
	uML_DestroyLinkAction_endData.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DestroyLinkAction_endData->setName("endData");
	uML_DestroyLinkAction_endData->setType(get_UML_LinkEndDestructionData());
	uML_DestroyLinkAction_endData->setLower(2);
	uML_DestroyLinkAction_endData->setUpper(-1);
	uML_DestroyLinkAction->getOwnedAttribute()->push_back(uML_DestroyLinkAction_endData);
	uML_DestroyLinkAction_endData->setClass(uML_DestroyLinkAction);
	
	
	
	
	


	uML_DestroyObjectAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_DestroyObjectAction->setName("DestroyObjectAction");
	uML_DestroyObjectAction->setIsAbstract(false);
	uML_DestroyObjectAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_DestroyObjectAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_DestroyObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("target.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DestroyObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_DestroyObjectAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_type");
	con->getConstrainedElement()->push_back(uML_DestroyObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("target.type= null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DestroyObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_DestroyObjectAction->getNamespace());
	
	
	uML_DestroyObjectAction_isDestroyLinks.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DestroyObjectAction_isDestroyLinks->setName("isDestroyLinks");
	uML_DestroyObjectAction_isDestroyLinks->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_DestroyObjectAction_isDestroyLinks->setLower(1);
	uML_DestroyObjectAction_isDestroyLinks->setUpper(1);
	uML_DestroyObjectAction->getOwnedAttribute()->push_back(uML_DestroyObjectAction_isDestroyLinks);
	uML_DestroyObjectAction_isDestroyLinks->setClass(uML_DestroyObjectAction);
	uML_DestroyObjectAction_isDestroyLinks->setDefaultValue(uML_DestroyObjectAction_isDestroyLinks_defaultValue_LiteralBoolean_UML_DestroyObjectAction_isDestroyLinks);
	
	uML_DestroyObjectAction_isDestroyOwnedObjects.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DestroyObjectAction_isDestroyOwnedObjects->setName("isDestroyOwnedObjects");
	uML_DestroyObjectAction_isDestroyOwnedObjects->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_DestroyObjectAction_isDestroyOwnedObjects->setLower(1);
	uML_DestroyObjectAction_isDestroyOwnedObjects->setUpper(1);
	uML_DestroyObjectAction->getOwnedAttribute()->push_back(uML_DestroyObjectAction_isDestroyOwnedObjects);
	uML_DestroyObjectAction_isDestroyOwnedObjects->setClass(uML_DestroyObjectAction);
	uML_DestroyObjectAction_isDestroyOwnedObjects->setDefaultValue(uML_DestroyObjectAction_isDestroyOwnedObjects_defaultValue_LiteralBoolean_UML_DestroyObjectAction_isDestroyOwnedObjects);
	
	uML_DestroyObjectAction_target.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DestroyObjectAction_target->setName("target");
	uML_DestroyObjectAction_target->setType(get_UML_InputPin());
	uML_DestroyObjectAction_target->setLower(1);
	uML_DestroyObjectAction_target->setUpper(1);
	uML_DestroyObjectAction->getOwnedAttribute()->push_back(uML_DestroyObjectAction_target);
	uML_DestroyObjectAction_target->setClass(uML_DestroyObjectAction);
	
	
	
	
	


	uML_DestructionOccurrenceSpecification.reset(uml::UmlFactory::eInstance()->createClass());
	uML_DestructionOccurrenceSpecification->setName("DestructionOccurrenceSpecification");
	uML_DestructionOccurrenceSpecification->setIsAbstract(false);
	uML_DestructionOccurrenceSpecification->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_DestructionOccurrenceSpecification);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_occurrence_specifications_below");
	con->getConstrainedElement()->push_back(uML_DestructionOccurrenceSpecification);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let o : InteractionOperand = enclosingOperand in o->notEmpty() and "\
	"let peerEvents : OrderedSet(OccurrenceSpecification) = covered.events->select(enclosingOperand = o)"\
	"in peerEvents->last() = self");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DestructionOccurrenceSpecification->getOwnedRule()->push_back(con);
	con->setContext(uML_DestructionOccurrenceSpecification->getNamespace());
	
	
	
	
	


	uML_Device.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Device->setName("Device");
	uML_Device->setIsAbstract(false);
	uML_Device->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Device);
	
	//constraints
	
	
	
	
	


	uML_DirectedRelationship.reset(uml::UmlFactory::eInstance()->createClass());
	uML_DirectedRelationship->setName("DirectedRelationship");
	uML_DirectedRelationship->setIsAbstract(true);
	uML_DirectedRelationship->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_DirectedRelationship);
	
	//constraints
	
	
	uML_DirectedRelationship_source.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DirectedRelationship_source->setName("source");
	uML_DirectedRelationship_source->setType(get_UML_Element());
	uML_DirectedRelationship_source->setLower(1);
	uML_DirectedRelationship_source->setUpper(-1);
	uML_DirectedRelationship->getOwnedAttribute()->push_back(uML_DirectedRelationship_source);
	uML_DirectedRelationship_source->setClass(uML_DirectedRelationship);
	
	
	uML_DirectedRelationship_target.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DirectedRelationship_target->setName("target");
	uML_DirectedRelationship_target->setType(get_UML_Element());
	uML_DirectedRelationship_target->setLower(1);
	uML_DirectedRelationship_target->setUpper(-1);
	uML_DirectedRelationship->getOwnedAttribute()->push_back(uML_DirectedRelationship_target);
	uML_DirectedRelationship_target->setClass(uML_DirectedRelationship);
	
	
	
	
	


	uML_Duration.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Duration->setName("Duration");
	uML_Duration->setIsAbstract(false);
	uML_Duration->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Duration);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_expr_requires_observation");
	con->getConstrainedElement()->push_back(uML_Duration);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(DurationObservation)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Duration->getOwnedRule()->push_back(con);
	con->setContext(uML_Duration->getNamespace());
	
	
	uML_Duration_expr.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Duration_expr->setName("expr");
	uML_Duration_expr->setType(get_UML_ValueSpecification());
	uML_Duration_expr->setLower(0);
	uML_Duration_expr->setUpper(1);
	uML_Duration->getOwnedAttribute()->push_back(uML_Duration_expr);
	uML_Duration_expr->setClass(uML_Duration);
	
	
	uML_Duration_observation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Duration_observation->setName("observation");
	uML_Duration_observation->setType(get_UML_Observation());
	uML_Duration_observation->setLower(0);
	uML_Duration_observation->setUpper(-1);
	uML_Duration->getOwnedAttribute()->push_back(uML_Duration_observation);
	uML_Duration_observation->setClass(uML_Duration);
	
	
	
	uML_Duration_stringValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Duration_stringValue_->setName("stringValue");
	uML_Duration_stringValue__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Duration_stringValue__return->setName("");
	uML_Duration_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Duration_stringValue__return->setLower(1);
	uML_Duration_stringValue__return->setUpper(1);
	uML_Duration_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Duration_stringValue_->getOwnedParameter()->push_back(uML_Duration_stringValue__return);
	
	
	uML_Duration->getOwnedOperation()->push_back(uML_Duration_stringValue_); 
	
	


	uML_DurationConstraint.reset(uml::UmlFactory::eInstance()->createClass());
	uML_DurationConstraint->setName("DurationConstraint");
	uML_DurationConstraint->setIsAbstract(false);
	uML_DurationConstraint->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_DurationConstraint);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("has_one_or_two_constrainedElements");
	con->getConstrainedElement()->push_back(uML_DurationConstraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("constrainedElement->size() = 1 or constrainedElement->size()=2");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DurationConstraint->getOwnedRule()->push_back(con);
	con->setContext(uML_DurationConstraint->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("first_event_multiplicity");
	con->getConstrainedElement()->push_back(uML_DurationConstraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("if (constrainedElement->size() = 2)"\
	"  then (firstEvent->size() = 2) else (firstEvent->size() = 0) "\
	"endif");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DurationConstraint->getOwnedRule()->push_back(con);
	con->setContext(uML_DurationConstraint->getNamespace());
	
	
	uML_DurationConstraint_firstEvent.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DurationConstraint_firstEvent->setName("firstEvent");
	uML_DurationConstraint_firstEvent->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_DurationConstraint_firstEvent->setLower(0);
	uML_DurationConstraint_firstEvent->setUpper(2);
	uML_DurationConstraint->getOwnedAttribute()->push_back(uML_DurationConstraint_firstEvent);
	uML_DurationConstraint_firstEvent->setClass(uML_DurationConstraint);
	
	
	uML_DurationConstraint_specification.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DurationConstraint_specification->setName("specification");
	uML_DurationConstraint_specification->setType(get_UML_DurationInterval());
	uML_DurationConstraint_specification->setLower(1);
	uML_DurationConstraint_specification->setUpper(1);
	uML_DurationConstraint->getOwnedAttribute()->push_back(uML_DurationConstraint_specification);
	uML_DurationConstraint_specification->setClass(uML_DurationConstraint);
	
	
	
	
	


	uML_DurationInterval.reset(uml::UmlFactory::eInstance()->createClass());
	uML_DurationInterval->setName("DurationInterval");
	uML_DurationInterval->setIsAbstract(false);
	uML_DurationInterval->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_DurationInterval);
	
	//constraints
	
	
	uML_DurationInterval_max.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DurationInterval_max->setName("max");
	uML_DurationInterval_max->setType(get_UML_Duration());
	uML_DurationInterval_max->setLower(1);
	uML_DurationInterval_max->setUpper(1);
	uML_DurationInterval->getOwnedAttribute()->push_back(uML_DurationInterval_max);
	uML_DurationInterval_max->setClass(uML_DurationInterval);
	
	
	uML_DurationInterval_min.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DurationInterval_min->setName("min");
	uML_DurationInterval_min->setType(get_UML_Duration());
	uML_DurationInterval_min->setLower(1);
	uML_DurationInterval_min->setUpper(1);
	uML_DurationInterval->getOwnedAttribute()->push_back(uML_DurationInterval_min);
	uML_DurationInterval_min->setClass(uML_DurationInterval);
	
	
	
	
	


	uML_DurationObservation.reset(uml::UmlFactory::eInstance()->createClass());
	uML_DurationObservation->setName("DurationObservation");
	uML_DurationObservation->setIsAbstract(false);
	uML_DurationObservation->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_DurationObservation);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("first_event_multiplicity");
	con->getConstrainedElement()->push_back(uML_DurationObservation);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("if (event->size() = 2)"\
	"  then (firstEvent->size() = 2) else (firstEvent->size() = 0)"\
	"endif");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_DurationObservation->getOwnedRule()->push_back(con);
	con->setContext(uML_DurationObservation->getNamespace());
	
	
	uML_DurationObservation_event.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DurationObservation_event->setName("event");
	uML_DurationObservation_event->setType(get_UML_NamedElement());
	uML_DurationObservation_event->setLower(1);
	uML_DurationObservation_event->setUpper(2);
	uML_DurationObservation->getOwnedAttribute()->push_back(uML_DurationObservation_event);
	uML_DurationObservation_event->setClass(uML_DurationObservation);
	
	
	uML_DurationObservation_firstEvent.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_DurationObservation_firstEvent->setName("firstEvent");
	uML_DurationObservation_firstEvent->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_DurationObservation_firstEvent->setLower(0);
	uML_DurationObservation_firstEvent->setUpper(2);
	uML_DurationObservation->getOwnedAttribute()->push_back(uML_DurationObservation_firstEvent);
	uML_DurationObservation_firstEvent->setClass(uML_DurationObservation);
	
	
	
	
	


	uML_Element.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Element->setName("Element");
	uML_Element->setIsAbstract(true);
	uML_Element->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Element);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("has_owner");
	con->getConstrainedElement()->push_back(uML_Element);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("mustBeOwned() implies owner->notEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Element->getOwnedRule()->push_back(con);
	con->setContext(uML_Element->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("not_own_self");
	con->getConstrainedElement()->push_back(uML_Element);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not allOwnedElements()->includes(self)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Element->getOwnedRule()->push_back(con);
	con->setContext(uML_Element->getNamespace());
	
	
	uML_Element_ownedComment.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Element_ownedComment->setName("ownedComment");
	uML_Element_ownedComment->setType(get_UML_Comment());
	uML_Element_ownedComment->setLower(0);
	uML_Element_ownedComment->setUpper(-1);
	uML_Element->getOwnedAttribute()->push_back(uML_Element_ownedComment);
	uML_Element_ownedComment->setClass(uML_Element);
	
	
	uML_Element_ownedElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Element_ownedElement->setName("ownedElement");
	uML_Element_ownedElement->setType(get_UML_Element());
	uML_Element_ownedElement->setLower(0);
	uML_Element_ownedElement->setUpper(-1);
	uML_Element->getOwnedAttribute()->push_back(uML_Element_ownedElement);
	uML_Element_ownedElement->setClass(uML_Element);
	
	
	uML_Element_owner.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Element_owner->setName("owner");
	uML_Element_owner->setType(get_UML_Element());
	uML_Element_owner->setLower(0);
	uML_Element_owner->setUpper(1);
	uML_Element->getOwnedAttribute()->push_back(uML_Element_owner);
	uML_Element_owner->setClass(uML_Element);
	
	
	
	uML_Element_addKeyword_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_addKeyword_String->setName("addKeyword");
	uML_Element_addKeyword_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_addKeyword_String_return->setName("");
	uML_Element_addKeyword_String_return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_addKeyword_String_return->setLower(1);
	uML_Element_addKeyword_String_return->setUpper(1);
	uML_Element_addKeyword_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_addKeyword_String->getOwnedParameter()->push_back(uML_Element_addKeyword_String_return);
	uML_Element_addKeyword_String_UML_Element_addKeyword_keyword.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_addKeyword_String_UML_Element_addKeyword_keyword->setName("keyword");
	uML_Element_addKeyword_String_UML_Element_addKeyword_keyword->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Element_addKeyword_String_UML_Element_addKeyword_keyword->setLower(1);
	uML_Element_addKeyword_String_UML_Element_addKeyword_keyword->setUpper(1);
	uML_Element_addKeyword_String_UML_Element_addKeyword_keyword->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_addKeyword_String->getOwnedParameter()->push_back(uML_Element_addKeyword_String_UML_Element_addKeyword_keyword);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_addKeyword_String); 
	uML_Element_allOwnedElements_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_allOwnedElements_->setName("allOwnedElements");
	uML_Element_allOwnedElements_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_allOwnedElements_result->setName("result");
	uML_Element_allOwnedElements_result->setType(get_UML_Element());
	uML_Element_allOwnedElements_result->setLower(0);
	uML_Element_allOwnedElements_result->setUpper(-1);
	uML_Element_allOwnedElements_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_allOwnedElements_->getOwnedParameter()->push_back(uML_Element_allOwnedElements_result);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_allOwnedElements_); 
	uML_Element_applyStereotype_Stereotype.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_applyStereotype_Stereotype->setName("applyStereotype");
	uML_Element_applyStereotype_Stereotype_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_applyStereotype_Stereotype_return->setName("");
	uML_Element_applyStereotype_Stereotype_return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EObject());
	uML_Element_applyStereotype_Stereotype_return->setLower(1);
	uML_Element_applyStereotype_Stereotype_return->setUpper(1);
	uML_Element_applyStereotype_Stereotype_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_applyStereotype_Stereotype->getOwnedParameter()->push_back(uML_Element_applyStereotype_Stereotype_return);
	uML_Element_applyStereotype_Stereotype_UML_Element_applyStereotype_stereotype.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_applyStereotype_Stereotype_UML_Element_applyStereotype_stereotype->setName("stereotype");
	uML_Element_applyStereotype_Stereotype_UML_Element_applyStereotype_stereotype->setType(get_UML_Stereotype());
	uML_Element_applyStereotype_Stereotype_UML_Element_applyStereotype_stereotype->setLower(1);
	uML_Element_applyStereotype_Stereotype_UML_Element_applyStereotype_stereotype->setUpper(1);
	uML_Element_applyStereotype_Stereotype_UML_Element_applyStereotype_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_applyStereotype_Stereotype->getOwnedParameter()->push_back(uML_Element_applyStereotype_Stereotype_UML_Element_applyStereotype_stereotype);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_applyStereotype_Stereotype); 
	uML_Element_createEAnnotation_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_createEAnnotation_String->setName("createEAnnotation");
	uML_Element_createEAnnotation_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_createEAnnotation_String_return->setName("");
	uML_Element_createEAnnotation_String_return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EAnnotation());
	uML_Element_createEAnnotation_String_return->setLower(1);
	uML_Element_createEAnnotation_String_return->setUpper(1);
	uML_Element_createEAnnotation_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_createEAnnotation_String->getOwnedParameter()->push_back(uML_Element_createEAnnotation_String_return);
	uML_Element_createEAnnotation_String_UML_Element_createEAnnotation_source.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_createEAnnotation_String_UML_Element_createEAnnotation_source->setName("source");
	uML_Element_createEAnnotation_String_UML_Element_createEAnnotation_source->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Element_createEAnnotation_String_UML_Element_createEAnnotation_source->setLower(1);
	uML_Element_createEAnnotation_String_UML_Element_createEAnnotation_source->setUpper(1);
	uML_Element_createEAnnotation_String_UML_Element_createEAnnotation_source->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_createEAnnotation_String->getOwnedParameter()->push_back(uML_Element_createEAnnotation_String_UML_Element_createEAnnotation_source);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_createEAnnotation_String); 
	uML_Element_destroy_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_destroy_->setName("destroy");
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_destroy_); 
	uML_Element_getApplicableStereotype_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getApplicableStereotype_String->setName("getApplicableStereotype");
	uML_Element_getApplicableStereotype_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getApplicableStereotype_String_return->setName("");
	uML_Element_getApplicableStereotype_String_return->setType(get_UML_Stereotype());
	uML_Element_getApplicableStereotype_String_return->setLower(0);
	uML_Element_getApplicableStereotype_String_return->setUpper(1);
	uML_Element_getApplicableStereotype_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getApplicableStereotype_String->getOwnedParameter()->push_back(uML_Element_getApplicableStereotype_String_return);
	uML_Element_getApplicableStereotype_String_UML_Element_getApplicableStereotype_qualifiedName.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getApplicableStereotype_String_UML_Element_getApplicableStereotype_qualifiedName->setName("qualifiedName");
	uML_Element_getApplicableStereotype_String_UML_Element_getApplicableStereotype_qualifiedName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Element_getApplicableStereotype_String_UML_Element_getApplicableStereotype_qualifiedName->setLower(1);
	uML_Element_getApplicableStereotype_String_UML_Element_getApplicableStereotype_qualifiedName->setUpper(1);
	uML_Element_getApplicableStereotype_String_UML_Element_getApplicableStereotype_qualifiedName->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_getApplicableStereotype_String->getOwnedParameter()->push_back(uML_Element_getApplicableStereotype_String_UML_Element_getApplicableStereotype_qualifiedName);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getApplicableStereotype_String); 
	uML_Element_getApplicableStereotypes_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getApplicableStereotypes_->setName("getApplicableStereotypes");
	uML_Element_getApplicableStereotypes__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getApplicableStereotypes__return->setName("");
	uML_Element_getApplicableStereotypes__return->setType(get_UML_Stereotype());
	uML_Element_getApplicableStereotypes__return->setLower(0);
	uML_Element_getApplicableStereotypes__return->setUpper(-1);
	uML_Element_getApplicableStereotypes__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getApplicableStereotypes_->getOwnedParameter()->push_back(uML_Element_getApplicableStereotypes__return);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getApplicableStereotypes_); 
	uML_Element_getAppliedStereotype_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getAppliedStereotype_String->setName("getAppliedStereotype");
	uML_Element_getAppliedStereotype_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getAppliedStereotype_String_return->setName("");
	uML_Element_getAppliedStereotype_String_return->setType(get_UML_Stereotype());
	uML_Element_getAppliedStereotype_String_return->setLower(0);
	uML_Element_getAppliedStereotype_String_return->setUpper(1);
	uML_Element_getAppliedStereotype_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getAppliedStereotype_String->getOwnedParameter()->push_back(uML_Element_getAppliedStereotype_String_return);
	uML_Element_getAppliedStereotype_String_UML_Element_getAppliedStereotype_qualifiedName.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getAppliedStereotype_String_UML_Element_getAppliedStereotype_qualifiedName->setName("qualifiedName");
	uML_Element_getAppliedStereotype_String_UML_Element_getAppliedStereotype_qualifiedName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Element_getAppliedStereotype_String_UML_Element_getAppliedStereotype_qualifiedName->setLower(1);
	uML_Element_getAppliedStereotype_String_UML_Element_getAppliedStereotype_qualifiedName->setUpper(1);
	uML_Element_getAppliedStereotype_String_UML_Element_getAppliedStereotype_qualifiedName->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_getAppliedStereotype_String->getOwnedParameter()->push_back(uML_Element_getAppliedStereotype_String_UML_Element_getAppliedStereotype_qualifiedName);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getAppliedStereotype_String); 
	uML_Element_getAppliedStereotypes_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getAppliedStereotypes_->setName("getAppliedStereotypes");
	uML_Element_getAppliedStereotypes__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getAppliedStereotypes__return->setName("");
	uML_Element_getAppliedStereotypes__return->setType(get_UML_Stereotype());
	uML_Element_getAppliedStereotypes__return->setLower(0);
	uML_Element_getAppliedStereotypes__return->setUpper(-1);
	uML_Element_getAppliedStereotypes__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getAppliedStereotypes_->getOwnedParameter()->push_back(uML_Element_getAppliedStereotypes__return);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getAppliedStereotypes_); 
	uML_Element_getAppliedSubstereotype_Stereotype_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getAppliedSubstereotype_Stereotype_String->setName("getAppliedSubstereotype");
	uML_Element_getAppliedSubstereotype_Stereotype_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getAppliedSubstereotype_Stereotype_String_return->setName("");
	uML_Element_getAppliedSubstereotype_Stereotype_String_return->setType(get_UML_Stereotype());
	uML_Element_getAppliedSubstereotype_Stereotype_String_return->setLower(0);
	uML_Element_getAppliedSubstereotype_Stereotype_String_return->setUpper(1);
	uML_Element_getAppliedSubstereotype_Stereotype_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getAppliedSubstereotype_Stereotype_String->getOwnedParameter()->push_back(uML_Element_getAppliedSubstereotype_Stereotype_String_return);
	uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_stereotype.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_stereotype->setName("stereotype");
	uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_stereotype->setType(get_UML_Stereotype());
	uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_stereotype->setLower(1);
	uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_stereotype->setUpper(1);
	uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_getAppliedSubstereotype_Stereotype_String->getOwnedParameter()->push_back(uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_stereotype);
	uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_qualifiedName.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_qualifiedName->setName("qualifiedName");
	uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_qualifiedName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_qualifiedName->setLower(1);
	uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_qualifiedName->setUpper(1);
	uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_qualifiedName->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_getAppliedSubstereotype_Stereotype_String->getOwnedParameter()->push_back(uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_qualifiedName);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getAppliedSubstereotype_Stereotype_String); 
	uML_Element_getAppliedSubstereotypes_Stereotype.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getAppliedSubstereotypes_Stereotype->setName("getAppliedSubstereotypes");
	uML_Element_getAppliedSubstereotypes_Stereotype_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getAppliedSubstereotypes_Stereotype_return->setName("");
	uML_Element_getAppliedSubstereotypes_Stereotype_return->setType(get_UML_Stereotype());
	uML_Element_getAppliedSubstereotypes_Stereotype_return->setLower(0);
	uML_Element_getAppliedSubstereotypes_Stereotype_return->setUpper(-1);
	uML_Element_getAppliedSubstereotypes_Stereotype_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getAppliedSubstereotypes_Stereotype->getOwnedParameter()->push_back(uML_Element_getAppliedSubstereotypes_Stereotype_return);
	uML_Element_getAppliedSubstereotypes_Stereotype_UML_Element_getAppliedSubstereotypes_stereotype.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getAppliedSubstereotypes_Stereotype_UML_Element_getAppliedSubstereotypes_stereotype->setName("stereotype");
	uML_Element_getAppliedSubstereotypes_Stereotype_UML_Element_getAppliedSubstereotypes_stereotype->setType(get_UML_Stereotype());
	uML_Element_getAppliedSubstereotypes_Stereotype_UML_Element_getAppliedSubstereotypes_stereotype->setLower(1);
	uML_Element_getAppliedSubstereotypes_Stereotype_UML_Element_getAppliedSubstereotypes_stereotype->setUpper(1);
	uML_Element_getAppliedSubstereotypes_Stereotype_UML_Element_getAppliedSubstereotypes_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_getAppliedSubstereotypes_Stereotype->getOwnedParameter()->push_back(uML_Element_getAppliedSubstereotypes_Stereotype_UML_Element_getAppliedSubstereotypes_stereotype);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getAppliedSubstereotypes_Stereotype); 
	uML_Element_getKeywords_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getKeywords_->setName("getKeywords");
	uML_Element_getKeywords__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getKeywords__return->setName("");
	uML_Element_getKeywords__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Element_getKeywords__return->setLower(0);
	uML_Element_getKeywords__return->setUpper(-1);
	uML_Element_getKeywords__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getKeywords_->getOwnedParameter()->push_back(uML_Element_getKeywords__return);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getKeywords_); 
	uML_Element_getModel_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getModel_->setName("getModel");
	uML_Element_getModel__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getModel__return->setName("");
	uML_Element_getModel__return->setType(get_UML_Model());
	uML_Element_getModel__return->setLower(0);
	uML_Element_getModel__return->setUpper(1);
	uML_Element_getModel__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getModel_->getOwnedParameter()->push_back(uML_Element_getModel__return);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getModel_); 
	uML_Element_getNearestPackage_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getNearestPackage_->setName("getNearestPackage");
	uML_Element_getNearestPackage__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getNearestPackage__return->setName("");
	uML_Element_getNearestPackage__return->setType(get_UML_Package());
	uML_Element_getNearestPackage__return->setLower(0);
	uML_Element_getNearestPackage__return->setUpper(1);
	uML_Element_getNearestPackage__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getNearestPackage_->getOwnedParameter()->push_back(uML_Element_getNearestPackage__return);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getNearestPackage_); 
	uML_Element_getRelationships_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getRelationships_->setName("getRelationships");
	uML_Element_getRelationships__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getRelationships__return->setName("");
	uML_Element_getRelationships__return->setType(get_UML_Relationship());
	uML_Element_getRelationships__return->setLower(0);
	uML_Element_getRelationships__return->setUpper(-1);
	uML_Element_getRelationships__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getRelationships_->getOwnedParameter()->push_back(uML_Element_getRelationships__return);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getRelationships_); 
	uML_Element_getRelationships_EClass.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getRelationships_EClass->setName("getRelationships");
	uML_Element_getRelationships_EClass_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getRelationships_EClass_return->setName("");
	uML_Element_getRelationships_EClass_return->setType(get_UML_Relationship());
	uML_Element_getRelationships_EClass_return->setLower(0);
	uML_Element_getRelationships_EClass_return->setUpper(-1);
	uML_Element_getRelationships_EClass_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getRelationships_EClass->getOwnedParameter()->push_back(uML_Element_getRelationships_EClass_return);
	uML_Element_getRelationships_EClass_UML_Element_getRelationships_eClass.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getRelationships_EClass_UML_Element_getRelationships_eClass->setName("eClass");
	uML_Element_getRelationships_EClass_UML_Element_getRelationships_eClass->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EClass());
	uML_Element_getRelationships_EClass_UML_Element_getRelationships_eClass->setLower(1);
	uML_Element_getRelationships_EClass_UML_Element_getRelationships_eClass->setUpper(1);
	uML_Element_getRelationships_EClass_UML_Element_getRelationships_eClass->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_getRelationships_EClass->getOwnedParameter()->push_back(uML_Element_getRelationships_EClass_UML_Element_getRelationships_eClass);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getRelationships_EClass); 
	uML_Element_getRequiredStereotype_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getRequiredStereotype_String->setName("getRequiredStereotype");
	uML_Element_getRequiredStereotype_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getRequiredStereotype_String_return->setName("");
	uML_Element_getRequiredStereotype_String_return->setType(get_UML_Stereotype());
	uML_Element_getRequiredStereotype_String_return->setLower(0);
	uML_Element_getRequiredStereotype_String_return->setUpper(1);
	uML_Element_getRequiredStereotype_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getRequiredStereotype_String->getOwnedParameter()->push_back(uML_Element_getRequiredStereotype_String_return);
	uML_Element_getRequiredStereotype_String_UML_Element_getRequiredStereotype_qualifiedName.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getRequiredStereotype_String_UML_Element_getRequiredStereotype_qualifiedName->setName("qualifiedName");
	uML_Element_getRequiredStereotype_String_UML_Element_getRequiredStereotype_qualifiedName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Element_getRequiredStereotype_String_UML_Element_getRequiredStereotype_qualifiedName->setLower(1);
	uML_Element_getRequiredStereotype_String_UML_Element_getRequiredStereotype_qualifiedName->setUpper(1);
	uML_Element_getRequiredStereotype_String_UML_Element_getRequiredStereotype_qualifiedName->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_getRequiredStereotype_String->getOwnedParameter()->push_back(uML_Element_getRequiredStereotype_String_UML_Element_getRequiredStereotype_qualifiedName);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getRequiredStereotype_String); 
	uML_Element_getRequiredStereotypes_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getRequiredStereotypes_->setName("getRequiredStereotypes");
	uML_Element_getRequiredStereotypes__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getRequiredStereotypes__return->setName("");
	uML_Element_getRequiredStereotypes__return->setType(get_UML_Stereotype());
	uML_Element_getRequiredStereotypes__return->setLower(0);
	uML_Element_getRequiredStereotypes__return->setUpper(-1);
	uML_Element_getRequiredStereotypes__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getRequiredStereotypes_->getOwnedParameter()->push_back(uML_Element_getRequiredStereotypes__return);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getRequiredStereotypes_); 
	uML_Element_getSourceDirectedRelationships_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getSourceDirectedRelationships_->setName("getSourceDirectedRelationships");
	uML_Element_getSourceDirectedRelationships__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getSourceDirectedRelationships__return->setName("");
	uML_Element_getSourceDirectedRelationships__return->setType(get_UML_DirectedRelationship());
	uML_Element_getSourceDirectedRelationships__return->setLower(0);
	uML_Element_getSourceDirectedRelationships__return->setUpper(-1);
	uML_Element_getSourceDirectedRelationships__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getSourceDirectedRelationships_->getOwnedParameter()->push_back(uML_Element_getSourceDirectedRelationships__return);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getSourceDirectedRelationships_); 
	uML_Element_getSourceDirectedRelationships_EClass.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getSourceDirectedRelationships_EClass->setName("getSourceDirectedRelationships");
	uML_Element_getSourceDirectedRelationships_EClass_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getSourceDirectedRelationships_EClass_return->setName("");
	uML_Element_getSourceDirectedRelationships_EClass_return->setType(get_UML_DirectedRelationship());
	uML_Element_getSourceDirectedRelationships_EClass_return->setLower(0);
	uML_Element_getSourceDirectedRelationships_EClass_return->setUpper(-1);
	uML_Element_getSourceDirectedRelationships_EClass_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getSourceDirectedRelationships_EClass->getOwnedParameter()->push_back(uML_Element_getSourceDirectedRelationships_EClass_return);
	uML_Element_getSourceDirectedRelationships_EClass_UML_Element_getSourceDirectedRelationships_eClass.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getSourceDirectedRelationships_EClass_UML_Element_getSourceDirectedRelationships_eClass->setName("eClass");
	uML_Element_getSourceDirectedRelationships_EClass_UML_Element_getSourceDirectedRelationships_eClass->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EClass());
	uML_Element_getSourceDirectedRelationships_EClass_UML_Element_getSourceDirectedRelationships_eClass->setLower(1);
	uML_Element_getSourceDirectedRelationships_EClass_UML_Element_getSourceDirectedRelationships_eClass->setUpper(1);
	uML_Element_getSourceDirectedRelationships_EClass_UML_Element_getSourceDirectedRelationships_eClass->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_getSourceDirectedRelationships_EClass->getOwnedParameter()->push_back(uML_Element_getSourceDirectedRelationships_EClass_UML_Element_getSourceDirectedRelationships_eClass);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getSourceDirectedRelationships_EClass); 
	uML_Element_getStereotypeApplication_Stereotype.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getStereotypeApplication_Stereotype->setName("getStereotypeApplication");
	uML_Element_getStereotypeApplication_Stereotype_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getStereotypeApplication_Stereotype_return->setName("");
	uML_Element_getStereotypeApplication_Stereotype_return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EObject());
	uML_Element_getStereotypeApplication_Stereotype_return->setLower(0);
	uML_Element_getStereotypeApplication_Stereotype_return->setUpper(1);
	uML_Element_getStereotypeApplication_Stereotype_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getStereotypeApplication_Stereotype->getOwnedParameter()->push_back(uML_Element_getStereotypeApplication_Stereotype_return);
	uML_Element_getStereotypeApplication_Stereotype_UML_Element_getStereotypeApplication_stereotype.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getStereotypeApplication_Stereotype_UML_Element_getStereotypeApplication_stereotype->setName("stereotype");
	uML_Element_getStereotypeApplication_Stereotype_UML_Element_getStereotypeApplication_stereotype->setType(get_UML_Stereotype());
	uML_Element_getStereotypeApplication_Stereotype_UML_Element_getStereotypeApplication_stereotype->setLower(1);
	uML_Element_getStereotypeApplication_Stereotype_UML_Element_getStereotypeApplication_stereotype->setUpper(1);
	uML_Element_getStereotypeApplication_Stereotype_UML_Element_getStereotypeApplication_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_getStereotypeApplication_Stereotype->getOwnedParameter()->push_back(uML_Element_getStereotypeApplication_Stereotype_UML_Element_getStereotypeApplication_stereotype);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getStereotypeApplication_Stereotype); 
	uML_Element_getStereotypeApplications_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getStereotypeApplications_->setName("getStereotypeApplications");
	uML_Element_getStereotypeApplications__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getStereotypeApplications__return->setName("");
	uML_Element_getStereotypeApplications__return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EObject());
	uML_Element_getStereotypeApplications__return->setLower(0);
	uML_Element_getStereotypeApplications__return->setUpper(-1);
	uML_Element_getStereotypeApplications__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getStereotypeApplications_->getOwnedParameter()->push_back(uML_Element_getStereotypeApplications__return);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getStereotypeApplications_); 
	uML_Element_getTargetDirectedRelationships_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getTargetDirectedRelationships_->setName("getTargetDirectedRelationships");
	uML_Element_getTargetDirectedRelationships__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getTargetDirectedRelationships__return->setName("");
	uML_Element_getTargetDirectedRelationships__return->setType(get_UML_DirectedRelationship());
	uML_Element_getTargetDirectedRelationships__return->setLower(0);
	uML_Element_getTargetDirectedRelationships__return->setUpper(-1);
	uML_Element_getTargetDirectedRelationships__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getTargetDirectedRelationships_->getOwnedParameter()->push_back(uML_Element_getTargetDirectedRelationships__return);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getTargetDirectedRelationships_); 
	uML_Element_getTargetDirectedRelationships_EClass.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getTargetDirectedRelationships_EClass->setName("getTargetDirectedRelationships");
	uML_Element_getTargetDirectedRelationships_EClass_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getTargetDirectedRelationships_EClass_return->setName("");
	uML_Element_getTargetDirectedRelationships_EClass_return->setType(get_UML_DirectedRelationship());
	uML_Element_getTargetDirectedRelationships_EClass_return->setLower(0);
	uML_Element_getTargetDirectedRelationships_EClass_return->setUpper(-1);
	uML_Element_getTargetDirectedRelationships_EClass_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getTargetDirectedRelationships_EClass->getOwnedParameter()->push_back(uML_Element_getTargetDirectedRelationships_EClass_return);
	uML_Element_getTargetDirectedRelationships_EClass_UML_Element_getTargetDirectedRelationships_eClass.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getTargetDirectedRelationships_EClass_UML_Element_getTargetDirectedRelationships_eClass->setName("eClass");
	uML_Element_getTargetDirectedRelationships_EClass_UML_Element_getTargetDirectedRelationships_eClass->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EClass());
	uML_Element_getTargetDirectedRelationships_EClass_UML_Element_getTargetDirectedRelationships_eClass->setLower(1);
	uML_Element_getTargetDirectedRelationships_EClass_UML_Element_getTargetDirectedRelationships_eClass->setUpper(1);
	uML_Element_getTargetDirectedRelationships_EClass_UML_Element_getTargetDirectedRelationships_eClass->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_getTargetDirectedRelationships_EClass->getOwnedParameter()->push_back(uML_Element_getTargetDirectedRelationships_EClass_UML_Element_getTargetDirectedRelationships_eClass);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getTargetDirectedRelationships_EClass); 
	uML_Element_getValue_Stereotype_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_getValue_Stereotype_String->setName("getValue");
	uML_Element_getValue_Stereotype_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getValue_Stereotype_String_return->setName("");
	uML_Element_getValue_Stereotype_String_return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EJavaObject());
	uML_Element_getValue_Stereotype_String_return->setLower(0);
	uML_Element_getValue_Stereotype_String_return->setUpper(1);
	uML_Element_getValue_Stereotype_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_getValue_Stereotype_String->getOwnedParameter()->push_back(uML_Element_getValue_Stereotype_String_return);
	uML_Element_getValue_Stereotype_String_UML_Element_getValue_stereotype.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getValue_Stereotype_String_UML_Element_getValue_stereotype->setName("stereotype");
	uML_Element_getValue_Stereotype_String_UML_Element_getValue_stereotype->setType(get_UML_Stereotype());
	uML_Element_getValue_Stereotype_String_UML_Element_getValue_stereotype->setLower(1);
	uML_Element_getValue_Stereotype_String_UML_Element_getValue_stereotype->setUpper(1);
	uML_Element_getValue_Stereotype_String_UML_Element_getValue_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_getValue_Stereotype_String->getOwnedParameter()->push_back(uML_Element_getValue_Stereotype_String_UML_Element_getValue_stereotype);
	uML_Element_getValue_Stereotype_String_UML_Element_getValue_propertyName.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_getValue_Stereotype_String_UML_Element_getValue_propertyName->setName("propertyName");
	uML_Element_getValue_Stereotype_String_UML_Element_getValue_propertyName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Element_getValue_Stereotype_String_UML_Element_getValue_propertyName->setLower(1);
	uML_Element_getValue_Stereotype_String_UML_Element_getValue_propertyName->setUpper(1);
	uML_Element_getValue_Stereotype_String_UML_Element_getValue_propertyName->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_getValue_Stereotype_String->getOwnedParameter()->push_back(uML_Element_getValue_Stereotype_String_UML_Element_getValue_propertyName);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_getValue_Stereotype_String); 
	uML_Element_hasKeyword_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_hasKeyword_String->setName("hasKeyword");
	uML_Element_hasKeyword_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_hasKeyword_String_return->setName("");
	uML_Element_hasKeyword_String_return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_hasKeyword_String_return->setLower(1);
	uML_Element_hasKeyword_String_return->setUpper(1);
	uML_Element_hasKeyword_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_hasKeyword_String->getOwnedParameter()->push_back(uML_Element_hasKeyword_String_return);
	uML_Element_hasKeyword_String_UML_Element_hasKeyword_keyword.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_hasKeyword_String_UML_Element_hasKeyword_keyword->setName("keyword");
	uML_Element_hasKeyword_String_UML_Element_hasKeyword_keyword->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Element_hasKeyword_String_UML_Element_hasKeyword_keyword->setLower(1);
	uML_Element_hasKeyword_String_UML_Element_hasKeyword_keyword->setUpper(1);
	uML_Element_hasKeyword_String_UML_Element_hasKeyword_keyword->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_hasKeyword_String->getOwnedParameter()->push_back(uML_Element_hasKeyword_String_UML_Element_hasKeyword_keyword);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_hasKeyword_String); 
	uML_Element_hasValue_Stereotype_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_hasValue_Stereotype_String->setName("hasValue");
	uML_Element_hasValue_Stereotype_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_hasValue_Stereotype_String_return->setName("");
	uML_Element_hasValue_Stereotype_String_return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_hasValue_Stereotype_String_return->setLower(1);
	uML_Element_hasValue_Stereotype_String_return->setUpper(1);
	uML_Element_hasValue_Stereotype_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_hasValue_Stereotype_String->getOwnedParameter()->push_back(uML_Element_hasValue_Stereotype_String_return);
	uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_stereotype.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_stereotype->setName("stereotype");
	uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_stereotype->setType(get_UML_Stereotype());
	uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_stereotype->setLower(1);
	uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_stereotype->setUpper(1);
	uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_hasValue_Stereotype_String->getOwnedParameter()->push_back(uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_stereotype);
	uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_propertyName.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_propertyName->setName("propertyName");
	uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_propertyName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_propertyName->setLower(1);
	uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_propertyName->setUpper(1);
	uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_propertyName->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_hasValue_Stereotype_String->getOwnedParameter()->push_back(uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_propertyName);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_hasValue_Stereotype_String); 
	uML_Element_isStereotypeApplicable_Stereotype.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_isStereotypeApplicable_Stereotype->setName("isStereotypeApplicable");
	uML_Element_isStereotypeApplicable_Stereotype_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_isStereotypeApplicable_Stereotype_return->setName("");
	uML_Element_isStereotypeApplicable_Stereotype_return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_isStereotypeApplicable_Stereotype_return->setLower(1);
	uML_Element_isStereotypeApplicable_Stereotype_return->setUpper(1);
	uML_Element_isStereotypeApplicable_Stereotype_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_isStereotypeApplicable_Stereotype->getOwnedParameter()->push_back(uML_Element_isStereotypeApplicable_Stereotype_return);
	uML_Element_isStereotypeApplicable_Stereotype_UML_Element_isStereotypeApplicable_stereotype.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_isStereotypeApplicable_Stereotype_UML_Element_isStereotypeApplicable_stereotype->setName("stereotype");
	uML_Element_isStereotypeApplicable_Stereotype_UML_Element_isStereotypeApplicable_stereotype->setType(get_UML_Stereotype());
	uML_Element_isStereotypeApplicable_Stereotype_UML_Element_isStereotypeApplicable_stereotype->setLower(1);
	uML_Element_isStereotypeApplicable_Stereotype_UML_Element_isStereotypeApplicable_stereotype->setUpper(1);
	uML_Element_isStereotypeApplicable_Stereotype_UML_Element_isStereotypeApplicable_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_isStereotypeApplicable_Stereotype->getOwnedParameter()->push_back(uML_Element_isStereotypeApplicable_Stereotype_UML_Element_isStereotypeApplicable_stereotype);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_isStereotypeApplicable_Stereotype); 
	uML_Element_isStereotypeApplied_Stereotype.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_isStereotypeApplied_Stereotype->setName("isStereotypeApplied");
	uML_Element_isStereotypeApplied_Stereotype_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_isStereotypeApplied_Stereotype_return->setName("");
	uML_Element_isStereotypeApplied_Stereotype_return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_isStereotypeApplied_Stereotype_return->setLower(1);
	uML_Element_isStereotypeApplied_Stereotype_return->setUpper(1);
	uML_Element_isStereotypeApplied_Stereotype_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_isStereotypeApplied_Stereotype->getOwnedParameter()->push_back(uML_Element_isStereotypeApplied_Stereotype_return);
	uML_Element_isStereotypeApplied_Stereotype_UML_Element_isStereotypeApplied_stereotype.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_isStereotypeApplied_Stereotype_UML_Element_isStereotypeApplied_stereotype->setName("stereotype");
	uML_Element_isStereotypeApplied_Stereotype_UML_Element_isStereotypeApplied_stereotype->setType(get_UML_Stereotype());
	uML_Element_isStereotypeApplied_Stereotype_UML_Element_isStereotypeApplied_stereotype->setLower(1);
	uML_Element_isStereotypeApplied_Stereotype_UML_Element_isStereotypeApplied_stereotype->setUpper(1);
	uML_Element_isStereotypeApplied_Stereotype_UML_Element_isStereotypeApplied_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_isStereotypeApplied_Stereotype->getOwnedParameter()->push_back(uML_Element_isStereotypeApplied_Stereotype_UML_Element_isStereotypeApplied_stereotype);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_isStereotypeApplied_Stereotype); 
	uML_Element_isStereotypeRequired_Stereotype.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_isStereotypeRequired_Stereotype->setName("isStereotypeRequired");
	uML_Element_isStereotypeRequired_Stereotype_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_isStereotypeRequired_Stereotype_return->setName("");
	uML_Element_isStereotypeRequired_Stereotype_return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_isStereotypeRequired_Stereotype_return->setLower(1);
	uML_Element_isStereotypeRequired_Stereotype_return->setUpper(1);
	uML_Element_isStereotypeRequired_Stereotype_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_isStereotypeRequired_Stereotype->getOwnedParameter()->push_back(uML_Element_isStereotypeRequired_Stereotype_return);
	uML_Element_isStereotypeRequired_Stereotype_UML_Element_isStereotypeRequired_stereotype.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_isStereotypeRequired_Stereotype_UML_Element_isStereotypeRequired_stereotype->setName("stereotype");
	uML_Element_isStereotypeRequired_Stereotype_UML_Element_isStereotypeRequired_stereotype->setType(get_UML_Stereotype());
	uML_Element_isStereotypeRequired_Stereotype_UML_Element_isStereotypeRequired_stereotype->setLower(1);
	uML_Element_isStereotypeRequired_Stereotype_UML_Element_isStereotypeRequired_stereotype->setUpper(1);
	uML_Element_isStereotypeRequired_Stereotype_UML_Element_isStereotypeRequired_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_isStereotypeRequired_Stereotype->getOwnedParameter()->push_back(uML_Element_isStereotypeRequired_Stereotype_UML_Element_isStereotypeRequired_stereotype);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_isStereotypeRequired_Stereotype); 
	uML_Element_mustBeOwned_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_mustBeOwned_->setName("mustBeOwned");
	uML_Element_mustBeOwned_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_mustBeOwned_result->setName("result");
	uML_Element_mustBeOwned_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_mustBeOwned_result->setLower(1);
	uML_Element_mustBeOwned_result->setUpper(1);
	uML_Element_mustBeOwned_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_mustBeOwned_->getOwnedParameter()->push_back(uML_Element_mustBeOwned_result);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_mustBeOwned_); 
	uML_Element_removeKeyword_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_removeKeyword_String->setName("removeKeyword");
	uML_Element_removeKeyword_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_removeKeyword_String_return->setName("");
	uML_Element_removeKeyword_String_return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Element_removeKeyword_String_return->setLower(1);
	uML_Element_removeKeyword_String_return->setUpper(1);
	uML_Element_removeKeyword_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_removeKeyword_String->getOwnedParameter()->push_back(uML_Element_removeKeyword_String_return);
	uML_Element_removeKeyword_String_UML_Element_removeKeyword_keyword.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_removeKeyword_String_UML_Element_removeKeyword_keyword->setName("keyword");
	uML_Element_removeKeyword_String_UML_Element_removeKeyword_keyword->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Element_removeKeyword_String_UML_Element_removeKeyword_keyword->setLower(1);
	uML_Element_removeKeyword_String_UML_Element_removeKeyword_keyword->setUpper(1);
	uML_Element_removeKeyword_String_UML_Element_removeKeyword_keyword->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_removeKeyword_String->getOwnedParameter()->push_back(uML_Element_removeKeyword_String_UML_Element_removeKeyword_keyword);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_removeKeyword_String); 
	uML_Element_setValue_Stereotype_String_EJavaObject.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_setValue_Stereotype_String_EJavaObject->setName("setValue");
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_stereotype.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_stereotype->setName("stereotype");
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_stereotype->setType(get_UML_Stereotype());
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_stereotype->setLower(1);
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_stereotype->setUpper(1);
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_setValue_Stereotype_String_EJavaObject->getOwnedParameter()->push_back(uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_stereotype);
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_propertyName.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_propertyName->setName("propertyName");
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_propertyName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_propertyName->setLower(1);
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_propertyName->setUpper(1);
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_propertyName->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_setValue_Stereotype_String_EJavaObject->getOwnedParameter()->push_back(uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_propertyName);
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_newValue.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_newValue->setName("newValue");
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_newValue->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EJavaObject());
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_newValue->setLower(1);
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_newValue->setUpper(1);
	uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_newValue->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_setValue_Stereotype_String_EJavaObject->getOwnedParameter()->push_back(uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_newValue);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_setValue_Stereotype_String_EJavaObject); 
	uML_Element_unapplyStereotype_Stereotype.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Element_unapplyStereotype_Stereotype->setName("unapplyStereotype");
	uML_Element_unapplyStereotype_Stereotype_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_unapplyStereotype_Stereotype_return->setName("");
	uML_Element_unapplyStereotype_Stereotype_return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EObject());
	uML_Element_unapplyStereotype_Stereotype_return->setLower(1);
	uML_Element_unapplyStereotype_Stereotype_return->setUpper(1);
	uML_Element_unapplyStereotype_Stereotype_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Element_unapplyStereotype_Stereotype->getOwnedParameter()->push_back(uML_Element_unapplyStereotype_Stereotype_return);
	uML_Element_unapplyStereotype_Stereotype_UML_Element_unapplyStereotype_stereotype.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Element_unapplyStereotype_Stereotype_UML_Element_unapplyStereotype_stereotype->setName("stereotype");
	uML_Element_unapplyStereotype_Stereotype_UML_Element_unapplyStereotype_stereotype->setType(get_UML_Stereotype());
	uML_Element_unapplyStereotype_Stereotype_UML_Element_unapplyStereotype_stereotype->setLower(1);
	uML_Element_unapplyStereotype_Stereotype_UML_Element_unapplyStereotype_stereotype->setUpper(1);
	uML_Element_unapplyStereotype_Stereotype_UML_Element_unapplyStereotype_stereotype->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Element_unapplyStereotype_Stereotype->getOwnedParameter()->push_back(uML_Element_unapplyStereotype_Stereotype_UML_Element_unapplyStereotype_stereotype);
	
	
	uML_Element->getOwnedOperation()->push_back(uML_Element_unapplyStereotype_Stereotype); 
	
	


	uML_ElementImport.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ElementImport->setName("ElementImport");
	uML_ElementImport->setIsAbstract(false);
	uML_ElementImport->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ElementImport);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("visibility_public_or_private");
	con->getConstrainedElement()->push_back(uML_ElementImport);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("visibility = VisibilityKind::public or visibility = VisibilityKind::private");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ElementImport->getOwnedRule()->push_back(con);
	con->setContext(uML_ElementImport->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("imported_element_is_public");
	con->getConstrainedElement()->push_back(uML_ElementImport);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("importedElement.visibility <> null implies importedElement.visibility = VisibilityKind::public");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ElementImport->getOwnedRule()->push_back(con);
	con->setContext(uML_ElementImport->getNamespace());
	
	
	uML_ElementImport_alias.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ElementImport_alias->setName("alias");
	uML_ElementImport_alias->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_ElementImport_alias->setLower(0);
	uML_ElementImport_alias->setUpper(1);
	uML_ElementImport->getOwnedAttribute()->push_back(uML_ElementImport_alias);
	uML_ElementImport_alias->setClass(uML_ElementImport);
	
	
	uML_ElementImport_importedElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ElementImport_importedElement->setName("importedElement");
	uML_ElementImport_importedElement->setType(get_UML_PackageableElement());
	uML_ElementImport_importedElement->setLower(1);
	uML_ElementImport_importedElement->setUpper(1);
	uML_ElementImport->getOwnedAttribute()->push_back(uML_ElementImport_importedElement);
	uML_ElementImport_importedElement->setClass(uML_ElementImport);
	
	
	uML_ElementImport_importingNamespace.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ElementImport_importingNamespace->setName("importingNamespace");
	uML_ElementImport_importingNamespace->setType(get_UML_Namespace());
	uML_ElementImport_importingNamespace->setLower(1);
	uML_ElementImport_importingNamespace->setUpper(1);
	uML_ElementImport->getOwnedAttribute()->push_back(uML_ElementImport_importingNamespace);
	uML_ElementImport_importingNamespace->setClass(uML_ElementImport);
	
	
	uML_ElementImport_visibility.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ElementImport_visibility->setName("visibility");
	uML_ElementImport_visibility->setType(get_UML_VisibilityKind());
	uML_ElementImport_visibility->setLower(1);
	uML_ElementImport_visibility->setUpper(1);
	uML_ElementImport->getOwnedAttribute()->push_back(uML_ElementImport_visibility);
	uML_ElementImport_visibility->setClass(uML_ElementImport);
	uML_ElementImport_visibility->setDefaultValue(uML_ElementImport_visibility_defaultValue_InstanceValue);
	
	
	uML_ElementImport_getName_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ElementImport_getName_->setName("getName");
	uML_ElementImport_getName_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ElementImport_getName_result->setName("result");
	uML_ElementImport_getName_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_ElementImport_getName_result->setLower(1);
	uML_ElementImport_getName_result->setUpper(1);
	uML_ElementImport_getName_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ElementImport_getName_->getOwnedParameter()->push_back(uML_ElementImport_getName_result);
	
	
	uML_ElementImport->getOwnedOperation()->push_back(uML_ElementImport_getName_); 
	
	


	uML_EncapsulatedClassifier.reset(uml::UmlFactory::eInstance()->createClass());
	uML_EncapsulatedClassifier->setName("EncapsulatedClassifier");
	uML_EncapsulatedClassifier->setIsAbstract(true);
	uML_EncapsulatedClassifier->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_EncapsulatedClassifier);
	
	//constraints
	
	
	uML_EncapsulatedClassifier_ownedPort.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_EncapsulatedClassifier_ownedPort->setName("ownedPort");
	uML_EncapsulatedClassifier_ownedPort->setType(get_UML_Port());
	uML_EncapsulatedClassifier_ownedPort->setLower(0);
	uML_EncapsulatedClassifier_ownedPort->setUpper(-1);
	uML_EncapsulatedClassifier->getOwnedAttribute()->push_back(uML_EncapsulatedClassifier_ownedPort);
	uML_EncapsulatedClassifier_ownedPort->setClass(uML_EncapsulatedClassifier);
	
	
	
	uML_EncapsulatedClassifier_ownedPort_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_EncapsulatedClassifier_ownedPort_->setName("ownedPort");
	uML_EncapsulatedClassifier_ownedPort_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_EncapsulatedClassifier_ownedPort_result->setName("result");
	uML_EncapsulatedClassifier_ownedPort_result->setType(get_UML_Port());
	uML_EncapsulatedClassifier_ownedPort_result->setLower(0);
	uML_EncapsulatedClassifier_ownedPort_result->setUpper(-1);
	uML_EncapsulatedClassifier_ownedPort_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_EncapsulatedClassifier_ownedPort_->getOwnedParameter()->push_back(uML_EncapsulatedClassifier_ownedPort_result);
	
	
	uML_EncapsulatedClassifier->getOwnedOperation()->push_back(uML_EncapsulatedClassifier_ownedPort_); 
	
	


	uML_Enumeration.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Enumeration->setName("Enumeration");
	uML_Enumeration->setIsAbstract(false);
	uML_Enumeration->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Enumeration);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("immutable");
	con->getConstrainedElement()->push_back(uML_Enumeration);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("ownedAttribute->forAll(isReadOnly)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Enumeration->getOwnedRule()->push_back(con);
	con->setContext(uML_Enumeration->getNamespace());
	
	
	uML_Enumeration_ownedLiteral.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Enumeration_ownedLiteral->setName("ownedLiteral");
	uML_Enumeration_ownedLiteral->setType(get_UML_EnumerationLiteral());
	uML_Enumeration_ownedLiteral->setLower(0);
	uML_Enumeration_ownedLiteral->setUpper(-1);
	uML_Enumeration->getOwnedAttribute()->push_back(uML_Enumeration_ownedLiteral);
	uML_Enumeration_ownedLiteral->setClass(uML_Enumeration);
	
	
	
	
	


	uML_EnumerationLiteral.reset(uml::UmlFactory::eInstance()->createClass());
	uML_EnumerationLiteral->setName("EnumerationLiteral");
	uML_EnumerationLiteral->setIsAbstract(false);
	uML_EnumerationLiteral->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_EnumerationLiteral);
	
	//constraints
	
	
	uML_EnumerationLiteral_classifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_EnumerationLiteral_classifier->setName("classifier");
	uML_EnumerationLiteral_classifier->setType(get_UML_Enumeration());
	uML_EnumerationLiteral_classifier->setLower(1);
	uML_EnumerationLiteral_classifier->setUpper(1);
	uML_EnumerationLiteral->getOwnedAttribute()->push_back(uML_EnumerationLiteral_classifier);
	uML_EnumerationLiteral_classifier->setClass(uML_EnumerationLiteral);
	
	
	uML_EnumerationLiteral_enumeration.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_EnumerationLiteral_enumeration->setName("enumeration");
	uML_EnumerationLiteral_enumeration->setType(get_UML_Enumeration());
	uML_EnumerationLiteral_enumeration->setLower(1);
	uML_EnumerationLiteral_enumeration->setUpper(1);
	uML_EnumerationLiteral->getOwnedAttribute()->push_back(uML_EnumerationLiteral_enumeration);
	uML_EnumerationLiteral_enumeration->setClass(uML_EnumerationLiteral);
	
	
	
	uML_EnumerationLiteral_classifier_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_EnumerationLiteral_classifier_->setName("classifier");
	uML_EnumerationLiteral_classifier_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_EnumerationLiteral_classifier_result->setName("result");
	uML_EnumerationLiteral_classifier_result->setType(get_UML_Enumeration());
	uML_EnumerationLiteral_classifier_result->setLower(1);
	uML_EnumerationLiteral_classifier_result->setUpper(1);
	uML_EnumerationLiteral_classifier_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_EnumerationLiteral_classifier_->getOwnedParameter()->push_back(uML_EnumerationLiteral_classifier_result);
	
	
	uML_EnumerationLiteral->getOwnedOperation()->push_back(uML_EnumerationLiteral_classifier_); 
	uML_EnumerationLiteral_getClassifiers_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_EnumerationLiteral_getClassifiers_->setName("getClassifiers");
	uML_EnumerationLiteral_getClassifiers__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_EnumerationLiteral_getClassifiers__return->setName("");
	uML_EnumerationLiteral_getClassifiers__return->setType(get_UML_Classifier());
	uML_EnumerationLiteral_getClassifiers__return->setLower(0);
	uML_EnumerationLiteral_getClassifiers__return->setUpper(-1);
	uML_EnumerationLiteral_getClassifiers__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_EnumerationLiteral_getClassifiers_->getOwnedParameter()->push_back(uML_EnumerationLiteral_getClassifiers__return);
	
	
	uML_EnumerationLiteral->getOwnedOperation()->push_back(uML_EnumerationLiteral_getClassifiers_); 
	
	


	uML_Event.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Event->setName("Event");
	uML_Event->setIsAbstract(true);
	uML_Event->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Event);
	
	//constraints
	
	
	
	
	


	uML_ExceptionHandler.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ExceptionHandler->setName("ExceptionHandler");
	uML_ExceptionHandler->setIsAbstract(false);
	uML_ExceptionHandler->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ExceptionHandler);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("output_pins");
	con->getConstrainedElement()->push_back(uML_ExceptionHandler);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(protectedNode.oclIsKindOf(Action) and protectedNode.oclAsType(Action).output->notEmpty()) implies"\
	"("\
	"  handlerBody.oclIsKindOf(Action) and "\
	"  let protectedNodeOutput : OrderedSet(OutputPin) = protectedNode.oclAsType(Action).output,"\
	"        handlerBodyOutput : OrderedSet(OutputPin) =  handlerBody.oclAsType(Action).output in"\
	"    protectedNodeOutput->size() = handlerBodyOutput->size() and"\
	"    Sequence{1..protectedNodeOutput->size()}->forAll(i |"\
	"    	handlerBodyOutput->at(i).type.conformsTo(protectedNodeOutput->at(i).type) and"\
	"    	handlerBodyOutput->at(i).isOrdered=protectedNodeOutput->at(i).isOrdered and"\
	"    	handlerBodyOutput->at(i).compatibleWith(protectedNodeOutput->at(i)))"\
	")");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ExceptionHandler->getOwnedRule()->push_back(con);
	con->setContext(uML_ExceptionHandler->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("edge_source_target");
	con->getConstrainedElement()->push_back(uML_ExceptionHandler);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let nodes:Set(ActivityNode) = handlerBody.oclAsType(Action).allOwnedNodes() in"\
	"nodes.outgoing->forAll(nodes->includes(target)) and"\
	"nodes.incoming->forAll(nodes->includes(source))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ExceptionHandler->getOwnedRule()->push_back(con);
	con->setContext(uML_ExceptionHandler->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("exception_input_type");
	con->getConstrainedElement()->push_back(uML_ExceptionHandler);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("exceptionInput.type=null or "\
	"exceptionType->forAll(conformsTo(exceptionInput.type.oclAsType(Classifier)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ExceptionHandler->getOwnedRule()->push_back(con);
	con->setContext(uML_ExceptionHandler->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("one_input");
	con->getConstrainedElement()->push_back(uML_ExceptionHandler);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("handlerBody.oclIsKindOf(Action) and"\
	"let inputs: OrderedSet(InputPin) = handlerBody.oclAsType(Action).input in"\
	"inputs->size()=1 and inputs->first()=exceptionInput");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ExceptionHandler->getOwnedRule()->push_back(con);
	con->setContext(uML_ExceptionHandler->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("handler_body_edges");
	con->getConstrainedElement()->push_back(uML_ExceptionHandler);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("handlerBody.incoming->isEmpty() and handlerBody.outgoing->isEmpty() and exceptionInput.incoming->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ExceptionHandler->getOwnedRule()->push_back(con);
	con->setContext(uML_ExceptionHandler->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("handler_body_owner");
	con->getConstrainedElement()->push_back(uML_ExceptionHandler);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("handlerBody.owner=protectedNode.owner");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ExceptionHandler->getOwnedRule()->push_back(con);
	con->setContext(uML_ExceptionHandler->getNamespace());
	
	
	uML_ExceptionHandler_exceptionInput.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExceptionHandler_exceptionInput->setName("exceptionInput");
	uML_ExceptionHandler_exceptionInput->setType(get_UML_ObjectNode());
	uML_ExceptionHandler_exceptionInput->setLower(1);
	uML_ExceptionHandler_exceptionInput->setUpper(1);
	uML_ExceptionHandler->getOwnedAttribute()->push_back(uML_ExceptionHandler_exceptionInput);
	uML_ExceptionHandler_exceptionInput->setClass(uML_ExceptionHandler);
	
	
	uML_ExceptionHandler_exceptionType.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExceptionHandler_exceptionType->setName("exceptionType");
	uML_ExceptionHandler_exceptionType->setType(get_UML_Classifier());
	uML_ExceptionHandler_exceptionType->setLower(1);
	uML_ExceptionHandler_exceptionType->setUpper(-1);
	uML_ExceptionHandler->getOwnedAttribute()->push_back(uML_ExceptionHandler_exceptionType);
	uML_ExceptionHandler_exceptionType->setClass(uML_ExceptionHandler);
	
	
	uML_ExceptionHandler_handlerBody.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExceptionHandler_handlerBody->setName("handlerBody");
	uML_ExceptionHandler_handlerBody->setType(get_UML_ExecutableNode());
	uML_ExceptionHandler_handlerBody->setLower(1);
	uML_ExceptionHandler_handlerBody->setUpper(1);
	uML_ExceptionHandler->getOwnedAttribute()->push_back(uML_ExceptionHandler_handlerBody);
	uML_ExceptionHandler_handlerBody->setClass(uML_ExceptionHandler);
	
	
	uML_ExceptionHandler_protectedNode.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExceptionHandler_protectedNode->setName("protectedNode");
	uML_ExceptionHandler_protectedNode->setType(get_UML_ExecutableNode());
	uML_ExceptionHandler_protectedNode->setLower(1);
	uML_ExceptionHandler_protectedNode->setUpper(1);
	uML_ExceptionHandler->getOwnedAttribute()->push_back(uML_ExceptionHandler_protectedNode);
	uML_ExceptionHandler_protectedNode->setClass(uML_ExceptionHandler);
	
	
	
	
	


	uML_ExecutableNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ExecutableNode->setName("ExecutableNode");
	uML_ExecutableNode->setIsAbstract(true);
	uML_ExecutableNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ExecutableNode);
	
	//constraints
	
	
	uML_ExecutableNode_handler.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExecutableNode_handler->setName("handler");
	uML_ExecutableNode_handler->setType(get_UML_ExceptionHandler());
	uML_ExecutableNode_handler->setLower(0);
	uML_ExecutableNode_handler->setUpper(-1);
	uML_ExecutableNode->getOwnedAttribute()->push_back(uML_ExecutableNode_handler);
	uML_ExecutableNode_handler->setClass(uML_ExecutableNode);
	
	
	
	
	


	uML_ExecutionEnvironment.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ExecutionEnvironment->setName("ExecutionEnvironment");
	uML_ExecutionEnvironment->setIsAbstract(false);
	uML_ExecutionEnvironment->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ExecutionEnvironment);
	
	//constraints
	
	
	
	
	


	uML_ExecutionOccurrenceSpecification.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ExecutionOccurrenceSpecification->setName("ExecutionOccurrenceSpecification");
	uML_ExecutionOccurrenceSpecification->setIsAbstract(false);
	uML_ExecutionOccurrenceSpecification->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ExecutionOccurrenceSpecification);
	
	//constraints
	
	
	uML_ExecutionOccurrenceSpecification_execution.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExecutionOccurrenceSpecification_execution->setName("execution");
	uML_ExecutionOccurrenceSpecification_execution->setType(get_UML_ExecutionSpecification());
	uML_ExecutionOccurrenceSpecification_execution->setLower(1);
	uML_ExecutionOccurrenceSpecification_execution->setUpper(1);
	uML_ExecutionOccurrenceSpecification->getOwnedAttribute()->push_back(uML_ExecutionOccurrenceSpecification_execution);
	uML_ExecutionOccurrenceSpecification_execution->setClass(uML_ExecutionOccurrenceSpecification);
	
	
	
	
	


	uML_ExecutionSpecification.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ExecutionSpecification->setName("ExecutionSpecification");
	uML_ExecutionSpecification->setIsAbstract(true);
	uML_ExecutionSpecification->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ExecutionSpecification);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("same_lifeline");
	con->getConstrainedElement()->push_back(uML_ExecutionSpecification);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("start.covered = finish.covered");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ExecutionSpecification->getOwnedRule()->push_back(con);
	con->setContext(uML_ExecutionSpecification->getNamespace());
	
	
	uML_ExecutionSpecification_finish.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExecutionSpecification_finish->setName("finish");
	uML_ExecutionSpecification_finish->setType(get_UML_OccurrenceSpecification());
	uML_ExecutionSpecification_finish->setLower(1);
	uML_ExecutionSpecification_finish->setUpper(1);
	uML_ExecutionSpecification->getOwnedAttribute()->push_back(uML_ExecutionSpecification_finish);
	uML_ExecutionSpecification_finish->setClass(uML_ExecutionSpecification);
	
	
	uML_ExecutionSpecification_start.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExecutionSpecification_start->setName("start");
	uML_ExecutionSpecification_start->setType(get_UML_OccurrenceSpecification());
	uML_ExecutionSpecification_start->setLower(1);
	uML_ExecutionSpecification_start->setUpper(1);
	uML_ExecutionSpecification->getOwnedAttribute()->push_back(uML_ExecutionSpecification_start);
	uML_ExecutionSpecification_start->setClass(uML_ExecutionSpecification);
	
	
	
	
	


	uML_ExpansionNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ExpansionNode->setName("ExpansionNode");
	uML_ExpansionNode->setIsAbstract(false);
	uML_ExpansionNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ExpansionNode);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("region_as_input_or_output");
	con->getConstrainedElement()->push_back(uML_ExpansionNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("regionAsInput->notEmpty() xor regionAsOutput->notEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ExpansionNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ExpansionNode->getNamespace());
	
	
	uML_ExpansionNode_regionAsInput.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExpansionNode_regionAsInput->setName("regionAsInput");
	uML_ExpansionNode_regionAsInput->setType(get_UML_ExpansionRegion());
	uML_ExpansionNode_regionAsInput->setLower(0);
	uML_ExpansionNode_regionAsInput->setUpper(1);
	uML_ExpansionNode->getOwnedAttribute()->push_back(uML_ExpansionNode_regionAsInput);
	uML_ExpansionNode_regionAsInput->setClass(uML_ExpansionNode);
	
	
	uML_ExpansionNode_regionAsOutput.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExpansionNode_regionAsOutput->setName("regionAsOutput");
	uML_ExpansionNode_regionAsOutput->setType(get_UML_ExpansionRegion());
	uML_ExpansionNode_regionAsOutput->setLower(0);
	uML_ExpansionNode_regionAsOutput->setUpper(1);
	uML_ExpansionNode->getOwnedAttribute()->push_back(uML_ExpansionNode_regionAsOutput);
	uML_ExpansionNode_regionAsOutput->setClass(uML_ExpansionNode);
	
	
	
	
	


	uML_ExpansionRegion.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ExpansionRegion->setName("ExpansionRegion");
	uML_ExpansionRegion->setIsAbstract(false);
	uML_ExpansionRegion->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ExpansionRegion);
	
	//constraints
	
	
	uML_ExpansionRegion_inputElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExpansionRegion_inputElement->setName("inputElement");
	uML_ExpansionRegion_inputElement->setType(get_UML_ExpansionNode());
	uML_ExpansionRegion_inputElement->setLower(1);
	uML_ExpansionRegion_inputElement->setUpper(-1);
	uML_ExpansionRegion->getOwnedAttribute()->push_back(uML_ExpansionRegion_inputElement);
	uML_ExpansionRegion_inputElement->setClass(uML_ExpansionRegion);
	
	
	uML_ExpansionRegion_mode.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExpansionRegion_mode->setName("mode");
	uML_ExpansionRegion_mode->setType(get_UML_ExpansionKind());
	uML_ExpansionRegion_mode->setLower(1);
	uML_ExpansionRegion_mode->setUpper(1);
	uML_ExpansionRegion->getOwnedAttribute()->push_back(uML_ExpansionRegion_mode);
	uML_ExpansionRegion_mode->setClass(uML_ExpansionRegion);
	uML_ExpansionRegion_mode->setDefaultValue(uML_ExpansionRegion_mode_defaultValue_InstanceValue);
	
	uML_ExpansionRegion_outputElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExpansionRegion_outputElement->setName("outputElement");
	uML_ExpansionRegion_outputElement->setType(get_UML_ExpansionNode());
	uML_ExpansionRegion_outputElement->setLower(0);
	uML_ExpansionRegion_outputElement->setUpper(-1);
	uML_ExpansionRegion->getOwnedAttribute()->push_back(uML_ExpansionRegion_outputElement);
	uML_ExpansionRegion_outputElement->setClass(uML_ExpansionRegion);
	
	
	
	
	


	uML_Expression.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Expression->setName("Expression");
	uML_Expression->setIsAbstract(false);
	uML_Expression->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Expression);
	
	//constraints
	
	
	uML_Expression_operand.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Expression_operand->setName("operand");
	uML_Expression_operand->setType(get_UML_ValueSpecification());
	uML_Expression_operand->setLower(0);
	uML_Expression_operand->setUpper(-1);
	uML_Expression->getOwnedAttribute()->push_back(uML_Expression_operand);
	uML_Expression_operand->setClass(uML_Expression);
	
	
	uML_Expression_symbol.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Expression_symbol->setName("symbol");
	uML_Expression_symbol->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Expression_symbol->setLower(0);
	uML_Expression_symbol->setUpper(1);
	uML_Expression->getOwnedAttribute()->push_back(uML_Expression_symbol);
	uML_Expression_symbol->setClass(uML_Expression);
	
	
	
	
	


	uML_Extend.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Extend->setName("Extend");
	uML_Extend->setIsAbstract(false);
	uML_Extend->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Extend);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("extension_points");
	con->getConstrainedElement()->push_back(uML_Extend);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("extensionLocation->forAll (xp | extendedCase.extensionPoint->includes(xp))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Extend->getOwnedRule()->push_back(con);
	con->setContext(uML_Extend->getNamespace());
	
	
	uML_Extend_condition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Extend_condition->setName("condition");
	uML_Extend_condition->setType(get_UML_Constraint());
	uML_Extend_condition->setLower(0);
	uML_Extend_condition->setUpper(1);
	uML_Extend->getOwnedAttribute()->push_back(uML_Extend_condition);
	uML_Extend_condition->setClass(uML_Extend);
	
	
	uML_Extend_extendedCase.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Extend_extendedCase->setName("extendedCase");
	uML_Extend_extendedCase->setType(get_UML_UseCase());
	uML_Extend_extendedCase->setLower(1);
	uML_Extend_extendedCase->setUpper(1);
	uML_Extend->getOwnedAttribute()->push_back(uML_Extend_extendedCase);
	uML_Extend_extendedCase->setClass(uML_Extend);
	
	
	uML_Extend_extension.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Extend_extension->setName("extension");
	uML_Extend_extension->setType(get_UML_UseCase());
	uML_Extend_extension->setLower(1);
	uML_Extend_extension->setUpper(1);
	uML_Extend->getOwnedAttribute()->push_back(uML_Extend_extension);
	uML_Extend_extension->setClass(uML_Extend);
	
	
	uML_Extend_extensionLocation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Extend_extensionLocation->setName("extensionLocation");
	uML_Extend_extensionLocation->setType(get_UML_ExtensionPoint());
	uML_Extend_extensionLocation->setLower(1);
	uML_Extend_extensionLocation->setUpper(-1);
	uML_Extend->getOwnedAttribute()->push_back(uML_Extend_extensionLocation);
	uML_Extend_extensionLocation->setClass(uML_Extend);
	
	
	
	
	


	uML_Extension.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Extension->setName("Extension");
	uML_Extension->setIsAbstract(false);
	uML_Extension->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Extension);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("non_owned_end");
	con->getConstrainedElement()->push_back(uML_Extension);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("metaclassEnd()->notEmpty() and metaclassEnd().type.oclIsKindOf(Class)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Extension->getOwnedRule()->push_back(con);
	con->setContext(uML_Extension->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("is_binary");
	con->getConstrainedElement()->push_back(uML_Extension);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("memberEnd->size() = 2");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Extension->getOwnedRule()->push_back(con);
	con->setContext(uML_Extension->getNamespace());
	
	
	uML_Extension_isRequired.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Extension_isRequired->setName("isRequired");
	uML_Extension_isRequired->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Extension_isRequired->setLower(1);
	uML_Extension_isRequired->setUpper(1);
	uML_Extension->getOwnedAttribute()->push_back(uML_Extension_isRequired);
	uML_Extension_isRequired->setClass(uML_Extension);
	
	
	uML_Extension_metaclass.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Extension_metaclass->setName("metaclass");
	uML_Extension_metaclass->setType(get_UML_Class());
	uML_Extension_metaclass->setLower(1);
	uML_Extension_metaclass->setUpper(1);
	uML_Extension->getOwnedAttribute()->push_back(uML_Extension_metaclass);
	uML_Extension_metaclass->setClass(uML_Extension);
	
	
	uML_Extension_ownedEnd.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Extension_ownedEnd->setName("ownedEnd");
	uML_Extension_ownedEnd->setType(get_UML_ExtensionEnd());
	uML_Extension_ownedEnd->setLower(1);
	uML_Extension_ownedEnd->setUpper(1);
	uML_Extension->getOwnedAttribute()->push_back(uML_Extension_ownedEnd);
	uML_Extension_ownedEnd->setClass(uML_Extension);
	
	
	
	uML_Extension_getStereotype_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Extension_getStereotype_->setName("getStereotype");
	uML_Extension_getStereotype__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Extension_getStereotype__return->setName("");
	uML_Extension_getStereotype__return->setType(get_UML_Stereotype());
	uML_Extension_getStereotype__return->setLower(0);
	uML_Extension_getStereotype__return->setUpper(1);
	uML_Extension_getStereotype__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Extension_getStereotype_->getOwnedParameter()->push_back(uML_Extension_getStereotype__return);
	
	
	uML_Extension->getOwnedOperation()->push_back(uML_Extension_getStereotype_); 
	uML_Extension_getStereotypeEnd_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Extension_getStereotypeEnd_->setName("getStereotypeEnd");
	uML_Extension_getStereotypeEnd__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Extension_getStereotypeEnd__return->setName("");
	uML_Extension_getStereotypeEnd__return->setType(get_UML_Property());
	uML_Extension_getStereotypeEnd__return->setLower(0);
	uML_Extension_getStereotypeEnd__return->setUpper(1);
	uML_Extension_getStereotypeEnd__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Extension_getStereotypeEnd_->getOwnedParameter()->push_back(uML_Extension_getStereotypeEnd__return);
	
	
	uML_Extension->getOwnedOperation()->push_back(uML_Extension_getStereotypeEnd_); 
	uML_Extension_isRequired_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Extension_isRequired_->setName("isRequired");
	uML_Extension_isRequired_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Extension_isRequired_result->setName("result");
	uML_Extension_isRequired_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Extension_isRequired_result->setLower(1);
	uML_Extension_isRequired_result->setUpper(1);
	uML_Extension_isRequired_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Extension_isRequired_->getOwnedParameter()->push_back(uML_Extension_isRequired_result);
	
	
	uML_Extension->getOwnedOperation()->push_back(uML_Extension_isRequired_); 
	uML_Extension_metaclass_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Extension_metaclass_->setName("metaclass");
	uML_Extension_metaclass_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Extension_metaclass_result->setName("result");
	uML_Extension_metaclass_result->setType(get_UML_Class());
	uML_Extension_metaclass_result->setLower(1);
	uML_Extension_metaclass_result->setUpper(1);
	uML_Extension_metaclass_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Extension_metaclass_->getOwnedParameter()->push_back(uML_Extension_metaclass_result);
	
	
	uML_Extension->getOwnedOperation()->push_back(uML_Extension_metaclass_); 
	uML_Extension_metaclassEnd_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Extension_metaclassEnd_->setName("metaclassEnd");
	uML_Extension_metaclassEnd_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Extension_metaclassEnd_result->setName("result");
	uML_Extension_metaclassEnd_result->setType(get_UML_Property());
	uML_Extension_metaclassEnd_result->setLower(1);
	uML_Extension_metaclassEnd_result->setUpper(1);
	uML_Extension_metaclassEnd_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Extension_metaclassEnd_->getOwnedParameter()->push_back(uML_Extension_metaclassEnd_result);
	
	
	uML_Extension->getOwnedOperation()->push_back(uML_Extension_metaclassEnd_); 
	
	


	uML_ExtensionEnd.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ExtensionEnd->setName("ExtensionEnd");
	uML_ExtensionEnd->setIsAbstract(false);
	uML_ExtensionEnd->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ExtensionEnd);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_ExtensionEnd);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(lowerBound() = 0 or lowerBound() = 1) and upperBound() = 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ExtensionEnd->getOwnedRule()->push_back(con);
	con->setContext(uML_ExtensionEnd->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("aggregation");
	con->getConstrainedElement()->push_back(uML_ExtensionEnd);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.aggregation = AggregationKind::composite");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ExtensionEnd->getOwnedRule()->push_back(con);
	con->setContext(uML_ExtensionEnd->getNamespace());
	
	
	uML_ExtensionEnd_lower.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExtensionEnd_lower->setName("lower");
	uML_ExtensionEnd_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_ExtensionEnd_lower->setLower(0);
	uML_ExtensionEnd_lower->setUpper(1);
	uML_ExtensionEnd->getOwnedAttribute()->push_back(uML_ExtensionEnd_lower);
	uML_ExtensionEnd_lower->setClass(uML_ExtensionEnd);
	
	
	uML_ExtensionEnd_type.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExtensionEnd_type->setName("type");
	uML_ExtensionEnd_type->setType(get_UML_Stereotype());
	uML_ExtensionEnd_type->setLower(1);
	uML_ExtensionEnd_type->setUpper(1);
	uML_ExtensionEnd->getOwnedAttribute()->push_back(uML_ExtensionEnd_type);
	uML_ExtensionEnd_type->setClass(uML_ExtensionEnd);
	
	
	
	uML_ExtensionEnd_getLower_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ExtensionEnd_getLower_->setName("getLower");
	uML_ExtensionEnd_getLower__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ExtensionEnd_getLower__return->setName("");
	uML_ExtensionEnd_getLower__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_ExtensionEnd_getLower__return->setLower(1);
	uML_ExtensionEnd_getLower__return->setUpper(1);
	uML_ExtensionEnd_getLower__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ExtensionEnd_getLower_->getOwnedParameter()->push_back(uML_ExtensionEnd_getLower__return);
	
	
	uML_ExtensionEnd->getOwnedOperation()->push_back(uML_ExtensionEnd_getLower_); 
	uML_ExtensionEnd_lowerBound_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ExtensionEnd_lowerBound_->setName("lowerBound");
	uML_ExtensionEnd_lowerBound_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ExtensionEnd_lowerBound_result->setName("result");
	uML_ExtensionEnd_lowerBound_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_ExtensionEnd_lowerBound_result->setLower(0);
	uML_ExtensionEnd_lowerBound_result->setUpper(1);
	uML_ExtensionEnd_lowerBound_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ExtensionEnd_lowerBound_->getOwnedParameter()->push_back(uML_ExtensionEnd_lowerBound_result);
	
	
	uML_ExtensionEnd->getOwnedOperation()->push_back(uML_ExtensionEnd_lowerBound_); 
	uML_ExtensionEnd_setLower_Integer.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ExtensionEnd_setLower_Integer->setName("setLower");
	uML_ExtensionEnd_setLower_Integer_UML_ExtensionEnd_setLower_newLower.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ExtensionEnd_setLower_Integer_UML_ExtensionEnd_setLower_newLower->setName("newLower");
	uML_ExtensionEnd_setLower_Integer_UML_ExtensionEnd_setLower_newLower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_ExtensionEnd_setLower_Integer_UML_ExtensionEnd_setLower_newLower->setLower(1);
	uML_ExtensionEnd_setLower_Integer_UML_ExtensionEnd_setLower_newLower->setUpper(1);
	uML_ExtensionEnd_setLower_Integer_UML_ExtensionEnd_setLower_newLower->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_ExtensionEnd_setLower_Integer->getOwnedParameter()->push_back(uML_ExtensionEnd_setLower_Integer_UML_ExtensionEnd_setLower_newLower);
	
	
	uML_ExtensionEnd->getOwnedOperation()->push_back(uML_ExtensionEnd_setLower_Integer); 
	
	


	uML_ExtensionPoint.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ExtensionPoint->setName("ExtensionPoint");
	uML_ExtensionPoint->setIsAbstract(false);
	uML_ExtensionPoint->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ExtensionPoint);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("must_have_name");
	con->getConstrainedElement()->push_back(uML_ExtensionPoint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("name->notEmpty ()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ExtensionPoint->getOwnedRule()->push_back(con);
	con->setContext(uML_ExtensionPoint->getNamespace());
	
	
	uML_ExtensionPoint_useCase.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ExtensionPoint_useCase->setName("useCase");
	uML_ExtensionPoint_useCase->setType(get_UML_UseCase());
	uML_ExtensionPoint_useCase->setLower(1);
	uML_ExtensionPoint_useCase->setUpper(1);
	uML_ExtensionPoint->getOwnedAttribute()->push_back(uML_ExtensionPoint_useCase);
	uML_ExtensionPoint_useCase->setClass(uML_ExtensionPoint);
	
	
	
	
	


	uML_Feature.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Feature->setName("Feature");
	uML_Feature->setIsAbstract(true);
	uML_Feature->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Feature);
	
	//constraints
	
	
	uML_Feature_featuringClassifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Feature_featuringClassifier->setName("featuringClassifier");
	uML_Feature_featuringClassifier->setType(get_UML_Classifier());
	uML_Feature_featuringClassifier->setLower(0);
	uML_Feature_featuringClassifier->setUpper(-1);
	uML_Feature->getOwnedAttribute()->push_back(uML_Feature_featuringClassifier);
	uML_Feature_featuringClassifier->setClass(uML_Feature);
	
	
	uML_Feature_isStatic.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Feature_isStatic->setName("isStatic");
	uML_Feature_isStatic->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Feature_isStatic->setLower(1);
	uML_Feature_isStatic->setUpper(1);
	uML_Feature->getOwnedAttribute()->push_back(uML_Feature_isStatic);
	uML_Feature_isStatic->setClass(uML_Feature);
	uML_Feature_isStatic->setDefaultValue(uML_Feature_isStatic_defaultValue_LiteralBoolean_UML_Feature_isStatic);
	
	
	
	


	uML_FinalNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_FinalNode->setName("FinalNode");
	uML_FinalNode->setIsAbstract(true);
	uML_FinalNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_FinalNode);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_outgoing_edges");
	con->getConstrainedElement()->push_back(uML_FinalNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("outgoing->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_FinalNode->getOwnedRule()->push_back(con);
	con->setContext(uML_FinalNode->getNamespace());
	
	
	
	
	


	uML_FinalState.reset(uml::UmlFactory::eInstance()->createClass());
	uML_FinalState->setName("FinalState");
	uML_FinalState->setIsAbstract(false);
	uML_FinalState->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_FinalState);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_state_behavior");
	con->getConstrainedElement()->push_back(uML_FinalState);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("doActivity->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_FinalState->getOwnedRule()->push_back(con);
	con->setContext(uML_FinalState->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("cannot_reference_submachine");
	con->getConstrainedElement()->push_back(uML_FinalState);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("submachine->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_FinalState->getOwnedRule()->push_back(con);
	con->setContext(uML_FinalState->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_regions");
	con->getConstrainedElement()->push_back(uML_FinalState);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("region->size() = 0");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_FinalState->getOwnedRule()->push_back(con);
	con->setContext(uML_FinalState->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_outgoing_transitions");
	con->getConstrainedElement()->push_back(uML_FinalState);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("outgoing->size() = 0");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_FinalState->getOwnedRule()->push_back(con);
	con->setContext(uML_FinalState->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_entry_behavior");
	con->getConstrainedElement()->push_back(uML_FinalState);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("entry->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_FinalState->getOwnedRule()->push_back(con);
	con->setContext(uML_FinalState->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_exit_behavior");
	con->getConstrainedElement()->push_back(uML_FinalState);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("exit->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_FinalState->getOwnedRule()->push_back(con);
	con->setContext(uML_FinalState->getNamespace());
	
	
	
	
	


	uML_FlowFinalNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_FlowFinalNode->setName("FlowFinalNode");
	uML_FlowFinalNode->setIsAbstract(false);
	uML_FlowFinalNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_FlowFinalNode);
	
	//constraints
	
	
	
	
	


	uML_ForkNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ForkNode->setName("ForkNode");
	uML_ForkNode->setIsAbstract(false);
	uML_ForkNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ForkNode);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("one_incoming_edge");
	con->getConstrainedElement()->push_back(uML_ForkNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("incoming->size()=1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ForkNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ForkNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("edges");
	con->getConstrainedElement()->push_back(uML_ForkNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let allEdges : Set(ActivityEdge) = incoming->union(outgoing) in"\
	"allEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ForkNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ForkNode->getNamespace());
	
	
	
	
	


	uML_FunctionBehavior.reset(uml::UmlFactory::eInstance()->createClass());
	uML_FunctionBehavior->setName("FunctionBehavior");
	uML_FunctionBehavior->setIsAbstract(false);
	uML_FunctionBehavior->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_FunctionBehavior);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("types_of_parameters");
	con->getConstrainedElement()->push_back(uML_FunctionBehavior);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("ownedParameter->forAll(p | p.type <> null and"\
	"  p.type.oclIsTypeOf(DataType) and hasAllDataTypeAttributes(p.type.oclAsType(DataType)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_FunctionBehavior->getOwnedRule()->push_back(con);
	con->setContext(uML_FunctionBehavior->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("one_output_parameter");
	con->getConstrainedElement()->push_back(uML_FunctionBehavior);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.ownedParameter->"\
	"  select(p | p.direction = ParameterDirectionKind::out or p.direction= ParameterDirectionKind::inout or p.direction= ParameterDirectionKind::return)->size() >= 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_FunctionBehavior->getOwnedRule()->push_back(con);
	con->setContext(uML_FunctionBehavior->getNamespace());
	
	
	
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType->setName("hasAllDataTypeAttributes");
	uML_FunctionBehavior_hasAllDataTypeAttributes_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_FunctionBehavior_hasAllDataTypeAttributes_result->setName("result");
	uML_FunctionBehavior_hasAllDataTypeAttributes_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_FunctionBehavior_hasAllDataTypeAttributes_result->setLower(1);
	uML_FunctionBehavior_hasAllDataTypeAttributes_result->setUpper(1);
	uML_FunctionBehavior_hasAllDataTypeAttributes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType->getOwnedParameter()->push_back(uML_FunctionBehavior_hasAllDataTypeAttributes_result);
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_UML_FunctionBehavior_hasAllDataTypeAttributes_d.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_UML_FunctionBehavior_hasAllDataTypeAttributes_d->setName("d");
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_UML_FunctionBehavior_hasAllDataTypeAttributes_d->setType(get_UML_DataType());
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_UML_FunctionBehavior_hasAllDataTypeAttributes_d->setLower(1);
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_UML_FunctionBehavior_hasAllDataTypeAttributes_d->setUpper(1);
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_UML_FunctionBehavior_hasAllDataTypeAttributes_d->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_FunctionBehavior_hasAllDataTypeAttributes_DataType->getOwnedParameter()->push_back(uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_UML_FunctionBehavior_hasAllDataTypeAttributes_d);
	
	
	uML_FunctionBehavior->getOwnedOperation()->push_back(uML_FunctionBehavior_hasAllDataTypeAttributes_DataType); 
	
	


	uML_Gate.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Gate->setName("Gate");
	uML_Gate->setIsAbstract(false);
	uML_Gate->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Gate);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("outside_cf_gate_distinguishable");
	con->getConstrainedElement()->push_back(uML_Gate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isOutsideCF() implies combinedFragment.cfragmentGate->select(getName() = self.getName())->size()=1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Gate->getOwnedRule()->push_back(con);
	con->setContext(uML_Gate->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("inside_cf_matched");
	con->getConstrainedElement()->push_back(uML_Gate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isInsideCF() implies combinedFragment.cfragmentGate->select(isOutsideCF() and matches(self))->size()=1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Gate->getOwnedRule()->push_back(con);
	con->setContext(uML_Gate->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("inside_cf_gate_distinguishable");
	con->getConstrainedElement()->push_back(uML_Gate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isInsideCF() implies"\
	"let selfOperand : InteractionOperand = self.getOperand() in"\
	"  combinedFragment.cfragmentGate->select(isInsideCF() and getName() = self.getName())->select(getOperand() = selfOperand)->size()=1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Gate->getOwnedRule()->push_back(con);
	con->setContext(uML_Gate->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("actual_gate_distinguishable");
	con->getConstrainedElement()->push_back(uML_Gate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isActual() implies interactionUse.actualGate->select(getName() = self.getName())->size()=1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Gate->getOwnedRule()->push_back(con);
	con->setContext(uML_Gate->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("actual_gate_matched");
	con->getConstrainedElement()->push_back(uML_Gate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("interactionUse->notEmpty() implies interactionUse.refersTo.formalGate->select(matches(self))->size()=1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Gate->getOwnedRule()->push_back(con);
	con->setContext(uML_Gate->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("formal_gate_distinguishable");
	con->getConstrainedElement()->push_back(uML_Gate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isFormal() implies interaction.formalGate->select(getName() = self.getName())->size()=1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Gate->getOwnedRule()->push_back(con);
	con->setContext(uML_Gate->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("outside_cf_matched");
	con->getConstrainedElement()->push_back(uML_Gate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isOutsideCF() implies"\
	" if self.combinedFragment.interactionOperator->asOrderedSet()->first() = InteractionOperatorKind::alt"\
	" then self.combinedFragment.operand->forAll(op : InteractionOperand |"\
	" self.combinedFragment.cfragmentGate->select(isInsideCF() and "\
	" oppositeEnd().enclosingFragment()->includes(self.combinedFragment) and matches(self))->size()=1)"\
	" else  self.combinedFragment.cfragmentGate->select(isInsideCF() and matches(self))->size()=1"\
	" endif");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Gate->getOwnedRule()->push_back(con);
	con->setContext(uML_Gate->getNamespace());
	
	
	
	uML_Gate_getName_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Gate_getName_->setName("getName");
	uML_Gate_getName_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Gate_getName_result->setName("result");
	uML_Gate_getName_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Gate_getName_result->setLower(1);
	uML_Gate_getName_result->setUpper(1);
	uML_Gate_getName_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Gate_getName_->getOwnedParameter()->push_back(uML_Gate_getName_result);
	
	
	uML_Gate->getOwnedOperation()->push_back(uML_Gate_getName_); 
	uML_Gate_getOperand_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Gate_getOperand_->setName("getOperand");
	uML_Gate_getOperand_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Gate_getOperand_result->setName("result");
	uML_Gate_getOperand_result->setType(get_UML_InteractionOperand());
	uML_Gate_getOperand_result->setLower(1);
	uML_Gate_getOperand_result->setUpper(1);
	uML_Gate_getOperand_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Gate_getOperand_->getOwnedParameter()->push_back(uML_Gate_getOperand_result);
	
	
	uML_Gate->getOwnedOperation()->push_back(uML_Gate_getOperand_); 
	uML_Gate_isActual_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Gate_isActual_->setName("isActual");
	uML_Gate_isActual_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Gate_isActual_result->setName("result");
	uML_Gate_isActual_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Gate_isActual_result->setLower(1);
	uML_Gate_isActual_result->setUpper(1);
	uML_Gate_isActual_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Gate_isActual_->getOwnedParameter()->push_back(uML_Gate_isActual_result);
	
	
	uML_Gate->getOwnedOperation()->push_back(uML_Gate_isActual_); 
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace->setName("isDistinguishableFrom");
	uML_Gate_isDistinguishableFrom_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Gate_isDistinguishableFrom_result->setName("result");
	uML_Gate_isDistinguishableFrom_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Gate_isDistinguishableFrom_result->setLower(1);
	uML_Gate_isDistinguishableFrom_result->setUpper(1);
	uML_Gate_isDistinguishableFrom_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace->getOwnedParameter()->push_back(uML_Gate_isDistinguishableFrom_result);
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_n.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_n->setName("n");
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_n->setType(get_UML_NamedElement());
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_n->setLower(1);
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_n->setUpper(1);
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_n->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace->getOwnedParameter()->push_back(uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_n);
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_ns.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_ns->setName("ns");
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_ns->setType(get_UML_Namespace());
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_ns->setLower(1);
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_ns->setUpper(1);
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_ns->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Gate_isDistinguishableFrom_NamedElement_Namespace->getOwnedParameter()->push_back(uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_ns);
	
	
	uML_Gate->getOwnedOperation()->push_back(uML_Gate_isDistinguishableFrom_NamedElement_Namespace); 
	uML_Gate_isFormal_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Gate_isFormal_->setName("isFormal");
	uML_Gate_isFormal_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Gate_isFormal_result->setName("result");
	uML_Gate_isFormal_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Gate_isFormal_result->setLower(1);
	uML_Gate_isFormal_result->setUpper(1);
	uML_Gate_isFormal_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Gate_isFormal_->getOwnedParameter()->push_back(uML_Gate_isFormal_result);
	
	
	uML_Gate->getOwnedOperation()->push_back(uML_Gate_isFormal_); 
	uML_Gate_isInsideCF_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Gate_isInsideCF_->setName("isInsideCF");
	uML_Gate_isInsideCF_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Gate_isInsideCF_result->setName("result");
	uML_Gate_isInsideCF_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Gate_isInsideCF_result->setLower(1);
	uML_Gate_isInsideCF_result->setUpper(1);
	uML_Gate_isInsideCF_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Gate_isInsideCF_->getOwnedParameter()->push_back(uML_Gate_isInsideCF_result);
	
	
	uML_Gate->getOwnedOperation()->push_back(uML_Gate_isInsideCF_); 
	uML_Gate_isOutsideCF_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Gate_isOutsideCF_->setName("isOutsideCF");
	uML_Gate_isOutsideCF_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Gate_isOutsideCF_result->setName("result");
	uML_Gate_isOutsideCF_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Gate_isOutsideCF_result->setLower(1);
	uML_Gate_isOutsideCF_result->setUpper(1);
	uML_Gate_isOutsideCF_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Gate_isOutsideCF_->getOwnedParameter()->push_back(uML_Gate_isOutsideCF_result);
	
	
	uML_Gate->getOwnedOperation()->push_back(uML_Gate_isOutsideCF_); 
	uML_Gate_matches_Gate.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Gate_matches_Gate->setName("matches");
	uML_Gate_matches_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Gate_matches_result->setName("result");
	uML_Gate_matches_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Gate_matches_result->setLower(1);
	uML_Gate_matches_result->setUpper(1);
	uML_Gate_matches_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Gate_matches_Gate->getOwnedParameter()->push_back(uML_Gate_matches_result);
	uML_Gate_matches_Gate_UML_Gate_matches_gateToMatch.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Gate_matches_Gate_UML_Gate_matches_gateToMatch->setName("gateToMatch");
	uML_Gate_matches_Gate_UML_Gate_matches_gateToMatch->setType(get_UML_Gate());
	uML_Gate_matches_Gate_UML_Gate_matches_gateToMatch->setLower(1);
	uML_Gate_matches_Gate_UML_Gate_matches_gateToMatch->setUpper(1);
	uML_Gate_matches_Gate_UML_Gate_matches_gateToMatch->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Gate_matches_Gate->getOwnedParameter()->push_back(uML_Gate_matches_Gate_UML_Gate_matches_gateToMatch);
	
	
	uML_Gate->getOwnedOperation()->push_back(uML_Gate_matches_Gate); 
	
	


	uML_GeneralOrdering.reset(uml::UmlFactory::eInstance()->createClass());
	uML_GeneralOrdering->setName("GeneralOrdering");
	uML_GeneralOrdering->setIsAbstract(false);
	uML_GeneralOrdering->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_GeneralOrdering);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("irreflexive_transitive_closure");
	con->getConstrainedElement()->push_back(uML_GeneralOrdering);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("after->closure(toAfter.after)->excludes(before)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_GeneralOrdering->getOwnedRule()->push_back(con);
	con->setContext(uML_GeneralOrdering->getNamespace());
	
	
	uML_GeneralOrdering_after.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_GeneralOrdering_after->setName("after");
	uML_GeneralOrdering_after->setType(get_UML_OccurrenceSpecification());
	uML_GeneralOrdering_after->setLower(1);
	uML_GeneralOrdering_after->setUpper(1);
	uML_GeneralOrdering->getOwnedAttribute()->push_back(uML_GeneralOrdering_after);
	uML_GeneralOrdering_after->setClass(uML_GeneralOrdering);
	
	
	uML_GeneralOrdering_before.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_GeneralOrdering_before->setName("before");
	uML_GeneralOrdering_before->setType(get_UML_OccurrenceSpecification());
	uML_GeneralOrdering_before->setLower(1);
	uML_GeneralOrdering_before->setUpper(1);
	uML_GeneralOrdering->getOwnedAttribute()->push_back(uML_GeneralOrdering_before);
	uML_GeneralOrdering_before->setClass(uML_GeneralOrdering);
	
	
	
	
	


	uML_Generalization.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Generalization->setName("Generalization");
	uML_Generalization->setIsAbstract(false);
	uML_Generalization->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Generalization);
	
	//constraints
	
	
	uML_Generalization_general.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Generalization_general->setName("general");
	uML_Generalization_general->setType(get_UML_Classifier());
	uML_Generalization_general->setLower(1);
	uML_Generalization_general->setUpper(1);
	uML_Generalization->getOwnedAttribute()->push_back(uML_Generalization_general);
	uML_Generalization_general->setClass(uML_Generalization);
	
	
	uML_Generalization_generalizationSet.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Generalization_generalizationSet->setName("generalizationSet");
	uML_Generalization_generalizationSet->setType(get_UML_GeneralizationSet());
	uML_Generalization_generalizationSet->setLower(0);
	uML_Generalization_generalizationSet->setUpper(-1);
	uML_Generalization->getOwnedAttribute()->push_back(uML_Generalization_generalizationSet);
	uML_Generalization_generalizationSet->setClass(uML_Generalization);
	
	
	uML_Generalization_isSubstitutable.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Generalization_isSubstitutable->setName("isSubstitutable");
	uML_Generalization_isSubstitutable->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Generalization_isSubstitutable->setLower(0);
	uML_Generalization_isSubstitutable->setUpper(1);
	uML_Generalization->getOwnedAttribute()->push_back(uML_Generalization_isSubstitutable);
	uML_Generalization_isSubstitutable->setClass(uML_Generalization);
	uML_Generalization_isSubstitutable->setDefaultValue(uML_Generalization_isSubstitutable_defaultValue_LiteralBoolean_UML_Generalization_isSubstitutable);
	
	uML_Generalization_specific.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Generalization_specific->setName("specific");
	uML_Generalization_specific->setType(get_UML_Classifier());
	uML_Generalization_specific->setLower(1);
	uML_Generalization_specific->setUpper(1);
	uML_Generalization->getOwnedAttribute()->push_back(uML_Generalization_specific);
	uML_Generalization_specific->setClass(uML_Generalization);
	
	
	
	
	


	uML_GeneralizationSet.reset(uml::UmlFactory::eInstance()->createClass());
	uML_GeneralizationSet->setName("GeneralizationSet");
	uML_GeneralizationSet->setIsAbstract(false);
	uML_GeneralizationSet->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_GeneralizationSet);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("maps_to_generalization_set");
	con->getConstrainedElement()->push_back(uML_GeneralizationSet);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("powertype <> null implies generalization->forAll( gen | "\
	"    not (gen.general = powertype) and not gen.general.allParents()->includes(powertype) and not (gen.specific = powertype) and not powertype.allParents()->includes(gen.specific)"\
	"  )");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_GeneralizationSet->getOwnedRule()->push_back(con);
	con->setContext(uML_GeneralizationSet->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("generalization_same_classifier");
	con->getConstrainedElement()->push_back(uML_GeneralizationSet);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("generalization->collect(general)->asSet()->size() <= 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_GeneralizationSet->getOwnedRule()->push_back(con);
	con->setContext(uML_GeneralizationSet->getNamespace());
	
	
	uML_GeneralizationSet_generalization.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_GeneralizationSet_generalization->setName("generalization");
	uML_GeneralizationSet_generalization->setType(get_UML_Generalization());
	uML_GeneralizationSet_generalization->setLower(0);
	uML_GeneralizationSet_generalization->setUpper(-1);
	uML_GeneralizationSet->getOwnedAttribute()->push_back(uML_GeneralizationSet_generalization);
	uML_GeneralizationSet_generalization->setClass(uML_GeneralizationSet);
	
	
	uML_GeneralizationSet_isCovering.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_GeneralizationSet_isCovering->setName("isCovering");
	uML_GeneralizationSet_isCovering->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_GeneralizationSet_isCovering->setLower(1);
	uML_GeneralizationSet_isCovering->setUpper(1);
	uML_GeneralizationSet->getOwnedAttribute()->push_back(uML_GeneralizationSet_isCovering);
	uML_GeneralizationSet_isCovering->setClass(uML_GeneralizationSet);
	uML_GeneralizationSet_isCovering->setDefaultValue(uML_GeneralizationSet_isCovering_defaultValue_LiteralBoolean_UML_GeneralizationSet_isCovering);
	
	uML_GeneralizationSet_isDisjoint.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_GeneralizationSet_isDisjoint->setName("isDisjoint");
	uML_GeneralizationSet_isDisjoint->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_GeneralizationSet_isDisjoint->setLower(1);
	uML_GeneralizationSet_isDisjoint->setUpper(1);
	uML_GeneralizationSet->getOwnedAttribute()->push_back(uML_GeneralizationSet_isDisjoint);
	uML_GeneralizationSet_isDisjoint->setClass(uML_GeneralizationSet);
	uML_GeneralizationSet_isDisjoint->setDefaultValue(uML_GeneralizationSet_isDisjoint_defaultValue_LiteralBoolean_UML_GeneralizationSet_isDisjoint);
	
	uML_GeneralizationSet_powertype.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_GeneralizationSet_powertype->setName("powertype");
	uML_GeneralizationSet_powertype->setType(get_UML_Classifier());
	uML_GeneralizationSet_powertype->setLower(0);
	uML_GeneralizationSet_powertype->setUpper(1);
	uML_GeneralizationSet->getOwnedAttribute()->push_back(uML_GeneralizationSet_powertype);
	uML_GeneralizationSet_powertype->setClass(uML_GeneralizationSet);
	
	
	
	
	


	uML_Image.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Image->setName("Image");
	uML_Image->setIsAbstract(false);
	uML_Image->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Image);
	
	//constraints
	
	
	uML_Image_content.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Image_content->setName("content");
	uML_Image_content->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Image_content->setLower(0);
	uML_Image_content->setUpper(1);
	uML_Image->getOwnedAttribute()->push_back(uML_Image_content);
	uML_Image_content->setClass(uML_Image);
	
	
	uML_Image_format.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Image_format->setName("format");
	uML_Image_format->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Image_format->setLower(0);
	uML_Image_format->setUpper(1);
	uML_Image->getOwnedAttribute()->push_back(uML_Image_format);
	uML_Image_format->setClass(uML_Image);
	
	
	uML_Image_location.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Image_location->setName("location");
	uML_Image_location->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Image_location->setLower(0);
	uML_Image_location->setUpper(1);
	uML_Image->getOwnedAttribute()->push_back(uML_Image_location);
	uML_Image_location->setClass(uML_Image);
	
	
	
	
	


	uML_Include.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Include->setName("Include");
	uML_Include->setIsAbstract(false);
	uML_Include->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Include);
	
	//constraints
	
	
	uML_Include_addition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Include_addition->setName("addition");
	uML_Include_addition->setType(get_UML_UseCase());
	uML_Include_addition->setLower(1);
	uML_Include_addition->setUpper(1);
	uML_Include->getOwnedAttribute()->push_back(uML_Include_addition);
	uML_Include_addition->setClass(uML_Include);
	
	
	uML_Include_includingCase.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Include_includingCase->setName("includingCase");
	uML_Include_includingCase->setType(get_UML_UseCase());
	uML_Include_includingCase->setLower(1);
	uML_Include_includingCase->setUpper(1);
	uML_Include->getOwnedAttribute()->push_back(uML_Include_includingCase);
	uML_Include_includingCase->setClass(uML_Include);
	
	
	
	
	


	uML_InformationFlow.reset(uml::UmlFactory::eInstance()->createClass());
	uML_InformationFlow->setName("InformationFlow");
	uML_InformationFlow->setIsAbstract(false);
	uML_InformationFlow->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_InformationFlow);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("sources_and_targets_kind");
	con->getConstrainedElement()->push_back(uML_InformationFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(self.informationSource->forAll( sis |"\
	"  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or "\
	"  oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or "\
	"  oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or "\
	"  (oclIsKindOf(InstanceSpecification) and not sis.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship))))) "\
	""\
	"and"\
	""\
	"(self.informationTarget->forAll( sit | "\
	"  oclIsKindOf(Actor) or oclIsKindOf(Node) or oclIsKindOf(UseCase) or oclIsKindOf(Artifact) or "\
	"  oclIsKindOf(Class) or oclIsKindOf(Component) or oclIsKindOf(Port) or oclIsKindOf(Property) or "\
	"  oclIsKindOf(Interface) or oclIsKindOf(Package) or oclIsKindOf(ActivityNode) or oclIsKindOf(ActivityPartition) or "\
	"(oclIsKindOf(InstanceSpecification) and not sit.oclAsType(InstanceSpecification).classifier->exists(oclIsKindOf(Relationship)))))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InformationFlow->getOwnedRule()->push_back(con);
	con->setContext(uML_InformationFlow->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("must_conform");
	con->getConstrainedElement()->push_back(uML_InformationFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InformationFlow->getOwnedRule()->push_back(con);
	con->setContext(uML_InformationFlow->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("convey_classifiers");
	con->getConstrainedElement()->push_back(uML_InformationFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.conveyed->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface)"\
	"  or oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InformationFlow->getOwnedRule()->push_back(con);
	con->setContext(uML_InformationFlow->getNamespace());
	
	
	uML_InformationFlow_conveyed.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InformationFlow_conveyed->setName("conveyed");
	uML_InformationFlow_conveyed->setType(get_UML_Classifier());
	uML_InformationFlow_conveyed->setLower(1);
	uML_InformationFlow_conveyed->setUpper(-1);
	uML_InformationFlow->getOwnedAttribute()->push_back(uML_InformationFlow_conveyed);
	uML_InformationFlow_conveyed->setClass(uML_InformationFlow);
	
	
	uML_InformationFlow_informationSource.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InformationFlow_informationSource->setName("informationSource");
	uML_InformationFlow_informationSource->setType(get_UML_NamedElement());
	uML_InformationFlow_informationSource->setLower(1);
	uML_InformationFlow_informationSource->setUpper(-1);
	uML_InformationFlow->getOwnedAttribute()->push_back(uML_InformationFlow_informationSource);
	uML_InformationFlow_informationSource->setClass(uML_InformationFlow);
	
	
	uML_InformationFlow_informationTarget.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InformationFlow_informationTarget->setName("informationTarget");
	uML_InformationFlow_informationTarget->setType(get_UML_NamedElement());
	uML_InformationFlow_informationTarget->setLower(1);
	uML_InformationFlow_informationTarget->setUpper(-1);
	uML_InformationFlow->getOwnedAttribute()->push_back(uML_InformationFlow_informationTarget);
	uML_InformationFlow_informationTarget->setClass(uML_InformationFlow);
	
	
	uML_InformationFlow_realization.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InformationFlow_realization->setName("realization");
	uML_InformationFlow_realization->setType(get_UML_Relationship());
	uML_InformationFlow_realization->setLower(0);
	uML_InformationFlow_realization->setUpper(-1);
	uML_InformationFlow->getOwnedAttribute()->push_back(uML_InformationFlow_realization);
	uML_InformationFlow_realization->setClass(uML_InformationFlow);
	
	
	uML_InformationFlow_realizingActivityEdge.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InformationFlow_realizingActivityEdge->setName("realizingActivityEdge");
	uML_InformationFlow_realizingActivityEdge->setType(get_UML_ActivityEdge());
	uML_InformationFlow_realizingActivityEdge->setLower(0);
	uML_InformationFlow_realizingActivityEdge->setUpper(-1);
	uML_InformationFlow->getOwnedAttribute()->push_back(uML_InformationFlow_realizingActivityEdge);
	uML_InformationFlow_realizingActivityEdge->setClass(uML_InformationFlow);
	
	
	uML_InformationFlow_realizingConnector.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InformationFlow_realizingConnector->setName("realizingConnector");
	uML_InformationFlow_realizingConnector->setType(get_UML_Connector());
	uML_InformationFlow_realizingConnector->setLower(0);
	uML_InformationFlow_realizingConnector->setUpper(-1);
	uML_InformationFlow->getOwnedAttribute()->push_back(uML_InformationFlow_realizingConnector);
	uML_InformationFlow_realizingConnector->setClass(uML_InformationFlow);
	
	
	uML_InformationFlow_realizingMessage.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InformationFlow_realizingMessage->setName("realizingMessage");
	uML_InformationFlow_realizingMessage->setType(get_UML_Message());
	uML_InformationFlow_realizingMessage->setLower(0);
	uML_InformationFlow_realizingMessage->setUpper(-1);
	uML_InformationFlow->getOwnedAttribute()->push_back(uML_InformationFlow_realizingMessage);
	uML_InformationFlow_realizingMessage->setClass(uML_InformationFlow);
	
	
	
	
	


	uML_InformationItem.reset(uml::UmlFactory::eInstance()->createClass());
	uML_InformationItem->setName("InformationItem");
	uML_InformationItem->setIsAbstract(false);
	uML_InformationItem->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_InformationItem);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("sources_and_targets");
	con->getConstrainedElement()->push_back(uML_InformationItem);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(self.represented->select(oclIsKindOf(InformationItem))->forAll(p |"\
	"  p.conveyingFlow.source->forAll(q | self.conveyingFlow.source->includes(q)) and"\
	"    p.conveyingFlow.target->forAll(q | self.conveyingFlow.target->includes(q)))) and"\
	"      (self.represented->forAll(oclIsKindOf(Class) or oclIsKindOf(Interface) or"\
	"        oclIsKindOf(InformationItem) or oclIsKindOf(Signal) or oclIsKindOf(Component)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InformationItem->getOwnedRule()->push_back(con);
	con->setContext(uML_InformationItem->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("has_no");
	con->getConstrainedElement()->push_back(uML_InformationItem);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.generalization->isEmpty() and self.feature->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InformationItem->getOwnedRule()->push_back(con);
	con->setContext(uML_InformationItem->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("not_instantiable");
	con->getConstrainedElement()->push_back(uML_InformationItem);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isAbstract");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InformationItem->getOwnedRule()->push_back(con);
	con->setContext(uML_InformationItem->getNamespace());
	
	
	uML_InformationItem_represented.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InformationItem_represented->setName("represented");
	uML_InformationItem_represented->setType(get_UML_Classifier());
	uML_InformationItem_represented->setLower(0);
	uML_InformationItem_represented->setUpper(-1);
	uML_InformationItem->getOwnedAttribute()->push_back(uML_InformationItem_represented);
	uML_InformationItem_represented->setClass(uML_InformationItem);
	
	
	
	
	


	uML_InitialNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_InitialNode->setName("InitialNode");
	uML_InitialNode->setIsAbstract(false);
	uML_InitialNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_InitialNode);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("control_edges");
	con->getConstrainedElement()->push_back(uML_InitialNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("outgoing->forAll(oclIsKindOf(ControlFlow))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InitialNode->getOwnedRule()->push_back(con);
	con->setContext(uML_InitialNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_incoming_edges");
	con->getConstrainedElement()->push_back(uML_InitialNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("incoming->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InitialNode->getOwnedRule()->push_back(con);
	con->setContext(uML_InitialNode->getNamespace());
	
	
	
	
	


	uML_InputPin.reset(uml::UmlFactory::eInstance()->createClass());
	uML_InputPin->setName("InputPin");
	uML_InputPin->setIsAbstract(false);
	uML_InputPin->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_InputPin);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("outgoing_edges_structured_only");
	con->getConstrainedElement()->push_back(uML_InputPin);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("outgoing->notEmpty() implies"\
	"	action<>null and"\
	"	action.oclIsKindOf(StructuredActivityNode) and"\
	"	action.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(outgoing.target)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InputPin->getOwnedRule()->push_back(con);
	con->setContext(uML_InputPin->getNamespace());
	
	
	
	
	


	uML_InstanceSpecification.reset(uml::UmlFactory::eInstance()->createClass());
	uML_InstanceSpecification->setName("InstanceSpecification");
	uML_InstanceSpecification->setIsAbstract(false);
	uML_InstanceSpecification->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_InstanceSpecification);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("structural_feature");
	con->getConstrainedElement()->push_back(uML_InstanceSpecification);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("classifier->forAll(c | (c.allSlottableFeatures()->forAll(f | slot->select(s | s.definingFeature = f)->size() <= 1)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InstanceSpecification->getOwnedRule()->push_back(con);
	con->setContext(uML_InstanceSpecification->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("deployment_artifact");
	con->getConstrainedElement()->push_back(uML_InstanceSpecification);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("deploymentForArtifact->notEmpty() implies classifier->exists(oclIsKindOf(Artifact))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InstanceSpecification->getOwnedRule()->push_back(con);
	con->setContext(uML_InstanceSpecification->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("deployment_target");
	con->getConstrainedElement()->push_back(uML_InstanceSpecification);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("deployment->notEmpty() implies classifier->exists(node | node.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p.type = node)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InstanceSpecification->getOwnedRule()->push_back(con);
	con->setContext(uML_InstanceSpecification->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("defining_feature");
	con->getConstrainedElement()->push_back(uML_InstanceSpecification);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("slot->forAll(s | classifier->exists (c | c.allSlottableFeatures()->includes (s.definingFeature)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InstanceSpecification->getOwnedRule()->push_back(con);
	con->setContext(uML_InstanceSpecification->getNamespace());
	
	
	uML_InstanceSpecification_classifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InstanceSpecification_classifier->setName("classifier");
	uML_InstanceSpecification_classifier->setType(get_UML_Classifier());
	uML_InstanceSpecification_classifier->setLower(0);
	uML_InstanceSpecification_classifier->setUpper(-1);
	uML_InstanceSpecification->getOwnedAttribute()->push_back(uML_InstanceSpecification_classifier);
	uML_InstanceSpecification_classifier->setClass(uML_InstanceSpecification);
	
	
	uML_InstanceSpecification_slot.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InstanceSpecification_slot->setName("slot");
	uML_InstanceSpecification_slot->setType(get_UML_Slot());
	uML_InstanceSpecification_slot->setLower(0);
	uML_InstanceSpecification_slot->setUpper(-1);
	uML_InstanceSpecification->getOwnedAttribute()->push_back(uML_InstanceSpecification_slot);
	uML_InstanceSpecification_slot->setClass(uML_InstanceSpecification);
	
	
	uML_InstanceSpecification_specification.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InstanceSpecification_specification->setName("specification");
	uML_InstanceSpecification_specification->setType(get_UML_ValueSpecification());
	uML_InstanceSpecification_specification->setLower(0);
	uML_InstanceSpecification_specification->setUpper(1);
	uML_InstanceSpecification->getOwnedAttribute()->push_back(uML_InstanceSpecification_specification);
	uML_InstanceSpecification_specification->setClass(uML_InstanceSpecification);
	
	
	
	
	


	uML_InstanceValue.reset(uml::UmlFactory::eInstance()->createClass());
	uML_InstanceValue->setName("InstanceValue");
	uML_InstanceValue->setIsAbstract(false);
	uML_InstanceValue->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_InstanceValue);
	
	//constraints
	
	
	uML_InstanceValue_instance.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InstanceValue_instance->setName("instance");
	uML_InstanceValue_instance->setType(get_UML_InstanceSpecification());
	uML_InstanceValue_instance->setLower(1);
	uML_InstanceValue_instance->setUpper(1);
	uML_InstanceValue->getOwnedAttribute()->push_back(uML_InstanceValue_instance);
	uML_InstanceValue_instance->setClass(uML_InstanceValue);
	
	
	
	uML_InstanceValue_stringValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_InstanceValue_stringValue_->setName("stringValue");
	uML_InstanceValue_stringValue__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_InstanceValue_stringValue__return->setName("");
	uML_InstanceValue_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_InstanceValue_stringValue__return->setLower(1);
	uML_InstanceValue_stringValue__return->setUpper(1);
	uML_InstanceValue_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_InstanceValue_stringValue_->getOwnedParameter()->push_back(uML_InstanceValue_stringValue__return);
	
	
	uML_InstanceValue->getOwnedOperation()->push_back(uML_InstanceValue_stringValue_); 
	
	


	uML_Interaction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Interaction->setName("Interaction");
	uML_Interaction->setIsAbstract(false);
	uML_Interaction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Interaction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("not_contained");
	con->getConstrainedElement()->push_back(uML_Interaction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("enclosingInteraction->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Interaction->getOwnedRule()->push_back(con);
	con->setContext(uML_Interaction->getNamespace());
	
	
	uML_Interaction_action.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Interaction_action->setName("action");
	uML_Interaction_action->setType(get_UML_Action());
	uML_Interaction_action->setLower(0);
	uML_Interaction_action->setUpper(-1);
	uML_Interaction->getOwnedAttribute()->push_back(uML_Interaction_action);
	uML_Interaction_action->setClass(uML_Interaction);
	
	
	uML_Interaction_formalGate.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Interaction_formalGate->setName("formalGate");
	uML_Interaction_formalGate->setType(get_UML_Gate());
	uML_Interaction_formalGate->setLower(0);
	uML_Interaction_formalGate->setUpper(-1);
	uML_Interaction->getOwnedAttribute()->push_back(uML_Interaction_formalGate);
	uML_Interaction_formalGate->setClass(uML_Interaction);
	
	
	uML_Interaction_fragment.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Interaction_fragment->setName("fragment");
	uML_Interaction_fragment->setType(get_UML_InteractionFragment());
	uML_Interaction_fragment->setLower(0);
	uML_Interaction_fragment->setUpper(-1);
	uML_Interaction->getOwnedAttribute()->push_back(uML_Interaction_fragment);
	uML_Interaction_fragment->setClass(uML_Interaction);
	
	
	uML_Interaction_lifeline.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Interaction_lifeline->setName("lifeline");
	uML_Interaction_lifeline->setType(get_UML_Lifeline());
	uML_Interaction_lifeline->setLower(0);
	uML_Interaction_lifeline->setUpper(-1);
	uML_Interaction->getOwnedAttribute()->push_back(uML_Interaction_lifeline);
	uML_Interaction_lifeline->setClass(uML_Interaction);
	
	
	uML_Interaction_message.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Interaction_message->setName("message");
	uML_Interaction_message->setType(get_UML_Message());
	uML_Interaction_message->setLower(0);
	uML_Interaction_message->setUpper(-1);
	uML_Interaction->getOwnedAttribute()->push_back(uML_Interaction_message);
	uML_Interaction_message->setClass(uML_Interaction);
	
	
	
	
	


	uML_InteractionConstraint.reset(uml::UmlFactory::eInstance()->createClass());
	uML_InteractionConstraint->setName("InteractionConstraint");
	uML_InteractionConstraint->setIsAbstract(false);
	uML_InteractionConstraint->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_InteractionConstraint);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("maxint_positive");
	con->getConstrainedElement()->push_back(uML_InteractionConstraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("maxint->notEmpty() implies "\
	"maxint->asSequence()->first().integerValue() > 0");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InteractionConstraint->getOwnedRule()->push_back(con);
	con->setContext(uML_InteractionConstraint->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("global_data");
	con->getConstrainedElement()->push_back(uML_InteractionConstraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InteractionConstraint->getOwnedRule()->push_back(con);
	con->setContext(uML_InteractionConstraint->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("minint_non_negative");
	con->getConstrainedElement()->push_back(uML_InteractionConstraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("minint->notEmpty() implies "\
	"minint->asSequence()->first().integerValue() >= 0");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InteractionConstraint->getOwnedRule()->push_back(con);
	con->setContext(uML_InteractionConstraint->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("maxint_greater_equal_minint");
	con->getConstrainedElement()->push_back(uML_InteractionConstraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("maxint->notEmpty() implies (minint->notEmpty() and "\
	"maxint->asSequence()->first().integerValue() >="\
	"minint->asSequence()->first().integerValue() )");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InteractionConstraint->getOwnedRule()->push_back(con);
	con->setContext(uML_InteractionConstraint->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("dynamic_variables");
	con->getConstrainedElement()->push_back(uML_InteractionConstraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InteractionConstraint->getOwnedRule()->push_back(con);
	con->setContext(uML_InteractionConstraint->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("minint_maxint");
	con->getConstrainedElement()->push_back(uML_InteractionConstraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("maxint->notEmpty() or minint->notEmpty() implies"\
	"interactionOperand.combinedFragment.interactionOperator ="\
	"InteractionOperatorKind::loop");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InteractionConstraint->getOwnedRule()->push_back(con);
	con->setContext(uML_InteractionConstraint->getNamespace());
	
	
	uML_InteractionConstraint_maxint.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InteractionConstraint_maxint->setName("maxint");
	uML_InteractionConstraint_maxint->setType(get_UML_ValueSpecification());
	uML_InteractionConstraint_maxint->setLower(0);
	uML_InteractionConstraint_maxint->setUpper(1);
	uML_InteractionConstraint->getOwnedAttribute()->push_back(uML_InteractionConstraint_maxint);
	uML_InteractionConstraint_maxint->setClass(uML_InteractionConstraint);
	
	
	uML_InteractionConstraint_minint.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InteractionConstraint_minint->setName("minint");
	uML_InteractionConstraint_minint->setType(get_UML_ValueSpecification());
	uML_InteractionConstraint_minint->setLower(0);
	uML_InteractionConstraint_minint->setUpper(1);
	uML_InteractionConstraint->getOwnedAttribute()->push_back(uML_InteractionConstraint_minint);
	uML_InteractionConstraint_minint->setClass(uML_InteractionConstraint);
	
	
	
	
	


	uML_InteractionFragment.reset(uml::UmlFactory::eInstance()->createClass());
	uML_InteractionFragment->setName("InteractionFragment");
	uML_InteractionFragment->setIsAbstract(true);
	uML_InteractionFragment->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_InteractionFragment);
	
	//constraints
	
	
	uML_InteractionFragment_covered.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InteractionFragment_covered->setName("covered");
	uML_InteractionFragment_covered->setType(get_UML_Lifeline());
	uML_InteractionFragment_covered->setLower(0);
	uML_InteractionFragment_covered->setUpper(-1);
	uML_InteractionFragment->getOwnedAttribute()->push_back(uML_InteractionFragment_covered);
	uML_InteractionFragment_covered->setClass(uML_InteractionFragment);
	
	
	uML_InteractionFragment_enclosingInteraction.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InteractionFragment_enclosingInteraction->setName("enclosingInteraction");
	uML_InteractionFragment_enclosingInteraction->setType(get_UML_Interaction());
	uML_InteractionFragment_enclosingInteraction->setLower(0);
	uML_InteractionFragment_enclosingInteraction->setUpper(1);
	uML_InteractionFragment->getOwnedAttribute()->push_back(uML_InteractionFragment_enclosingInteraction);
	uML_InteractionFragment_enclosingInteraction->setClass(uML_InteractionFragment);
	
	
	uML_InteractionFragment_enclosingOperand.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InteractionFragment_enclosingOperand->setName("enclosingOperand");
	uML_InteractionFragment_enclosingOperand->setType(get_UML_InteractionOperand());
	uML_InteractionFragment_enclosingOperand->setLower(0);
	uML_InteractionFragment_enclosingOperand->setUpper(1);
	uML_InteractionFragment->getOwnedAttribute()->push_back(uML_InteractionFragment_enclosingOperand);
	uML_InteractionFragment_enclosingOperand->setClass(uML_InteractionFragment);
	
	
	uML_InteractionFragment_generalOrdering.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InteractionFragment_generalOrdering->setName("generalOrdering");
	uML_InteractionFragment_generalOrdering->setType(get_UML_GeneralOrdering());
	uML_InteractionFragment_generalOrdering->setLower(0);
	uML_InteractionFragment_generalOrdering->setUpper(-1);
	uML_InteractionFragment->getOwnedAttribute()->push_back(uML_InteractionFragment_generalOrdering);
	uML_InteractionFragment_generalOrdering->setClass(uML_InteractionFragment);
	
	
	
	
	


	uML_InteractionOperand.reset(uml::UmlFactory::eInstance()->createClass());
	uML_InteractionOperand->setName("InteractionOperand");
	uML_InteractionOperand->setIsAbstract(false);
	uML_InteractionOperand->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_InteractionOperand);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("guard_contain_references");
	con->getConstrainedElement()->push_back(uML_InteractionOperand);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InteractionOperand->getOwnedRule()->push_back(con);
	con->setContext(uML_InteractionOperand->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("guard_directly_prior");
	con->getConstrainedElement()->push_back(uML_InteractionOperand);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InteractionOperand->getOwnedRule()->push_back(con);
	con->setContext(uML_InteractionOperand->getNamespace());
	
	
	uML_InteractionOperand_fragment.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InteractionOperand_fragment->setName("fragment");
	uML_InteractionOperand_fragment->setType(get_UML_InteractionFragment());
	uML_InteractionOperand_fragment->setLower(0);
	uML_InteractionOperand_fragment->setUpper(-1);
	uML_InteractionOperand->getOwnedAttribute()->push_back(uML_InteractionOperand_fragment);
	uML_InteractionOperand_fragment->setClass(uML_InteractionOperand);
	
	
	uML_InteractionOperand_guard.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InteractionOperand_guard->setName("guard");
	uML_InteractionOperand_guard->setType(get_UML_InteractionConstraint());
	uML_InteractionOperand_guard->setLower(0);
	uML_InteractionOperand_guard->setUpper(1);
	uML_InteractionOperand->getOwnedAttribute()->push_back(uML_InteractionOperand_guard);
	uML_InteractionOperand_guard->setClass(uML_InteractionOperand);
	
	
	
	
	


	uML_InteractionUse.reset(uml::UmlFactory::eInstance()->createClass());
	uML_InteractionUse->setName("InteractionUse");
	uML_InteractionUse->setIsAbstract(false);
	uML_InteractionUse->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_InteractionUse);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("all_lifelines");
	con->getConstrainedElement()->push_back(uML_InteractionUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let parentInteraction : Set(Interaction) = enclosingInteraction->asSet()->"\
	"union(enclosingOperand.combinedFragment->closure(enclosingOperand.combinedFragment)->"\
	"collect(enclosingInteraction).oclAsType(Interaction)->asSet()) in"\
	"parentInteraction->size()=1 and let refInteraction : Interaction = refersTo in"\
	"parentInteraction.covered-> forAll(intLifeline : Lifeline | refInteraction.covered->"\
	"forAll( refLifeline : Lifeline | refLifeline.represents = intLifeline.represents and "\
	"("\
	"( refLifeline.selector.oclIsKindOf(LiteralString) implies"\
	"  intLifeline.selector.oclIsKindOf(LiteralString) and "\
	"  refLifeline.selector.oclAsType(LiteralString).value = intLifeline.selector.oclAsType(LiteralString).value ) and"\
	"( refLifeline.selector.oclIsKindOf(LiteralInteger) implies"\
	"  intLifeline.selector.oclIsKindOf(LiteralInteger) and "\
	"  refLifeline.selector.oclAsType(LiteralInteger).value = intLifeline.selector.oclAsType(LiteralInteger).value )"\
	")"\
	" implies self.covered->asSet()->includes(intLifeline)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InteractionUse->getOwnedRule()->push_back(con);
	con->setContext(uML_InteractionUse->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("returnValue_type_recipient_correspondence");
	con->getConstrainedElement()->push_back(uML_InteractionUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("returnValue.type->asSequence()->notEmpty() implies returnValue.type->asSequence()->first() = returnValueRecipient.type->asSequence()->first()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InteractionUse->getOwnedRule()->push_back(con);
	con->setContext(uML_InteractionUse->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("returnValueRecipient_coverage");
	con->getConstrainedElement()->push_back(uML_InteractionUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("returnValueRecipient->asSet()->notEmpty() implies"\
	"let covCE : Set(ConnectableElement) = covered.represents->asSet() in "\
	"covCE->notEmpty() and let classes:Set(Classifier) = covCE.type.oclIsKindOf(Classifier).oclAsType(Classifier)->asSet() in "\
	"let allProps : Set(Property) = classes.attribute->union(classes.allParents().attribute)->asSet() in "\
	"allProps->includes(returnValueRecipient)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InteractionUse->getOwnedRule()->push_back(con);
	con->setContext(uML_InteractionUse->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("arguments_are_constants");
	con->getConstrainedElement()->push_back(uML_InteractionUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InteractionUse->getOwnedRule()->push_back(con);
	con->setContext(uML_InteractionUse->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("gates_match");
	con->getConstrainedElement()->push_back(uML_InteractionUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("actualGate->notEmpty() implies "\
	"refersTo.formalGate->forAll( fg : Gate | self.actualGate->select(matches(fg))->size()=1) and"\
	"self.actualGate->forAll(ag : Gate | refersTo.formalGate->select(matches(ag))->size()=1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InteractionUse->getOwnedRule()->push_back(con);
	con->setContext(uML_InteractionUse->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("arguments_correspond_to_parameters");
	con->getConstrainedElement()->push_back(uML_InteractionUse);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InteractionUse->getOwnedRule()->push_back(con);
	con->setContext(uML_InteractionUse->getNamespace());
	
	
	uML_InteractionUse_actualGate.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InteractionUse_actualGate->setName("actualGate");
	uML_InteractionUse_actualGate->setType(get_UML_Gate());
	uML_InteractionUse_actualGate->setLower(0);
	uML_InteractionUse_actualGate->setUpper(-1);
	uML_InteractionUse->getOwnedAttribute()->push_back(uML_InteractionUse_actualGate);
	uML_InteractionUse_actualGate->setClass(uML_InteractionUse);
	
	
	uML_InteractionUse_argument.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InteractionUse_argument->setName("argument");
	uML_InteractionUse_argument->setType(get_UML_ValueSpecification());
	uML_InteractionUse_argument->setLower(0);
	uML_InteractionUse_argument->setUpper(-1);
	uML_InteractionUse->getOwnedAttribute()->push_back(uML_InteractionUse_argument);
	uML_InteractionUse_argument->setClass(uML_InteractionUse);
	
	
	uML_InteractionUse_refersTo.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InteractionUse_refersTo->setName("refersTo");
	uML_InteractionUse_refersTo->setType(get_UML_Interaction());
	uML_InteractionUse_refersTo->setLower(1);
	uML_InteractionUse_refersTo->setUpper(1);
	uML_InteractionUse->getOwnedAttribute()->push_back(uML_InteractionUse_refersTo);
	uML_InteractionUse_refersTo->setClass(uML_InteractionUse);
	
	
	uML_InteractionUse_returnValue.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InteractionUse_returnValue->setName("returnValue");
	uML_InteractionUse_returnValue->setType(get_UML_ValueSpecification());
	uML_InteractionUse_returnValue->setLower(0);
	uML_InteractionUse_returnValue->setUpper(1);
	uML_InteractionUse->getOwnedAttribute()->push_back(uML_InteractionUse_returnValue);
	uML_InteractionUse_returnValue->setClass(uML_InteractionUse);
	
	
	uML_InteractionUse_returnValueRecipient.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InteractionUse_returnValueRecipient->setName("returnValueRecipient");
	uML_InteractionUse_returnValueRecipient->setType(get_UML_Property());
	uML_InteractionUse_returnValueRecipient->setLower(0);
	uML_InteractionUse_returnValueRecipient->setUpper(1);
	uML_InteractionUse->getOwnedAttribute()->push_back(uML_InteractionUse_returnValueRecipient);
	uML_InteractionUse_returnValueRecipient->setClass(uML_InteractionUse);
	
	
	
	
	


	uML_Interface.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Interface->setName("Interface");
	uML_Interface->setIsAbstract(false);
	uML_Interface->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Interface);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("visibility");
	con->getConstrainedElement()->push_back(uML_Interface);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("feature->forAll(visibility = VisibilityKind::public)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Interface->getOwnedRule()->push_back(con);
	con->setContext(uML_Interface->getNamespace());
	
	
	uML_Interface_nestedClassifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Interface_nestedClassifier->setName("nestedClassifier");
	uML_Interface_nestedClassifier->setType(get_UML_Classifier());
	uML_Interface_nestedClassifier->setLower(0);
	uML_Interface_nestedClassifier->setUpper(-1);
	uML_Interface->getOwnedAttribute()->push_back(uML_Interface_nestedClassifier);
	uML_Interface_nestedClassifier->setClass(uML_Interface);
	
	
	uML_Interface_ownedAttribute.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Interface_ownedAttribute->setName("ownedAttribute");
	uML_Interface_ownedAttribute->setType(get_UML_Property());
	uML_Interface_ownedAttribute->setLower(0);
	uML_Interface_ownedAttribute->setUpper(-1);
	uML_Interface->getOwnedAttribute()->push_back(uML_Interface_ownedAttribute);
	uML_Interface_ownedAttribute->setClass(uML_Interface);
	
	
	uML_Interface_ownedOperation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Interface_ownedOperation->setName("ownedOperation");
	uML_Interface_ownedOperation->setType(get_UML_Operation());
	uML_Interface_ownedOperation->setLower(0);
	uML_Interface_ownedOperation->setUpper(-1);
	uML_Interface->getOwnedAttribute()->push_back(uML_Interface_ownedOperation);
	uML_Interface_ownedOperation->setClass(uML_Interface);
	
	
	uML_Interface_ownedReception.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Interface_ownedReception->setName("ownedReception");
	uML_Interface_ownedReception->setType(get_UML_Reception());
	uML_Interface_ownedReception->setLower(0);
	uML_Interface_ownedReception->setUpper(-1);
	uML_Interface->getOwnedAttribute()->push_back(uML_Interface_ownedReception);
	uML_Interface_ownedReception->setClass(uML_Interface);
	
	
	uML_Interface_protocol.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Interface_protocol->setName("protocol");
	uML_Interface_protocol->setType(get_UML_ProtocolStateMachine());
	uML_Interface_protocol->setLower(0);
	uML_Interface_protocol->setUpper(1);
	uML_Interface->getOwnedAttribute()->push_back(uML_Interface_protocol);
	uML_Interface_protocol->setClass(uML_Interface);
	
	
	uML_Interface_redefinedInterface.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Interface_redefinedInterface->setName("redefinedInterface");
	uML_Interface_redefinedInterface->setType(get_UML_Interface());
	uML_Interface_redefinedInterface->setLower(0);
	uML_Interface_redefinedInterface->setUpper(-1);
	uML_Interface->getOwnedAttribute()->push_back(uML_Interface_redefinedInterface);
	uML_Interface_redefinedInterface->setClass(uML_Interface);
	
	
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->setName("createOwnedAttribute");
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setName("");
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setType(get_UML_Property());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setLower(1);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setUpper(1);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name->setName("name");
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name->setLower(0);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name->setUpper(1);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type->setName("type");
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type->setType(get_UML_Type());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type->setLower(0);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type->setUpper(1);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_lower.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_lower->setName("lower");
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_lower->setLower(1);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_lower->setUpper(1);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_lower->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_lower);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_upper.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_upper->setName("upper");
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_upper->setLower(1);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_upper->setUpper(1);
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_upper->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_upper);
	
	
	uML_Interface->getOwnedOperation()->push_back(uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural); 
	uML_Interface_createOwnedOperation_String_String_Type_Type.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Interface_createOwnedOperation_String_String_Type_Type->setName("createOwnedOperation");
	uML_Interface_createOwnedOperation_String_String_Type_Type_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Interface_createOwnedOperation_String_String_Type_Type_return->setName("");
	uML_Interface_createOwnedOperation_String_String_Type_Type_return->setType(get_UML_Operation());
	uML_Interface_createOwnedOperation_String_String_Type_Type_return->setLower(1);
	uML_Interface_createOwnedOperation_String_String_Type_Type_return->setUpper(1);
	uML_Interface_createOwnedOperation_String_String_Type_Type_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_Interface_createOwnedOperation_String_String_Type_Type_return);
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name->setName("name");
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name->setLower(0);
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name->setUpper(1);
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name);
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames->setName("parameterNames");
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames->setLower(0);
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames->setUpper(-1);
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames);
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes->setName("parameterTypes");
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes->setType(get_UML_Type());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes->setLower(0);
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes->setUpper(-1);
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes);
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType->setName("returnType");
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType->setType(get_UML_Type());
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType->setLower(0);
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType->setUpper(1);
	uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Interface_createOwnedOperation_String_String_Type_Type->getOwnedParameter()->push_back(uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType);
	
	
	uML_Interface->getOwnedOperation()->push_back(uML_Interface_createOwnedOperation_String_String_Type_Type); 
	
	


	uML_InterfaceRealization.reset(uml::UmlFactory::eInstance()->createClass());
	uML_InterfaceRealization->setName("InterfaceRealization");
	uML_InterfaceRealization->setIsAbstract(false);
	uML_InterfaceRealization->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_InterfaceRealization);
	
	//constraints
	
	
	uML_InterfaceRealization_contract.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InterfaceRealization_contract->setName("contract");
	uML_InterfaceRealization_contract->setType(get_UML_Interface());
	uML_InterfaceRealization_contract->setLower(1);
	uML_InterfaceRealization_contract->setUpper(1);
	uML_InterfaceRealization->getOwnedAttribute()->push_back(uML_InterfaceRealization_contract);
	uML_InterfaceRealization_contract->setClass(uML_InterfaceRealization);
	
	
	uML_InterfaceRealization_implementingClassifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InterfaceRealization_implementingClassifier->setName("implementingClassifier");
	uML_InterfaceRealization_implementingClassifier->setType(get_UML_BehavioredClassifier());
	uML_InterfaceRealization_implementingClassifier->setLower(1);
	uML_InterfaceRealization_implementingClassifier->setUpper(1);
	uML_InterfaceRealization->getOwnedAttribute()->push_back(uML_InterfaceRealization_implementingClassifier);
	uML_InterfaceRealization_implementingClassifier->setClass(uML_InterfaceRealization);
	
	
	
	
	


	uML_InterruptibleActivityRegion.reset(uml::UmlFactory::eInstance()->createClass());
	uML_InterruptibleActivityRegion->setName("InterruptibleActivityRegion");
	uML_InterruptibleActivityRegion->setIsAbstract(false);
	uML_InterruptibleActivityRegion->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_InterruptibleActivityRegion);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("interrupting_edges");
	con->getConstrainedElement()->push_back(uML_InterruptibleActivityRegion);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("interruptingEdge->forAll(edge | "\
	"  node->includes(edge.source) and node->excludes(edge.target) and edge.target.containingActivity() = inActivity)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_InterruptibleActivityRegion->getOwnedRule()->push_back(con);
	con->setContext(uML_InterruptibleActivityRegion->getNamespace());
	
	
	uML_InterruptibleActivityRegion_interruptingEdge.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InterruptibleActivityRegion_interruptingEdge->setName("interruptingEdge");
	uML_InterruptibleActivityRegion_interruptingEdge->setType(get_UML_ActivityEdge());
	uML_InterruptibleActivityRegion_interruptingEdge->setLower(0);
	uML_InterruptibleActivityRegion_interruptingEdge->setUpper(-1);
	uML_InterruptibleActivityRegion->getOwnedAttribute()->push_back(uML_InterruptibleActivityRegion_interruptingEdge);
	uML_InterruptibleActivityRegion_interruptingEdge->setClass(uML_InterruptibleActivityRegion);
	
	
	uML_InterruptibleActivityRegion_node.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InterruptibleActivityRegion_node->setName("node");
	uML_InterruptibleActivityRegion_node->setType(get_UML_ActivityNode());
	uML_InterruptibleActivityRegion_node->setLower(0);
	uML_InterruptibleActivityRegion_node->setUpper(-1);
	uML_InterruptibleActivityRegion->getOwnedAttribute()->push_back(uML_InterruptibleActivityRegion_node);
	uML_InterruptibleActivityRegion_node->setClass(uML_InterruptibleActivityRegion);
	
	
	
	
	


	uML_Interval.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Interval->setName("Interval");
	uML_Interval->setIsAbstract(false);
	uML_Interval->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Interval);
	
	//constraints
	
	
	uML_Interval_max.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Interval_max->setName("max");
	uML_Interval_max->setType(get_UML_ValueSpecification());
	uML_Interval_max->setLower(1);
	uML_Interval_max->setUpper(1);
	uML_Interval->getOwnedAttribute()->push_back(uML_Interval_max);
	uML_Interval_max->setClass(uML_Interval);
	
	
	uML_Interval_min.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Interval_min->setName("min");
	uML_Interval_min->setType(get_UML_ValueSpecification());
	uML_Interval_min->setLower(1);
	uML_Interval_min->setUpper(1);
	uML_Interval->getOwnedAttribute()->push_back(uML_Interval_min);
	uML_Interval_min->setClass(uML_Interval);
	
	
	
	
	


	uML_IntervalConstraint.reset(uml::UmlFactory::eInstance()->createClass());
	uML_IntervalConstraint->setName("IntervalConstraint");
	uML_IntervalConstraint->setIsAbstract(false);
	uML_IntervalConstraint->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_IntervalConstraint);
	
	//constraints
	
	
	uML_IntervalConstraint_specification.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_IntervalConstraint_specification->setName("specification");
	uML_IntervalConstraint_specification->setType(get_UML_Interval());
	uML_IntervalConstraint_specification->setLower(1);
	uML_IntervalConstraint_specification->setUpper(1);
	uML_IntervalConstraint->getOwnedAttribute()->push_back(uML_IntervalConstraint_specification);
	uML_IntervalConstraint_specification->setClass(uML_IntervalConstraint);
	
	
	
	
	


	uML_InvocationAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_InvocationAction->setName("InvocationAction");
	uML_InvocationAction->setIsAbstract(true);
	uML_InvocationAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_InvocationAction);
	
	//constraints
	
	
	uML_InvocationAction_argument.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InvocationAction_argument->setName("argument");
	uML_InvocationAction_argument->setType(get_UML_InputPin());
	uML_InvocationAction_argument->setLower(0);
	uML_InvocationAction_argument->setUpper(-1);
	uML_InvocationAction->getOwnedAttribute()->push_back(uML_InvocationAction_argument);
	uML_InvocationAction_argument->setClass(uML_InvocationAction);
	
	
	uML_InvocationAction_onPort.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_InvocationAction_onPort->setName("onPort");
	uML_InvocationAction_onPort->setType(get_UML_Port());
	uML_InvocationAction_onPort->setLower(0);
	uML_InvocationAction_onPort->setUpper(1);
	uML_InvocationAction->getOwnedAttribute()->push_back(uML_InvocationAction_onPort);
	uML_InvocationAction_onPort->setClass(uML_InvocationAction);
	
	
	
	
	


	uML_JoinNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_JoinNode->setName("JoinNode");
	uML_JoinNode->setIsAbstract(false);
	uML_JoinNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_JoinNode);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("incoming_object_flow");
	con->getConstrainedElement()->push_back(uML_JoinNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("if incoming->exists(oclIsKindOf(ObjectFlow)) then outgoing->forAll(oclIsKindOf(ObjectFlow))"\
	"else outgoing->forAll(oclIsKindOf(ControlFlow))"\
	"endif");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_JoinNode->getOwnedRule()->push_back(con);
	con->setContext(uML_JoinNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("one_outgoing_edge");
	con->getConstrainedElement()->push_back(uML_JoinNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("outgoing->size() = 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_JoinNode->getOwnedRule()->push_back(con);
	con->setContext(uML_JoinNode->getNamespace());
	
	
	uML_JoinNode_isCombineDuplicate.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_JoinNode_isCombineDuplicate->setName("isCombineDuplicate");
	uML_JoinNode_isCombineDuplicate->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_JoinNode_isCombineDuplicate->setLower(1);
	uML_JoinNode_isCombineDuplicate->setUpper(1);
	uML_JoinNode->getOwnedAttribute()->push_back(uML_JoinNode_isCombineDuplicate);
	uML_JoinNode_isCombineDuplicate->setClass(uML_JoinNode);
	uML_JoinNode_isCombineDuplicate->setDefaultValue(uML_JoinNode_isCombineDuplicate_defaultValue_LiteralBoolean_UML_JoinNode_isCombineDuplicate);
	
	uML_JoinNode_joinSpec.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_JoinNode_joinSpec->setName("joinSpec");
	uML_JoinNode_joinSpec->setType(get_UML_ValueSpecification());
	uML_JoinNode_joinSpec->setLower(0);
	uML_JoinNode_joinSpec->setUpper(1);
	uML_JoinNode->getOwnedAttribute()->push_back(uML_JoinNode_joinSpec);
	uML_JoinNode_joinSpec->setClass(uML_JoinNode);
	
	
	
	
	


	uML_Lifeline.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Lifeline->setName("Lifeline");
	uML_Lifeline->setIsAbstract(false);
	uML_Lifeline->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Lifeline);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("same_classifier");
	con->getConstrainedElement()->push_back(uML_Lifeline);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("represents.namespace->closure(namespace)->includes(interaction._'context')");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Lifeline->getOwnedRule()->push_back(con);
	con->setContext(uML_Lifeline->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("selector_int_or_string");
	con->getConstrainedElement()->push_back(uML_Lifeline);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.selector->notEmpty() implies "\
	"self.selector.oclIsKindOf(LiteralInteger) or "\
	"self.selector.oclIsKindOf(LiteralString)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Lifeline->getOwnedRule()->push_back(con);
	con->setContext(uML_Lifeline->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("selector_specified");
	con->getConstrainedElement()->push_back(uML_Lifeline);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back(" self.selector->notEmpty() = (self.represents.oclIsKindOf(MultiplicityElement) and self.represents.oclAsType(MultiplicityElement).isMultivalued())");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Lifeline->getOwnedRule()->push_back(con);
	con->setContext(uML_Lifeline->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("interaction_uses_share_lifeline");
	con->getConstrainedElement()->push_back(uML_Lifeline);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let intUses : Set(InteractionUse) = interaction.interactionUse  in "\
	"intUses->forAll"\
	"( iuse : InteractionUse | "\
	"let usingInteraction : Set(Interaction)  = iuse.enclosingInteraction->asSet()"\
	"->union("\
	"iuse.enclosingOperand.combinedFragment->asSet()->closure(enclosingOperand.combinedFragment).enclosingInteraction->asSet()"\
	"               ) "\
	"in"\
	"let peerUses : Set(InteractionUse) = usingInteraction.fragment->select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()"\
	"->union("\
	"usingInteraction.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)->asSet()"\
	"->closure(operand.fragment->select(oclIsKindOf(CombinedFragment)).oclAsType(CombinedFragment)).operand.fragment->"\
	"select(oclIsKindOf(InteractionUse)).oclAsType(InteractionUse)->asSet()"\
	"               )->excluding(iuse)"\
	" in"\
	"peerUses->forAll( peerUse : InteractionUse |"\
	" peerUse.refersTo.lifeline->forAll( l : Lifeline | (l.represents = self.represents and "\
	" ( self.selector.oclIsKindOf(LiteralString) implies"\
	"  l.selector.oclIsKindOf(LiteralString) and "\
	"  self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )"\
	"  and "\
	"( self.selector.oclIsKindOf(LiteralInteger) implies"\
	"  l.selector.oclIsKindOf(LiteralInteger) and "\
	"  self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value )"\
	")  "\
	"implies"\
	" usingInteraction.lifeline->exists(represents = self.represents and"\
	" ( self.selector.oclIsKindOf(LiteralString) implies"\
	"  l.selector.oclIsKindOf(LiteralString) and "\
	"  self.selector.oclAsType(LiteralString).value = l.selector.oclAsType(LiteralString).value )"\
	"and "\
	"( self.selector.oclIsKindOf(LiteralInteger) implies"\
	"  l.selector.oclIsKindOf(LiteralInteger) and "\
	"  self.selector.oclAsType(LiteralInteger).value = l.selector.oclAsType(LiteralInteger).value )"\
	")"\
	"                                                )"\
	"                    )"\
	")");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Lifeline->getOwnedRule()->push_back(con);
	con->setContext(uML_Lifeline->getNamespace());
	
	
	uML_Lifeline_coveredBy.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Lifeline_coveredBy->setName("coveredBy");
	uML_Lifeline_coveredBy->setType(get_UML_InteractionFragment());
	uML_Lifeline_coveredBy->setLower(0);
	uML_Lifeline_coveredBy->setUpper(-1);
	uML_Lifeline->getOwnedAttribute()->push_back(uML_Lifeline_coveredBy);
	uML_Lifeline_coveredBy->setClass(uML_Lifeline);
	
	
	uML_Lifeline_decomposedAs.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Lifeline_decomposedAs->setName("decomposedAs");
	uML_Lifeline_decomposedAs->setType(get_UML_PartDecomposition());
	uML_Lifeline_decomposedAs->setLower(0);
	uML_Lifeline_decomposedAs->setUpper(1);
	uML_Lifeline->getOwnedAttribute()->push_back(uML_Lifeline_decomposedAs);
	uML_Lifeline_decomposedAs->setClass(uML_Lifeline);
	
	
	uML_Lifeline_interaction.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Lifeline_interaction->setName("interaction");
	uML_Lifeline_interaction->setType(get_UML_Interaction());
	uML_Lifeline_interaction->setLower(1);
	uML_Lifeline_interaction->setUpper(1);
	uML_Lifeline->getOwnedAttribute()->push_back(uML_Lifeline_interaction);
	uML_Lifeline_interaction->setClass(uML_Lifeline);
	
	
	uML_Lifeline_represents.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Lifeline_represents->setName("represents");
	uML_Lifeline_represents->setType(get_UML_ConnectableElement());
	uML_Lifeline_represents->setLower(0);
	uML_Lifeline_represents->setUpper(1);
	uML_Lifeline->getOwnedAttribute()->push_back(uML_Lifeline_represents);
	uML_Lifeline_represents->setClass(uML_Lifeline);
	
	
	uML_Lifeline_selector.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Lifeline_selector->setName("selector");
	uML_Lifeline_selector->setType(get_UML_ValueSpecification());
	uML_Lifeline_selector->setLower(0);
	uML_Lifeline_selector->setUpper(1);
	uML_Lifeline->getOwnedAttribute()->push_back(uML_Lifeline_selector);
	uML_Lifeline_selector->setClass(uML_Lifeline);
	
	
	
	
	


	uML_LinkAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_LinkAction->setName("LinkAction");
	uML_LinkAction->setIsAbstract(true);
	uML_LinkAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_LinkAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("not_static");
	con->getConstrainedElement()->push_back(uML_LinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("endData->forAll(not end.isStatic)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LinkAction->getOwnedRule()->push_back(con);
	con->setContext(uML_LinkAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("same_pins");
	con->getConstrainedElement()->push_back(uML_LinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("inputValue->asBag()=endData.allPins()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LinkAction->getOwnedRule()->push_back(con);
	con->setContext(uML_LinkAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("same_association");
	con->getConstrainedElement()->push_back(uML_LinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("endData.end = self.association().memberEnd->asBag()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LinkAction->getOwnedRule()->push_back(con);
	con->setContext(uML_LinkAction->getNamespace());
	
	
	uML_LinkAction_endData.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LinkAction_endData->setName("endData");
	uML_LinkAction_endData->setType(get_UML_LinkEndData());
	uML_LinkAction_endData->setLower(2);
	uML_LinkAction_endData->setUpper(-1);
	uML_LinkAction->getOwnedAttribute()->push_back(uML_LinkAction_endData);
	uML_LinkAction_endData->setClass(uML_LinkAction);
	
	
	uML_LinkAction_inputValue.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LinkAction_inputValue->setName("inputValue");
	uML_LinkAction_inputValue->setType(get_UML_InputPin());
	uML_LinkAction_inputValue->setLower(1);
	uML_LinkAction_inputValue->setUpper(-1);
	uML_LinkAction->getOwnedAttribute()->push_back(uML_LinkAction_inputValue);
	uML_LinkAction_inputValue->setClass(uML_LinkAction);
	
	
	
	uML_LinkAction_association_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LinkAction_association_->setName("association");
	uML_LinkAction_association_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LinkAction_association_result->setName("result");
	uML_LinkAction_association_result->setType(get_UML_Association());
	uML_LinkAction_association_result->setLower(1);
	uML_LinkAction_association_result->setUpper(1);
	uML_LinkAction_association_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LinkAction_association_->getOwnedParameter()->push_back(uML_LinkAction_association_result);
	
	
	uML_LinkAction->getOwnedOperation()->push_back(uML_LinkAction_association_); 
	
	


	uML_LinkEndCreationData.reset(uml::UmlFactory::eInstance()->createClass());
	uML_LinkEndCreationData->setName("LinkEndCreationData");
	uML_LinkEndCreationData->setIsAbstract(false);
	uML_LinkEndCreationData->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_LinkEndCreationData);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("insertAt_pin");
	con->getConstrainedElement()->push_back(uML_LinkEndCreationData);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("if  not end.isOrderedthen insertAt = nullelse	not isReplaceAll=false implies	insertAt <> null and insertAt->forAll(type=UnlimitedNatural and is(1,1))endif");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LinkEndCreationData->getOwnedRule()->push_back(con);
	con->setContext(uML_LinkEndCreationData->getNamespace());
	
	
	uML_LinkEndCreationData_insertAt.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LinkEndCreationData_insertAt->setName("insertAt");
	uML_LinkEndCreationData_insertAt->setType(get_UML_InputPin());
	uML_LinkEndCreationData_insertAt->setLower(0);
	uML_LinkEndCreationData_insertAt->setUpper(1);
	uML_LinkEndCreationData->getOwnedAttribute()->push_back(uML_LinkEndCreationData_insertAt);
	uML_LinkEndCreationData_insertAt->setClass(uML_LinkEndCreationData);
	
	
	uML_LinkEndCreationData_isReplaceAll.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LinkEndCreationData_isReplaceAll->setName("isReplaceAll");
	uML_LinkEndCreationData_isReplaceAll->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LinkEndCreationData_isReplaceAll->setLower(1);
	uML_LinkEndCreationData_isReplaceAll->setUpper(1);
	uML_LinkEndCreationData->getOwnedAttribute()->push_back(uML_LinkEndCreationData_isReplaceAll);
	uML_LinkEndCreationData_isReplaceAll->setClass(uML_LinkEndCreationData);
	uML_LinkEndCreationData_isReplaceAll->setDefaultValue(uML_LinkEndCreationData_isReplaceAll_defaultValue_LiteralBoolean_UML_LinkEndCreationData_isReplaceAll);
	
	
	uML_LinkEndCreationData_allPins_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LinkEndCreationData_allPins_->setName("allPins");
	uML_LinkEndCreationData_allPins_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LinkEndCreationData_allPins_result->setName("result");
	uML_LinkEndCreationData_allPins_result->setType(get_UML_InputPin());
	uML_LinkEndCreationData_allPins_result->setLower(0);
	uML_LinkEndCreationData_allPins_result->setUpper(-1);
	uML_LinkEndCreationData_allPins_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LinkEndCreationData_allPins_->getOwnedParameter()->push_back(uML_LinkEndCreationData_allPins_result);
	
	
	uML_LinkEndCreationData->getOwnedOperation()->push_back(uML_LinkEndCreationData_allPins_); 
	
	


	uML_LinkEndData.reset(uml::UmlFactory::eInstance()->createClass());
	uML_LinkEndData->setName("LinkEndData");
	uML_LinkEndData->setIsAbstract(false);
	uML_LinkEndData->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_LinkEndData);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_LinkEndData);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("value<>null implies value.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LinkEndData->getOwnedRule()->push_back(con);
	con->setContext(uML_LinkEndData->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("same_type");
	con->getConstrainedElement()->push_back(uML_LinkEndData);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("value<>null implies value.type.conformsTo(end.type)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LinkEndData->getOwnedRule()->push_back(con);
	con->setContext(uML_LinkEndData->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("qualifiers");
	con->getConstrainedElement()->push_back(uML_LinkEndData);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("end.qualifier->includesAll(qualifier.qualifier)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LinkEndData->getOwnedRule()->push_back(con);
	con->setContext(uML_LinkEndData->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("property_is_association_end");
	con->getConstrainedElement()->push_back(uML_LinkEndData);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("end.association <> null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LinkEndData->getOwnedRule()->push_back(con);
	con->setContext(uML_LinkEndData->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("end_object_input_pin");
	con->getConstrainedElement()->push_back(uML_LinkEndData);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("value->excludesAll(qualifier.value)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LinkEndData->getOwnedRule()->push_back(con);
	con->setContext(uML_LinkEndData->getNamespace());
	
	
	uML_LinkEndData_end.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LinkEndData_end->setName("end");
	uML_LinkEndData_end->setType(get_UML_Property());
	uML_LinkEndData_end->setLower(1);
	uML_LinkEndData_end->setUpper(1);
	uML_LinkEndData->getOwnedAttribute()->push_back(uML_LinkEndData_end);
	uML_LinkEndData_end->setClass(uML_LinkEndData);
	
	
	uML_LinkEndData_qualifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LinkEndData_qualifier->setName("qualifier");
	uML_LinkEndData_qualifier->setType(get_UML_QualifierValue());
	uML_LinkEndData_qualifier->setLower(0);
	uML_LinkEndData_qualifier->setUpper(-1);
	uML_LinkEndData->getOwnedAttribute()->push_back(uML_LinkEndData_qualifier);
	uML_LinkEndData_qualifier->setClass(uML_LinkEndData);
	
	
	uML_LinkEndData_value.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LinkEndData_value->setName("value");
	uML_LinkEndData_value->setType(get_UML_InputPin());
	uML_LinkEndData_value->setLower(0);
	uML_LinkEndData_value->setUpper(1);
	uML_LinkEndData->getOwnedAttribute()->push_back(uML_LinkEndData_value);
	uML_LinkEndData_value->setClass(uML_LinkEndData);
	
	
	
	uML_LinkEndData_allPins_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LinkEndData_allPins_->setName("allPins");
	uML_LinkEndData_allPins_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LinkEndData_allPins_result->setName("result");
	uML_LinkEndData_allPins_result->setType(get_UML_InputPin());
	uML_LinkEndData_allPins_result->setLower(0);
	uML_LinkEndData_allPins_result->setUpper(-1);
	uML_LinkEndData_allPins_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LinkEndData_allPins_->getOwnedParameter()->push_back(uML_LinkEndData_allPins_result);
	
	
	uML_LinkEndData->getOwnedOperation()->push_back(uML_LinkEndData_allPins_); 
	
	


	uML_LinkEndDestructionData.reset(uml::UmlFactory::eInstance()->createClass());
	uML_LinkEndDestructionData->setName("LinkEndDestructionData");
	uML_LinkEndDestructionData->setIsAbstract(false);
	uML_LinkEndDestructionData->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_LinkEndDestructionData);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("destroyAt_pin");
	con->getConstrainedElement()->push_back(uML_LinkEndDestructionData);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("if  not end.isOrdered or end.isUnique or isDestroyDuplicates"\
	"then destroyAt = null"\
	"else"\
	"	destroyAt <> null and "\
	"	destroyAt->forAll(type=UnlimitedNatural and is(1,1))"\
	"endif");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LinkEndDestructionData->getOwnedRule()->push_back(con);
	con->setContext(uML_LinkEndDestructionData->getNamespace());
	
	
	uML_LinkEndDestructionData_destroyAt.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LinkEndDestructionData_destroyAt->setName("destroyAt");
	uML_LinkEndDestructionData_destroyAt->setType(get_UML_InputPin());
	uML_LinkEndDestructionData_destroyAt->setLower(0);
	uML_LinkEndDestructionData_destroyAt->setUpper(1);
	uML_LinkEndDestructionData->getOwnedAttribute()->push_back(uML_LinkEndDestructionData_destroyAt);
	uML_LinkEndDestructionData_destroyAt->setClass(uML_LinkEndDestructionData);
	
	
	uML_LinkEndDestructionData_isDestroyDuplicates.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LinkEndDestructionData_isDestroyDuplicates->setName("isDestroyDuplicates");
	uML_LinkEndDestructionData_isDestroyDuplicates->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LinkEndDestructionData_isDestroyDuplicates->setLower(1);
	uML_LinkEndDestructionData_isDestroyDuplicates->setUpper(1);
	uML_LinkEndDestructionData->getOwnedAttribute()->push_back(uML_LinkEndDestructionData_isDestroyDuplicates);
	uML_LinkEndDestructionData_isDestroyDuplicates->setClass(uML_LinkEndDestructionData);
	uML_LinkEndDestructionData_isDestroyDuplicates->setDefaultValue(uML_LinkEndDestructionData_isDestroyDuplicates_defaultValue_LiteralBoolean_UML_LinkEndDestructionData_isDestroyDuplicates);
	
	
	uML_LinkEndDestructionData_allPins_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LinkEndDestructionData_allPins_->setName("allPins");
	uML_LinkEndDestructionData_allPins_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LinkEndDestructionData_allPins_result->setName("result");
	uML_LinkEndDestructionData_allPins_result->setType(get_UML_InputPin());
	uML_LinkEndDestructionData_allPins_result->setLower(0);
	uML_LinkEndDestructionData_allPins_result->setUpper(-1);
	uML_LinkEndDestructionData_allPins_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LinkEndDestructionData_allPins_->getOwnedParameter()->push_back(uML_LinkEndDestructionData_allPins_result);
	
	
	uML_LinkEndDestructionData->getOwnedOperation()->push_back(uML_LinkEndDestructionData_allPins_); 
	
	


	uML_LiteralBoolean.reset(uml::UmlFactory::eInstance()->createClass());
	uML_LiteralBoolean->setName("LiteralBoolean");
	uML_LiteralBoolean->setIsAbstract(false);
	uML_LiteralBoolean->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_LiteralBoolean);
	
	//constraints
	
	
	uML_LiteralBoolean_value.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LiteralBoolean_value->setName("value");
	uML_LiteralBoolean_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralBoolean_value->setLower(1);
	uML_LiteralBoolean_value->setUpper(1);
	uML_LiteralBoolean->getOwnedAttribute()->push_back(uML_LiteralBoolean_value);
	uML_LiteralBoolean_value->setClass(uML_LiteralBoolean);
	uML_LiteralBoolean_value->setDefaultValue(uML_LiteralBoolean_value_defaultValue_LiteralBoolean_UML_LiteralBoolean_value);
	
	
	uML_LiteralBoolean_booleanValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralBoolean_booleanValue_->setName("booleanValue");
	uML_LiteralBoolean_booleanValue_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralBoolean_booleanValue_result->setName("result");
	uML_LiteralBoolean_booleanValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralBoolean_booleanValue_result->setLower(1);
	uML_LiteralBoolean_booleanValue_result->setUpper(1);
	uML_LiteralBoolean_booleanValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralBoolean_booleanValue_->getOwnedParameter()->push_back(uML_LiteralBoolean_booleanValue_result);
	
	
	uML_LiteralBoolean->getOwnedOperation()->push_back(uML_LiteralBoolean_booleanValue_); 
	uML_LiteralBoolean_isComputable_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralBoolean_isComputable_->setName("isComputable");
	uML_LiteralBoolean_isComputable_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralBoolean_isComputable_result->setName("result");
	uML_LiteralBoolean_isComputable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralBoolean_isComputable_result->setLower(1);
	uML_LiteralBoolean_isComputable_result->setUpper(1);
	uML_LiteralBoolean_isComputable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralBoolean_isComputable_->getOwnedParameter()->push_back(uML_LiteralBoolean_isComputable_result);
	
	
	uML_LiteralBoolean->getOwnedOperation()->push_back(uML_LiteralBoolean_isComputable_); 
	uML_LiteralBoolean_stringValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralBoolean_stringValue_->setName("stringValue");
	uML_LiteralBoolean_stringValue__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralBoolean_stringValue__return->setName("");
	uML_LiteralBoolean_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_LiteralBoolean_stringValue__return->setLower(1);
	uML_LiteralBoolean_stringValue__return->setUpper(1);
	uML_LiteralBoolean_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralBoolean_stringValue_->getOwnedParameter()->push_back(uML_LiteralBoolean_stringValue__return);
	
	
	uML_LiteralBoolean->getOwnedOperation()->push_back(uML_LiteralBoolean_stringValue_); 
	
	


	uML_LiteralInteger.reset(uml::UmlFactory::eInstance()->createClass());
	uML_LiteralInteger->setName("LiteralInteger");
	uML_LiteralInteger->setIsAbstract(false);
	uML_LiteralInteger->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_LiteralInteger);
	
	//constraints
	
	
	uML_LiteralInteger_value.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LiteralInteger_value->setName("value");
	uML_LiteralInteger_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_LiteralInteger_value->setLower(1);
	uML_LiteralInteger_value->setUpper(1);
	uML_LiteralInteger->getOwnedAttribute()->push_back(uML_LiteralInteger_value);
	uML_LiteralInteger_value->setClass(uML_LiteralInteger);
	uML_LiteralInteger_value->setDefaultValue(uML_LiteralInteger_value_defaultValue_LiteralInteger_UML_LiteralInteger_value);
	
	
	uML_LiteralInteger_integerValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralInteger_integerValue_->setName("integerValue");
	uML_LiteralInteger_integerValue_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralInteger_integerValue_result->setName("result");
	uML_LiteralInteger_integerValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_LiteralInteger_integerValue_result->setLower(1);
	uML_LiteralInteger_integerValue_result->setUpper(1);
	uML_LiteralInteger_integerValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralInteger_integerValue_->getOwnedParameter()->push_back(uML_LiteralInteger_integerValue_result);
	
	
	uML_LiteralInteger->getOwnedOperation()->push_back(uML_LiteralInteger_integerValue_); 
	uML_LiteralInteger_isComputable_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralInteger_isComputable_->setName("isComputable");
	uML_LiteralInteger_isComputable_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralInteger_isComputable_result->setName("result");
	uML_LiteralInteger_isComputable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralInteger_isComputable_result->setLower(1);
	uML_LiteralInteger_isComputable_result->setUpper(1);
	uML_LiteralInteger_isComputable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralInteger_isComputable_->getOwnedParameter()->push_back(uML_LiteralInteger_isComputable_result);
	
	
	uML_LiteralInteger->getOwnedOperation()->push_back(uML_LiteralInteger_isComputable_); 
	uML_LiteralInteger_stringValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralInteger_stringValue_->setName("stringValue");
	uML_LiteralInteger_stringValue__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralInteger_stringValue__return->setName("");
	uML_LiteralInteger_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_LiteralInteger_stringValue__return->setLower(1);
	uML_LiteralInteger_stringValue__return->setUpper(1);
	uML_LiteralInteger_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralInteger_stringValue_->getOwnedParameter()->push_back(uML_LiteralInteger_stringValue__return);
	
	
	uML_LiteralInteger->getOwnedOperation()->push_back(uML_LiteralInteger_stringValue_); 
	
	


	uML_LiteralNull.reset(uml::UmlFactory::eInstance()->createClass());
	uML_LiteralNull->setName("LiteralNull");
	uML_LiteralNull->setIsAbstract(false);
	uML_LiteralNull->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_LiteralNull);
	
	//constraints
	
	
	
	uML_LiteralNull_isComputable_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralNull_isComputable_->setName("isComputable");
	uML_LiteralNull_isComputable_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralNull_isComputable_result->setName("result");
	uML_LiteralNull_isComputable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralNull_isComputable_result->setLower(1);
	uML_LiteralNull_isComputable_result->setUpper(1);
	uML_LiteralNull_isComputable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralNull_isComputable_->getOwnedParameter()->push_back(uML_LiteralNull_isComputable_result);
	
	
	uML_LiteralNull->getOwnedOperation()->push_back(uML_LiteralNull_isComputable_); 
	uML_LiteralNull_isNull_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralNull_isNull_->setName("isNull");
	uML_LiteralNull_isNull_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralNull_isNull_result->setName("result");
	uML_LiteralNull_isNull_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralNull_isNull_result->setLower(1);
	uML_LiteralNull_isNull_result->setUpper(1);
	uML_LiteralNull_isNull_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralNull_isNull_->getOwnedParameter()->push_back(uML_LiteralNull_isNull_result);
	
	
	uML_LiteralNull->getOwnedOperation()->push_back(uML_LiteralNull_isNull_); 
	
	


	uML_LiteralReal.reset(uml::UmlFactory::eInstance()->createClass());
	uML_LiteralReal->setName("LiteralReal");
	uML_LiteralReal->setIsAbstract(false);
	uML_LiteralReal->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_LiteralReal);
	
	//constraints
	
	
	uML_LiteralReal_value.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LiteralReal_value->setName("value");
	uML_LiteralReal_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Real());
	uML_LiteralReal_value->setLower(1);
	uML_LiteralReal_value->setUpper(1);
	uML_LiteralReal->getOwnedAttribute()->push_back(uML_LiteralReal_value);
	uML_LiteralReal_value->setClass(uML_LiteralReal);
	
	
	
	uML_LiteralReal_isComputable_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralReal_isComputable_->setName("isComputable");
	uML_LiteralReal_isComputable_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralReal_isComputable_result->setName("result");
	uML_LiteralReal_isComputable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralReal_isComputable_result->setLower(1);
	uML_LiteralReal_isComputable_result->setUpper(1);
	uML_LiteralReal_isComputable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralReal_isComputable_->getOwnedParameter()->push_back(uML_LiteralReal_isComputable_result);
	
	
	uML_LiteralReal->getOwnedOperation()->push_back(uML_LiteralReal_isComputable_); 
	uML_LiteralReal_realValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralReal_realValue_->setName("realValue");
	uML_LiteralReal_realValue_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralReal_realValue_result->setName("result");
	uML_LiteralReal_realValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Real());
	uML_LiteralReal_realValue_result->setLower(1);
	uML_LiteralReal_realValue_result->setUpper(1);
	uML_LiteralReal_realValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralReal_realValue_->getOwnedParameter()->push_back(uML_LiteralReal_realValue_result);
	
	
	uML_LiteralReal->getOwnedOperation()->push_back(uML_LiteralReal_realValue_); 
	uML_LiteralReal_stringValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralReal_stringValue_->setName("stringValue");
	uML_LiteralReal_stringValue__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralReal_stringValue__return->setName("");
	uML_LiteralReal_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_LiteralReal_stringValue__return->setLower(1);
	uML_LiteralReal_stringValue__return->setUpper(1);
	uML_LiteralReal_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralReal_stringValue_->getOwnedParameter()->push_back(uML_LiteralReal_stringValue__return);
	
	
	uML_LiteralReal->getOwnedOperation()->push_back(uML_LiteralReal_stringValue_); 
	
	


	uML_LiteralSpecification.reset(uml::UmlFactory::eInstance()->createClass());
	uML_LiteralSpecification->setName("LiteralSpecification");
	uML_LiteralSpecification->setIsAbstract(true);
	uML_LiteralSpecification->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_LiteralSpecification);
	
	//constraints
	
	
	
	
	


	uML_LiteralString.reset(uml::UmlFactory::eInstance()->createClass());
	uML_LiteralString->setName("LiteralString");
	uML_LiteralString->setIsAbstract(false);
	uML_LiteralString->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_LiteralString);
	
	//constraints
	
	
	uML_LiteralString_value.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LiteralString_value->setName("value");
	uML_LiteralString_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_LiteralString_value->setLower(0);
	uML_LiteralString_value->setUpper(1);
	uML_LiteralString->getOwnedAttribute()->push_back(uML_LiteralString_value);
	uML_LiteralString_value->setClass(uML_LiteralString);
	
	
	
	uML_LiteralString_integerValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralString_integerValue_->setName("integerValue");
	uML_LiteralString_integerValue__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralString_integerValue__return->setName("");
	uML_LiteralString_integerValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_LiteralString_integerValue__return->setLower(1);
	uML_LiteralString_integerValue__return->setUpper(1);
	uML_LiteralString_integerValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralString_integerValue_->getOwnedParameter()->push_back(uML_LiteralString_integerValue__return);
	
	
	uML_LiteralString->getOwnedOperation()->push_back(uML_LiteralString_integerValue_); 
	uML_LiteralString_isComputable_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralString_isComputable_->setName("isComputable");
	uML_LiteralString_isComputable_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralString_isComputable_result->setName("result");
	uML_LiteralString_isComputable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralString_isComputable_result->setLower(1);
	uML_LiteralString_isComputable_result->setUpper(1);
	uML_LiteralString_isComputable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralString_isComputable_->getOwnedParameter()->push_back(uML_LiteralString_isComputable_result);
	
	
	uML_LiteralString->getOwnedOperation()->push_back(uML_LiteralString_isComputable_); 
	uML_LiteralString_stringValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralString_stringValue_->setName("stringValue");
	uML_LiteralString_stringValue_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralString_stringValue_result->setName("result");
	uML_LiteralString_stringValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_LiteralString_stringValue_result->setLower(1);
	uML_LiteralString_stringValue_result->setUpper(1);
	uML_LiteralString_stringValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralString_stringValue_->getOwnedParameter()->push_back(uML_LiteralString_stringValue_result);
	
	
	uML_LiteralString->getOwnedOperation()->push_back(uML_LiteralString_stringValue_); 
	uML_LiteralString_unlimitedValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralString_unlimitedValue_->setName("unlimitedValue");
	uML_LiteralString_unlimitedValue__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralString_unlimitedValue__return->setName("");
	uML_LiteralString_unlimitedValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_LiteralString_unlimitedValue__return->setLower(1);
	uML_LiteralString_unlimitedValue__return->setUpper(1);
	uML_LiteralString_unlimitedValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralString_unlimitedValue_->getOwnedParameter()->push_back(uML_LiteralString_unlimitedValue__return);
	
	
	uML_LiteralString->getOwnedOperation()->push_back(uML_LiteralString_unlimitedValue_); 
	
	


	uML_LiteralUnlimitedNatural.reset(uml::UmlFactory::eInstance()->createClass());
	uML_LiteralUnlimitedNatural->setName("LiteralUnlimitedNatural");
	uML_LiteralUnlimitedNatural->setIsAbstract(false);
	uML_LiteralUnlimitedNatural->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_LiteralUnlimitedNatural);
	
	//constraints
	
	
	uML_LiteralUnlimitedNatural_value.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LiteralUnlimitedNatural_value->setName("value");
	uML_LiteralUnlimitedNatural_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_LiteralUnlimitedNatural_value->setLower(1);
	uML_LiteralUnlimitedNatural_value->setUpper(1);
	uML_LiteralUnlimitedNatural->getOwnedAttribute()->push_back(uML_LiteralUnlimitedNatural_value);
	uML_LiteralUnlimitedNatural_value->setClass(uML_LiteralUnlimitedNatural);
	uML_LiteralUnlimitedNatural_value->setDefaultValue(uML_LiteralUnlimitedNatural_value_defaultValue_LiteralUnlimitedNatural_UML_LiteralUnlimitedNatural_value);
	
	
	uML_LiteralUnlimitedNatural_isComputable_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralUnlimitedNatural_isComputable_->setName("isComputable");
	uML_LiteralUnlimitedNatural_isComputable_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralUnlimitedNatural_isComputable_result->setName("result");
	uML_LiteralUnlimitedNatural_isComputable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LiteralUnlimitedNatural_isComputable_result->setLower(1);
	uML_LiteralUnlimitedNatural_isComputable_result->setUpper(1);
	uML_LiteralUnlimitedNatural_isComputable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralUnlimitedNatural_isComputable_->getOwnedParameter()->push_back(uML_LiteralUnlimitedNatural_isComputable_result);
	
	
	uML_LiteralUnlimitedNatural->getOwnedOperation()->push_back(uML_LiteralUnlimitedNatural_isComputable_); 
	uML_LiteralUnlimitedNatural_stringValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralUnlimitedNatural_stringValue_->setName("stringValue");
	uML_LiteralUnlimitedNatural_stringValue__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralUnlimitedNatural_stringValue__return->setName("");
	uML_LiteralUnlimitedNatural_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_LiteralUnlimitedNatural_stringValue__return->setLower(1);
	uML_LiteralUnlimitedNatural_stringValue__return->setUpper(1);
	uML_LiteralUnlimitedNatural_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralUnlimitedNatural_stringValue_->getOwnedParameter()->push_back(uML_LiteralUnlimitedNatural_stringValue__return);
	
	
	uML_LiteralUnlimitedNatural->getOwnedOperation()->push_back(uML_LiteralUnlimitedNatural_stringValue_); 
	uML_LiteralUnlimitedNatural_unlimitedValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LiteralUnlimitedNatural_unlimitedValue_->setName("unlimitedValue");
	uML_LiteralUnlimitedNatural_unlimitedValue_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LiteralUnlimitedNatural_unlimitedValue_result->setName("result");
	uML_LiteralUnlimitedNatural_unlimitedValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_LiteralUnlimitedNatural_unlimitedValue_result->setLower(1);
	uML_LiteralUnlimitedNatural_unlimitedValue_result->setUpper(1);
	uML_LiteralUnlimitedNatural_unlimitedValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LiteralUnlimitedNatural_unlimitedValue_->getOwnedParameter()->push_back(uML_LiteralUnlimitedNatural_unlimitedValue_result);
	
	
	uML_LiteralUnlimitedNatural->getOwnedOperation()->push_back(uML_LiteralUnlimitedNatural_unlimitedValue_); 
	
	


	uML_LoopNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_LoopNode->setName("LoopNode");
	uML_LoopNode->setIsAbstract(false);
	uML_LoopNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_LoopNode);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("result_no_incoming");
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.incoming->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LoopNode->getOwnedRule()->push_back(con);
	con->setContext(uML_LoopNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("input_edges");
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("loopVariableInput.outgoing->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LoopNode->getOwnedRule()->push_back(con);
	con->setContext(uML_LoopNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("matching_result_pins");
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result->size()=loopVariable->size() and"\
	"result.type=loopVariable.type and"\
	"result.isUnique=loopVariable.isUnique and"\
	"result.lower=loopVariable.lower and"\
	"result.upper=loopVariable.upper");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LoopNode->getOwnedRule()->push_back(con);
	con->setContext(uML_LoopNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("matching_loop_variables");
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("loopVariableInput->size()=loopVariable->size() and"\
	"loopVariableInput.type=loopVariable.type and"\
	"loopVariableInput.isUnique=loopVariable.isUnique and"\
	"loopVariableInput.lower=loopVariable.lower and"\
	"loopVariableInput.upper=loopVariable.upper");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LoopNode->getOwnedRule()->push_back(con);
	con->setContext(uML_LoopNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("executable_nodes");
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("setupPart->union(test)->union(bodyPart)=node->select(oclIsKindOf(ExecutableNode)).oclAsType(ExecutableNode)->asSet()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LoopNode->getOwnedRule()->push_back(con);
	con->setContext(uML_LoopNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("matching_output_pins");
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("bodyOutput->size()=loopVariable->size() and"\
	"Sequence{1..loopVariable->size()}->forAll(i |"\
	"	bodyOutput->at(i).type.conformsTo(loopVariable->at(i).type) and"\
	"	bodyOutput->at(i).isOrdered = loopVariable->at(i).isOrdered and"\
	"	bodyOutput->at(i).isUnique = loopVariable->at(i).isUnique and"\
	"	loopVariable->at(i).includesMultiplicity(bodyOutput->at(i)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LoopNode->getOwnedRule()->push_back(con);
	con->setContext(uML_LoopNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("loop_variable_outgoing");
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("allOwnedNodes()->includesAll(loopVariable.outgoing.target)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LoopNode->getOwnedRule()->push_back(con);
	con->setContext(uML_LoopNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("body_output_pins");
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("bodyPart.oclAsType(Action).allActions().output->includesAll(bodyOutput)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LoopNode->getOwnedRule()->push_back(con);
	con->setContext(uML_LoopNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("setup_test_and_body");
	con->getConstrainedElement()->push_back(uML_LoopNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("setupPart->intersection(test)->isEmpty() and"\
	"setupPart->intersection(bodyPart)->isEmpty() and"\
	"test->intersection(bodyPart)->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_LoopNode->getOwnedRule()->push_back(con);
	con->setContext(uML_LoopNode->getNamespace());
	
	
	uML_LoopNode_bodyOutput.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LoopNode_bodyOutput->setName("bodyOutput");
	uML_LoopNode_bodyOutput->setType(get_UML_OutputPin());
	uML_LoopNode_bodyOutput->setLower(0);
	uML_LoopNode_bodyOutput->setUpper(-1);
	uML_LoopNode->getOwnedAttribute()->push_back(uML_LoopNode_bodyOutput);
	uML_LoopNode_bodyOutput->setClass(uML_LoopNode);
	
	
	uML_LoopNode_bodyPart.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LoopNode_bodyPart->setName("bodyPart");
	uML_LoopNode_bodyPart->setType(get_UML_ExecutableNode());
	uML_LoopNode_bodyPart->setLower(0);
	uML_LoopNode_bodyPart->setUpper(-1);
	uML_LoopNode->getOwnedAttribute()->push_back(uML_LoopNode_bodyPart);
	uML_LoopNode_bodyPart->setClass(uML_LoopNode);
	
	
	uML_LoopNode_decider.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LoopNode_decider->setName("decider");
	uML_LoopNode_decider->setType(get_UML_OutputPin());
	uML_LoopNode_decider->setLower(1);
	uML_LoopNode_decider->setUpper(1);
	uML_LoopNode->getOwnedAttribute()->push_back(uML_LoopNode_decider);
	uML_LoopNode_decider->setClass(uML_LoopNode);
	
	
	uML_LoopNode_isTestedFirst.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LoopNode_isTestedFirst->setName("isTestedFirst");
	uML_LoopNode_isTestedFirst->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_LoopNode_isTestedFirst->setLower(1);
	uML_LoopNode_isTestedFirst->setUpper(1);
	uML_LoopNode->getOwnedAttribute()->push_back(uML_LoopNode_isTestedFirst);
	uML_LoopNode_isTestedFirst->setClass(uML_LoopNode);
	uML_LoopNode_isTestedFirst->setDefaultValue(uML_LoopNode_isTestedFirst_defaultValue_LiteralBoolean_UML_LoopNode_isTestedFirst);
	
	uML_LoopNode_loopVariable.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LoopNode_loopVariable->setName("loopVariable");
	uML_LoopNode_loopVariable->setType(get_UML_OutputPin());
	uML_LoopNode_loopVariable->setLower(0);
	uML_LoopNode_loopVariable->setUpper(-1);
	uML_LoopNode->getOwnedAttribute()->push_back(uML_LoopNode_loopVariable);
	uML_LoopNode_loopVariable->setClass(uML_LoopNode);
	
	
	uML_LoopNode_loopVariableInput.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LoopNode_loopVariableInput->setName("loopVariableInput");
	uML_LoopNode_loopVariableInput->setType(get_UML_InputPin());
	uML_LoopNode_loopVariableInput->setLower(0);
	uML_LoopNode_loopVariableInput->setUpper(-1);
	uML_LoopNode->getOwnedAttribute()->push_back(uML_LoopNode_loopVariableInput);
	uML_LoopNode_loopVariableInput->setClass(uML_LoopNode);
	
	
	uML_LoopNode_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LoopNode_result->setName("result");
	uML_LoopNode_result->setType(get_UML_OutputPin());
	uML_LoopNode_result->setLower(0);
	uML_LoopNode_result->setUpper(-1);
	uML_LoopNode->getOwnedAttribute()->push_back(uML_LoopNode_result);
	uML_LoopNode_result->setClass(uML_LoopNode);
	
	
	uML_LoopNode_setupPart.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LoopNode_setupPart->setName("setupPart");
	uML_LoopNode_setupPart->setType(get_UML_ExecutableNode());
	uML_LoopNode_setupPart->setLower(0);
	uML_LoopNode_setupPart->setUpper(-1);
	uML_LoopNode->getOwnedAttribute()->push_back(uML_LoopNode_setupPart);
	uML_LoopNode_setupPart->setClass(uML_LoopNode);
	
	
	uML_LoopNode_test.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_LoopNode_test->setName("test");
	uML_LoopNode_test->setType(get_UML_ExecutableNode());
	uML_LoopNode_test->setLower(1);
	uML_LoopNode_test->setUpper(-1);
	uML_LoopNode->getOwnedAttribute()->push_back(uML_LoopNode_test);
	uML_LoopNode_test->setClass(uML_LoopNode);
	
	
	
	uML_LoopNode_allActions_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LoopNode_allActions_->setName("allActions");
	uML_LoopNode_allActions_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LoopNode_allActions_result->setName("result");
	uML_LoopNode_allActions_result->setType(get_UML_Action());
	uML_LoopNode_allActions_result->setLower(0);
	uML_LoopNode_allActions_result->setUpper(-1);
	uML_LoopNode_allActions_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LoopNode_allActions_->getOwnedParameter()->push_back(uML_LoopNode_allActions_result);
	
	
	uML_LoopNode->getOwnedOperation()->push_back(uML_LoopNode_allActions_); 
	uML_LoopNode_sourceNodes_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_LoopNode_sourceNodes_->setName("sourceNodes");
	uML_LoopNode_sourceNodes_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_LoopNode_sourceNodes_result->setName("result");
	uML_LoopNode_sourceNodes_result->setType(get_UML_ActivityNode());
	uML_LoopNode_sourceNodes_result->setLower(0);
	uML_LoopNode_sourceNodes_result->setUpper(-1);
	uML_LoopNode_sourceNodes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_LoopNode_sourceNodes_->getOwnedParameter()->push_back(uML_LoopNode_sourceNodes_result);
	
	
	uML_LoopNode->getOwnedOperation()->push_back(uML_LoopNode_sourceNodes_); 
	
	


	uML_Manifestation.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Manifestation->setName("Manifestation");
	uML_Manifestation->setIsAbstract(false);
	uML_Manifestation->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Manifestation);
	
	//constraints
	
	
	uML_Manifestation_utilizedElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Manifestation_utilizedElement->setName("utilizedElement");
	uML_Manifestation_utilizedElement->setType(get_UML_PackageableElement());
	uML_Manifestation_utilizedElement->setLower(1);
	uML_Manifestation_utilizedElement->setUpper(1);
	uML_Manifestation->getOwnedAttribute()->push_back(uML_Manifestation_utilizedElement);
	uML_Manifestation_utilizedElement->setClass(uML_Manifestation);
	
	
	
	
	


	uML_MergeNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_MergeNode->setName("MergeNode");
	uML_MergeNode->setIsAbstract(false);
	uML_MergeNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_MergeNode);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("one_outgoing_edge");
	con->getConstrainedElement()->push_back(uML_MergeNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("outgoing->size()=1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_MergeNode->getOwnedRule()->push_back(con);
	con->setContext(uML_MergeNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("edges");
	con->getConstrainedElement()->push_back(uML_MergeNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let allEdges : Set(ActivityEdge) = incoming->union(outgoing) in"\
	"allEdges->forAll(oclIsKindOf(ControlFlow)) or allEdges->forAll(oclIsKindOf(ObjectFlow))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_MergeNode->getOwnedRule()->push_back(con);
	con->setContext(uML_MergeNode->getNamespace());
	
	
	
	
	


	uML_Message.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Message->setName("Message");
	uML_Message->setIsAbstract(false);
	uML_Message->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Message);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("sending_receiving_message_event");
	con->getConstrainedElement()->push_back(uML_Message);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("receiveEvent.oclIsKindOf(MessageOccurrenceSpecification)"\
	"implies"\
	"let f :  Lifeline = sendEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered in"\
	"f = receiveEvent->select(oclIsKindOf(MessageOccurrenceSpecification)).oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first().covered  implies"\
	"f.events->indexOf(sendEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() ) < "\
	"f.events->indexOf(receiveEvent.oclAsType(MessageOccurrenceSpecification)->asOrderedSet()->first() )");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Message->getOwnedRule()->push_back(con);
	con->setContext(uML_Message->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("signature_is_operation_reply");
	con->getConstrainedElement()->push_back(uML_Message);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(messageSort = MessageSort::reply) and signature.oclIsKindOf(Operation) implies "\
	" let replyParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter->"\
	"select(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::return)"\
	"in replyParms->size() = self.argument->size() and"\
	"self.argument->forAll( o: ValueSpecification | o.oclIsKindOf(Expression) and let e : Expression = o.oclAsType(Expression) in"\
	"e.operand->notEmpty()  implies "\
	"let p : Parameter = replyParms->at(self.argument->indexOf(o)) in"\
	"e.operand->asSequence()->first().type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier))"\
	")");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Message->getOwnedRule()->push_back(con);
	con->setContext(uML_Message->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("signature_refer_to");
	con->getConstrainedElement()->push_back(uML_Message);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("signature->notEmpty() implies "\
	"((signature.oclIsKindOf(Operation) and "\
	"(messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall or messageSort = MessageSort::reply) "\
	") or (signature.oclIsKindOf(Signal)  and messageSort = MessageSort::asynchSignal )"\
	" ) and name = signature.name");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Message->getOwnedRule()->push_back(con);
	con->setContext(uML_Message->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("occurrence_specifications");
	con->getConstrainedElement()->push_back(uML_Message);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Message->getOwnedRule()->push_back(con);
	con->setContext(uML_Message->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("arguments");
	con->getConstrainedElement()->push_back(uML_Message);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Message->getOwnedRule()->push_back(con);
	con->setContext(uML_Message->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("signature_is_operation_request");
	con->getConstrainedElement()->push_back(uML_Message);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(messageSort = MessageSort::asynchCall or messageSort = MessageSort::synchCall) and signature.oclIsKindOf(Operation)  implies "\
	" let requestParms : OrderedSet(Parameter) = signature.oclAsType(Operation).ownedParameter->"\
	" select(direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::_'in'  )"\
	"in requestParms->size() = self.argument->size() and"\
	"self.argument->forAll( o: ValueSpecification | "\
	"not (o.oclIsKindOf(Expression) and o.oclAsType(Expression).symbol->size()=0 and o.oclAsType(Expression).operand->isEmpty() ) implies "\
	"let p : Parameter = requestParms->at(self.argument->indexOf(o)) in"\
	"o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier))"\
	")");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Message->getOwnedRule()->push_back(con);
	con->setContext(uML_Message->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("signature_is_signal");
	con->getConstrainedElement()->push_back(uML_Message);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(messageSort = MessageSort::asynchSignal ) and signature.oclIsKindOf(Signal) implies"\
	"   let signalAttributes : OrderedSet(Property) = signature.oclAsType(Signal).inheritedMember()->"\
	"             select(n:NamedElement | n.oclIsTypeOf(Property))->collect(oclAsType(Property))->asOrderedSet()"\
	"   in signalAttributes->size() = self.argument->size()"\
	"   and self.argument->forAll( o: ValueSpecification |"\
	"          not (o.oclIsKindOf(Expression)"\
	"          and o.oclAsType(Expression).symbol->size()=0"\
	"          and o.oclAsType(Expression).operand->isEmpty() ) implies"\
	"              let p : Property = signalAttributes->at(self.argument->indexOf(o))"\
	"              in o.type.oclAsType(Classifier).conformsTo(p.type.oclAsType(Classifier)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Message->getOwnedRule()->push_back(con);
	con->setContext(uML_Message->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("cannot_cross_boundaries");
	con->getConstrainedElement()->push_back(uML_Message);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("sendEvent->notEmpty() and receiveEvent->notEmpty() implies"\
	"let sendEnclosingFrag : Set(InteractionFragment) = "\
	"sendEvent->asOrderedSet()->first().enclosingFragment()"\
	"in "\
	"let receiveEnclosingFrag : Set(InteractionFragment) = "\
	"receiveEvent->asOrderedSet()->first().enclosingFragment()"\
	"in  sendEnclosingFrag = receiveEnclosingFrag");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Message->getOwnedRule()->push_back(con);
	con->setContext(uML_Message->getNamespace());
	
	
	uML_Message_argument.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Message_argument->setName("argument");
	uML_Message_argument->setType(get_UML_ValueSpecification());
	uML_Message_argument->setLower(0);
	uML_Message_argument->setUpper(-1);
	uML_Message->getOwnedAttribute()->push_back(uML_Message_argument);
	uML_Message_argument->setClass(uML_Message);
	
	
	uML_Message_connector.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Message_connector->setName("connector");
	uML_Message_connector->setType(get_UML_Connector());
	uML_Message_connector->setLower(0);
	uML_Message_connector->setUpper(1);
	uML_Message->getOwnedAttribute()->push_back(uML_Message_connector);
	uML_Message_connector->setClass(uML_Message);
	
	
	uML_Message_interaction.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Message_interaction->setName("interaction");
	uML_Message_interaction->setType(get_UML_Interaction());
	uML_Message_interaction->setLower(1);
	uML_Message_interaction->setUpper(1);
	uML_Message->getOwnedAttribute()->push_back(uML_Message_interaction);
	uML_Message_interaction->setClass(uML_Message);
	
	
	uML_Message_messageKind.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Message_messageKind->setName("messageKind");
	uML_Message_messageKind->setType(get_UML_MessageKind());
	uML_Message_messageKind->setLower(1);
	uML_Message_messageKind->setUpper(1);
	uML_Message->getOwnedAttribute()->push_back(uML_Message_messageKind);
	uML_Message_messageKind->setClass(uML_Message);
	uML_Message_messageKind->setDefaultValue(uML_Message_messageKind_defaultValue_InstanceValue);
	
	uML_Message_messageSort.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Message_messageSort->setName("messageSort");
	uML_Message_messageSort->setType(get_UML_MessageSort());
	uML_Message_messageSort->setLower(1);
	uML_Message_messageSort->setUpper(1);
	uML_Message->getOwnedAttribute()->push_back(uML_Message_messageSort);
	uML_Message_messageSort->setClass(uML_Message);
	uML_Message_messageSort->setDefaultValue(uML_Message_messageSort_defaultValue_InstanceValue);
	
	uML_Message_receiveEvent.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Message_receiveEvent->setName("receiveEvent");
	uML_Message_receiveEvent->setType(get_UML_MessageEnd());
	uML_Message_receiveEvent->setLower(0);
	uML_Message_receiveEvent->setUpper(1);
	uML_Message->getOwnedAttribute()->push_back(uML_Message_receiveEvent);
	uML_Message_receiveEvent->setClass(uML_Message);
	
	
	uML_Message_sendEvent.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Message_sendEvent->setName("sendEvent");
	uML_Message_sendEvent->setType(get_UML_MessageEnd());
	uML_Message_sendEvent->setLower(0);
	uML_Message_sendEvent->setUpper(1);
	uML_Message->getOwnedAttribute()->push_back(uML_Message_sendEvent);
	uML_Message_sendEvent->setClass(uML_Message);
	
	
	uML_Message_signature.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Message_signature->setName("signature");
	uML_Message_signature->setType(get_UML_NamedElement());
	uML_Message_signature->setLower(0);
	uML_Message_signature->setUpper(1);
	uML_Message->getOwnedAttribute()->push_back(uML_Message_signature);
	uML_Message_signature->setClass(uML_Message);
	
	
	
	uML_Message_isDistinguishableFrom_NamedElement_Namespace.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Message_isDistinguishableFrom_NamedElement_Namespace->setName("isDistinguishableFrom");
	uML_Message_isDistinguishableFrom_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Message_isDistinguishableFrom_result->setName("result");
	uML_Message_isDistinguishableFrom_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Message_isDistinguishableFrom_result->setLower(1);
	uML_Message_isDistinguishableFrom_result->setUpper(1);
	uML_Message_isDistinguishableFrom_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Message_isDistinguishableFrom_NamedElement_Namespace->getOwnedParameter()->push_back(uML_Message_isDistinguishableFrom_result);
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_n.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_n->setName("n");
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_n->setType(get_UML_NamedElement());
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_n->setLower(1);
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_n->setUpper(1);
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_n->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Message_isDistinguishableFrom_NamedElement_Namespace->getOwnedParameter()->push_back(uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_n);
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_ns.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_ns->setName("ns");
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_ns->setType(get_UML_Namespace());
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_ns->setLower(1);
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_ns->setUpper(1);
	uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_ns->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Message_isDistinguishableFrom_NamedElement_Namespace->getOwnedParameter()->push_back(uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_ns);
	
	
	uML_Message->getOwnedOperation()->push_back(uML_Message_isDistinguishableFrom_NamedElement_Namespace); 
	uML_Message_messageKind_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Message_messageKind_->setName("messageKind");
	uML_Message_messageKind_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Message_messageKind_result->setName("result");
	uML_Message_messageKind_result->setType(get_UML_MessageKind());
	uML_Message_messageKind_result->setLower(1);
	uML_Message_messageKind_result->setUpper(1);
	uML_Message_messageKind_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Message_messageKind_->getOwnedParameter()->push_back(uML_Message_messageKind_result);
	
	
	uML_Message->getOwnedOperation()->push_back(uML_Message_messageKind_); 
	
	


	uML_MessageEnd.reset(uml::UmlFactory::eInstance()->createClass());
	uML_MessageEnd->setName("MessageEnd");
	uML_MessageEnd->setIsAbstract(true);
	uML_MessageEnd->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_MessageEnd);
	
	//constraints
	
	
	uML_MessageEnd_message.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_MessageEnd_message->setName("message");
	uML_MessageEnd_message->setType(get_UML_Message());
	uML_MessageEnd_message->setLower(0);
	uML_MessageEnd_message->setUpper(1);
	uML_MessageEnd->getOwnedAttribute()->push_back(uML_MessageEnd_message);
	uML_MessageEnd_message->setClass(uML_MessageEnd);
	
	
	
	uML_MessageEnd_enclosingFragment_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_MessageEnd_enclosingFragment_->setName("enclosingFragment");
	uML_MessageEnd_enclosingFragment_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MessageEnd_enclosingFragment_result->setName("result");
	uML_MessageEnd_enclosingFragment_result->setType(get_UML_InteractionFragment());
	uML_MessageEnd_enclosingFragment_result->setLower(0);
	uML_MessageEnd_enclosingFragment_result->setUpper(-1);
	uML_MessageEnd_enclosingFragment_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_MessageEnd_enclosingFragment_->getOwnedParameter()->push_back(uML_MessageEnd_enclosingFragment_result);
	
	
	uML_MessageEnd->getOwnedOperation()->push_back(uML_MessageEnd_enclosingFragment_); 
	uML_MessageEnd_isReceive_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_MessageEnd_isReceive_->setName("isReceive");
	uML_MessageEnd_isReceive_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MessageEnd_isReceive_result->setName("result");
	uML_MessageEnd_isReceive_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MessageEnd_isReceive_result->setLower(1);
	uML_MessageEnd_isReceive_result->setUpper(1);
	uML_MessageEnd_isReceive_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_MessageEnd_isReceive_->getOwnedParameter()->push_back(uML_MessageEnd_isReceive_result);
	
	
	uML_MessageEnd->getOwnedOperation()->push_back(uML_MessageEnd_isReceive_); 
	uML_MessageEnd_isSend_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_MessageEnd_isSend_->setName("isSend");
	uML_MessageEnd_isSend_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MessageEnd_isSend_result->setName("result");
	uML_MessageEnd_isSend_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MessageEnd_isSend_result->setLower(1);
	uML_MessageEnd_isSend_result->setUpper(1);
	uML_MessageEnd_isSend_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_MessageEnd_isSend_->getOwnedParameter()->push_back(uML_MessageEnd_isSend_result);
	
	
	uML_MessageEnd->getOwnedOperation()->push_back(uML_MessageEnd_isSend_); 
	uML_MessageEnd_oppositeEnd_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_MessageEnd_oppositeEnd_->setName("oppositeEnd");
	uML_MessageEnd_oppositeEnd_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MessageEnd_oppositeEnd_result->setName("result");
	uML_MessageEnd_oppositeEnd_result->setType(get_UML_MessageEnd());
	uML_MessageEnd_oppositeEnd_result->setLower(0);
	uML_MessageEnd_oppositeEnd_result->setUpper(-1);
	uML_MessageEnd_oppositeEnd_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_MessageEnd_oppositeEnd_->getOwnedParameter()->push_back(uML_MessageEnd_oppositeEnd_result);
	
	
	uML_MessageEnd->getOwnedOperation()->push_back(uML_MessageEnd_oppositeEnd_); 
	
	


	uML_MessageEvent.reset(uml::UmlFactory::eInstance()->createClass());
	uML_MessageEvent->setName("MessageEvent");
	uML_MessageEvent->setIsAbstract(true);
	uML_MessageEvent->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_MessageEvent);
	
	//constraints
	
	
	
	
	


	uML_MessageOccurrenceSpecification.reset(uml::UmlFactory::eInstance()->createClass());
	uML_MessageOccurrenceSpecification->setName("MessageOccurrenceSpecification");
	uML_MessageOccurrenceSpecification->setIsAbstract(false);
	uML_MessageOccurrenceSpecification->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_MessageOccurrenceSpecification);
	
	//constraints
	
	
	
	
	


	uML_Model.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Model->setName("Model");
	uML_Model->setIsAbstract(false);
	uML_Model->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Model);
	
	//constraints
	
	
	uML_Model_viewpoint.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Model_viewpoint->setName("viewpoint");
	uML_Model_viewpoint->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Model_viewpoint->setLower(0);
	uML_Model_viewpoint->setUpper(1);
	uML_Model->getOwnedAttribute()->push_back(uML_Model_viewpoint);
	uML_Model_viewpoint->setClass(uML_Model);
	
	
	
	uML_Model_isMetamodel_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Model_isMetamodel_->setName("isMetamodel");
	uML_Model_isMetamodel__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Model_isMetamodel__return->setName("");
	uML_Model_isMetamodel__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Model_isMetamodel__return->setLower(1);
	uML_Model_isMetamodel__return->setUpper(1);
	uML_Model_isMetamodel__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Model_isMetamodel_->getOwnedParameter()->push_back(uML_Model_isMetamodel__return);
	
	
	uML_Model->getOwnedOperation()->push_back(uML_Model_isMetamodel_); 
	
	


	uML_MultiplicityElement.reset(uml::UmlFactory::eInstance()->createClass());
	uML_MultiplicityElement->setName("MultiplicityElement");
	uML_MultiplicityElement->setIsAbstract(true);
	uML_MultiplicityElement->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_MultiplicityElement);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("upper_is_unlimitedNatural");
	con->getConstrainedElement()->push_back(uML_MultiplicityElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("upperValue <> null implies upperValue.unlimitedValue() <> null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_MultiplicityElement->getOwnedRule()->push_back(con);
	con->setContext(uML_MultiplicityElement->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("lower_is_integer");
	con->getConstrainedElement()->push_back(uML_MultiplicityElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("lowerValue <> null implies lowerValue.integerValue() <> null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_MultiplicityElement->getOwnedRule()->push_back(con);
	con->setContext(uML_MultiplicityElement->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("value_specification_constant");
	con->getConstrainedElement()->push_back(uML_MultiplicityElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_MultiplicityElement->getOwnedRule()->push_back(con);
	con->setContext(uML_MultiplicityElement->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("lower_ge_0");
	con->getConstrainedElement()->push_back(uML_MultiplicityElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("lowerBound() >= 0");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_MultiplicityElement->getOwnedRule()->push_back(con);
	con->setContext(uML_MultiplicityElement->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("value_specification_no_side_effects");
	con->getConstrainedElement()->push_back(uML_MultiplicityElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_MultiplicityElement->getOwnedRule()->push_back(con);
	con->setContext(uML_MultiplicityElement->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("upper_ge_lower");
	con->getConstrainedElement()->push_back(uML_MultiplicityElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("upperBound() >= lowerBound()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_MultiplicityElement->getOwnedRule()->push_back(con);
	con->setContext(uML_MultiplicityElement->getNamespace());
	
	
	uML_MultiplicityElement_isOrdered.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_MultiplicityElement_isOrdered->setName("isOrdered");
	uML_MultiplicityElement_isOrdered->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MultiplicityElement_isOrdered->setLower(1);
	uML_MultiplicityElement_isOrdered->setUpper(1);
	uML_MultiplicityElement->getOwnedAttribute()->push_back(uML_MultiplicityElement_isOrdered);
	uML_MultiplicityElement_isOrdered->setClass(uML_MultiplicityElement);
	uML_MultiplicityElement_isOrdered->setDefaultValue(uML_MultiplicityElement_isOrdered_defaultValue_LiteralBoolean_UML_MultiplicityElement_isOrdered);
	
	uML_MultiplicityElement_isUnique.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_MultiplicityElement_isUnique->setName("isUnique");
	uML_MultiplicityElement_isUnique->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MultiplicityElement_isUnique->setLower(1);
	uML_MultiplicityElement_isUnique->setUpper(1);
	uML_MultiplicityElement->getOwnedAttribute()->push_back(uML_MultiplicityElement_isUnique);
	uML_MultiplicityElement_isUnique->setClass(uML_MultiplicityElement);
	uML_MultiplicityElement_isUnique->setDefaultValue(uML_MultiplicityElement_isUnique_defaultValue_LiteralBoolean_UML_MultiplicityElement_isUnique);
	
	uML_MultiplicityElement_lower.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_MultiplicityElement_lower->setName("lower");
	uML_MultiplicityElement_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_MultiplicityElement_lower->setLower(1);
	uML_MultiplicityElement_lower->setUpper(1);
	uML_MultiplicityElement->getOwnedAttribute()->push_back(uML_MultiplicityElement_lower);
	uML_MultiplicityElement_lower->setClass(uML_MultiplicityElement);
	uML_MultiplicityElement_lower->setDefaultValue(uML_MultiplicityElement_lower_defaultValue_LiteralInteger_UML_MultiplicityElement_lower);
	
	uML_MultiplicityElement_lowerValue.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_MultiplicityElement_lowerValue->setName("lowerValue");
	uML_MultiplicityElement_lowerValue->setType(get_UML_ValueSpecification());
	uML_MultiplicityElement_lowerValue->setLower(0);
	uML_MultiplicityElement_lowerValue->setUpper(1);
	uML_MultiplicityElement->getOwnedAttribute()->push_back(uML_MultiplicityElement_lowerValue);
	uML_MultiplicityElement_lowerValue->setClass(uML_MultiplicityElement);
	
	
	uML_MultiplicityElement_upper.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_MultiplicityElement_upper->setName("upper");
	uML_MultiplicityElement_upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_MultiplicityElement_upper->setLower(1);
	uML_MultiplicityElement_upper->setUpper(1);
	uML_MultiplicityElement->getOwnedAttribute()->push_back(uML_MultiplicityElement_upper);
	uML_MultiplicityElement_upper->setClass(uML_MultiplicityElement);
	uML_MultiplicityElement_upper->setDefaultValue(uML_MultiplicityElement_upper_defaultValue_LiteralUnlimitedNatural_UML_MultiplicityElement_upper);
	
	uML_MultiplicityElement_upperValue.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_MultiplicityElement_upperValue->setName("upperValue");
	uML_MultiplicityElement_upperValue->setType(get_UML_ValueSpecification());
	uML_MultiplicityElement_upperValue->setLower(0);
	uML_MultiplicityElement_upperValue->setUpper(1);
	uML_MultiplicityElement->getOwnedAttribute()->push_back(uML_MultiplicityElement_upperValue);
	uML_MultiplicityElement_upperValue->setClass(uML_MultiplicityElement);
	
	
	
	uML_MultiplicityElement_compatibleWith_MultiplicityElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_MultiplicityElement_compatibleWith_MultiplicityElement->setName("compatibleWith");
	uML_MultiplicityElement_compatibleWith_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MultiplicityElement_compatibleWith_result->setName("result");
	uML_MultiplicityElement_compatibleWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MultiplicityElement_compatibleWith_result->setLower(1);
	uML_MultiplicityElement_compatibleWith_result->setUpper(1);
	uML_MultiplicityElement_compatibleWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_MultiplicityElement_compatibleWith_MultiplicityElement->getOwnedParameter()->push_back(uML_MultiplicityElement_compatibleWith_result);
	uML_MultiplicityElement_compatibleWith_MultiplicityElement_UML_MultiplicityElement_compatibleWith_other.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MultiplicityElement_compatibleWith_MultiplicityElement_UML_MultiplicityElement_compatibleWith_other->setName("other");
	uML_MultiplicityElement_compatibleWith_MultiplicityElement_UML_MultiplicityElement_compatibleWith_other->setType(get_UML_MultiplicityElement());
	uML_MultiplicityElement_compatibleWith_MultiplicityElement_UML_MultiplicityElement_compatibleWith_other->setLower(1);
	uML_MultiplicityElement_compatibleWith_MultiplicityElement_UML_MultiplicityElement_compatibleWith_other->setUpper(1);
	uML_MultiplicityElement_compatibleWith_MultiplicityElement_UML_MultiplicityElement_compatibleWith_other->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_MultiplicityElement_compatibleWith_MultiplicityElement->getOwnedParameter()->push_back(uML_MultiplicityElement_compatibleWith_MultiplicityElement_UML_MultiplicityElement_compatibleWith_other);
	
	
	uML_MultiplicityElement->getOwnedOperation()->push_back(uML_MultiplicityElement_compatibleWith_MultiplicityElement); 
	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement->setName("includesMultiplicity");
	uML_MultiplicityElement_includesMultiplicity_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MultiplicityElement_includesMultiplicity_result->setName("result");
	uML_MultiplicityElement_includesMultiplicity_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MultiplicityElement_includesMultiplicity_result->setLower(1);
	uML_MultiplicityElement_includesMultiplicity_result->setUpper(1);
	uML_MultiplicityElement_includesMultiplicity_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement->getOwnedParameter()->push_back(uML_MultiplicityElement_includesMultiplicity_result);
	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_UML_MultiplicityElement_includesMultiplicity_M.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_UML_MultiplicityElement_includesMultiplicity_M->setName("M");
	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_UML_MultiplicityElement_includesMultiplicity_M->setType(get_UML_MultiplicityElement());
	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_UML_MultiplicityElement_includesMultiplicity_M->setLower(1);
	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_UML_MultiplicityElement_includesMultiplicity_M->setUpper(1);
	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_UML_MultiplicityElement_includesMultiplicity_M->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_MultiplicityElement_includesMultiplicity_MultiplicityElement->getOwnedParameter()->push_back(uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_UML_MultiplicityElement_includesMultiplicity_M);
	
	
	uML_MultiplicityElement->getOwnedOperation()->push_back(uML_MultiplicityElement_includesMultiplicity_MultiplicityElement); 
	uML_MultiplicityElement_is_Integer_UnlimitedNatural.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_MultiplicityElement_is_Integer_UnlimitedNatural->setName("is");
	uML_MultiplicityElement_is_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MultiplicityElement_is_result->setName("result");
	uML_MultiplicityElement_is_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MultiplicityElement_is_result->setLower(1);
	uML_MultiplicityElement_is_result->setUpper(1);
	uML_MultiplicityElement_is_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_MultiplicityElement_is_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_MultiplicityElement_is_result);
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_lowerbound.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_lowerbound->setName("lowerbound");
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_lowerbound->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_lowerbound->setLower(1);
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_lowerbound->setUpper(1);
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_lowerbound->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_MultiplicityElement_is_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_lowerbound);
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_upperbound.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_upperbound->setName("upperbound");
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_upperbound->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_upperbound->setLower(1);
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_upperbound->setUpper(1);
	uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_upperbound->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_MultiplicityElement_is_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_upperbound);
	
	
	uML_MultiplicityElement->getOwnedOperation()->push_back(uML_MultiplicityElement_is_Integer_UnlimitedNatural); 
	uML_MultiplicityElement_isMultivalued_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_MultiplicityElement_isMultivalued_->setName("isMultivalued");
	uML_MultiplicityElement_isMultivalued_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MultiplicityElement_isMultivalued_result->setName("result");
	uML_MultiplicityElement_isMultivalued_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_MultiplicityElement_isMultivalued_result->setLower(1);
	uML_MultiplicityElement_isMultivalued_result->setUpper(1);
	uML_MultiplicityElement_isMultivalued_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_MultiplicityElement_isMultivalued_->getOwnedParameter()->push_back(uML_MultiplicityElement_isMultivalued_result);
	
	
	uML_MultiplicityElement->getOwnedOperation()->push_back(uML_MultiplicityElement_isMultivalued_); 
	uML_MultiplicityElement_lower_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_MultiplicityElement_lower_->setName("lower");
	uML_MultiplicityElement_lower_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MultiplicityElement_lower_result->setName("result");
	uML_MultiplicityElement_lower_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_MultiplicityElement_lower_result->setLower(0);
	uML_MultiplicityElement_lower_result->setUpper(1);
	uML_MultiplicityElement_lower_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_MultiplicityElement_lower_->getOwnedParameter()->push_back(uML_MultiplicityElement_lower_result);
	
	
	uML_MultiplicityElement->getOwnedOperation()->push_back(uML_MultiplicityElement_lower_); 
	uML_MultiplicityElement_lowerBound_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_MultiplicityElement_lowerBound_->setName("lowerBound");
	uML_MultiplicityElement_lowerBound_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MultiplicityElement_lowerBound_result->setName("result");
	uML_MultiplicityElement_lowerBound_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_MultiplicityElement_lowerBound_result->setLower(1);
	uML_MultiplicityElement_lowerBound_result->setUpper(1);
	uML_MultiplicityElement_lowerBound_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_MultiplicityElement_lowerBound_->getOwnedParameter()->push_back(uML_MultiplicityElement_lowerBound_result);
	
	
	uML_MultiplicityElement->getOwnedOperation()->push_back(uML_MultiplicityElement_lowerBound_); 
	uML_MultiplicityElement_setLower_Integer.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_MultiplicityElement_setLower_Integer->setName("setLower");
	uML_MultiplicityElement_setLower_Integer_UML_MultiplicityElement_setLower_newLower.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MultiplicityElement_setLower_Integer_UML_MultiplicityElement_setLower_newLower->setName("newLower");
	uML_MultiplicityElement_setLower_Integer_UML_MultiplicityElement_setLower_newLower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_MultiplicityElement_setLower_Integer_UML_MultiplicityElement_setLower_newLower->setLower(1);
	uML_MultiplicityElement_setLower_Integer_UML_MultiplicityElement_setLower_newLower->setUpper(1);
	uML_MultiplicityElement_setLower_Integer_UML_MultiplicityElement_setLower_newLower->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_MultiplicityElement_setLower_Integer->getOwnedParameter()->push_back(uML_MultiplicityElement_setLower_Integer_UML_MultiplicityElement_setLower_newLower);
	
	
	uML_MultiplicityElement->getOwnedOperation()->push_back(uML_MultiplicityElement_setLower_Integer); 
	uML_MultiplicityElement_setUpper_UnlimitedNatural.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_MultiplicityElement_setUpper_UnlimitedNatural->setName("setUpper");
	uML_MultiplicityElement_setUpper_UnlimitedNatural_UML_MultiplicityElement_setUpper_newUpper.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MultiplicityElement_setUpper_UnlimitedNatural_UML_MultiplicityElement_setUpper_newUpper->setName("newUpper");
	uML_MultiplicityElement_setUpper_UnlimitedNatural_UML_MultiplicityElement_setUpper_newUpper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_MultiplicityElement_setUpper_UnlimitedNatural_UML_MultiplicityElement_setUpper_newUpper->setLower(1);
	uML_MultiplicityElement_setUpper_UnlimitedNatural_UML_MultiplicityElement_setUpper_newUpper->setUpper(1);
	uML_MultiplicityElement_setUpper_UnlimitedNatural_UML_MultiplicityElement_setUpper_newUpper->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_MultiplicityElement_setUpper_UnlimitedNatural->getOwnedParameter()->push_back(uML_MultiplicityElement_setUpper_UnlimitedNatural_UML_MultiplicityElement_setUpper_newUpper);
	
	
	uML_MultiplicityElement->getOwnedOperation()->push_back(uML_MultiplicityElement_setUpper_UnlimitedNatural); 
	uML_MultiplicityElement_upper_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_MultiplicityElement_upper_->setName("upper");
	uML_MultiplicityElement_upper_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MultiplicityElement_upper_result->setName("result");
	uML_MultiplicityElement_upper_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_MultiplicityElement_upper_result->setLower(0);
	uML_MultiplicityElement_upper_result->setUpper(1);
	uML_MultiplicityElement_upper_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_MultiplicityElement_upper_->getOwnedParameter()->push_back(uML_MultiplicityElement_upper_result);
	
	
	uML_MultiplicityElement->getOwnedOperation()->push_back(uML_MultiplicityElement_upper_); 
	uML_MultiplicityElement_upperBound_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_MultiplicityElement_upperBound_->setName("upperBound");
	uML_MultiplicityElement_upperBound_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_MultiplicityElement_upperBound_result->setName("result");
	uML_MultiplicityElement_upperBound_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_MultiplicityElement_upperBound_result->setLower(1);
	uML_MultiplicityElement_upperBound_result->setUpper(1);
	uML_MultiplicityElement_upperBound_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_MultiplicityElement_upperBound_->getOwnedParameter()->push_back(uML_MultiplicityElement_upperBound_result);
	
	
	uML_MultiplicityElement->getOwnedOperation()->push_back(uML_MultiplicityElement_upperBound_); 
	
	


	uML_NamedElement.reset(uml::UmlFactory::eInstance()->createClass());
	uML_NamedElement->setName("NamedElement");
	uML_NamedElement->setIsAbstract(true);
	uML_NamedElement->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_NamedElement);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("has_no_qualified_name");
	con->getConstrainedElement()->push_back(uML_NamedElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("name=null or allNamespaces()->select( ns | ns.name=null )->notEmpty() implies qualifiedName = null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_NamedElement->getOwnedRule()->push_back(con);
	con->setContext(uML_NamedElement->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("has_qualified_name");
	con->getConstrainedElement()->push_back(uML_NamedElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(name <> null and allNamespaces()->select(ns | ns.name = null)->isEmpty()) implies  qualifiedName = allNamespaces()->iterate( ns : Namespace; agg: String = name | ns.name.concat(self.separator()).concat(agg))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_NamedElement->getOwnedRule()->push_back(con);
	con->setContext(uML_NamedElement->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("visibility_needs_ownership");
	con->getConstrainedElement()->push_back(uML_NamedElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(namespace = null and owner <> null) implies visibility = null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_NamedElement->getOwnedRule()->push_back(con);
	con->setContext(uML_NamedElement->getNamespace());
	
	
	uML_NamedElement_clientDependency.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_NamedElement_clientDependency->setName("clientDependency");
	uML_NamedElement_clientDependency->setType(get_UML_Dependency());
	uML_NamedElement_clientDependency->setLower(0);
	uML_NamedElement_clientDependency->setUpper(-1);
	uML_NamedElement->getOwnedAttribute()->push_back(uML_NamedElement_clientDependency);
	uML_NamedElement_clientDependency->setClass(uML_NamedElement);
	
	
	uML_NamedElement_name.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_NamedElement_name->setName("name");
	uML_NamedElement_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_NamedElement_name->setLower(0);
	uML_NamedElement_name->setUpper(1);
	uML_NamedElement->getOwnedAttribute()->push_back(uML_NamedElement_name);
	uML_NamedElement_name->setClass(uML_NamedElement);
	
	
	uML_NamedElement_nameExpression.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_NamedElement_nameExpression->setName("nameExpression");
	uML_NamedElement_nameExpression->setType(get_UML_StringExpression());
	uML_NamedElement_nameExpression->setLower(0);
	uML_NamedElement_nameExpression->setUpper(1);
	uML_NamedElement->getOwnedAttribute()->push_back(uML_NamedElement_nameExpression);
	uML_NamedElement_nameExpression->setClass(uML_NamedElement);
	
	
	uML_NamedElement_namespace.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_NamedElement_namespace->setName("namespace");
	uML_NamedElement_namespace->setType(get_UML_Namespace());
	uML_NamedElement_namespace->setLower(0);
	uML_NamedElement_namespace->setUpper(1);
	uML_NamedElement->getOwnedAttribute()->push_back(uML_NamedElement_namespace);
	uML_NamedElement_namespace->setClass(uML_NamedElement);
	
	
	uML_NamedElement_qualifiedName.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_NamedElement_qualifiedName->setName("qualifiedName");
	uML_NamedElement_qualifiedName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_NamedElement_qualifiedName->setLower(0);
	uML_NamedElement_qualifiedName->setUpper(1);
	uML_NamedElement->getOwnedAttribute()->push_back(uML_NamedElement_qualifiedName);
	uML_NamedElement_qualifiedName->setClass(uML_NamedElement);
	
	
	uML_NamedElement_visibility.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_NamedElement_visibility->setName("visibility");
	uML_NamedElement_visibility->setType(get_UML_VisibilityKind());
	uML_NamedElement_visibility->setLower(0);
	uML_NamedElement_visibility->setUpper(1);
	uML_NamedElement->getOwnedAttribute()->push_back(uML_NamedElement_visibility);
	uML_NamedElement_visibility->setClass(uML_NamedElement);
	
	
	
	uML_NamedElement_allNamespaces_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_NamedElement_allNamespaces_->setName("allNamespaces");
	uML_NamedElement_allNamespaces_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_allNamespaces_result->setName("result");
	uML_NamedElement_allNamespaces_result->setType(get_UML_Namespace());
	uML_NamedElement_allNamespaces_result->setLower(0);
	uML_NamedElement_allNamespaces_result->setUpper(-1);
	uML_NamedElement_allNamespaces_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_NamedElement_allNamespaces_->getOwnedParameter()->push_back(uML_NamedElement_allNamespaces_result);
	
	
	uML_NamedElement->getOwnedOperation()->push_back(uML_NamedElement_allNamespaces_); 
	uML_NamedElement_allOwningPackages_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_NamedElement_allOwningPackages_->setName("allOwningPackages");
	uML_NamedElement_allOwningPackages_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_allOwningPackages_result->setName("result");
	uML_NamedElement_allOwningPackages_result->setType(get_UML_Package());
	uML_NamedElement_allOwningPackages_result->setLower(0);
	uML_NamedElement_allOwningPackages_result->setUpper(-1);
	uML_NamedElement_allOwningPackages_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_NamedElement_allOwningPackages_->getOwnedParameter()->push_back(uML_NamedElement_allOwningPackages_result);
	
	
	uML_NamedElement->getOwnedOperation()->push_back(uML_NamedElement_allOwningPackages_); 
	uML_NamedElement_clientDependency_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_NamedElement_clientDependency_->setName("clientDependency");
	uML_NamedElement_clientDependency_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_clientDependency_result->setName("result");
	uML_NamedElement_clientDependency_result->setType(get_UML_Dependency());
	uML_NamedElement_clientDependency_result->setLower(0);
	uML_NamedElement_clientDependency_result->setUpper(-1);
	uML_NamedElement_clientDependency_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_NamedElement_clientDependency_->getOwnedParameter()->push_back(uML_NamedElement_clientDependency_result);
	
	
	uML_NamedElement->getOwnedOperation()->push_back(uML_NamedElement_clientDependency_); 
	uML_NamedElement_createDependency_NamedElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_NamedElement_createDependency_NamedElement->setName("createDependency");
	uML_NamedElement_createDependency_NamedElement_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_createDependency_NamedElement_return->setName("");
	uML_NamedElement_createDependency_NamedElement_return->setType(get_UML_Dependency());
	uML_NamedElement_createDependency_NamedElement_return->setLower(1);
	uML_NamedElement_createDependency_NamedElement_return->setUpper(1);
	uML_NamedElement_createDependency_NamedElement_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_NamedElement_createDependency_NamedElement->getOwnedParameter()->push_back(uML_NamedElement_createDependency_NamedElement_return);
	uML_NamedElement_createDependency_NamedElement_UML_NamedElement_createDependency_supplier.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_createDependency_NamedElement_UML_NamedElement_createDependency_supplier->setName("supplier");
	uML_NamedElement_createDependency_NamedElement_UML_NamedElement_createDependency_supplier->setType(get_UML_NamedElement());
	uML_NamedElement_createDependency_NamedElement_UML_NamedElement_createDependency_supplier->setLower(1);
	uML_NamedElement_createDependency_NamedElement_UML_NamedElement_createDependency_supplier->setUpper(1);
	uML_NamedElement_createDependency_NamedElement_UML_NamedElement_createDependency_supplier->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_NamedElement_createDependency_NamedElement->getOwnedParameter()->push_back(uML_NamedElement_createDependency_NamedElement_UML_NamedElement_createDependency_supplier);
	
	
	uML_NamedElement->getOwnedOperation()->push_back(uML_NamedElement_createDependency_NamedElement); 
	uML_NamedElement_createUsage_NamedElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_NamedElement_createUsage_NamedElement->setName("createUsage");
	uML_NamedElement_createUsage_NamedElement_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_createUsage_NamedElement_return->setName("");
	uML_NamedElement_createUsage_NamedElement_return->setType(get_UML_Usage());
	uML_NamedElement_createUsage_NamedElement_return->setLower(1);
	uML_NamedElement_createUsage_NamedElement_return->setUpper(1);
	uML_NamedElement_createUsage_NamedElement_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_NamedElement_createUsage_NamedElement->getOwnedParameter()->push_back(uML_NamedElement_createUsage_NamedElement_return);
	uML_NamedElement_createUsage_NamedElement_UML_NamedElement_createUsage_supplier.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_createUsage_NamedElement_UML_NamedElement_createUsage_supplier->setName("supplier");
	uML_NamedElement_createUsage_NamedElement_UML_NamedElement_createUsage_supplier->setType(get_UML_NamedElement());
	uML_NamedElement_createUsage_NamedElement_UML_NamedElement_createUsage_supplier->setLower(1);
	uML_NamedElement_createUsage_NamedElement_UML_NamedElement_createUsage_supplier->setUpper(1);
	uML_NamedElement_createUsage_NamedElement_UML_NamedElement_createUsage_supplier->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_NamedElement_createUsage_NamedElement->getOwnedParameter()->push_back(uML_NamedElement_createUsage_NamedElement_UML_NamedElement_createUsage_supplier);
	
	
	uML_NamedElement->getOwnedOperation()->push_back(uML_NamedElement_createUsage_NamedElement); 
	uML_NamedElement_getLabel_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_NamedElement_getLabel_->setName("getLabel");
	uML_NamedElement_getLabel__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_getLabel__return->setName("");
	uML_NamedElement_getLabel__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_NamedElement_getLabel__return->setLower(0);
	uML_NamedElement_getLabel__return->setUpper(1);
	uML_NamedElement_getLabel__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_NamedElement_getLabel_->getOwnedParameter()->push_back(uML_NamedElement_getLabel__return);
	
	
	uML_NamedElement->getOwnedOperation()->push_back(uML_NamedElement_getLabel_); 
	uML_NamedElement_getLabel_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_NamedElement_getLabel_Boolean->setName("getLabel");
	uML_NamedElement_getLabel_Boolean_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_getLabel_Boolean_return->setName("");
	uML_NamedElement_getLabel_Boolean_return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_NamedElement_getLabel_Boolean_return->setLower(0);
	uML_NamedElement_getLabel_Boolean_return->setUpper(1);
	uML_NamedElement_getLabel_Boolean_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_NamedElement_getLabel_Boolean->getOwnedParameter()->push_back(uML_NamedElement_getLabel_Boolean_return);
	uML_NamedElement_getLabel_Boolean_UML_NamedElement_getLabel_localize.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_getLabel_Boolean_UML_NamedElement_getLabel_localize->setName("localize");
	uML_NamedElement_getLabel_Boolean_UML_NamedElement_getLabel_localize->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_NamedElement_getLabel_Boolean_UML_NamedElement_getLabel_localize->setLower(1);
	uML_NamedElement_getLabel_Boolean_UML_NamedElement_getLabel_localize->setUpper(1);
	uML_NamedElement_getLabel_Boolean_UML_NamedElement_getLabel_localize->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_NamedElement_getLabel_Boolean->getOwnedParameter()->push_back(uML_NamedElement_getLabel_Boolean_UML_NamedElement_getLabel_localize);
	
	
	uML_NamedElement->getOwnedOperation()->push_back(uML_NamedElement_getLabel_Boolean); 
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace->setName("isDistinguishableFrom");
	uML_NamedElement_isDistinguishableFrom_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_isDistinguishableFrom_result->setName("result");
	uML_NamedElement_isDistinguishableFrom_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_NamedElement_isDistinguishableFrom_result->setLower(1);
	uML_NamedElement_isDistinguishableFrom_result->setUpper(1);
	uML_NamedElement_isDistinguishableFrom_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace->getOwnedParameter()->push_back(uML_NamedElement_isDistinguishableFrom_result);
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_n.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_n->setName("n");
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_n->setType(get_UML_NamedElement());
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_n->setLower(1);
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_n->setUpper(1);
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_n->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace->getOwnedParameter()->push_back(uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_n);
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_ns.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_ns->setName("ns");
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_ns->setType(get_UML_Namespace());
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_ns->setLower(1);
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_ns->setUpper(1);
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_ns->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace->getOwnedParameter()->push_back(uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_ns);
	
	
	uML_NamedElement->getOwnedOperation()->push_back(uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace); 
	uML_NamedElement_namespace_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_NamedElement_namespace_->setName("namespace");
	uML_NamedElement_namespace_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_namespace_result->setName("result");
	uML_NamedElement_namespace_result->setType(get_UML_Namespace());
	uML_NamedElement_namespace_result->setLower(0);
	uML_NamedElement_namespace_result->setUpper(1);
	uML_NamedElement_namespace_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_NamedElement_namespace_->getOwnedParameter()->push_back(uML_NamedElement_namespace_result);
	
	
	uML_NamedElement->getOwnedOperation()->push_back(uML_NamedElement_namespace_); 
	uML_NamedElement_qualifiedName_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_NamedElement_qualifiedName_->setName("qualifiedName");
	uML_NamedElement_qualifiedName_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_qualifiedName_result->setName("result");
	uML_NamedElement_qualifiedName_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_NamedElement_qualifiedName_result->setLower(0);
	uML_NamedElement_qualifiedName_result->setUpper(1);
	uML_NamedElement_qualifiedName_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_NamedElement_qualifiedName_->getOwnedParameter()->push_back(uML_NamedElement_qualifiedName_result);
	
	
	uML_NamedElement->getOwnedOperation()->push_back(uML_NamedElement_qualifiedName_); 
	uML_NamedElement_separator_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_NamedElement_separator_->setName("separator");
	uML_NamedElement_separator_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_NamedElement_separator_result->setName("result");
	uML_NamedElement_separator_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_NamedElement_separator_result->setLower(1);
	uML_NamedElement_separator_result->setUpper(1);
	uML_NamedElement_separator_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_NamedElement_separator_->getOwnedParameter()->push_back(uML_NamedElement_separator_result);
	
	
	uML_NamedElement->getOwnedOperation()->push_back(uML_NamedElement_separator_); 
	
	


	uML_Namespace.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Namespace->setName("Namespace");
	uML_Namespace->setIsAbstract(true);
	uML_Namespace->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Namespace);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("cannot_import_self");
	con->getConstrainedElement()->push_back(uML_Namespace);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("packageImport.importedPackage.oclAsType(Namespace)->excludes(self)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Namespace->getOwnedRule()->push_back(con);
	con->setContext(uML_Namespace->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("cannot_import_ownedMembers");
	con->getConstrainedElement()->push_back(uML_Namespace);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("elementImport.importedElement.oclAsType(Element)->excludesAll(ownedMember)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Namespace->getOwnedRule()->push_back(con);
	con->setContext(uML_Namespace->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("members_distinguishable");
	con->getConstrainedElement()->push_back(uML_Namespace);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("membersAreDistinguishable()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Namespace->getOwnedRule()->push_back(con);
	con->setContext(uML_Namespace->getNamespace());
	
	
	uML_Namespace_elementImport.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Namespace_elementImport->setName("elementImport");
	uML_Namespace_elementImport->setType(get_UML_ElementImport());
	uML_Namespace_elementImport->setLower(0);
	uML_Namespace_elementImport->setUpper(-1);
	uML_Namespace->getOwnedAttribute()->push_back(uML_Namespace_elementImport);
	uML_Namespace_elementImport->setClass(uML_Namespace);
	
	
	uML_Namespace_importedMember.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Namespace_importedMember->setName("importedMember");
	uML_Namespace_importedMember->setType(get_UML_PackageableElement());
	uML_Namespace_importedMember->setLower(0);
	uML_Namespace_importedMember->setUpper(-1);
	uML_Namespace->getOwnedAttribute()->push_back(uML_Namespace_importedMember);
	uML_Namespace_importedMember->setClass(uML_Namespace);
	
	
	uML_Namespace_member.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Namespace_member->setName("member");
	uML_Namespace_member->setType(get_UML_NamedElement());
	uML_Namespace_member->setLower(0);
	uML_Namespace_member->setUpper(-1);
	uML_Namespace->getOwnedAttribute()->push_back(uML_Namespace_member);
	uML_Namespace_member->setClass(uML_Namespace);
	
	
	uML_Namespace_ownedMember.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Namespace_ownedMember->setName("ownedMember");
	uML_Namespace_ownedMember->setType(get_UML_NamedElement());
	uML_Namespace_ownedMember->setLower(0);
	uML_Namespace_ownedMember->setUpper(-1);
	uML_Namespace->getOwnedAttribute()->push_back(uML_Namespace_ownedMember);
	uML_Namespace_ownedMember->setClass(uML_Namespace);
	
	
	uML_Namespace_ownedRule.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Namespace_ownedRule->setName("ownedRule");
	uML_Namespace_ownedRule->setType(get_UML_Constraint());
	uML_Namespace_ownedRule->setLower(0);
	uML_Namespace_ownedRule->setUpper(-1);
	uML_Namespace->getOwnedAttribute()->push_back(uML_Namespace_ownedRule);
	uML_Namespace_ownedRule->setClass(uML_Namespace);
	
	
	uML_Namespace_packageImport.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Namespace_packageImport->setName("packageImport");
	uML_Namespace_packageImport->setType(get_UML_PackageImport());
	uML_Namespace_packageImport->setLower(0);
	uML_Namespace_packageImport->setUpper(-1);
	uML_Namespace->getOwnedAttribute()->push_back(uML_Namespace_packageImport);
	uML_Namespace_packageImport->setClass(uML_Namespace);
	
	
	
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind->setName("createElementImport");
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_return->setName("");
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_return->setType(get_UML_ElementImport());
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_return->setLower(1);
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_return->setUpper(1);
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind->getOwnedParameter()->push_back(uML_Namespace_createElementImport_PackageableElement_VisibilityKind_return);
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_element.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_element->setName("element");
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_element->setType(get_UML_PackageableElement());
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_element->setLower(1);
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_element->setUpper(1);
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_element->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind->getOwnedParameter()->push_back(uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_element);
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_visibility.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_visibility->setName("visibility");
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_visibility->setType(get_UML_VisibilityKind());
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_visibility->setLower(1);
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_visibility->setUpper(1);
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_visibility->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Namespace_createElementImport_PackageableElement_VisibilityKind->getOwnedParameter()->push_back(uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_visibility);
	
	
	uML_Namespace->getOwnedOperation()->push_back(uML_Namespace_createElementImport_PackageableElement_VisibilityKind); 
	uML_Namespace_createPackageImport_Package_VisibilityKind.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Namespace_createPackageImport_Package_VisibilityKind->setName("createPackageImport");
	uML_Namespace_createPackageImport_Package_VisibilityKind_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_createPackageImport_Package_VisibilityKind_return->setName("");
	uML_Namespace_createPackageImport_Package_VisibilityKind_return->setType(get_UML_PackageImport());
	uML_Namespace_createPackageImport_Package_VisibilityKind_return->setLower(1);
	uML_Namespace_createPackageImport_Package_VisibilityKind_return->setUpper(1);
	uML_Namespace_createPackageImport_Package_VisibilityKind_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Namespace_createPackageImport_Package_VisibilityKind->getOwnedParameter()->push_back(uML_Namespace_createPackageImport_Package_VisibilityKind_return);
	uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_package_.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_package_->setName("package_");
	uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_package_->setType(get_UML_Package());
	uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_package_->setLower(1);
	uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_package_->setUpper(1);
	uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_package_->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Namespace_createPackageImport_Package_VisibilityKind->getOwnedParameter()->push_back(uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_package_);
	uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_visibility.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_visibility->setName("visibility");
	uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_visibility->setType(get_UML_VisibilityKind());
	uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_visibility->setLower(1);
	uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_visibility->setUpper(1);
	uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_visibility->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Namespace_createPackageImport_Package_VisibilityKind->getOwnedParameter()->push_back(uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_visibility);
	
	
	uML_Namespace->getOwnedOperation()->push_back(uML_Namespace_createPackageImport_Package_VisibilityKind); 
	uML_Namespace_excludeCollisions_PackageableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Namespace_excludeCollisions_PackageableElement->setName("excludeCollisions");
	uML_Namespace_excludeCollisions_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_excludeCollisions_result->setName("result");
	uML_Namespace_excludeCollisions_result->setType(get_UML_PackageableElement());
	uML_Namespace_excludeCollisions_result->setLower(0);
	uML_Namespace_excludeCollisions_result->setUpper(-1);
	uML_Namespace_excludeCollisions_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Namespace_excludeCollisions_PackageableElement->getOwnedParameter()->push_back(uML_Namespace_excludeCollisions_result);
	uML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps->setName("imps");
	uML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps->setType(get_UML_PackageableElement());
	uML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps->setLower(0);
	uML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps->setUpper(-1);
	uML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Namespace_excludeCollisions_PackageableElement->getOwnedParameter()->push_back(uML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps);
	
	
	uML_Namespace->getOwnedOperation()->push_back(uML_Namespace_excludeCollisions_PackageableElement); 
	uML_Namespace_getImportedElements_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Namespace_getImportedElements_->setName("getImportedElements");
	uML_Namespace_getImportedElements__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_getImportedElements__return->setName("");
	uML_Namespace_getImportedElements__return->setType(get_UML_PackageableElement());
	uML_Namespace_getImportedElements__return->setLower(0);
	uML_Namespace_getImportedElements__return->setUpper(-1);
	uML_Namespace_getImportedElements__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Namespace_getImportedElements_->getOwnedParameter()->push_back(uML_Namespace_getImportedElements__return);
	
	
	uML_Namespace->getOwnedOperation()->push_back(uML_Namespace_getImportedElements_); 
	uML_Namespace_getImportedPackages_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Namespace_getImportedPackages_->setName("getImportedPackages");
	uML_Namespace_getImportedPackages__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_getImportedPackages__return->setName("");
	uML_Namespace_getImportedPackages__return->setType(get_UML_Package());
	uML_Namespace_getImportedPackages__return->setLower(0);
	uML_Namespace_getImportedPackages__return->setUpper(-1);
	uML_Namespace_getImportedPackages__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Namespace_getImportedPackages_->getOwnedParameter()->push_back(uML_Namespace_getImportedPackages__return);
	
	
	uML_Namespace->getOwnedOperation()->push_back(uML_Namespace_getImportedPackages_); 
	uML_Namespace_getNamesOfMember_NamedElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Namespace_getNamesOfMember_NamedElement->setName("getNamesOfMember");
	uML_Namespace_getNamesOfMember_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_getNamesOfMember_result->setName("result");
	uML_Namespace_getNamesOfMember_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Namespace_getNamesOfMember_result->setLower(0);
	uML_Namespace_getNamesOfMember_result->setUpper(-1);
	uML_Namespace_getNamesOfMember_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Namespace_getNamesOfMember_NamedElement->getOwnedParameter()->push_back(uML_Namespace_getNamesOfMember_result);
	uML_Namespace_getNamesOfMember_NamedElement_UML_Namespace_getNamesOfMember_element.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_getNamesOfMember_NamedElement_UML_Namespace_getNamesOfMember_element->setName("element");
	uML_Namespace_getNamesOfMember_NamedElement_UML_Namespace_getNamesOfMember_element->setType(get_UML_NamedElement());
	uML_Namespace_getNamesOfMember_NamedElement_UML_Namespace_getNamesOfMember_element->setLower(1);
	uML_Namespace_getNamesOfMember_NamedElement_UML_Namespace_getNamesOfMember_element->setUpper(1);
	uML_Namespace_getNamesOfMember_NamedElement_UML_Namespace_getNamesOfMember_element->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Namespace_getNamesOfMember_NamedElement->getOwnedParameter()->push_back(uML_Namespace_getNamesOfMember_NamedElement_UML_Namespace_getNamesOfMember_element);
	
	
	uML_Namespace->getOwnedOperation()->push_back(uML_Namespace_getNamesOfMember_NamedElement); 
	uML_Namespace_importMembers_PackageableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Namespace_importMembers_PackageableElement->setName("importMembers");
	uML_Namespace_importMembers_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_importMembers_result->setName("result");
	uML_Namespace_importMembers_result->setType(get_UML_PackageableElement());
	uML_Namespace_importMembers_result->setLower(0);
	uML_Namespace_importMembers_result->setUpper(-1);
	uML_Namespace_importMembers_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Namespace_importMembers_PackageableElement->getOwnedParameter()->push_back(uML_Namespace_importMembers_result);
	uML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps->setName("imps");
	uML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps->setType(get_UML_PackageableElement());
	uML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps->setLower(0);
	uML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps->setUpper(-1);
	uML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Namespace_importMembers_PackageableElement->getOwnedParameter()->push_back(uML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps);
	
	
	uML_Namespace->getOwnedOperation()->push_back(uML_Namespace_importMembers_PackageableElement); 
	uML_Namespace_importedMember_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Namespace_importedMember_->setName("importedMember");
	uML_Namespace_importedMember_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_importedMember_result->setName("result");
	uML_Namespace_importedMember_result->setType(get_UML_PackageableElement());
	uML_Namespace_importedMember_result->setLower(0);
	uML_Namespace_importedMember_result->setUpper(-1);
	uML_Namespace_importedMember_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Namespace_importedMember_->getOwnedParameter()->push_back(uML_Namespace_importedMember_result);
	
	
	uML_Namespace->getOwnedOperation()->push_back(uML_Namespace_importedMember_); 
	uML_Namespace_membersAreDistinguishable_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Namespace_membersAreDistinguishable_->setName("membersAreDistinguishable");
	uML_Namespace_membersAreDistinguishable_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_membersAreDistinguishable_result->setName("result");
	uML_Namespace_membersAreDistinguishable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Namespace_membersAreDistinguishable_result->setLower(1);
	uML_Namespace_membersAreDistinguishable_result->setUpper(1);
	uML_Namespace_membersAreDistinguishable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Namespace_membersAreDistinguishable_->getOwnedParameter()->push_back(uML_Namespace_membersAreDistinguishable_result);
	
	
	uML_Namespace->getOwnedOperation()->push_back(uML_Namespace_membersAreDistinguishable_); 
	uML_Namespace_ownedMember_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Namespace_ownedMember_->setName("ownedMember");
	uML_Namespace_ownedMember_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Namespace_ownedMember_result->setName("result");
	uML_Namespace_ownedMember_result->setType(get_UML_NamedElement());
	uML_Namespace_ownedMember_result->setLower(0);
	uML_Namespace_ownedMember_result->setUpper(-1);
	uML_Namespace_ownedMember_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Namespace_ownedMember_->getOwnedParameter()->push_back(uML_Namespace_ownedMember_result);
	
	
	uML_Namespace->getOwnedOperation()->push_back(uML_Namespace_ownedMember_); 
	
	


	uML_Node.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Node->setName("Node");
	uML_Node->setIsAbstract(false);
	uML_Node->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Node);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("internal_structure");
	con->getConstrainedElement()->push_back(uML_Node);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("part->forAll(oclIsKindOf(Node))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Node->getOwnedRule()->push_back(con);
	con->setContext(uML_Node->getNamespace());
	
	
	uML_Node_nestedNode.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Node_nestedNode->setName("nestedNode");
	uML_Node_nestedNode->setType(get_UML_Node());
	uML_Node_nestedNode->setLower(0);
	uML_Node_nestedNode->setUpper(-1);
	uML_Node->getOwnedAttribute()->push_back(uML_Node_nestedNode);
	uML_Node_nestedNode->setClass(uML_Node);
	
	
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural->setName("createCommunicationPath");
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return->setName("");
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return->setType(get_UML_CommunicationPath());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return->setLower(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return->setUpper(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1IsNavigable.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1IsNavigable->setName("end1IsNavigable");
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1IsNavigable->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1IsNavigable->setLower(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1IsNavigable->setUpper(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1IsNavigable->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1IsNavigable);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Aggregation.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Aggregation->setName("end1Aggregation");
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Aggregation->setType(get_UML_AggregationKind());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Aggregation->setLower(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Aggregation->setUpper(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Aggregation->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Aggregation);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Name->setName("end1Name");
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Name->setLower(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Name->setUpper(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Name);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Lower.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Lower->setName("end1Lower");
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Lower->setLower(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Lower->setUpper(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Lower->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Lower);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Upper.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Upper->setName("end1Upper");
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Upper->setLower(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Upper->setUpper(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Upper->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Upper);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Node.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Node->setName("end1Node");
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Node->setType(get_UML_Node());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Node->setLower(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Node->setUpper(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Node->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Node);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2IsNavigable.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2IsNavigable->setName("end2IsNavigable");
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2IsNavigable->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2IsNavigable->setLower(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2IsNavigable->setUpper(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2IsNavigable->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2IsNavigable);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Aggregation.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Aggregation->setName("end2Aggregation");
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Aggregation->setType(get_UML_AggregationKind());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Aggregation->setLower(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Aggregation->setUpper(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Aggregation->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Aggregation);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Name->setName("end2Name");
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Name->setLower(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Name->setUpper(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Name);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Lower.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Lower->setName("end2Lower");
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Lower->setLower(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Lower->setUpper(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Lower->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Lower);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Upper.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Upper->setName("end2Upper");
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Upper->setLower(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Upper->setUpper(1);
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Upper->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Upper);
	
	
	uML_Node->getOwnedOperation()->push_back(uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural); 
	uML_Node_getCommunicationPaths_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Node_getCommunicationPaths_->setName("getCommunicationPaths");
	uML_Node_getCommunicationPaths__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Node_getCommunicationPaths__return->setName("");
	uML_Node_getCommunicationPaths__return->setType(get_UML_CommunicationPath());
	uML_Node_getCommunicationPaths__return->setLower(0);
	uML_Node_getCommunicationPaths__return->setUpper(-1);
	uML_Node_getCommunicationPaths__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Node_getCommunicationPaths_->getOwnedParameter()->push_back(uML_Node_getCommunicationPaths__return);
	
	
	uML_Node->getOwnedOperation()->push_back(uML_Node_getCommunicationPaths_); 
	
	


	uML_ObjectFlow.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ObjectFlow->setName("ObjectFlow");
	uML_ObjectFlow->setIsAbstract(false);
	uML_ObjectFlow->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ObjectFlow);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("target");
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ObjectFlow->getOwnedRule()->push_back(con);
	con->setContext(uML_ObjectFlow->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("transformation_behavior");
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("transformation<>null implies"\
	"	transformation.inputParameters()->size()=1 and"\
	"	transformation.outputParameters()->size()=1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ObjectFlow->getOwnedRule()->push_back(con);
	con->setContext(uML_ObjectFlow->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("compatible_types");
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ObjectFlow->getOwnedRule()->push_back(con);
	con->setContext(uML_ObjectFlow->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("same_upper_bounds");
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ObjectFlow->getOwnedRule()->push_back(con);
	con->setContext(uML_ObjectFlow->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("input_and_output_parameter");
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("selection<>null implies"\
	"	selection.inputParameters()->size()=1 and"\
	"	selection.inputParameters()->forAll(not isUnique and is(0,*)) and"\
	"	selection.outputParameters()->size()=1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ObjectFlow->getOwnedRule()->push_back(con);
	con->setContext(uML_ObjectFlow->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("selection_behavior");
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("selection<>null implies source.oclIsKindOf(ObjectNode)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ObjectFlow->getOwnedRule()->push_back(con);
	con->setContext(uML_ObjectFlow->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_executable_nodes");
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not (source.oclIsKindOf(ExecutableNode) or target.oclIsKindOf(ExecutableNode))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ObjectFlow->getOwnedRule()->push_back(con);
	con->setContext(uML_ObjectFlow->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("is_multicast_or_is_multireceive");
	con->getConstrainedElement()->push_back(uML_ObjectFlow);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not (isMulticast and isMultireceive)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ObjectFlow->getOwnedRule()->push_back(con);
	con->setContext(uML_ObjectFlow->getNamespace());
	
	
	uML_ObjectFlow_isMulticast.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ObjectFlow_isMulticast->setName("isMulticast");
	uML_ObjectFlow_isMulticast->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ObjectFlow_isMulticast->setLower(1);
	uML_ObjectFlow_isMulticast->setUpper(1);
	uML_ObjectFlow->getOwnedAttribute()->push_back(uML_ObjectFlow_isMulticast);
	uML_ObjectFlow_isMulticast->setClass(uML_ObjectFlow);
	uML_ObjectFlow_isMulticast->setDefaultValue(uML_ObjectFlow_isMulticast_defaultValue_LiteralBoolean_UML_ObjectFlow_isMulticast);
	
	uML_ObjectFlow_isMultireceive.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ObjectFlow_isMultireceive->setName("isMultireceive");
	uML_ObjectFlow_isMultireceive->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ObjectFlow_isMultireceive->setLower(1);
	uML_ObjectFlow_isMultireceive->setUpper(1);
	uML_ObjectFlow->getOwnedAttribute()->push_back(uML_ObjectFlow_isMultireceive);
	uML_ObjectFlow_isMultireceive->setClass(uML_ObjectFlow);
	uML_ObjectFlow_isMultireceive->setDefaultValue(uML_ObjectFlow_isMultireceive_defaultValue_LiteralBoolean_UML_ObjectFlow_isMultireceive);
	
	uML_ObjectFlow_selection.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ObjectFlow_selection->setName("selection");
	uML_ObjectFlow_selection->setType(get_UML_Behavior());
	uML_ObjectFlow_selection->setLower(0);
	uML_ObjectFlow_selection->setUpper(1);
	uML_ObjectFlow->getOwnedAttribute()->push_back(uML_ObjectFlow_selection);
	uML_ObjectFlow_selection->setClass(uML_ObjectFlow);
	
	
	uML_ObjectFlow_transformation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ObjectFlow_transformation->setName("transformation");
	uML_ObjectFlow_transformation->setType(get_UML_Behavior());
	uML_ObjectFlow_transformation->setLower(0);
	uML_ObjectFlow_transformation->setUpper(1);
	uML_ObjectFlow->getOwnedAttribute()->push_back(uML_ObjectFlow_transformation);
	uML_ObjectFlow_transformation->setClass(uML_ObjectFlow);
	
	
	
	
	


	uML_ObjectNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ObjectNode->setName("ObjectNode");
	uML_ObjectNode->setIsAbstract(true);
	uML_ObjectNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ObjectNode);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("object_flow_edges");
	con->getConstrainedElement()->push_back(uML_ObjectNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(not isControlType) implies incoming->union(outgoing)->forAll(oclIsKindOf(ObjectFlow))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ObjectNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ObjectNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("input_output_parameter");
	con->getConstrainedElement()->push_back(uML_ObjectNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("selection<>null implies"\
	"	selection.inputParameters()->size()=1 and"\
	"	selection.inputParameters()->forAll(p | not p.isUnique and p.is(0,*) and self.type.conformsTo(p.type)) and"\
	"	selection.outputParameters()->size()=1 and"\
	"		selection.inputParameters()->forAll(p | self.type.conformsTo(p.type))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ObjectNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ObjectNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("selection_behavior");
	con->getConstrainedElement()->push_back(uML_ObjectNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(selection<>null) = (ordering=ObjectNodeOrderingKind::ordered)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ObjectNode->getOwnedRule()->push_back(con);
	con->setContext(uML_ObjectNode->getNamespace());
	
	
	uML_ObjectNode_inState.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ObjectNode_inState->setName("inState");
	uML_ObjectNode_inState->setType(get_UML_State());
	uML_ObjectNode_inState->setLower(0);
	uML_ObjectNode_inState->setUpper(-1);
	uML_ObjectNode->getOwnedAttribute()->push_back(uML_ObjectNode_inState);
	uML_ObjectNode_inState->setClass(uML_ObjectNode);
	
	
	uML_ObjectNode_isControlType.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ObjectNode_isControlType->setName("isControlType");
	uML_ObjectNode_isControlType->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ObjectNode_isControlType->setLower(1);
	uML_ObjectNode_isControlType->setUpper(1);
	uML_ObjectNode->getOwnedAttribute()->push_back(uML_ObjectNode_isControlType);
	uML_ObjectNode_isControlType->setClass(uML_ObjectNode);
	uML_ObjectNode_isControlType->setDefaultValue(uML_ObjectNode_isControlType_defaultValue_LiteralBoolean_UML_ObjectNode_isControlType);
	
	uML_ObjectNode_ordering.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ObjectNode_ordering->setName("ordering");
	uML_ObjectNode_ordering->setType(get_UML_ObjectNodeOrderingKind());
	uML_ObjectNode_ordering->setLower(1);
	uML_ObjectNode_ordering->setUpper(1);
	uML_ObjectNode->getOwnedAttribute()->push_back(uML_ObjectNode_ordering);
	uML_ObjectNode_ordering->setClass(uML_ObjectNode);
	uML_ObjectNode_ordering->setDefaultValue(uML_ObjectNode_ordering_defaultValue_InstanceValue);
	
	uML_ObjectNode_selection.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ObjectNode_selection->setName("selection");
	uML_ObjectNode_selection->setType(get_UML_Behavior());
	uML_ObjectNode_selection->setLower(0);
	uML_ObjectNode_selection->setUpper(1);
	uML_ObjectNode->getOwnedAttribute()->push_back(uML_ObjectNode_selection);
	uML_ObjectNode_selection->setClass(uML_ObjectNode);
	
	
	uML_ObjectNode_upperBound.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ObjectNode_upperBound->setName("upperBound");
	uML_ObjectNode_upperBound->setType(get_UML_ValueSpecification());
	uML_ObjectNode_upperBound->setLower(0);
	uML_ObjectNode_upperBound->setUpper(1);
	uML_ObjectNode->getOwnedAttribute()->push_back(uML_ObjectNode_upperBound);
	uML_ObjectNode_upperBound->setClass(uML_ObjectNode);
	
	
	
	
	


	uML_Observation.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Observation->setName("Observation");
	uML_Observation->setIsAbstract(true);
	uML_Observation->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Observation);
	
	//constraints
	
	
	
	
	


	uML_OccurrenceSpecification.reset(uml::UmlFactory::eInstance()->createClass());
	uML_OccurrenceSpecification->setName("OccurrenceSpecification");
	uML_OccurrenceSpecification->setIsAbstract(false);
	uML_OccurrenceSpecification->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_OccurrenceSpecification);
	
	//constraints
	
	
	uML_OccurrenceSpecification_covered.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_OccurrenceSpecification_covered->setName("covered");
	uML_OccurrenceSpecification_covered->setType(get_UML_Lifeline());
	uML_OccurrenceSpecification_covered->setLower(1);
	uML_OccurrenceSpecification_covered->setUpper(1);
	uML_OccurrenceSpecification->getOwnedAttribute()->push_back(uML_OccurrenceSpecification_covered);
	uML_OccurrenceSpecification_covered->setClass(uML_OccurrenceSpecification);
	
	
	uML_OccurrenceSpecification_toAfter.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_OccurrenceSpecification_toAfter->setName("toAfter");
	uML_OccurrenceSpecification_toAfter->setType(get_UML_GeneralOrdering());
	uML_OccurrenceSpecification_toAfter->setLower(0);
	uML_OccurrenceSpecification_toAfter->setUpper(-1);
	uML_OccurrenceSpecification->getOwnedAttribute()->push_back(uML_OccurrenceSpecification_toAfter);
	uML_OccurrenceSpecification_toAfter->setClass(uML_OccurrenceSpecification);
	
	
	uML_OccurrenceSpecification_toBefore.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_OccurrenceSpecification_toBefore->setName("toBefore");
	uML_OccurrenceSpecification_toBefore->setType(get_UML_GeneralOrdering());
	uML_OccurrenceSpecification_toBefore->setLower(0);
	uML_OccurrenceSpecification_toBefore->setUpper(-1);
	uML_OccurrenceSpecification->getOwnedAttribute()->push_back(uML_OccurrenceSpecification_toBefore);
	uML_OccurrenceSpecification_toBefore->setClass(uML_OccurrenceSpecification);
	
	
	
	uML_OccurrenceSpecification_getCovered_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_OccurrenceSpecification_getCovered_->setName("getCovered");
	uML_OccurrenceSpecification_getCovered__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_OccurrenceSpecification_getCovered__return->setName("");
	uML_OccurrenceSpecification_getCovered__return->setType(get_UML_Lifeline());
	uML_OccurrenceSpecification_getCovered__return->setLower(0);
	uML_OccurrenceSpecification_getCovered__return->setUpper(1);
	uML_OccurrenceSpecification_getCovered__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_OccurrenceSpecification_getCovered_->getOwnedParameter()->push_back(uML_OccurrenceSpecification_getCovered__return);
	
	
	uML_OccurrenceSpecification->getOwnedOperation()->push_back(uML_OccurrenceSpecification_getCovered_); 
	uML_OccurrenceSpecification_setCovered_Lifeline.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_OccurrenceSpecification_setCovered_Lifeline->setName("setCovered");
	uML_OccurrenceSpecification_setCovered_Lifeline_UML_OccurrenceSpecification_setCovered_value.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_OccurrenceSpecification_setCovered_Lifeline_UML_OccurrenceSpecification_setCovered_value->setName("value");
	uML_OccurrenceSpecification_setCovered_Lifeline_UML_OccurrenceSpecification_setCovered_value->setType(get_UML_Lifeline());
	uML_OccurrenceSpecification_setCovered_Lifeline_UML_OccurrenceSpecification_setCovered_value->setLower(1);
	uML_OccurrenceSpecification_setCovered_Lifeline_UML_OccurrenceSpecification_setCovered_value->setUpper(1);
	uML_OccurrenceSpecification_setCovered_Lifeline_UML_OccurrenceSpecification_setCovered_value->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_OccurrenceSpecification_setCovered_Lifeline->getOwnedParameter()->push_back(uML_OccurrenceSpecification_setCovered_Lifeline_UML_OccurrenceSpecification_setCovered_value);
	
	
	uML_OccurrenceSpecification->getOwnedOperation()->push_back(uML_OccurrenceSpecification_setCovered_Lifeline); 
	
	


	uML_OpaqueAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_OpaqueAction->setName("OpaqueAction");
	uML_OpaqueAction->setIsAbstract(false);
	uML_OpaqueAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_OpaqueAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("language_body_size");
	con->getConstrainedElement()->push_back(uML_OpaqueAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("language->notEmpty() implies (_'body'->size() = language->size())");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_OpaqueAction->getOwnedRule()->push_back(con);
	con->setContext(uML_OpaqueAction->getNamespace());
	
	
	uML_OpaqueAction_body.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_OpaqueAction_body->setName("body");
	uML_OpaqueAction_body->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_OpaqueAction_body->setLower(0);
	uML_OpaqueAction_body->setUpper(-1);
	uML_OpaqueAction->getOwnedAttribute()->push_back(uML_OpaqueAction_body);
	uML_OpaqueAction_body->setClass(uML_OpaqueAction);
	
	
	uML_OpaqueAction_inputValue.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_OpaqueAction_inputValue->setName("inputValue");
	uML_OpaqueAction_inputValue->setType(get_UML_InputPin());
	uML_OpaqueAction_inputValue->setLower(0);
	uML_OpaqueAction_inputValue->setUpper(-1);
	uML_OpaqueAction->getOwnedAttribute()->push_back(uML_OpaqueAction_inputValue);
	uML_OpaqueAction_inputValue->setClass(uML_OpaqueAction);
	
	
	uML_OpaqueAction_language.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_OpaqueAction_language->setName("language");
	uML_OpaqueAction_language->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_OpaqueAction_language->setLower(0);
	uML_OpaqueAction_language->setUpper(-1);
	uML_OpaqueAction->getOwnedAttribute()->push_back(uML_OpaqueAction_language);
	uML_OpaqueAction_language->setClass(uML_OpaqueAction);
	
	
	uML_OpaqueAction_outputValue.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_OpaqueAction_outputValue->setName("outputValue");
	uML_OpaqueAction_outputValue->setType(get_UML_OutputPin());
	uML_OpaqueAction_outputValue->setLower(0);
	uML_OpaqueAction_outputValue->setUpper(-1);
	uML_OpaqueAction->getOwnedAttribute()->push_back(uML_OpaqueAction_outputValue);
	uML_OpaqueAction_outputValue->setClass(uML_OpaqueAction);
	
	
	
	
	


	uML_OpaqueBehavior.reset(uml::UmlFactory::eInstance()->createClass());
	uML_OpaqueBehavior->setName("OpaqueBehavior");
	uML_OpaqueBehavior->setIsAbstract(false);
	uML_OpaqueBehavior->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_OpaqueBehavior);
	
	//constraints
	
	
	uML_OpaqueBehavior_body.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_OpaqueBehavior_body->setName("body");
	uML_OpaqueBehavior_body->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_OpaqueBehavior_body->setLower(0);
	uML_OpaqueBehavior_body->setUpper(-1);
	uML_OpaqueBehavior->getOwnedAttribute()->push_back(uML_OpaqueBehavior_body);
	uML_OpaqueBehavior_body->setClass(uML_OpaqueBehavior);
	
	
	uML_OpaqueBehavior_language.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_OpaqueBehavior_language->setName("language");
	uML_OpaqueBehavior_language->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_OpaqueBehavior_language->setLower(0);
	uML_OpaqueBehavior_language->setUpper(-1);
	uML_OpaqueBehavior->getOwnedAttribute()->push_back(uML_OpaqueBehavior_language);
	uML_OpaqueBehavior_language->setClass(uML_OpaqueBehavior);
	
	
	
	
	


	uML_OpaqueExpression.reset(uml::UmlFactory::eInstance()->createClass());
	uML_OpaqueExpression->setName("OpaqueExpression");
	uML_OpaqueExpression->setIsAbstract(false);
	uML_OpaqueExpression->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_OpaqueExpression);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("one_return_result_parameter");
	con->getConstrainedElement()->push_back(uML_OpaqueExpression);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("behavior <> null implies"\
	"   behavior.ownedParameter->select(direction=ParameterDirectionKind::return)->size() = 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_OpaqueExpression->getOwnedRule()->push_back(con);
	con->setContext(uML_OpaqueExpression->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("only_return_result_parameters");
	con->getConstrainedElement()->push_back(uML_OpaqueExpression);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("behavior <> null implies behavior.ownedParameter->select(direction<>ParameterDirectionKind::return)->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_OpaqueExpression->getOwnedRule()->push_back(con);
	con->setContext(uML_OpaqueExpression->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("language_body_size");
	con->getConstrainedElement()->push_back(uML_OpaqueExpression);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("language->notEmpty() implies (_'body'->size() = language->size())");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_OpaqueExpression->getOwnedRule()->push_back(con);
	con->setContext(uML_OpaqueExpression->getNamespace());
	
	
	uML_OpaqueExpression_behavior.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_OpaqueExpression_behavior->setName("behavior");
	uML_OpaqueExpression_behavior->setType(get_UML_Behavior());
	uML_OpaqueExpression_behavior->setLower(0);
	uML_OpaqueExpression_behavior->setUpper(1);
	uML_OpaqueExpression->getOwnedAttribute()->push_back(uML_OpaqueExpression_behavior);
	uML_OpaqueExpression_behavior->setClass(uML_OpaqueExpression);
	
	
	uML_OpaqueExpression_body.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_OpaqueExpression_body->setName("body");
	uML_OpaqueExpression_body->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_OpaqueExpression_body->setLower(0);
	uML_OpaqueExpression_body->setUpper(-1);
	uML_OpaqueExpression->getOwnedAttribute()->push_back(uML_OpaqueExpression_body);
	uML_OpaqueExpression_body->setClass(uML_OpaqueExpression);
	
	
	uML_OpaqueExpression_language.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_OpaqueExpression_language->setName("language");
	uML_OpaqueExpression_language->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_OpaqueExpression_language->setLower(0);
	uML_OpaqueExpression_language->setUpper(-1);
	uML_OpaqueExpression->getOwnedAttribute()->push_back(uML_OpaqueExpression_language);
	uML_OpaqueExpression_language->setClass(uML_OpaqueExpression);
	
	
	uML_OpaqueExpression_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_OpaqueExpression_result->setName("result");
	uML_OpaqueExpression_result->setType(get_UML_Parameter());
	uML_OpaqueExpression_result->setLower(0);
	uML_OpaqueExpression_result->setUpper(1);
	uML_OpaqueExpression->getOwnedAttribute()->push_back(uML_OpaqueExpression_result);
	uML_OpaqueExpression_result->setClass(uML_OpaqueExpression);
	
	
	
	uML_OpaqueExpression_isIntegral_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_OpaqueExpression_isIntegral_->setName("isIntegral");
	uML_OpaqueExpression_isIntegral_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_OpaqueExpression_isIntegral_result->setName("result");
	uML_OpaqueExpression_isIntegral_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_OpaqueExpression_isIntegral_result->setLower(1);
	uML_OpaqueExpression_isIntegral_result->setUpper(1);
	uML_OpaqueExpression_isIntegral_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_OpaqueExpression_isIntegral_->getOwnedParameter()->push_back(uML_OpaqueExpression_isIntegral_result);
	
	
	uML_OpaqueExpression->getOwnedOperation()->push_back(uML_OpaqueExpression_isIntegral_); 
	uML_OpaqueExpression_isNonNegative_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_OpaqueExpression_isNonNegative_->setName("isNonNegative");
	uML_OpaqueExpression_isNonNegative_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_OpaqueExpression_isNonNegative_result->setName("result");
	uML_OpaqueExpression_isNonNegative_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_OpaqueExpression_isNonNegative_result->setLower(1);
	uML_OpaqueExpression_isNonNegative_result->setUpper(1);
	uML_OpaqueExpression_isNonNegative_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_OpaqueExpression_isNonNegative_->getOwnedParameter()->push_back(uML_OpaqueExpression_isNonNegative_result);
	
	
	uML_OpaqueExpression->getOwnedOperation()->push_back(uML_OpaqueExpression_isNonNegative_); 
	uML_OpaqueExpression_isPositive_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_OpaqueExpression_isPositive_->setName("isPositive");
	uML_OpaqueExpression_isPositive_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_OpaqueExpression_isPositive_result->setName("result");
	uML_OpaqueExpression_isPositive_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_OpaqueExpression_isPositive_result->setLower(1);
	uML_OpaqueExpression_isPositive_result->setUpper(1);
	uML_OpaqueExpression_isPositive_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_OpaqueExpression_isPositive_->getOwnedParameter()->push_back(uML_OpaqueExpression_isPositive_result);
	
	
	uML_OpaqueExpression->getOwnedOperation()->push_back(uML_OpaqueExpression_isPositive_); 
	uML_OpaqueExpression_result_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_OpaqueExpression_result_->setName("result");
	uML_OpaqueExpression_result_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_OpaqueExpression_result_result->setName("result");
	uML_OpaqueExpression_result_result->setType(get_UML_Parameter());
	uML_OpaqueExpression_result_result->setLower(0);
	uML_OpaqueExpression_result_result->setUpper(1);
	uML_OpaqueExpression_result_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_OpaqueExpression_result_->getOwnedParameter()->push_back(uML_OpaqueExpression_result_result);
	
	
	uML_OpaqueExpression->getOwnedOperation()->push_back(uML_OpaqueExpression_result_); 
	uML_OpaqueExpression_stringValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_OpaqueExpression_stringValue_->setName("stringValue");
	uML_OpaqueExpression_stringValue__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_OpaqueExpression_stringValue__return->setName("");
	uML_OpaqueExpression_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_OpaqueExpression_stringValue__return->setLower(1);
	uML_OpaqueExpression_stringValue__return->setUpper(1);
	uML_OpaqueExpression_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_OpaqueExpression_stringValue_->getOwnedParameter()->push_back(uML_OpaqueExpression_stringValue__return);
	
	
	uML_OpaqueExpression->getOwnedOperation()->push_back(uML_OpaqueExpression_stringValue_); 
	uML_OpaqueExpression_value_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_OpaqueExpression_value_->setName("value");
	uML_OpaqueExpression_value_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_OpaqueExpression_value_result->setName("result");
	uML_OpaqueExpression_value_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_OpaqueExpression_value_result->setLower(1);
	uML_OpaqueExpression_value_result->setUpper(1);
	uML_OpaqueExpression_value_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_OpaqueExpression_value_->getOwnedParameter()->push_back(uML_OpaqueExpression_value_result);
	
	
	uML_OpaqueExpression->getOwnedOperation()->push_back(uML_OpaqueExpression_value_); 
	
	


	uML_Operation.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Operation->setName("Operation");
	uML_Operation->setIsAbstract(false);
	uML_Operation->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Operation);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("only_body_for_query");
	con->getConstrainedElement()->push_back(uML_Operation);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("bodyCondition <> null implies isQuery");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Operation->getOwnedRule()->push_back(con);
	con->setContext(uML_Operation->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("at_most_one_return");
	con->getConstrainedElement()->push_back(uML_Operation);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.ownedParameter->select(direction = ParameterDirectionKind::return)->size() <= 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Operation->getOwnedRule()->push_back(con);
	con->setContext(uML_Operation->getNamespace());
	
	
	uML_Operation_bodyCondition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_bodyCondition->setName("bodyCondition");
	uML_Operation_bodyCondition->setType(get_UML_Constraint());
	uML_Operation_bodyCondition->setLower(0);
	uML_Operation_bodyCondition->setUpper(1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_bodyCondition);
	uML_Operation_bodyCondition->setClass(uML_Operation);
	
	
	uML_Operation_class.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_class->setName("class");
	uML_Operation_class->setType(get_UML_Class());
	uML_Operation_class->setLower(0);
	uML_Operation_class->setUpper(1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_class);
	uML_Operation_class->setClass(uML_Operation);
	
	
	uML_Operation_datatype.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_datatype->setName("datatype");
	uML_Operation_datatype->setType(get_UML_DataType());
	uML_Operation_datatype->setLower(0);
	uML_Operation_datatype->setUpper(1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_datatype);
	uML_Operation_datatype->setClass(uML_Operation);
	
	
	uML_Operation_interface.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_interface->setName("interface");
	uML_Operation_interface->setType(get_UML_Interface());
	uML_Operation_interface->setLower(0);
	uML_Operation_interface->setUpper(1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_interface);
	uML_Operation_interface->setClass(uML_Operation);
	
	
	uML_Operation_isOrdered.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_isOrdered->setName("isOrdered");
	uML_Operation_isOrdered->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_isOrdered->setLower(1);
	uML_Operation_isOrdered->setUpper(1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_isOrdered);
	uML_Operation_isOrdered->setClass(uML_Operation);
	
	
	uML_Operation_isQuery.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_isQuery->setName("isQuery");
	uML_Operation_isQuery->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_isQuery->setLower(1);
	uML_Operation_isQuery->setUpper(1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_isQuery);
	uML_Operation_isQuery->setClass(uML_Operation);
	uML_Operation_isQuery->setDefaultValue(uML_Operation_isQuery_defaultValue_LiteralBoolean_UML_Operation_isQuery);
	
	uML_Operation_isUnique.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_isUnique->setName("isUnique");
	uML_Operation_isUnique->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_isUnique->setLower(1);
	uML_Operation_isUnique->setUpper(1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_isUnique);
	uML_Operation_isUnique->setClass(uML_Operation);
	uML_Operation_isUnique->setDefaultValue(uML_Operation_isUnique_defaultValue_LiteralBoolean_UML_Operation_isUnique);
	
	uML_Operation_lower.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_lower->setName("lower");
	uML_Operation_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Operation_lower->setLower(0);
	uML_Operation_lower->setUpper(1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_lower);
	uML_Operation_lower->setClass(uML_Operation);
	uML_Operation_lower->setDefaultValue(uML_Operation_lower_defaultValue_LiteralInteger_UML_Operation_lower);
	
	uML_Operation_ownedParameter.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_ownedParameter->setName("ownedParameter");
	uML_Operation_ownedParameter->setType(get_UML_Parameter());
	uML_Operation_ownedParameter->setLower(0);
	uML_Operation_ownedParameter->setUpper(-1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_ownedParameter);
	uML_Operation_ownedParameter->setClass(uML_Operation);
	
	
	uML_Operation_postcondition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_postcondition->setName("postcondition");
	uML_Operation_postcondition->setType(get_UML_Constraint());
	uML_Operation_postcondition->setLower(0);
	uML_Operation_postcondition->setUpper(-1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_postcondition);
	uML_Operation_postcondition->setClass(uML_Operation);
	
	
	uML_Operation_precondition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_precondition->setName("precondition");
	uML_Operation_precondition->setType(get_UML_Constraint());
	uML_Operation_precondition->setLower(0);
	uML_Operation_precondition->setUpper(-1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_precondition);
	uML_Operation_precondition->setClass(uML_Operation);
	
	
	uML_Operation_raisedException.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_raisedException->setName("raisedException");
	uML_Operation_raisedException->setType(get_UML_Type());
	uML_Operation_raisedException->setLower(0);
	uML_Operation_raisedException->setUpper(-1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_raisedException);
	uML_Operation_raisedException->setClass(uML_Operation);
	
	
	uML_Operation_redefinedOperation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_redefinedOperation->setName("redefinedOperation");
	uML_Operation_redefinedOperation->setType(get_UML_Operation());
	uML_Operation_redefinedOperation->setLower(0);
	uML_Operation_redefinedOperation->setUpper(-1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_redefinedOperation);
	uML_Operation_redefinedOperation->setClass(uML_Operation);
	
	
	uML_Operation_templateParameter.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_templateParameter->setName("templateParameter");
	uML_Operation_templateParameter->setType(get_UML_OperationTemplateParameter());
	uML_Operation_templateParameter->setLower(0);
	uML_Operation_templateParameter->setUpper(1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_templateParameter);
	uML_Operation_templateParameter->setClass(uML_Operation);
	
	
	uML_Operation_type.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_type->setName("type");
	uML_Operation_type->setType(get_UML_Type());
	uML_Operation_type->setLower(0);
	uML_Operation_type->setUpper(1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_type);
	uML_Operation_type->setClass(uML_Operation);
	
	
	uML_Operation_upper.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Operation_upper->setName("upper");
	uML_Operation_upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Operation_upper->setLower(0);
	uML_Operation_upper->setUpper(1);
	uML_Operation->getOwnedAttribute()->push_back(uML_Operation_upper);
	uML_Operation_upper->setClass(uML_Operation);
	uML_Operation_upper->setDefaultValue(uML_Operation_upper_defaultValue_LiteralUnlimitedNatural_UML_Operation_upper);
	
	
	uML_Operation_getReturnResult_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Operation_getReturnResult_->setName("getReturnResult");
	uML_Operation_getReturnResult__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Operation_getReturnResult__return->setName("");
	uML_Operation_getReturnResult__return->setType(get_UML_Parameter());
	uML_Operation_getReturnResult__return->setLower(0);
	uML_Operation_getReturnResult__return->setUpper(1);
	uML_Operation_getReturnResult__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Operation_getReturnResult_->getOwnedParameter()->push_back(uML_Operation_getReturnResult__return);
	
	
	uML_Operation->getOwnedOperation()->push_back(uML_Operation_getReturnResult_); 
	uML_Operation_isConsistentWith_RedefinableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Operation_isConsistentWith_RedefinableElement->setName("isConsistentWith");
	uML_Operation_isConsistentWith_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Operation_isConsistentWith_result->setName("result");
	uML_Operation_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_isConsistentWith_result->setLower(1);
	uML_Operation_isConsistentWith_result->setUpper(1);
	uML_Operation_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Operation_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_Operation_isConsistentWith_result);
	uML_Operation_isConsistentWith_RedefinableElement_UML_Operation_isConsistentWith_redefiningElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Operation_isConsistentWith_RedefinableElement_UML_Operation_isConsistentWith_redefiningElement->setName("redefiningElement");
	uML_Operation_isConsistentWith_RedefinableElement_UML_Operation_isConsistentWith_redefiningElement->setType(get_UML_RedefinableElement());
	uML_Operation_isConsistentWith_RedefinableElement_UML_Operation_isConsistentWith_redefiningElement->setLower(1);
	uML_Operation_isConsistentWith_RedefinableElement_UML_Operation_isConsistentWith_redefiningElement->setUpper(1);
	uML_Operation_isConsistentWith_RedefinableElement_UML_Operation_isConsistentWith_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Operation_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_Operation_isConsistentWith_RedefinableElement_UML_Operation_isConsistentWith_redefiningElement);
	
	
	uML_Operation->getOwnedOperation()->push_back(uML_Operation_isConsistentWith_RedefinableElement); 
	uML_Operation_isOrdered_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Operation_isOrdered_->setName("isOrdered");
	uML_Operation_isOrdered_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Operation_isOrdered_result->setName("result");
	uML_Operation_isOrdered_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_isOrdered_result->setLower(1);
	uML_Operation_isOrdered_result->setUpper(1);
	uML_Operation_isOrdered_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Operation_isOrdered_->getOwnedParameter()->push_back(uML_Operation_isOrdered_result);
	
	
	uML_Operation->getOwnedOperation()->push_back(uML_Operation_isOrdered_); 
	uML_Operation_isUnique_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Operation_isUnique_->setName("isUnique");
	uML_Operation_isUnique_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Operation_isUnique_result->setName("result");
	uML_Operation_isUnique_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_isUnique_result->setLower(1);
	uML_Operation_isUnique_result->setUpper(1);
	uML_Operation_isUnique_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Operation_isUnique_->getOwnedParameter()->push_back(uML_Operation_isUnique_result);
	
	
	uML_Operation->getOwnedOperation()->push_back(uML_Operation_isUnique_); 
	uML_Operation_lower_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Operation_lower_->setName("lower");
	uML_Operation_lower_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Operation_lower_result->setName("result");
	uML_Operation_lower_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Operation_lower_result->setLower(1);
	uML_Operation_lower_result->setUpper(1);
	uML_Operation_lower_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Operation_lower_->getOwnedParameter()->push_back(uML_Operation_lower_result);
	
	
	uML_Operation->getOwnedOperation()->push_back(uML_Operation_lower_); 
	uML_Operation_returnResult_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Operation_returnResult_->setName("returnResult");
	uML_Operation_returnResult_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Operation_returnResult_result->setName("result");
	uML_Operation_returnResult_result->setType(get_UML_Parameter());
	uML_Operation_returnResult_result->setLower(0);
	uML_Operation_returnResult_result->setUpper(-1);
	uML_Operation_returnResult_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Operation_returnResult_->getOwnedParameter()->push_back(uML_Operation_returnResult_result);
	
	
	uML_Operation->getOwnedOperation()->push_back(uML_Operation_returnResult_); 
	uML_Operation_setIsOrdered_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Operation_setIsOrdered_Boolean->setName("setIsOrdered");
	uML_Operation_setIsOrdered_Boolean_UML_Operation_setIsOrdered_newIsOrdered.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Operation_setIsOrdered_Boolean_UML_Operation_setIsOrdered_newIsOrdered->setName("newIsOrdered");
	uML_Operation_setIsOrdered_Boolean_UML_Operation_setIsOrdered_newIsOrdered->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_setIsOrdered_Boolean_UML_Operation_setIsOrdered_newIsOrdered->setLower(1);
	uML_Operation_setIsOrdered_Boolean_UML_Operation_setIsOrdered_newIsOrdered->setUpper(1);
	uML_Operation_setIsOrdered_Boolean_UML_Operation_setIsOrdered_newIsOrdered->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Operation_setIsOrdered_Boolean->getOwnedParameter()->push_back(uML_Operation_setIsOrdered_Boolean_UML_Operation_setIsOrdered_newIsOrdered);
	
	
	uML_Operation->getOwnedOperation()->push_back(uML_Operation_setIsOrdered_Boolean); 
	uML_Operation_setIsUnique_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Operation_setIsUnique_Boolean->setName("setIsUnique");
	uML_Operation_setIsUnique_Boolean_UML_Operation_setIsUnique_newIsUnique.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Operation_setIsUnique_Boolean_UML_Operation_setIsUnique_newIsUnique->setName("newIsUnique");
	uML_Operation_setIsUnique_Boolean_UML_Operation_setIsUnique_newIsUnique->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Operation_setIsUnique_Boolean_UML_Operation_setIsUnique_newIsUnique->setLower(1);
	uML_Operation_setIsUnique_Boolean_UML_Operation_setIsUnique_newIsUnique->setUpper(1);
	uML_Operation_setIsUnique_Boolean_UML_Operation_setIsUnique_newIsUnique->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Operation_setIsUnique_Boolean->getOwnedParameter()->push_back(uML_Operation_setIsUnique_Boolean_UML_Operation_setIsUnique_newIsUnique);
	
	
	uML_Operation->getOwnedOperation()->push_back(uML_Operation_setIsUnique_Boolean); 
	uML_Operation_setLower_Integer.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Operation_setLower_Integer->setName("setLower");
	uML_Operation_setLower_Integer_UML_Operation_setLower_newLower.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Operation_setLower_Integer_UML_Operation_setLower_newLower->setName("newLower");
	uML_Operation_setLower_Integer_UML_Operation_setLower_newLower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Operation_setLower_Integer_UML_Operation_setLower_newLower->setLower(1);
	uML_Operation_setLower_Integer_UML_Operation_setLower_newLower->setUpper(1);
	uML_Operation_setLower_Integer_UML_Operation_setLower_newLower->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Operation_setLower_Integer->getOwnedParameter()->push_back(uML_Operation_setLower_Integer_UML_Operation_setLower_newLower);
	
	
	uML_Operation->getOwnedOperation()->push_back(uML_Operation_setLower_Integer); 
	uML_Operation_setType_Type.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Operation_setType_Type->setName("setType");
	uML_Operation_setType_Type_UML_Operation_setType_newType.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Operation_setType_Type_UML_Operation_setType_newType->setName("newType");
	uML_Operation_setType_Type_UML_Operation_setType_newType->setType(get_UML_Type());
	uML_Operation_setType_Type_UML_Operation_setType_newType->setLower(1);
	uML_Operation_setType_Type_UML_Operation_setType_newType->setUpper(1);
	uML_Operation_setType_Type_UML_Operation_setType_newType->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Operation_setType_Type->getOwnedParameter()->push_back(uML_Operation_setType_Type_UML_Operation_setType_newType);
	
	
	uML_Operation->getOwnedOperation()->push_back(uML_Operation_setType_Type); 
	uML_Operation_setUpper_UnlimitedNatural.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Operation_setUpper_UnlimitedNatural->setName("setUpper");
	uML_Operation_setUpper_UnlimitedNatural_UML_Operation_setUpper_newUpper.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Operation_setUpper_UnlimitedNatural_UML_Operation_setUpper_newUpper->setName("newUpper");
	uML_Operation_setUpper_UnlimitedNatural_UML_Operation_setUpper_newUpper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Operation_setUpper_UnlimitedNatural_UML_Operation_setUpper_newUpper->setLower(1);
	uML_Operation_setUpper_UnlimitedNatural_UML_Operation_setUpper_newUpper->setUpper(1);
	uML_Operation_setUpper_UnlimitedNatural_UML_Operation_setUpper_newUpper->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Operation_setUpper_UnlimitedNatural->getOwnedParameter()->push_back(uML_Operation_setUpper_UnlimitedNatural_UML_Operation_setUpper_newUpper);
	
	
	uML_Operation->getOwnedOperation()->push_back(uML_Operation_setUpper_UnlimitedNatural); 
	uML_Operation_type_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Operation_type_->setName("type");
	uML_Operation_type_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Operation_type_result->setName("result");
	uML_Operation_type_result->setType(get_UML_Type());
	uML_Operation_type_result->setLower(1);
	uML_Operation_type_result->setUpper(1);
	uML_Operation_type_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Operation_type_->getOwnedParameter()->push_back(uML_Operation_type_result);
	
	
	uML_Operation->getOwnedOperation()->push_back(uML_Operation_type_); 
	uML_Operation_upper_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Operation_upper_->setName("upper");
	uML_Operation_upper_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Operation_upper_result->setName("result");
	uML_Operation_upper_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Operation_upper_result->setLower(1);
	uML_Operation_upper_result->setUpper(1);
	uML_Operation_upper_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Operation_upper_->getOwnedParameter()->push_back(uML_Operation_upper_result);
	
	
	uML_Operation->getOwnedOperation()->push_back(uML_Operation_upper_); 
	
	


	uML_OperationTemplateParameter.reset(uml::UmlFactory::eInstance()->createClass());
	uML_OperationTemplateParameter->setName("OperationTemplateParameter");
	uML_OperationTemplateParameter->setIsAbstract(false);
	uML_OperationTemplateParameter->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_OperationTemplateParameter);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("match_default_signature");
	con->getConstrainedElement()->push_back(uML_OperationTemplateParameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("default->notEmpty() implies (default.oclIsKindOf(Operation) and (let defaultOp : Operation = default.oclAsType(Operation) in "\
	"    defaultOp.ownedParameter->size() = parameteredElement.ownedParameter->size() and"\
	"    Sequence{1.. defaultOp.ownedParameter->size()}->forAll( ix | "\
	"        let p1: Parameter = defaultOp.ownedParameter->at(ix), p2 : Parameter = parameteredElement.ownedParameter->at(ix) in"\
	"          p1.type = p2.type and p1.upper = p2.upper and p1.lower = p2.lower and p1.direction = p2.direction and p1.isOrdered = p2.isOrdered and p1.isUnique = p2.isUnique)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_OperationTemplateParameter->getOwnedRule()->push_back(con);
	con->setContext(uML_OperationTemplateParameter->getNamespace());
	
	
	uML_OperationTemplateParameter_parameteredElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_OperationTemplateParameter_parameteredElement->setName("parameteredElement");
	uML_OperationTemplateParameter_parameteredElement->setType(get_UML_Operation());
	uML_OperationTemplateParameter_parameteredElement->setLower(1);
	uML_OperationTemplateParameter_parameteredElement->setUpper(1);
	uML_OperationTemplateParameter->getOwnedAttribute()->push_back(uML_OperationTemplateParameter_parameteredElement);
	uML_OperationTemplateParameter_parameteredElement->setClass(uML_OperationTemplateParameter);
	
	
	
	
	


	uML_OutputPin.reset(uml::UmlFactory::eInstance()->createClass());
	uML_OutputPin->setName("OutputPin");
	uML_OutputPin->setIsAbstract(false);
	uML_OutputPin->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_OutputPin);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("incoming_edges_structured_only");
	con->getConstrainedElement()->push_back(uML_OutputPin);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("incoming->notEmpty() implies"\
	"	action<>null and"\
	"	action.oclIsKindOf(StructuredActivityNode) and"\
	"	action.oclAsType(StructuredActivityNode).allOwnedNodes()->includesAll(incoming.source)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_OutputPin->getOwnedRule()->push_back(con);
	con->setContext(uML_OutputPin->getNamespace());
	
	
	
	
	


	uML_Package.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Package->setName("Package");
	uML_Package->setIsAbstract(false);
	uML_Package->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Package);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("elements_public_or_private");
	con->getConstrainedElement()->push_back(uML_Package);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("packagedElement->forAll(e | e.visibility<> null implies e.visibility = VisibilityKind::public or e.visibility = VisibilityKind::private)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Package->getOwnedRule()->push_back(con);
	con->setContext(uML_Package->getNamespace());
	
	
	uML_Package_URI.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Package_URI->setName("URI");
	uML_Package_URI->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Package_URI->setLower(0);
	uML_Package_URI->setUpper(1);
	uML_Package->getOwnedAttribute()->push_back(uML_Package_URI);
	uML_Package_URI->setClass(uML_Package);
	
	
	uML_Package_nestedPackage.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Package_nestedPackage->setName("nestedPackage");
	uML_Package_nestedPackage->setType(get_UML_Package());
	uML_Package_nestedPackage->setLower(0);
	uML_Package_nestedPackage->setUpper(-1);
	uML_Package->getOwnedAttribute()->push_back(uML_Package_nestedPackage);
	uML_Package_nestedPackage->setClass(uML_Package);
	
	
	uML_Package_nestingPackage.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Package_nestingPackage->setName("nestingPackage");
	uML_Package_nestingPackage->setType(get_UML_Package());
	uML_Package_nestingPackage->setLower(0);
	uML_Package_nestingPackage->setUpper(1);
	uML_Package->getOwnedAttribute()->push_back(uML_Package_nestingPackage);
	uML_Package_nestingPackage->setClass(uML_Package);
	
	
	uML_Package_ownedStereotype.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Package_ownedStereotype->setName("ownedStereotype");
	uML_Package_ownedStereotype->setType(get_UML_Stereotype());
	uML_Package_ownedStereotype->setLower(0);
	uML_Package_ownedStereotype->setUpper(-1);
	uML_Package->getOwnedAttribute()->push_back(uML_Package_ownedStereotype);
	uML_Package_ownedStereotype->setClass(uML_Package);
	
	
	uML_Package_ownedType.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Package_ownedType->setName("ownedType");
	uML_Package_ownedType->setType(get_UML_Type());
	uML_Package_ownedType->setLower(0);
	uML_Package_ownedType->setUpper(-1);
	uML_Package->getOwnedAttribute()->push_back(uML_Package_ownedType);
	uML_Package_ownedType->setClass(uML_Package);
	
	
	uML_Package_packageMerge.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Package_packageMerge->setName("packageMerge");
	uML_Package_packageMerge->setType(get_UML_PackageMerge());
	uML_Package_packageMerge->setLower(0);
	uML_Package_packageMerge->setUpper(-1);
	uML_Package->getOwnedAttribute()->push_back(uML_Package_packageMerge);
	uML_Package_packageMerge->setClass(uML_Package);
	
	
	uML_Package_packagedElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Package_packagedElement->setName("packagedElement");
	uML_Package_packagedElement->setType(get_UML_PackageableElement());
	uML_Package_packagedElement->setLower(0);
	uML_Package_packagedElement->setUpper(-1);
	uML_Package->getOwnedAttribute()->push_back(uML_Package_packagedElement);
	uML_Package_packagedElement->setClass(uML_Package);
	
	
	uML_Package_profileApplication.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Package_profileApplication->setName("profileApplication");
	uML_Package_profileApplication->setType(get_UML_ProfileApplication());
	uML_Package_profileApplication->setLower(0);
	uML_Package_profileApplication->setUpper(-1);
	uML_Package->getOwnedAttribute()->push_back(uML_Package_profileApplication);
	uML_Package_profileApplication->setClass(uML_Package);
	
	
	
	uML_Package_allApplicableStereotypes_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_allApplicableStereotypes_->setName("allApplicableStereotypes");
	uML_Package_allApplicableStereotypes_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_allApplicableStereotypes_result->setName("result");
	uML_Package_allApplicableStereotypes_result->setType(get_UML_Stereotype());
	uML_Package_allApplicableStereotypes_result->setLower(0);
	uML_Package_allApplicableStereotypes_result->setUpper(-1);
	uML_Package_allApplicableStereotypes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_allApplicableStereotypes_->getOwnedParameter()->push_back(uML_Package_allApplicableStereotypes_result);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_allApplicableStereotypes_); 
	uML_Package_applyProfile_Profile.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_applyProfile_Profile->setName("applyProfile");
	uML_Package_applyProfile_Profile_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_applyProfile_Profile_return->setName("");
	uML_Package_applyProfile_Profile_return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EObject());
	uML_Package_applyProfile_Profile_return->setLower(0);
	uML_Package_applyProfile_Profile_return->setUpper(-1);
	uML_Package_applyProfile_Profile_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_applyProfile_Profile->getOwnedParameter()->push_back(uML_Package_applyProfile_Profile_return);
	uML_Package_applyProfile_Profile_UML_Package_applyProfile_profile.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_applyProfile_Profile_UML_Package_applyProfile_profile->setName("profile");
	uML_Package_applyProfile_Profile_UML_Package_applyProfile_profile->setType(get_UML_Profile());
	uML_Package_applyProfile_Profile_UML_Package_applyProfile_profile->setLower(1);
	uML_Package_applyProfile_Profile_UML_Package_applyProfile_profile->setUpper(1);
	uML_Package_applyProfile_Profile_UML_Package_applyProfile_profile->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_applyProfile_Profile->getOwnedParameter()->push_back(uML_Package_applyProfile_Profile_UML_Package_applyProfile_profile);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_applyProfile_Profile); 
	uML_Package_containingProfile_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_containingProfile_->setName("containingProfile");
	uML_Package_containingProfile_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_containingProfile_result->setName("result");
	uML_Package_containingProfile_result->setType(get_UML_Profile());
	uML_Package_containingProfile_result->setLower(0);
	uML_Package_containingProfile_result->setUpper(1);
	uML_Package_containingProfile_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_containingProfile_->getOwnedParameter()->push_back(uML_Package_containingProfile_result);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_containingProfile_); 
	uML_Package_createOwnedClass_String_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_createOwnedClass_String_Boolean->setName("createOwnedClass");
	uML_Package_createOwnedClass_String_Boolean_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_createOwnedClass_String_Boolean_return->setName("");
	uML_Package_createOwnedClass_String_Boolean_return->setType(get_UML_Class());
	uML_Package_createOwnedClass_String_Boolean_return->setLower(1);
	uML_Package_createOwnedClass_String_Boolean_return->setUpper(1);
	uML_Package_createOwnedClass_String_Boolean_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_createOwnedClass_String_Boolean->getOwnedParameter()->push_back(uML_Package_createOwnedClass_String_Boolean_return);
	uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_name->setName("name");
	uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_name->setLower(1);
	uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_name->setUpper(1);
	uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_createOwnedClass_String_Boolean->getOwnedParameter()->push_back(uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_name);
	uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_isAbstract.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_isAbstract->setName("isAbstract");
	uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_isAbstract->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_isAbstract->setLower(1);
	uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_isAbstract->setUpper(1);
	uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_isAbstract->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_createOwnedClass_String_Boolean->getOwnedParameter()->push_back(uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_isAbstract);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_createOwnedClass_String_Boolean); 
	uML_Package_createOwnedEnumeration_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_createOwnedEnumeration_String->setName("createOwnedEnumeration");
	uML_Package_createOwnedEnumeration_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_createOwnedEnumeration_String_return->setName("");
	uML_Package_createOwnedEnumeration_String_return->setType(get_UML_Enumeration());
	uML_Package_createOwnedEnumeration_String_return->setLower(1);
	uML_Package_createOwnedEnumeration_String_return->setUpper(1);
	uML_Package_createOwnedEnumeration_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_createOwnedEnumeration_String->getOwnedParameter()->push_back(uML_Package_createOwnedEnumeration_String_return);
	uML_Package_createOwnedEnumeration_String_UML_Package_createOwnedEnumeration_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_createOwnedEnumeration_String_UML_Package_createOwnedEnumeration_name->setName("name");
	uML_Package_createOwnedEnumeration_String_UML_Package_createOwnedEnumeration_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Package_createOwnedEnumeration_String_UML_Package_createOwnedEnumeration_name->setLower(1);
	uML_Package_createOwnedEnumeration_String_UML_Package_createOwnedEnumeration_name->setUpper(1);
	uML_Package_createOwnedEnumeration_String_UML_Package_createOwnedEnumeration_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_createOwnedEnumeration_String->getOwnedParameter()->push_back(uML_Package_createOwnedEnumeration_String_UML_Package_createOwnedEnumeration_name);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_createOwnedEnumeration_String); 
	uML_Package_createOwnedInterface_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_createOwnedInterface_String->setName("createOwnedInterface");
	uML_Package_createOwnedInterface_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_createOwnedInterface_String_return->setName("");
	uML_Package_createOwnedInterface_String_return->setType(get_UML_Interface());
	uML_Package_createOwnedInterface_String_return->setLower(1);
	uML_Package_createOwnedInterface_String_return->setUpper(1);
	uML_Package_createOwnedInterface_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_createOwnedInterface_String->getOwnedParameter()->push_back(uML_Package_createOwnedInterface_String_return);
	uML_Package_createOwnedInterface_String_UML_Package_createOwnedInterface_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_createOwnedInterface_String_UML_Package_createOwnedInterface_name->setName("name");
	uML_Package_createOwnedInterface_String_UML_Package_createOwnedInterface_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Package_createOwnedInterface_String_UML_Package_createOwnedInterface_name->setLower(1);
	uML_Package_createOwnedInterface_String_UML_Package_createOwnedInterface_name->setUpper(1);
	uML_Package_createOwnedInterface_String_UML_Package_createOwnedInterface_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_createOwnedInterface_String->getOwnedParameter()->push_back(uML_Package_createOwnedInterface_String_UML_Package_createOwnedInterface_name);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_createOwnedInterface_String); 
	uML_Package_createOwnedPrimitiveType_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_createOwnedPrimitiveType_String->setName("createOwnedPrimitiveType");
	uML_Package_createOwnedPrimitiveType_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_createOwnedPrimitiveType_String_return->setName("");
	uML_Package_createOwnedPrimitiveType_String_return->setType(get_UML_PrimitiveType());
	uML_Package_createOwnedPrimitiveType_String_return->setLower(1);
	uML_Package_createOwnedPrimitiveType_String_return->setUpper(1);
	uML_Package_createOwnedPrimitiveType_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_createOwnedPrimitiveType_String->getOwnedParameter()->push_back(uML_Package_createOwnedPrimitiveType_String_return);
	uML_Package_createOwnedPrimitiveType_String_UML_Package_createOwnedPrimitiveType_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_createOwnedPrimitiveType_String_UML_Package_createOwnedPrimitiveType_name->setName("name");
	uML_Package_createOwnedPrimitiveType_String_UML_Package_createOwnedPrimitiveType_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Package_createOwnedPrimitiveType_String_UML_Package_createOwnedPrimitiveType_name->setLower(1);
	uML_Package_createOwnedPrimitiveType_String_UML_Package_createOwnedPrimitiveType_name->setUpper(1);
	uML_Package_createOwnedPrimitiveType_String_UML_Package_createOwnedPrimitiveType_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_createOwnedPrimitiveType_String->getOwnedParameter()->push_back(uML_Package_createOwnedPrimitiveType_String_UML_Package_createOwnedPrimitiveType_name);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_createOwnedPrimitiveType_String); 
	uML_Package_createOwnedStereotype_String_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_createOwnedStereotype_String_Boolean->setName("createOwnedStereotype");
	uML_Package_createOwnedStereotype_String_Boolean_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_createOwnedStereotype_String_Boolean_return->setName("");
	uML_Package_createOwnedStereotype_String_Boolean_return->setType(get_UML_Stereotype());
	uML_Package_createOwnedStereotype_String_Boolean_return->setLower(1);
	uML_Package_createOwnedStereotype_String_Boolean_return->setUpper(1);
	uML_Package_createOwnedStereotype_String_Boolean_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_createOwnedStereotype_String_Boolean->getOwnedParameter()->push_back(uML_Package_createOwnedStereotype_String_Boolean_return);
	uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_name->setName("name");
	uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_name->setLower(1);
	uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_name->setUpper(1);
	uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_createOwnedStereotype_String_Boolean->getOwnedParameter()->push_back(uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_name);
	uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_isAbstract.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_isAbstract->setName("isAbstract");
	uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_isAbstract->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_isAbstract->setLower(1);
	uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_isAbstract->setUpper(1);
	uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_isAbstract->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_createOwnedStereotype_String_Boolean->getOwnedParameter()->push_back(uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_isAbstract);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_createOwnedStereotype_String_Boolean); 
	uML_Package_getAllAppliedProfiles_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_getAllAppliedProfiles_->setName("getAllAppliedProfiles");
	uML_Package_getAllAppliedProfiles__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_getAllAppliedProfiles__return->setName("");
	uML_Package_getAllAppliedProfiles__return->setType(get_UML_Profile());
	uML_Package_getAllAppliedProfiles__return->setLower(0);
	uML_Package_getAllAppliedProfiles__return->setUpper(-1);
	uML_Package_getAllAppliedProfiles__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_getAllAppliedProfiles_->getOwnedParameter()->push_back(uML_Package_getAllAppliedProfiles__return);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_getAllAppliedProfiles_); 
	uML_Package_getAllProfileApplications_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_getAllProfileApplications_->setName("getAllProfileApplications");
	uML_Package_getAllProfileApplications__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_getAllProfileApplications__return->setName("");
	uML_Package_getAllProfileApplications__return->setType(get_UML_ProfileApplication());
	uML_Package_getAllProfileApplications__return->setLower(0);
	uML_Package_getAllProfileApplications__return->setUpper(-1);
	uML_Package_getAllProfileApplications__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_getAllProfileApplications_->getOwnedParameter()->push_back(uML_Package_getAllProfileApplications__return);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_getAllProfileApplications_); 
	uML_Package_getAppliedProfile_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_getAppliedProfile_String->setName("getAppliedProfile");
	uML_Package_getAppliedProfile_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_getAppliedProfile_String_return->setName("");
	uML_Package_getAppliedProfile_String_return->setType(get_UML_Profile());
	uML_Package_getAppliedProfile_String_return->setLower(0);
	uML_Package_getAppliedProfile_String_return->setUpper(1);
	uML_Package_getAppliedProfile_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_getAppliedProfile_String->getOwnedParameter()->push_back(uML_Package_getAppliedProfile_String_return);
	uML_Package_getAppliedProfile_String_UML_Package_getAppliedProfile_qualifiedName.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_getAppliedProfile_String_UML_Package_getAppliedProfile_qualifiedName->setName("qualifiedName");
	uML_Package_getAppliedProfile_String_UML_Package_getAppliedProfile_qualifiedName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Package_getAppliedProfile_String_UML_Package_getAppliedProfile_qualifiedName->setLower(1);
	uML_Package_getAppliedProfile_String_UML_Package_getAppliedProfile_qualifiedName->setUpper(1);
	uML_Package_getAppliedProfile_String_UML_Package_getAppliedProfile_qualifiedName->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_getAppliedProfile_String->getOwnedParameter()->push_back(uML_Package_getAppliedProfile_String_UML_Package_getAppliedProfile_qualifiedName);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_getAppliedProfile_String); 
	uML_Package_getAppliedProfile_String_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_getAppliedProfile_String_Boolean->setName("getAppliedProfile");
	uML_Package_getAppliedProfile_String_Boolean_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_getAppliedProfile_String_Boolean_return->setName("");
	uML_Package_getAppliedProfile_String_Boolean_return->setType(get_UML_Profile());
	uML_Package_getAppliedProfile_String_Boolean_return->setLower(0);
	uML_Package_getAppliedProfile_String_Boolean_return->setUpper(1);
	uML_Package_getAppliedProfile_String_Boolean_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_getAppliedProfile_String_Boolean->getOwnedParameter()->push_back(uML_Package_getAppliedProfile_String_Boolean_return);
	uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_qualifiedName.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_qualifiedName->setName("qualifiedName");
	uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_qualifiedName->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_qualifiedName->setLower(1);
	uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_qualifiedName->setUpper(1);
	uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_qualifiedName->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_getAppliedProfile_String_Boolean->getOwnedParameter()->push_back(uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_qualifiedName);
	uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_recurse.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_recurse->setName("recurse");
	uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_recurse->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_recurse->setLower(1);
	uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_recurse->setUpper(1);
	uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_recurse->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_getAppliedProfile_String_Boolean->getOwnedParameter()->push_back(uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_recurse);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_getAppliedProfile_String_Boolean); 
	uML_Package_getAppliedProfiles_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_getAppliedProfiles_->setName("getAppliedProfiles");
	uML_Package_getAppliedProfiles__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_getAppliedProfiles__return->setName("");
	uML_Package_getAppliedProfiles__return->setType(get_UML_Profile());
	uML_Package_getAppliedProfiles__return->setLower(0);
	uML_Package_getAppliedProfiles__return->setUpper(-1);
	uML_Package_getAppliedProfiles__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_getAppliedProfiles_->getOwnedParameter()->push_back(uML_Package_getAppliedProfiles__return);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_getAppliedProfiles_); 
	uML_Package_getProfileApplication_Profile.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_getProfileApplication_Profile->setName("getProfileApplication");
	uML_Package_getProfileApplication_Profile_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_getProfileApplication_Profile_return->setName("");
	uML_Package_getProfileApplication_Profile_return->setType(get_UML_ProfileApplication());
	uML_Package_getProfileApplication_Profile_return->setLower(0);
	uML_Package_getProfileApplication_Profile_return->setUpper(1);
	uML_Package_getProfileApplication_Profile_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_getProfileApplication_Profile->getOwnedParameter()->push_back(uML_Package_getProfileApplication_Profile_return);
	uML_Package_getProfileApplication_Profile_UML_Package_getProfileApplication_profile.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_getProfileApplication_Profile_UML_Package_getProfileApplication_profile->setName("profile");
	uML_Package_getProfileApplication_Profile_UML_Package_getProfileApplication_profile->setType(get_UML_Profile());
	uML_Package_getProfileApplication_Profile_UML_Package_getProfileApplication_profile->setLower(1);
	uML_Package_getProfileApplication_Profile_UML_Package_getProfileApplication_profile->setUpper(1);
	uML_Package_getProfileApplication_Profile_UML_Package_getProfileApplication_profile->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_getProfileApplication_Profile->getOwnedParameter()->push_back(uML_Package_getProfileApplication_Profile_UML_Package_getProfileApplication_profile);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_getProfileApplication_Profile); 
	uML_Package_getProfileApplication_Profile_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_getProfileApplication_Profile_Boolean->setName("getProfileApplication");
	uML_Package_getProfileApplication_Profile_Boolean_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_getProfileApplication_Profile_Boolean_return->setName("");
	uML_Package_getProfileApplication_Profile_Boolean_return->setType(get_UML_ProfileApplication());
	uML_Package_getProfileApplication_Profile_Boolean_return->setLower(0);
	uML_Package_getProfileApplication_Profile_Boolean_return->setUpper(1);
	uML_Package_getProfileApplication_Profile_Boolean_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_getProfileApplication_Profile_Boolean->getOwnedParameter()->push_back(uML_Package_getProfileApplication_Profile_Boolean_return);
	uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_profile.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_profile->setName("profile");
	uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_profile->setType(get_UML_Profile());
	uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_profile->setLower(1);
	uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_profile->setUpper(1);
	uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_profile->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_getProfileApplication_Profile_Boolean->getOwnedParameter()->push_back(uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_profile);
	uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_recurse.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_recurse->setName("recurse");
	uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_recurse->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_recurse->setLower(1);
	uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_recurse->setUpper(1);
	uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_recurse->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_getProfileApplication_Profile_Boolean->getOwnedParameter()->push_back(uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_recurse);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_getProfileApplication_Profile_Boolean); 
	uML_Package_isModelLibrary_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_isModelLibrary_->setName("isModelLibrary");
	uML_Package_isModelLibrary__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_isModelLibrary__return->setName("");
	uML_Package_isModelLibrary__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Package_isModelLibrary__return->setLower(1);
	uML_Package_isModelLibrary__return->setUpper(1);
	uML_Package_isModelLibrary__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_isModelLibrary_->getOwnedParameter()->push_back(uML_Package_isModelLibrary__return);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_isModelLibrary_); 
	uML_Package_isProfileApplied_Profile.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_isProfileApplied_Profile->setName("isProfileApplied");
	uML_Package_isProfileApplied_Profile_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_isProfileApplied_Profile_return->setName("");
	uML_Package_isProfileApplied_Profile_return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Package_isProfileApplied_Profile_return->setLower(1);
	uML_Package_isProfileApplied_Profile_return->setUpper(1);
	uML_Package_isProfileApplied_Profile_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_isProfileApplied_Profile->getOwnedParameter()->push_back(uML_Package_isProfileApplied_Profile_return);
	uML_Package_isProfileApplied_Profile_UML_Package_isProfileApplied_profile.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_isProfileApplied_Profile_UML_Package_isProfileApplied_profile->setName("profile");
	uML_Package_isProfileApplied_Profile_UML_Package_isProfileApplied_profile->setType(get_UML_Profile());
	uML_Package_isProfileApplied_Profile_UML_Package_isProfileApplied_profile->setLower(1);
	uML_Package_isProfileApplied_Profile_UML_Package_isProfileApplied_profile->setUpper(1);
	uML_Package_isProfileApplied_Profile_UML_Package_isProfileApplied_profile->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_isProfileApplied_Profile->getOwnedParameter()->push_back(uML_Package_isProfileApplied_Profile_UML_Package_isProfileApplied_profile);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_isProfileApplied_Profile); 
	uML_Package_makesVisible_NamedElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_makesVisible_NamedElement->setName("makesVisible");
	uML_Package_makesVisible_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_makesVisible_result->setName("result");
	uML_Package_makesVisible_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Package_makesVisible_result->setLower(1);
	uML_Package_makesVisible_result->setUpper(1);
	uML_Package_makesVisible_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_makesVisible_NamedElement->getOwnedParameter()->push_back(uML_Package_makesVisible_result);
	uML_Package_makesVisible_NamedElement_UML_Package_makesVisible_el.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_makesVisible_NamedElement_UML_Package_makesVisible_el->setName("el");
	uML_Package_makesVisible_NamedElement_UML_Package_makesVisible_el->setType(get_UML_NamedElement());
	uML_Package_makesVisible_NamedElement_UML_Package_makesVisible_el->setLower(1);
	uML_Package_makesVisible_NamedElement_UML_Package_makesVisible_el->setUpper(1);
	uML_Package_makesVisible_NamedElement_UML_Package_makesVisible_el->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_makesVisible_NamedElement->getOwnedParameter()->push_back(uML_Package_makesVisible_NamedElement_UML_Package_makesVisible_el);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_makesVisible_NamedElement); 
	uML_Package_mustBeOwned_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_mustBeOwned_->setName("mustBeOwned");
	uML_Package_mustBeOwned_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_mustBeOwned_result->setName("result");
	uML_Package_mustBeOwned_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Package_mustBeOwned_result->setLower(1);
	uML_Package_mustBeOwned_result->setUpper(1);
	uML_Package_mustBeOwned_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_mustBeOwned_->getOwnedParameter()->push_back(uML_Package_mustBeOwned_result);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_mustBeOwned_); 
	uML_Package_nestedPackage_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_nestedPackage_->setName("nestedPackage");
	uML_Package_nestedPackage_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_nestedPackage_result->setName("result");
	uML_Package_nestedPackage_result->setType(get_UML_Package());
	uML_Package_nestedPackage_result->setLower(0);
	uML_Package_nestedPackage_result->setUpper(-1);
	uML_Package_nestedPackage_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_nestedPackage_->getOwnedParameter()->push_back(uML_Package_nestedPackage_result);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_nestedPackage_); 
	uML_Package_ownedStereotype_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_ownedStereotype_->setName("ownedStereotype");
	uML_Package_ownedStereotype_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_ownedStereotype_result->setName("result");
	uML_Package_ownedStereotype_result->setType(get_UML_Stereotype());
	uML_Package_ownedStereotype_result->setLower(0);
	uML_Package_ownedStereotype_result->setUpper(-1);
	uML_Package_ownedStereotype_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_ownedStereotype_->getOwnedParameter()->push_back(uML_Package_ownedStereotype_result);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_ownedStereotype_); 
	uML_Package_ownedType_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_ownedType_->setName("ownedType");
	uML_Package_ownedType_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_ownedType_result->setName("result");
	uML_Package_ownedType_result->setType(get_UML_Type());
	uML_Package_ownedType_result->setLower(0);
	uML_Package_ownedType_result->setUpper(-1);
	uML_Package_ownedType_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_ownedType_->getOwnedParameter()->push_back(uML_Package_ownedType_result);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_ownedType_); 
	uML_Package_unapplyProfile_Profile.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_unapplyProfile_Profile->setName("unapplyProfile");
	uML_Package_unapplyProfile_Profile_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_unapplyProfile_Profile_return->setName("");
	uML_Package_unapplyProfile_Profile_return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EObject());
	uML_Package_unapplyProfile_Profile_return->setLower(0);
	uML_Package_unapplyProfile_Profile_return->setUpper(-1);
	uML_Package_unapplyProfile_Profile_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_unapplyProfile_Profile->getOwnedParameter()->push_back(uML_Package_unapplyProfile_Profile_return);
	uML_Package_unapplyProfile_Profile_UML_Package_unapplyProfile_profile.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_unapplyProfile_Profile_UML_Package_unapplyProfile_profile->setName("profile");
	uML_Package_unapplyProfile_Profile_UML_Package_unapplyProfile_profile->setType(get_UML_Profile());
	uML_Package_unapplyProfile_Profile_UML_Package_unapplyProfile_profile->setLower(1);
	uML_Package_unapplyProfile_Profile_UML_Package_unapplyProfile_profile->setUpper(1);
	uML_Package_unapplyProfile_Profile_UML_Package_unapplyProfile_profile->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Package_unapplyProfile_Profile->getOwnedParameter()->push_back(uML_Package_unapplyProfile_Profile_UML_Package_unapplyProfile_profile);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_unapplyProfile_Profile); 
	uML_Package_visibleMembers_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Package_visibleMembers_->setName("visibleMembers");
	uML_Package_visibleMembers_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Package_visibleMembers_result->setName("result");
	uML_Package_visibleMembers_result->setType(get_UML_PackageableElement());
	uML_Package_visibleMembers_result->setLower(0);
	uML_Package_visibleMembers_result->setUpper(-1);
	uML_Package_visibleMembers_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Package_visibleMembers_->getOwnedParameter()->push_back(uML_Package_visibleMembers_result);
	
	
	uML_Package->getOwnedOperation()->push_back(uML_Package_visibleMembers_); 
	
	


	uML_PackageImport.reset(uml::UmlFactory::eInstance()->createClass());
	uML_PackageImport->setName("PackageImport");
	uML_PackageImport->setIsAbstract(false);
	uML_PackageImport->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_PackageImport);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("public_or_private");
	con->getConstrainedElement()->push_back(uML_PackageImport);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("visibility = VisibilityKind::public or visibility = VisibilityKind::private");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_PackageImport->getOwnedRule()->push_back(con);
	con->setContext(uML_PackageImport->getNamespace());
	
	
	uML_PackageImport_importedPackage.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_PackageImport_importedPackage->setName("importedPackage");
	uML_PackageImport_importedPackage->setType(get_UML_Package());
	uML_PackageImport_importedPackage->setLower(1);
	uML_PackageImport_importedPackage->setUpper(1);
	uML_PackageImport->getOwnedAttribute()->push_back(uML_PackageImport_importedPackage);
	uML_PackageImport_importedPackage->setClass(uML_PackageImport);
	
	
	uML_PackageImport_importingNamespace.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_PackageImport_importingNamespace->setName("importingNamespace");
	uML_PackageImport_importingNamespace->setType(get_UML_Namespace());
	uML_PackageImport_importingNamespace->setLower(1);
	uML_PackageImport_importingNamespace->setUpper(1);
	uML_PackageImport->getOwnedAttribute()->push_back(uML_PackageImport_importingNamespace);
	uML_PackageImport_importingNamespace->setClass(uML_PackageImport);
	
	
	uML_PackageImport_visibility.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_PackageImport_visibility->setName("visibility");
	uML_PackageImport_visibility->setType(get_UML_VisibilityKind());
	uML_PackageImport_visibility->setLower(1);
	uML_PackageImport_visibility->setUpper(1);
	uML_PackageImport->getOwnedAttribute()->push_back(uML_PackageImport_visibility);
	uML_PackageImport_visibility->setClass(uML_PackageImport);
	uML_PackageImport_visibility->setDefaultValue(uML_PackageImport_visibility_defaultValue_InstanceValue);
	
	
	
	


	uML_PackageMerge.reset(uml::UmlFactory::eInstance()->createClass());
	uML_PackageMerge->setName("PackageMerge");
	uML_PackageMerge->setIsAbstract(false);
	uML_PackageMerge->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_PackageMerge);
	
	//constraints
	
	
	uML_PackageMerge_mergedPackage.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_PackageMerge_mergedPackage->setName("mergedPackage");
	uML_PackageMerge_mergedPackage->setType(get_UML_Package());
	uML_PackageMerge_mergedPackage->setLower(1);
	uML_PackageMerge_mergedPackage->setUpper(1);
	uML_PackageMerge->getOwnedAttribute()->push_back(uML_PackageMerge_mergedPackage);
	uML_PackageMerge_mergedPackage->setClass(uML_PackageMerge);
	
	
	uML_PackageMerge_receivingPackage.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_PackageMerge_receivingPackage->setName("receivingPackage");
	uML_PackageMerge_receivingPackage->setType(get_UML_Package());
	uML_PackageMerge_receivingPackage->setLower(1);
	uML_PackageMerge_receivingPackage->setUpper(1);
	uML_PackageMerge->getOwnedAttribute()->push_back(uML_PackageMerge_receivingPackage);
	uML_PackageMerge_receivingPackage->setClass(uML_PackageMerge);
	
	
	
	
	


	uML_PackageableElement.reset(uml::UmlFactory::eInstance()->createClass());
	uML_PackageableElement->setName("PackageableElement");
	uML_PackageableElement->setIsAbstract(true);
	uML_PackageableElement->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_PackageableElement);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("namespace_needs_visibility");
	con->getConstrainedElement()->push_back(uML_PackageableElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("visibility = null implies namespace = null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_PackageableElement->getOwnedRule()->push_back(con);
	con->setContext(uML_PackageableElement->getNamespace());
	
	
	uML_PackageableElement_visibility.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_PackageableElement_visibility->setName("visibility");
	uML_PackageableElement_visibility->setType(get_UML_VisibilityKind());
	uML_PackageableElement_visibility->setLower(0);
	uML_PackageableElement_visibility->setUpper(1);
	uML_PackageableElement->getOwnedAttribute()->push_back(uML_PackageableElement_visibility);
	uML_PackageableElement_visibility->setClass(uML_PackageableElement);
	uML_PackageableElement_visibility->setDefaultValue(uML_PackageableElement_visibility_defaultValue_InstanceValue);
	
	
	
	


	uML_Parameter.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Parameter->setName("Parameter");
	uML_Parameter->setIsAbstract(false);
	uML_Parameter->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Parameter);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("connector_end");
	con->getConstrainedElement()->push_back(uML_Parameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("end->notEmpty() implies collaboration->notEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Parameter->getOwnedRule()->push_back(con);
	con->setContext(uML_Parameter->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("stream_and_exception");
	con->getConstrainedElement()->push_back(uML_Parameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not (isException and isStream)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Parameter->getOwnedRule()->push_back(con);
	con->setContext(uML_Parameter->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("reentrant_behaviors");
	con->getConstrainedElement()->push_back(uML_Parameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(isStream and behavior <> null) implies not behavior.isReentrant");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Parameter->getOwnedRule()->push_back(con);
	con->setContext(uML_Parameter->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("not_exception");
	con->getConstrainedElement()->push_back(uML_Parameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isException implies (direction <> ParameterDirectionKind::_'in' and direction <> ParameterDirectionKind::inout)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Parameter->getOwnedRule()->push_back(con);
	con->setContext(uML_Parameter->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("in_and_out");
	con->getConstrainedElement()->push_back(uML_Parameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(effect = ParameterEffectKind::delete implies (direction = ParameterDirectionKind::_'in' or direction = ParameterDirectionKind::inout))"\
	"and"\
	"(effect = ParameterEffectKind::create implies (direction = ParameterDirectionKind::out or direction = ParameterDirectionKind::inout or direction = ParameterDirectionKind::return))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Parameter->getOwnedRule()->push_back(con);
	con->setContext(uML_Parameter->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("object_effect");
	con->getConstrainedElement()->push_back(uML_Parameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(type.oclIsKindOf(DataType)) implies (effect = null)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Parameter->getOwnedRule()->push_back(con);
	con->setContext(uML_Parameter->getNamespace());
	
	
	uML_Parameter_default.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Parameter_default->setName("default");
	uML_Parameter_default->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Parameter_default->setLower(0);
	uML_Parameter_default->setUpper(1);
	uML_Parameter->getOwnedAttribute()->push_back(uML_Parameter_default);
	uML_Parameter_default->setClass(uML_Parameter);
	
	
	uML_Parameter_defaultValue.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Parameter_defaultValue->setName("defaultValue");
	uML_Parameter_defaultValue->setType(get_UML_ValueSpecification());
	uML_Parameter_defaultValue->setLower(0);
	uML_Parameter_defaultValue->setUpper(1);
	uML_Parameter->getOwnedAttribute()->push_back(uML_Parameter_defaultValue);
	uML_Parameter_defaultValue->setClass(uML_Parameter);
	
	
	uML_Parameter_direction.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Parameter_direction->setName("direction");
	uML_Parameter_direction->setType(get_UML_ParameterDirectionKind());
	uML_Parameter_direction->setLower(1);
	uML_Parameter_direction->setUpper(1);
	uML_Parameter->getOwnedAttribute()->push_back(uML_Parameter_direction);
	uML_Parameter_direction->setClass(uML_Parameter);
	uML_Parameter_direction->setDefaultValue(uML_Parameter_direction_defaultValue_InstanceValue);
	
	uML_Parameter_effect.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Parameter_effect->setName("effect");
	uML_Parameter_effect->setType(get_UML_ParameterEffectKind());
	uML_Parameter_effect->setLower(0);
	uML_Parameter_effect->setUpper(1);
	uML_Parameter->getOwnedAttribute()->push_back(uML_Parameter_effect);
	uML_Parameter_effect->setClass(uML_Parameter);
	
	
	uML_Parameter_isException.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Parameter_isException->setName("isException");
	uML_Parameter_isException->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Parameter_isException->setLower(1);
	uML_Parameter_isException->setUpper(1);
	uML_Parameter->getOwnedAttribute()->push_back(uML_Parameter_isException);
	uML_Parameter_isException->setClass(uML_Parameter);
	uML_Parameter_isException->setDefaultValue(uML_Parameter_isException_defaultValue_LiteralBoolean_UML_Parameter_isException);
	
	uML_Parameter_isStream.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Parameter_isStream->setName("isStream");
	uML_Parameter_isStream->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Parameter_isStream->setLower(1);
	uML_Parameter_isStream->setUpper(1);
	uML_Parameter->getOwnedAttribute()->push_back(uML_Parameter_isStream);
	uML_Parameter_isStream->setClass(uML_Parameter);
	uML_Parameter_isStream->setDefaultValue(uML_Parameter_isStream_defaultValue_LiteralBoolean_UML_Parameter_isStream);
	
	uML_Parameter_operation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Parameter_operation->setName("operation");
	uML_Parameter_operation->setType(get_UML_Operation());
	uML_Parameter_operation->setLower(0);
	uML_Parameter_operation->setUpper(1);
	uML_Parameter->getOwnedAttribute()->push_back(uML_Parameter_operation);
	uML_Parameter_operation->setClass(uML_Parameter);
	
	
	uML_Parameter_parameterSet.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Parameter_parameterSet->setName("parameterSet");
	uML_Parameter_parameterSet->setType(get_UML_ParameterSet());
	uML_Parameter_parameterSet->setLower(0);
	uML_Parameter_parameterSet->setUpper(-1);
	uML_Parameter->getOwnedAttribute()->push_back(uML_Parameter_parameterSet);
	uML_Parameter_parameterSet->setClass(uML_Parameter);
	
	
	
	uML_Parameter_default_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Parameter_default_->setName("default");
	uML_Parameter_default_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Parameter_default_result->setName("result");
	uML_Parameter_default_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Parameter_default_result->setLower(0);
	uML_Parameter_default_result->setUpper(1);
	uML_Parameter_default_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Parameter_default_->getOwnedParameter()->push_back(uML_Parameter_default_result);
	
	
	uML_Parameter->getOwnedOperation()->push_back(uML_Parameter_default_); 
	uML_Parameter_isSetDefault_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Parameter_isSetDefault_->setName("isSetDefault");
	uML_Parameter_isSetDefault__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Parameter_isSetDefault__return->setName("");
	uML_Parameter_isSetDefault__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Parameter_isSetDefault__return->setLower(1);
	uML_Parameter_isSetDefault__return->setUpper(1);
	uML_Parameter_isSetDefault__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Parameter_isSetDefault_->getOwnedParameter()->push_back(uML_Parameter_isSetDefault__return);
	
	
	uML_Parameter->getOwnedOperation()->push_back(uML_Parameter_isSetDefault_); 
	uML_Parameter_setBooleanDefaultValue_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Parameter_setBooleanDefaultValue_Boolean->setName("setBooleanDefaultValue");
	uML_Parameter_setBooleanDefaultValue_Boolean_UML_Parameter_setBooleanDefaultValue_value.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Parameter_setBooleanDefaultValue_Boolean_UML_Parameter_setBooleanDefaultValue_value->setName("value");
	uML_Parameter_setBooleanDefaultValue_Boolean_UML_Parameter_setBooleanDefaultValue_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Parameter_setBooleanDefaultValue_Boolean_UML_Parameter_setBooleanDefaultValue_value->setLower(1);
	uML_Parameter_setBooleanDefaultValue_Boolean_UML_Parameter_setBooleanDefaultValue_value->setUpper(1);
	uML_Parameter_setBooleanDefaultValue_Boolean_UML_Parameter_setBooleanDefaultValue_value->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Parameter_setBooleanDefaultValue_Boolean->getOwnedParameter()->push_back(uML_Parameter_setBooleanDefaultValue_Boolean_UML_Parameter_setBooleanDefaultValue_value);
	
	
	uML_Parameter->getOwnedOperation()->push_back(uML_Parameter_setBooleanDefaultValue_Boolean); 
	uML_Parameter_setDefault_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Parameter_setDefault_String->setName("setDefault");
	uML_Parameter_setDefault_String_UML_Parameter_setDefault_newDefault.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Parameter_setDefault_String_UML_Parameter_setDefault_newDefault->setName("newDefault");
	uML_Parameter_setDefault_String_UML_Parameter_setDefault_newDefault->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Parameter_setDefault_String_UML_Parameter_setDefault_newDefault->setLower(1);
	uML_Parameter_setDefault_String_UML_Parameter_setDefault_newDefault->setUpper(1);
	uML_Parameter_setDefault_String_UML_Parameter_setDefault_newDefault->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Parameter_setDefault_String->getOwnedParameter()->push_back(uML_Parameter_setDefault_String_UML_Parameter_setDefault_newDefault);
	
	
	uML_Parameter->getOwnedOperation()->push_back(uML_Parameter_setDefault_String); 
	uML_Parameter_setIntegerDefaultValue_Integer.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Parameter_setIntegerDefaultValue_Integer->setName("setIntegerDefaultValue");
	uML_Parameter_setIntegerDefaultValue_Integer_UML_Parameter_setIntegerDefaultValue_value.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Parameter_setIntegerDefaultValue_Integer_UML_Parameter_setIntegerDefaultValue_value->setName("value");
	uML_Parameter_setIntegerDefaultValue_Integer_UML_Parameter_setIntegerDefaultValue_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Parameter_setIntegerDefaultValue_Integer_UML_Parameter_setIntegerDefaultValue_value->setLower(1);
	uML_Parameter_setIntegerDefaultValue_Integer_UML_Parameter_setIntegerDefaultValue_value->setUpper(1);
	uML_Parameter_setIntegerDefaultValue_Integer_UML_Parameter_setIntegerDefaultValue_value->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Parameter_setIntegerDefaultValue_Integer->getOwnedParameter()->push_back(uML_Parameter_setIntegerDefaultValue_Integer_UML_Parameter_setIntegerDefaultValue_value);
	
	
	uML_Parameter->getOwnedOperation()->push_back(uML_Parameter_setIntegerDefaultValue_Integer); 
	uML_Parameter_setNullDefaultValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Parameter_setNullDefaultValue_->setName("setNullDefaultValue");
	
	
	uML_Parameter->getOwnedOperation()->push_back(uML_Parameter_setNullDefaultValue_); 
	uML_Parameter_setRealDefaultValue_Real.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Parameter_setRealDefaultValue_Real->setName("setRealDefaultValue");
	uML_Parameter_setRealDefaultValue_Real_UML_Parameter_setRealDefaultValue_value.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Parameter_setRealDefaultValue_Real_UML_Parameter_setRealDefaultValue_value->setName("value");
	uML_Parameter_setRealDefaultValue_Real_UML_Parameter_setRealDefaultValue_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Real());
	uML_Parameter_setRealDefaultValue_Real_UML_Parameter_setRealDefaultValue_value->setLower(1);
	uML_Parameter_setRealDefaultValue_Real_UML_Parameter_setRealDefaultValue_value->setUpper(1);
	uML_Parameter_setRealDefaultValue_Real_UML_Parameter_setRealDefaultValue_value->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Parameter_setRealDefaultValue_Real->getOwnedParameter()->push_back(uML_Parameter_setRealDefaultValue_Real_UML_Parameter_setRealDefaultValue_value);
	
	
	uML_Parameter->getOwnedOperation()->push_back(uML_Parameter_setRealDefaultValue_Real); 
	uML_Parameter_setStringDefaultValue_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Parameter_setStringDefaultValue_String->setName("setStringDefaultValue");
	uML_Parameter_setStringDefaultValue_String_UML_Parameter_setStringDefaultValue_value.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Parameter_setStringDefaultValue_String_UML_Parameter_setStringDefaultValue_value->setName("value");
	uML_Parameter_setStringDefaultValue_String_UML_Parameter_setStringDefaultValue_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Parameter_setStringDefaultValue_String_UML_Parameter_setStringDefaultValue_value->setLower(1);
	uML_Parameter_setStringDefaultValue_String_UML_Parameter_setStringDefaultValue_value->setUpper(1);
	uML_Parameter_setStringDefaultValue_String_UML_Parameter_setStringDefaultValue_value->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Parameter_setStringDefaultValue_String->getOwnedParameter()->push_back(uML_Parameter_setStringDefaultValue_String_UML_Parameter_setStringDefaultValue_value);
	
	
	uML_Parameter->getOwnedOperation()->push_back(uML_Parameter_setStringDefaultValue_String); 
	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural->setName("setUnlimitedNaturalDefaultValue");
	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Parameter_setUnlimitedNaturalDefaultValue_value.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Parameter_setUnlimitedNaturalDefaultValue_value->setName("value");
	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Parameter_setUnlimitedNaturalDefaultValue_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Parameter_setUnlimitedNaturalDefaultValue_value->setLower(1);
	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Parameter_setUnlimitedNaturalDefaultValue_value->setUpper(1);
	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Parameter_setUnlimitedNaturalDefaultValue_value->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural->getOwnedParameter()->push_back(uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Parameter_setUnlimitedNaturalDefaultValue_value);
	
	
	uML_Parameter->getOwnedOperation()->push_back(uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural); 
	uML_Parameter_unsetDefault_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Parameter_unsetDefault_->setName("unsetDefault");
	
	
	uML_Parameter->getOwnedOperation()->push_back(uML_Parameter_unsetDefault_); 
	
	


	uML_ParameterSet.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ParameterSet->setName("ParameterSet");
	uML_ParameterSet->setIsAbstract(false);
	uML_ParameterSet->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ParameterSet);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("input");
	con->getConstrainedElement()->push_back(uML_ParameterSet);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("((parameter->exists(direction = ParameterDirectionKind::_'in')) implies "\
	"    behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::_'in' and p.parameterSet->isEmpty())->forAll(isStream))"\
	"    and"\
	"((parameter->exists(direction = ParameterDirectionKind::out)) implies "\
	"    behavioralFeature.ownedParameter->select(p | p.direction = ParameterDirectionKind::out and p.parameterSet->isEmpty())->forAll(isStream))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ParameterSet->getOwnedRule()->push_back(con);
	con->setContext(uML_ParameterSet->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("two_parameter_sets");
	con->getConstrainedElement()->push_back(uML_ParameterSet);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("parameter->forAll(parameterSet->forAll(s1, s2 | s1->size() = s2->size() implies s1.parameter->exists(p | not s2.parameter->includes(p))))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ParameterSet->getOwnedRule()->push_back(con);
	con->setContext(uML_ParameterSet->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("same_parameterized_entity");
	con->getConstrainedElement()->push_back(uML_ParameterSet);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("parameter->forAll(p1, p2 | self.owner = p1.owner and self.owner = p2.owner and p1.direction = p2.direction)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ParameterSet->getOwnedRule()->push_back(con);
	con->setContext(uML_ParameterSet->getNamespace());
	
	
	uML_ParameterSet_condition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ParameterSet_condition->setName("condition");
	uML_ParameterSet_condition->setType(get_UML_Constraint());
	uML_ParameterSet_condition->setLower(0);
	uML_ParameterSet_condition->setUpper(-1);
	uML_ParameterSet->getOwnedAttribute()->push_back(uML_ParameterSet_condition);
	uML_ParameterSet_condition->setClass(uML_ParameterSet);
	
	
	uML_ParameterSet_parameter.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ParameterSet_parameter->setName("parameter");
	uML_ParameterSet_parameter->setType(get_UML_Parameter());
	uML_ParameterSet_parameter->setLower(1);
	uML_ParameterSet_parameter->setUpper(-1);
	uML_ParameterSet->getOwnedAttribute()->push_back(uML_ParameterSet_parameter);
	uML_ParameterSet_parameter->setClass(uML_ParameterSet);
	
	
	
	
	


	uML_ParameterableElement.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ParameterableElement->setName("ParameterableElement");
	uML_ParameterableElement->setIsAbstract(true);
	uML_ParameterableElement->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ParameterableElement);
	
	//constraints
	
	
	uML_ParameterableElement_owningTemplateParameter.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ParameterableElement_owningTemplateParameter->setName("owningTemplateParameter");
	uML_ParameterableElement_owningTemplateParameter->setType(get_UML_TemplateParameter());
	uML_ParameterableElement_owningTemplateParameter->setLower(0);
	uML_ParameterableElement_owningTemplateParameter->setUpper(1);
	uML_ParameterableElement->getOwnedAttribute()->push_back(uML_ParameterableElement_owningTemplateParameter);
	uML_ParameterableElement_owningTemplateParameter->setClass(uML_ParameterableElement);
	
	
	uML_ParameterableElement_templateParameter.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ParameterableElement_templateParameter->setName("templateParameter");
	uML_ParameterableElement_templateParameter->setType(get_UML_TemplateParameter());
	uML_ParameterableElement_templateParameter->setLower(0);
	uML_ParameterableElement_templateParameter->setUpper(1);
	uML_ParameterableElement->getOwnedAttribute()->push_back(uML_ParameterableElement_templateParameter);
	uML_ParameterableElement_templateParameter->setClass(uML_ParameterableElement);
	
	
	
	uML_ParameterableElement_isCompatibleWith_ParameterableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ParameterableElement_isCompatibleWith_ParameterableElement->setName("isCompatibleWith");
	uML_ParameterableElement_isCompatibleWith_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ParameterableElement_isCompatibleWith_result->setName("result");
	uML_ParameterableElement_isCompatibleWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ParameterableElement_isCompatibleWith_result->setLower(1);
	uML_ParameterableElement_isCompatibleWith_result->setUpper(1);
	uML_ParameterableElement_isCompatibleWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ParameterableElement_isCompatibleWith_ParameterableElement->getOwnedParameter()->push_back(uML_ParameterableElement_isCompatibleWith_result);
	uML_ParameterableElement_isCompatibleWith_ParameterableElement_UML_ParameterableElement_isCompatibleWith_p.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ParameterableElement_isCompatibleWith_ParameterableElement_UML_ParameterableElement_isCompatibleWith_p->setName("p");
	uML_ParameterableElement_isCompatibleWith_ParameterableElement_UML_ParameterableElement_isCompatibleWith_p->setType(get_UML_ParameterableElement());
	uML_ParameterableElement_isCompatibleWith_ParameterableElement_UML_ParameterableElement_isCompatibleWith_p->setLower(1);
	uML_ParameterableElement_isCompatibleWith_ParameterableElement_UML_ParameterableElement_isCompatibleWith_p->setUpper(1);
	uML_ParameterableElement_isCompatibleWith_ParameterableElement_UML_ParameterableElement_isCompatibleWith_p->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_ParameterableElement_isCompatibleWith_ParameterableElement->getOwnedParameter()->push_back(uML_ParameterableElement_isCompatibleWith_ParameterableElement_UML_ParameterableElement_isCompatibleWith_p);
	
	
	uML_ParameterableElement->getOwnedOperation()->push_back(uML_ParameterableElement_isCompatibleWith_ParameterableElement); 
	uML_ParameterableElement_isTemplateParameter_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ParameterableElement_isTemplateParameter_->setName("isTemplateParameter");
	uML_ParameterableElement_isTemplateParameter_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ParameterableElement_isTemplateParameter_result->setName("result");
	uML_ParameterableElement_isTemplateParameter_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ParameterableElement_isTemplateParameter_result->setLower(1);
	uML_ParameterableElement_isTemplateParameter_result->setUpper(1);
	uML_ParameterableElement_isTemplateParameter_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ParameterableElement_isTemplateParameter_->getOwnedParameter()->push_back(uML_ParameterableElement_isTemplateParameter_result);
	
	
	uML_ParameterableElement->getOwnedOperation()->push_back(uML_ParameterableElement_isTemplateParameter_); 
	
	


	uML_PartDecomposition.reset(uml::UmlFactory::eInstance()->createClass());
	uML_PartDecomposition->setName("PartDecomposition");
	uML_PartDecomposition->setIsAbstract(false);
	uML_PartDecomposition->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_PartDecomposition);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("parts_of_internal_structures");
	con->getConstrainedElement()->push_back(uML_PartDecomposition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_PartDecomposition->getOwnedRule()->push_back(con);
	con->setContext(uML_PartDecomposition->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("assume");
	con->getConstrainedElement()->push_back(uML_PartDecomposition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_PartDecomposition->getOwnedRule()->push_back(con);
	con->setContext(uML_PartDecomposition->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("commutativity_of_decomposition");
	con->getConstrainedElement()->push_back(uML_PartDecomposition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_PartDecomposition->getOwnedRule()->push_back(con);
	con->setContext(uML_PartDecomposition->getNamespace());
	
	
	
	
	


	uML_Pin.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Pin->setName("Pin");
	uML_Pin->setIsAbstract(true);
	uML_Pin->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Pin);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("control_pins");
	con->getConstrainedElement()->push_back(uML_Pin);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isControl implies isControlType");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Pin->getOwnedRule()->push_back(con);
	con->setContext(uML_Pin->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("not_unique");
	con->getConstrainedElement()->push_back(uML_Pin);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not isUnique");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Pin->getOwnedRule()->push_back(con);
	con->setContext(uML_Pin->getNamespace());
	
	
	uML_Pin_isControl.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Pin_isControl->setName("isControl");
	uML_Pin_isControl->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Pin_isControl->setLower(1);
	uML_Pin_isControl->setUpper(1);
	uML_Pin->getOwnedAttribute()->push_back(uML_Pin_isControl);
	uML_Pin_isControl->setClass(uML_Pin);
	uML_Pin_isControl->setDefaultValue(uML_Pin_isControl_defaultValue_LiteralBoolean_UML_Pin_isControl);
	
	
	
	


	uML_Port.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Port->setName("Port");
	uML_Port->setIsAbstract(false);
	uML_Port->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Port);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("encapsulated_owner");
	con->getConstrainedElement()->push_back(uML_Port);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("owner = encapsulatedClassifier");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Port->getOwnedRule()->push_back(con);
	con->setContext(uML_Port->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("port_aggregation");
	con->getConstrainedElement()->push_back(uML_Port);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("aggregation = AggregationKind::composite");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Port->getOwnedRule()->push_back(con);
	con->setContext(uML_Port->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("default_value");
	con->getConstrainedElement()->push_back(uML_Port);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("type.oclIsKindOf(Interface) implies defaultValue->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Port->getOwnedRule()->push_back(con);
	con->setContext(uML_Port->getNamespace());
	
	
	uML_Port_isBehavior.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Port_isBehavior->setName("isBehavior");
	uML_Port_isBehavior->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Port_isBehavior->setLower(1);
	uML_Port_isBehavior->setUpper(1);
	uML_Port->getOwnedAttribute()->push_back(uML_Port_isBehavior);
	uML_Port_isBehavior->setClass(uML_Port);
	uML_Port_isBehavior->setDefaultValue(uML_Port_isBehavior_defaultValue_LiteralBoolean_UML_Port_isBehavior);
	
	uML_Port_isConjugated.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Port_isConjugated->setName("isConjugated");
	uML_Port_isConjugated->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Port_isConjugated->setLower(1);
	uML_Port_isConjugated->setUpper(1);
	uML_Port->getOwnedAttribute()->push_back(uML_Port_isConjugated);
	uML_Port_isConjugated->setClass(uML_Port);
	uML_Port_isConjugated->setDefaultValue(uML_Port_isConjugated_defaultValue_LiteralBoolean_UML_Port_isConjugated);
	
	uML_Port_isService.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Port_isService->setName("isService");
	uML_Port_isService->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Port_isService->setLower(1);
	uML_Port_isService->setUpper(1);
	uML_Port->getOwnedAttribute()->push_back(uML_Port_isService);
	uML_Port_isService->setClass(uML_Port);
	uML_Port_isService->setDefaultValue(uML_Port_isService_defaultValue_LiteralBoolean_UML_Port_isService);
	
	uML_Port_protocol.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Port_protocol->setName("protocol");
	uML_Port_protocol->setType(get_UML_ProtocolStateMachine());
	uML_Port_protocol->setLower(0);
	uML_Port_protocol->setUpper(1);
	uML_Port->getOwnedAttribute()->push_back(uML_Port_protocol);
	uML_Port_protocol->setClass(uML_Port);
	
	
	uML_Port_provided.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Port_provided->setName("provided");
	uML_Port_provided->setType(get_UML_Interface());
	uML_Port_provided->setLower(0);
	uML_Port_provided->setUpper(-1);
	uML_Port->getOwnedAttribute()->push_back(uML_Port_provided);
	uML_Port_provided->setClass(uML_Port);
	
	
	uML_Port_redefinedPort.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Port_redefinedPort->setName("redefinedPort");
	uML_Port_redefinedPort->setType(get_UML_Port());
	uML_Port_redefinedPort->setLower(0);
	uML_Port_redefinedPort->setUpper(-1);
	uML_Port->getOwnedAttribute()->push_back(uML_Port_redefinedPort);
	uML_Port_redefinedPort->setClass(uML_Port);
	
	
	uML_Port_required.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Port_required->setName("required");
	uML_Port_required->setType(get_UML_Interface());
	uML_Port_required->setLower(0);
	uML_Port_required->setUpper(-1);
	uML_Port->getOwnedAttribute()->push_back(uML_Port_required);
	uML_Port_required->setClass(uML_Port);
	
	
	
	uML_Port_basicProvided_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Port_basicProvided_->setName("basicProvided");
	uML_Port_basicProvided_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Port_basicProvided_result->setName("result");
	uML_Port_basicProvided_result->setType(get_UML_Interface());
	uML_Port_basicProvided_result->setLower(0);
	uML_Port_basicProvided_result->setUpper(-1);
	uML_Port_basicProvided_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Port_basicProvided_->getOwnedParameter()->push_back(uML_Port_basicProvided_result);
	
	
	uML_Port->getOwnedOperation()->push_back(uML_Port_basicProvided_); 
	uML_Port_basicRequired_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Port_basicRequired_->setName("basicRequired");
	uML_Port_basicRequired_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Port_basicRequired_result->setName("result");
	uML_Port_basicRequired_result->setType(get_UML_Interface());
	uML_Port_basicRequired_result->setLower(0);
	uML_Port_basicRequired_result->setUpper(-1);
	uML_Port_basicRequired_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Port_basicRequired_->getOwnedParameter()->push_back(uML_Port_basicRequired_result);
	
	
	uML_Port->getOwnedOperation()->push_back(uML_Port_basicRequired_); 
	uML_Port_provided_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Port_provided_->setName("provided");
	uML_Port_provided_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Port_provided_result->setName("result");
	uML_Port_provided_result->setType(get_UML_Interface());
	uML_Port_provided_result->setLower(0);
	uML_Port_provided_result->setUpper(-1);
	uML_Port_provided_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Port_provided_->getOwnedParameter()->push_back(uML_Port_provided_result);
	
	
	uML_Port->getOwnedOperation()->push_back(uML_Port_provided_); 
	uML_Port_required_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Port_required_->setName("required");
	uML_Port_required_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Port_required_result->setName("result");
	uML_Port_required_result->setType(get_UML_Interface());
	uML_Port_required_result->setLower(0);
	uML_Port_required_result->setUpper(-1);
	uML_Port_required_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Port_required_->getOwnedParameter()->push_back(uML_Port_required_result);
	
	
	uML_Port->getOwnedOperation()->push_back(uML_Port_required_); 
	
	


	uML_PrimitiveType.reset(uml::UmlFactory::eInstance()->createClass());
	uML_PrimitiveType->setName("PrimitiveType");
	uML_PrimitiveType->setIsAbstract(false);
	uML_PrimitiveType->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_PrimitiveType);
	
	//constraints
	
	
	
	
	


	uML_Profile.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Profile->setName("Profile");
	uML_Profile->setIsAbstract(false);
	uML_Profile->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Profile);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("references_same_metamodel");
	con->getConstrainedElement()->push_back(uML_Profile);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("metamodelReference.importedPackage.elementImport.importedElement.allOwningPackages()->"\
	"  union(metaclassReference.importedElement.allOwningPackages() )->notEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Profile->getOwnedRule()->push_back(con);
	con->setContext(uML_Profile->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("metaclass_reference_not_specialized");
	con->getConstrainedElement()->push_back(uML_Profile);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("metaclassReference.importedElement->"\
	"	select(c | c.oclIsKindOf(Classifier) and"\
	"		(c.oclAsType(Classifier).allParents()->collect(namespace)->includes(self)))->isEmpty()"\
	"and "\
	"packagedElement->"\
	"    select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier).allParents())->"\
	"       intersection(metaclassReference.importedElement->select(oclIsKindOf(Classifier))->collect(oclAsType(Classifier)))->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Profile->getOwnedRule()->push_back(con);
	con->setContext(uML_Profile->getNamespace());
	
	
	uML_Profile_metaclassReference.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Profile_metaclassReference->setName("metaclassReference");
	uML_Profile_metaclassReference->setType(get_UML_ElementImport());
	uML_Profile_metaclassReference->setLower(0);
	uML_Profile_metaclassReference->setUpper(-1);
	uML_Profile->getOwnedAttribute()->push_back(uML_Profile_metaclassReference);
	uML_Profile_metaclassReference->setClass(uML_Profile);
	
	
	uML_Profile_metamodelReference.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Profile_metamodelReference->setName("metamodelReference");
	uML_Profile_metamodelReference->setType(get_UML_PackageImport());
	uML_Profile_metamodelReference->setLower(0);
	uML_Profile_metamodelReference->setUpper(-1);
	uML_Profile->getOwnedAttribute()->push_back(uML_Profile_metamodelReference);
	uML_Profile_metamodelReference->setClass(uML_Profile);
	
	
	
	uML_Profile_create_Classifier.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Profile_create_Classifier->setName("create");
	uML_Profile_create_Classifier_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Profile_create_Classifier_return->setName("");
	uML_Profile_create_Classifier_return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EObject());
	uML_Profile_create_Classifier_return->setLower(1);
	uML_Profile_create_Classifier_return->setUpper(1);
	uML_Profile_create_Classifier_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Profile_create_Classifier->getOwnedParameter()->push_back(uML_Profile_create_Classifier_return);
	uML_Profile_create_Classifier_UML_Profile_create_classifier.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Profile_create_Classifier_UML_Profile_create_classifier->setName("classifier");
	uML_Profile_create_Classifier_UML_Profile_create_classifier->setType(get_UML_Classifier());
	uML_Profile_create_Classifier_UML_Profile_create_classifier->setLower(1);
	uML_Profile_create_Classifier_UML_Profile_create_classifier->setUpper(1);
	uML_Profile_create_Classifier_UML_Profile_create_classifier->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Profile_create_Classifier->getOwnedParameter()->push_back(uML_Profile_create_Classifier_UML_Profile_create_classifier);
	
	
	uML_Profile->getOwnedOperation()->push_back(uML_Profile_create_Classifier); 
	uML_Profile_define_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Profile_define_->setName("define");
	uML_Profile_define__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Profile_define__return->setName("");
	uML_Profile_define__return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EPackage());
	uML_Profile_define__return->setLower(0);
	uML_Profile_define__return->setUpper(1);
	uML_Profile_define__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Profile_define_->getOwnedParameter()->push_back(uML_Profile_define__return);
	
	
	uML_Profile->getOwnedOperation()->push_back(uML_Profile_define_); 
	uML_Profile_getDefinition_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Profile_getDefinition_->setName("getDefinition");
	uML_Profile_getDefinition__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Profile_getDefinition__return->setName("");
	uML_Profile_getDefinition__return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EPackage());
	uML_Profile_getDefinition__return->setLower(0);
	uML_Profile_getDefinition__return->setUpper(1);
	uML_Profile_getDefinition__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Profile_getDefinition_->getOwnedParameter()->push_back(uML_Profile_getDefinition__return);
	
	
	uML_Profile->getOwnedOperation()->push_back(uML_Profile_getDefinition_); 
	uML_Profile_getDefinition_NamedElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Profile_getDefinition_NamedElement->setName("getDefinition");
	uML_Profile_getDefinition_NamedElement_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Profile_getDefinition_NamedElement_return->setName("");
	uML_Profile_getDefinition_NamedElement_return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_ENamedElement());
	uML_Profile_getDefinition_NamedElement_return->setLower(0);
	uML_Profile_getDefinition_NamedElement_return->setUpper(1);
	uML_Profile_getDefinition_NamedElement_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Profile_getDefinition_NamedElement->getOwnedParameter()->push_back(uML_Profile_getDefinition_NamedElement_return);
	uML_Profile_getDefinition_NamedElement_UML_Profile_getDefinition_namedElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Profile_getDefinition_NamedElement_UML_Profile_getDefinition_namedElement->setName("namedElement");
	uML_Profile_getDefinition_NamedElement_UML_Profile_getDefinition_namedElement->setType(get_UML_NamedElement());
	uML_Profile_getDefinition_NamedElement_UML_Profile_getDefinition_namedElement->setLower(1);
	uML_Profile_getDefinition_NamedElement_UML_Profile_getDefinition_namedElement->setUpper(1);
	uML_Profile_getDefinition_NamedElement_UML_Profile_getDefinition_namedElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Profile_getDefinition_NamedElement->getOwnedParameter()->push_back(uML_Profile_getDefinition_NamedElement_UML_Profile_getDefinition_namedElement);
	
	
	uML_Profile->getOwnedOperation()->push_back(uML_Profile_getDefinition_NamedElement); 
	uML_Profile_getOwnedExtensions_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Profile_getOwnedExtensions_Boolean->setName("getOwnedExtensions");
	uML_Profile_getOwnedExtensions_Boolean_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Profile_getOwnedExtensions_Boolean_return->setName("");
	uML_Profile_getOwnedExtensions_Boolean_return->setType(get_UML_Extension());
	uML_Profile_getOwnedExtensions_Boolean_return->setLower(0);
	uML_Profile_getOwnedExtensions_Boolean_return->setUpper(-1);
	uML_Profile_getOwnedExtensions_Boolean_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Profile_getOwnedExtensions_Boolean->getOwnedParameter()->push_back(uML_Profile_getOwnedExtensions_Boolean_return);
	uML_Profile_getOwnedExtensions_Boolean_UML_Profile_getOwnedExtensions_requiredOnly.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Profile_getOwnedExtensions_Boolean_UML_Profile_getOwnedExtensions_requiredOnly->setName("requiredOnly");
	uML_Profile_getOwnedExtensions_Boolean_UML_Profile_getOwnedExtensions_requiredOnly->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Profile_getOwnedExtensions_Boolean_UML_Profile_getOwnedExtensions_requiredOnly->setLower(1);
	uML_Profile_getOwnedExtensions_Boolean_UML_Profile_getOwnedExtensions_requiredOnly->setUpper(1);
	uML_Profile_getOwnedExtensions_Boolean_UML_Profile_getOwnedExtensions_requiredOnly->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Profile_getOwnedExtensions_Boolean->getOwnedParameter()->push_back(uML_Profile_getOwnedExtensions_Boolean_UML_Profile_getOwnedExtensions_requiredOnly);
	
	
	uML_Profile->getOwnedOperation()->push_back(uML_Profile_getOwnedExtensions_Boolean); 
	uML_Profile_getReferencedMetaclasses_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Profile_getReferencedMetaclasses_->setName("getReferencedMetaclasses");
	uML_Profile_getReferencedMetaclasses__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Profile_getReferencedMetaclasses__return->setName("");
	uML_Profile_getReferencedMetaclasses__return->setType(get_UML_Class());
	uML_Profile_getReferencedMetaclasses__return->setLower(0);
	uML_Profile_getReferencedMetaclasses__return->setUpper(-1);
	uML_Profile_getReferencedMetaclasses__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Profile_getReferencedMetaclasses_->getOwnedParameter()->push_back(uML_Profile_getReferencedMetaclasses__return);
	
	
	uML_Profile->getOwnedOperation()->push_back(uML_Profile_getReferencedMetaclasses_); 
	uML_Profile_getReferencedMetamodels_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Profile_getReferencedMetamodels_->setName("getReferencedMetamodels");
	uML_Profile_getReferencedMetamodels__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Profile_getReferencedMetamodels__return->setName("");
	uML_Profile_getReferencedMetamodels__return->setType(get_UML_Model());
	uML_Profile_getReferencedMetamodels__return->setLower(0);
	uML_Profile_getReferencedMetamodels__return->setUpper(-1);
	uML_Profile_getReferencedMetamodels__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Profile_getReferencedMetamodels_->getOwnedParameter()->push_back(uML_Profile_getReferencedMetamodels__return);
	
	
	uML_Profile->getOwnedOperation()->push_back(uML_Profile_getReferencedMetamodels_); 
	uML_Profile_isDefined_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Profile_isDefined_->setName("isDefined");
	uML_Profile_isDefined__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Profile_isDefined__return->setName("");
	uML_Profile_isDefined__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Profile_isDefined__return->setLower(1);
	uML_Profile_isDefined__return->setUpper(1);
	uML_Profile_isDefined__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Profile_isDefined_->getOwnedParameter()->push_back(uML_Profile_isDefined__return);
	
	
	uML_Profile->getOwnedOperation()->push_back(uML_Profile_isDefined_); 
	
	


	uML_ProfileApplication.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ProfileApplication->setName("ProfileApplication");
	uML_ProfileApplication->setIsAbstract(false);
	uML_ProfileApplication->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ProfileApplication);
	
	//constraints
	
	
	uML_ProfileApplication_appliedProfile.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ProfileApplication_appliedProfile->setName("appliedProfile");
	uML_ProfileApplication_appliedProfile->setType(get_UML_Profile());
	uML_ProfileApplication_appliedProfile->setLower(1);
	uML_ProfileApplication_appliedProfile->setUpper(1);
	uML_ProfileApplication->getOwnedAttribute()->push_back(uML_ProfileApplication_appliedProfile);
	uML_ProfileApplication_appliedProfile->setClass(uML_ProfileApplication);
	
	
	uML_ProfileApplication_applyingPackage.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ProfileApplication_applyingPackage->setName("applyingPackage");
	uML_ProfileApplication_applyingPackage->setType(get_UML_Package());
	uML_ProfileApplication_applyingPackage->setLower(1);
	uML_ProfileApplication_applyingPackage->setUpper(1);
	uML_ProfileApplication->getOwnedAttribute()->push_back(uML_ProfileApplication_applyingPackage);
	uML_ProfileApplication_applyingPackage->setClass(uML_ProfileApplication);
	
	
	uML_ProfileApplication_isStrict.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ProfileApplication_isStrict->setName("isStrict");
	uML_ProfileApplication_isStrict->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ProfileApplication_isStrict->setLower(1);
	uML_ProfileApplication_isStrict->setUpper(1);
	uML_ProfileApplication->getOwnedAttribute()->push_back(uML_ProfileApplication_isStrict);
	uML_ProfileApplication_isStrict->setClass(uML_ProfileApplication);
	uML_ProfileApplication_isStrict->setDefaultValue(uML_ProfileApplication_isStrict_defaultValue_LiteralBoolean_UML_ProfileApplication_isStrict);
	
	
	uML_ProfileApplication_getAppliedDefinition_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ProfileApplication_getAppliedDefinition_->setName("getAppliedDefinition");
	uML_ProfileApplication_getAppliedDefinition__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ProfileApplication_getAppliedDefinition__return->setName("");
	uML_ProfileApplication_getAppliedDefinition__return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EPackage());
	uML_ProfileApplication_getAppliedDefinition__return->setLower(0);
	uML_ProfileApplication_getAppliedDefinition__return->setUpper(1);
	uML_ProfileApplication_getAppliedDefinition__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ProfileApplication_getAppliedDefinition_->getOwnedParameter()->push_back(uML_ProfileApplication_getAppliedDefinition__return);
	
	
	uML_ProfileApplication->getOwnedOperation()->push_back(uML_ProfileApplication_getAppliedDefinition_); 
	uML_ProfileApplication_getAppliedDefinition_NamedElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ProfileApplication_getAppliedDefinition_NamedElement->setName("getAppliedDefinition");
	uML_ProfileApplication_getAppliedDefinition_NamedElement_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ProfileApplication_getAppliedDefinition_NamedElement_return->setName("");
	uML_ProfileApplication_getAppliedDefinition_NamedElement_return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_ENamedElement());
	uML_ProfileApplication_getAppliedDefinition_NamedElement_return->setLower(0);
	uML_ProfileApplication_getAppliedDefinition_NamedElement_return->setUpper(1);
	uML_ProfileApplication_getAppliedDefinition_NamedElement_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ProfileApplication_getAppliedDefinition_NamedElement->getOwnedParameter()->push_back(uML_ProfileApplication_getAppliedDefinition_NamedElement_return);
	uML_ProfileApplication_getAppliedDefinition_NamedElement_UML_ProfileApplication_getAppliedDefinition_namedElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ProfileApplication_getAppliedDefinition_NamedElement_UML_ProfileApplication_getAppliedDefinition_namedElement->setName("namedElement");
	uML_ProfileApplication_getAppliedDefinition_NamedElement_UML_ProfileApplication_getAppliedDefinition_namedElement->setType(get_UML_NamedElement());
	uML_ProfileApplication_getAppliedDefinition_NamedElement_UML_ProfileApplication_getAppliedDefinition_namedElement->setLower(1);
	uML_ProfileApplication_getAppliedDefinition_NamedElement_UML_ProfileApplication_getAppliedDefinition_namedElement->setUpper(1);
	uML_ProfileApplication_getAppliedDefinition_NamedElement_UML_ProfileApplication_getAppliedDefinition_namedElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_ProfileApplication_getAppliedDefinition_NamedElement->getOwnedParameter()->push_back(uML_ProfileApplication_getAppliedDefinition_NamedElement_UML_ProfileApplication_getAppliedDefinition_namedElement);
	
	
	uML_ProfileApplication->getOwnedOperation()->push_back(uML_ProfileApplication_getAppliedDefinition_NamedElement); 
	
	


	uML_Property.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Property->setName("Property");
	uML_Property->setIsAbstract(false);
	uML_Property->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Property);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("deployment_target");
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("deployment->notEmpty() implies owner.oclIsKindOf(Node) and Node.allInstances()->exists(n | n.part->exists(p | p = self))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Property->getOwnedRule()->push_back(con);
	con->setContext(uML_Property->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("subsetted_property_names");
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("subsettedProperty->forAll(sp | sp.name <> name)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Property->getOwnedRule()->push_back(con);
	con->setContext(uML_Property->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity_of_composite");
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isComposite and association <> null implies opposite.upperBound() <= 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Property->getOwnedRule()->push_back(con);
	con->setContext(uML_Property->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_of_opposite_end");
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(opposite->notEmpty() and owningAssociation->isEmpty()) implies classifier = opposite.type");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Property->getOwnedRule()->push_back(con);
	con->setContext(uML_Property->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("redefined_property_inherited");
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(redefinedProperty->notEmpty()) implies"\
	"  (redefinitionContext->notEmpty() and"\
	"      redefinedProperty->forAll(rp|"\
	"        ((redefinitionContext->collect(fc|"\
	"          fc.allParents()))->asSet())->collect(c| c.allFeatures())->asSet()->includes(rp)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Property->getOwnedRule()->push_back(con);
	con->setContext(uML_Property->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("qualified_is_association_end");
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("qualifier->notEmpty() implies association->notEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Property->getOwnedRule()->push_back(con);
	con->setContext(uML_Property->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("derived_union_is_read_only");
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isDerivedUnion implies isReadOnly");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Property->getOwnedRule()->push_back(con);
	con->setContext(uML_Property->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("subsetting_context_conforms");
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("subsettedProperty->notEmpty() implies  (subsettingContext()->notEmpty() and subsettingContext()->forAll (sc |    subsettedProperty->forAll(sp |      sp.subsettingContext()->exists(c | sc.conformsTo(c)))))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Property->getOwnedRule()->push_back(con);
	con->setContext(uML_Property->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("subsetting_rules");
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("subsettedProperty->forAll(sp |  self.type.conformsTo(sp.type) and    ((self.upperBound()->notEmpty() and sp.upperBound()->notEmpty()) implies      self.upperBound() <= sp.upperBound() ))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Property->getOwnedRule()->push_back(con);
	con->setContext(uML_Property->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("binding_to_attribute");
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(self.isAttribute()"\
	"and (templateParameterSubstitution->notEmpty())"\
	"implies (templateParameterSubstitution->forAll(ts |"\
	"    ts.formal.oclIsKindOf(Property)"\
	"    and ts.formal.oclAsType(Property).isAttribute())))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Property->getOwnedRule()->push_back(con);
	con->setContext(uML_Property->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("derived_union_is_derived");
	con->getConstrainedElement()->push_back(uML_Property);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isDerivedUnion implies isDerived");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Property->getOwnedRule()->push_back(con);
	con->setContext(uML_Property->getNamespace());
	
	
	uML_Property_aggregation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_aggregation->setName("aggregation");
	uML_Property_aggregation->setType(get_UML_AggregationKind());
	uML_Property_aggregation->setLower(1);
	uML_Property_aggregation->setUpper(1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_aggregation);
	uML_Property_aggregation->setClass(uML_Property);
	uML_Property_aggregation->setDefaultValue(uML_Property_aggregation_defaultValue_InstanceValue);
	
	uML_Property_association.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_association->setName("association");
	uML_Property_association->setType(get_UML_Association());
	uML_Property_association->setLower(0);
	uML_Property_association->setUpper(1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_association);
	uML_Property_association->setClass(uML_Property);
	
	
	uML_Property_associationEnd.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_associationEnd->setName("associationEnd");
	uML_Property_associationEnd->setType(get_UML_Property());
	uML_Property_associationEnd->setLower(0);
	uML_Property_associationEnd->setUpper(1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_associationEnd);
	uML_Property_associationEnd->setClass(uML_Property);
	
	
	uML_Property_class.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_class->setName("class");
	uML_Property_class->setType(get_UML_Class());
	uML_Property_class->setLower(0);
	uML_Property_class->setUpper(1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_class);
	uML_Property_class->setClass(uML_Property);
	
	
	uML_Property_datatype.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_datatype->setName("datatype");
	uML_Property_datatype->setType(get_UML_DataType());
	uML_Property_datatype->setLower(0);
	uML_Property_datatype->setUpper(1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_datatype);
	uML_Property_datatype->setClass(uML_Property);
	
	
	uML_Property_default.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_default->setName("default");
	uML_Property_default->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Property_default->setLower(0);
	uML_Property_default->setUpper(1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_default);
	uML_Property_default->setClass(uML_Property);
	
	
	uML_Property_defaultValue.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_defaultValue->setName("defaultValue");
	uML_Property_defaultValue->setType(get_UML_ValueSpecification());
	uML_Property_defaultValue->setLower(0);
	uML_Property_defaultValue->setUpper(1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_defaultValue);
	uML_Property_defaultValue->setClass(uML_Property);
	
	
	uML_Property_interface.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_interface->setName("interface");
	uML_Property_interface->setType(get_UML_Interface());
	uML_Property_interface->setLower(0);
	uML_Property_interface->setUpper(1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_interface);
	uML_Property_interface->setClass(uML_Property);
	
	
	uML_Property_isComposite.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_isComposite->setName("isComposite");
	uML_Property_isComposite->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isComposite->setLower(1);
	uML_Property_isComposite->setUpper(1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_isComposite);
	uML_Property_isComposite->setClass(uML_Property);
	uML_Property_isComposite->setDefaultValue(uML_Property_isComposite_defaultValue_LiteralBoolean_UML_Property_isComposite);
	
	uML_Property_isDerived.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_isDerived->setName("isDerived");
	uML_Property_isDerived->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isDerived->setLower(1);
	uML_Property_isDerived->setUpper(1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_isDerived);
	uML_Property_isDerived->setClass(uML_Property);
	uML_Property_isDerived->setDefaultValue(uML_Property_isDerived_defaultValue_LiteralBoolean_UML_Property_isDerived);
	
	uML_Property_isDerivedUnion.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_isDerivedUnion->setName("isDerivedUnion");
	uML_Property_isDerivedUnion->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isDerivedUnion->setLower(1);
	uML_Property_isDerivedUnion->setUpper(1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_isDerivedUnion);
	uML_Property_isDerivedUnion->setClass(uML_Property);
	uML_Property_isDerivedUnion->setDefaultValue(uML_Property_isDerivedUnion_defaultValue_LiteralBoolean_UML_Property_isDerivedUnion);
	
	uML_Property_isID.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_isID->setName("isID");
	uML_Property_isID->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isID->setLower(1);
	uML_Property_isID->setUpper(1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_isID);
	uML_Property_isID->setClass(uML_Property);
	uML_Property_isID->setDefaultValue(uML_Property_isID_defaultValue_LiteralBoolean_UML_Property_isID);
	
	uML_Property_opposite.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_opposite->setName("opposite");
	uML_Property_opposite->setType(get_UML_Property());
	uML_Property_opposite->setLower(0);
	uML_Property_opposite->setUpper(1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_opposite);
	uML_Property_opposite->setClass(uML_Property);
	
	
	uML_Property_owningAssociation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_owningAssociation->setName("owningAssociation");
	uML_Property_owningAssociation->setType(get_UML_Association());
	uML_Property_owningAssociation->setLower(0);
	uML_Property_owningAssociation->setUpper(1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_owningAssociation);
	uML_Property_owningAssociation->setClass(uML_Property);
	
	
	uML_Property_qualifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_qualifier->setName("qualifier");
	uML_Property_qualifier->setType(get_UML_Property());
	uML_Property_qualifier->setLower(0);
	uML_Property_qualifier->setUpper(-1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_qualifier);
	uML_Property_qualifier->setClass(uML_Property);
	
	
	uML_Property_redefinedProperty.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_redefinedProperty->setName("redefinedProperty");
	uML_Property_redefinedProperty->setType(get_UML_Property());
	uML_Property_redefinedProperty->setLower(0);
	uML_Property_redefinedProperty->setUpper(-1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_redefinedProperty);
	uML_Property_redefinedProperty->setClass(uML_Property);
	
	
	uML_Property_subsettedProperty.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Property_subsettedProperty->setName("subsettedProperty");
	uML_Property_subsettedProperty->setType(get_UML_Property());
	uML_Property_subsettedProperty->setLower(0);
	uML_Property_subsettedProperty->setUpper(-1);
	uML_Property->getOwnedAttribute()->push_back(uML_Property_subsettedProperty);
	uML_Property_subsettedProperty->setClass(uML_Property);
	
	
	
	uML_Property_getDefault_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_getDefault_->setName("getDefault");
	uML_Property_getDefault_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_getDefault_result->setName("result");
	uML_Property_getDefault_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Property_getDefault_result->setLower(0);
	uML_Property_getDefault_result->setUpper(1);
	uML_Property_getDefault_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Property_getDefault_->getOwnedParameter()->push_back(uML_Property_getDefault_result);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_getDefault_); 
	uML_Property_getOtherEnd_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_getOtherEnd_->setName("getOtherEnd");
	uML_Property_getOtherEnd__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_getOtherEnd__return->setName("");
	uML_Property_getOtherEnd__return->setType(get_UML_Property());
	uML_Property_getOtherEnd__return->setLower(0);
	uML_Property_getOtherEnd__return->setUpper(1);
	uML_Property_getOtherEnd__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Property_getOtherEnd_->getOwnedParameter()->push_back(uML_Property_getOtherEnd__return);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_getOtherEnd_); 
	uML_Property_isAttribute_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_isAttribute_->setName("isAttribute");
	uML_Property_isAttribute_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_isAttribute_result->setName("result");
	uML_Property_isAttribute_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isAttribute_result->setLower(1);
	uML_Property_isAttribute_result->setUpper(1);
	uML_Property_isAttribute_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Property_isAttribute_->getOwnedParameter()->push_back(uML_Property_isAttribute_result);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_isAttribute_); 
	uML_Property_isCompatibleWith_ParameterableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_isCompatibleWith_ParameterableElement->setName("isCompatibleWith");
	uML_Property_isCompatibleWith_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_isCompatibleWith_result->setName("result");
	uML_Property_isCompatibleWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isCompatibleWith_result->setLower(1);
	uML_Property_isCompatibleWith_result->setUpper(1);
	uML_Property_isCompatibleWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Property_isCompatibleWith_ParameterableElement->getOwnedParameter()->push_back(uML_Property_isCompatibleWith_result);
	uML_Property_isCompatibleWith_ParameterableElement_UML_Property_isCompatibleWith_p.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_isCompatibleWith_ParameterableElement_UML_Property_isCompatibleWith_p->setName("p");
	uML_Property_isCompatibleWith_ParameterableElement_UML_Property_isCompatibleWith_p->setType(get_UML_ParameterableElement());
	uML_Property_isCompatibleWith_ParameterableElement_UML_Property_isCompatibleWith_p->setLower(1);
	uML_Property_isCompatibleWith_ParameterableElement_UML_Property_isCompatibleWith_p->setUpper(1);
	uML_Property_isCompatibleWith_ParameterableElement_UML_Property_isCompatibleWith_p->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Property_isCompatibleWith_ParameterableElement->getOwnedParameter()->push_back(uML_Property_isCompatibleWith_ParameterableElement_UML_Property_isCompatibleWith_p);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_isCompatibleWith_ParameterableElement); 
	uML_Property_isComposite_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_isComposite_->setName("isComposite");
	uML_Property_isComposite_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_isComposite_result->setName("result");
	uML_Property_isComposite_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isComposite_result->setLower(1);
	uML_Property_isComposite_result->setUpper(1);
	uML_Property_isComposite_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Property_isComposite_->getOwnedParameter()->push_back(uML_Property_isComposite_result);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_isComposite_); 
	uML_Property_isConsistentWith_RedefinableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_isConsistentWith_RedefinableElement->setName("isConsistentWith");
	uML_Property_isConsistentWith_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_isConsistentWith_result->setName("result");
	uML_Property_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isConsistentWith_result->setLower(1);
	uML_Property_isConsistentWith_result->setUpper(1);
	uML_Property_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Property_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_Property_isConsistentWith_result);
	uML_Property_isConsistentWith_RedefinableElement_UML_Property_isConsistentWith_redefiningElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_isConsistentWith_RedefinableElement_UML_Property_isConsistentWith_redefiningElement->setName("redefiningElement");
	uML_Property_isConsistentWith_RedefinableElement_UML_Property_isConsistentWith_redefiningElement->setType(get_UML_RedefinableElement());
	uML_Property_isConsistentWith_RedefinableElement_UML_Property_isConsistentWith_redefiningElement->setLower(1);
	uML_Property_isConsistentWith_RedefinableElement_UML_Property_isConsistentWith_redefiningElement->setUpper(1);
	uML_Property_isConsistentWith_RedefinableElement_UML_Property_isConsistentWith_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Property_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_Property_isConsistentWith_RedefinableElement_UML_Property_isConsistentWith_redefiningElement);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_isConsistentWith_RedefinableElement); 
	uML_Property_isNavigable_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_isNavigable_->setName("isNavigable");
	uML_Property_isNavigable_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_isNavigable_result->setName("result");
	uML_Property_isNavigable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isNavigable_result->setLower(1);
	uML_Property_isNavigable_result->setUpper(1);
	uML_Property_isNavigable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Property_isNavigable_->getOwnedParameter()->push_back(uML_Property_isNavigable_result);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_isNavigable_); 
	uML_Property_isSetDefault_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_isSetDefault_->setName("isSetDefault");
	uML_Property_isSetDefault__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_isSetDefault__return->setName("");
	uML_Property_isSetDefault__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_isSetDefault__return->setLower(1);
	uML_Property_isSetDefault__return->setUpper(1);
	uML_Property_isSetDefault__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Property_isSetDefault_->getOwnedParameter()->push_back(uML_Property_isSetDefault__return);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_isSetDefault_); 
	uML_Property_opposite_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_opposite_->setName("opposite");
	uML_Property_opposite_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_opposite_result->setName("result");
	uML_Property_opposite_result->setType(get_UML_Property());
	uML_Property_opposite_result->setLower(0);
	uML_Property_opposite_result->setUpper(1);
	uML_Property_opposite_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Property_opposite_->getOwnedParameter()->push_back(uML_Property_opposite_result);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_opposite_); 
	uML_Property_setBooleanDefaultValue_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_setBooleanDefaultValue_Boolean->setName("setBooleanDefaultValue");
	uML_Property_setBooleanDefaultValue_Boolean_UML_Property_setBooleanDefaultValue_value.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_setBooleanDefaultValue_Boolean_UML_Property_setBooleanDefaultValue_value->setName("value");
	uML_Property_setBooleanDefaultValue_Boolean_UML_Property_setBooleanDefaultValue_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_setBooleanDefaultValue_Boolean_UML_Property_setBooleanDefaultValue_value->setLower(1);
	uML_Property_setBooleanDefaultValue_Boolean_UML_Property_setBooleanDefaultValue_value->setUpper(1);
	uML_Property_setBooleanDefaultValue_Boolean_UML_Property_setBooleanDefaultValue_value->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Property_setBooleanDefaultValue_Boolean->getOwnedParameter()->push_back(uML_Property_setBooleanDefaultValue_Boolean_UML_Property_setBooleanDefaultValue_value);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_setBooleanDefaultValue_Boolean); 
	uML_Property_setDefault_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_setDefault_String->setName("setDefault");
	uML_Property_setDefault_String_UML_Property_setDefault_newDefault.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_setDefault_String_UML_Property_setDefault_newDefault->setName("newDefault");
	uML_Property_setDefault_String_UML_Property_setDefault_newDefault->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Property_setDefault_String_UML_Property_setDefault_newDefault->setLower(1);
	uML_Property_setDefault_String_UML_Property_setDefault_newDefault->setUpper(1);
	uML_Property_setDefault_String_UML_Property_setDefault_newDefault->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Property_setDefault_String->getOwnedParameter()->push_back(uML_Property_setDefault_String_UML_Property_setDefault_newDefault);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_setDefault_String); 
	uML_Property_setIntegerDefaultValue_Integer.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_setIntegerDefaultValue_Integer->setName("setIntegerDefaultValue");
	uML_Property_setIntegerDefaultValue_Integer_UML_Property_setIntegerDefaultValue_value.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_setIntegerDefaultValue_Integer_UML_Property_setIntegerDefaultValue_value->setName("value");
	uML_Property_setIntegerDefaultValue_Integer_UML_Property_setIntegerDefaultValue_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Property_setIntegerDefaultValue_Integer_UML_Property_setIntegerDefaultValue_value->setLower(1);
	uML_Property_setIntegerDefaultValue_Integer_UML_Property_setIntegerDefaultValue_value->setUpper(1);
	uML_Property_setIntegerDefaultValue_Integer_UML_Property_setIntegerDefaultValue_value->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Property_setIntegerDefaultValue_Integer->getOwnedParameter()->push_back(uML_Property_setIntegerDefaultValue_Integer_UML_Property_setIntegerDefaultValue_value);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_setIntegerDefaultValue_Integer); 
	uML_Property_setIsComposite_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_setIsComposite_Boolean->setName("setIsComposite");
	uML_Property_setIsComposite_Boolean_UML_Property_setIsComposite_newIsComposite.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_setIsComposite_Boolean_UML_Property_setIsComposite_newIsComposite->setName("newIsComposite");
	uML_Property_setIsComposite_Boolean_UML_Property_setIsComposite_newIsComposite->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_setIsComposite_Boolean_UML_Property_setIsComposite_newIsComposite->setLower(1);
	uML_Property_setIsComposite_Boolean_UML_Property_setIsComposite_newIsComposite->setUpper(1);
	uML_Property_setIsComposite_Boolean_UML_Property_setIsComposite_newIsComposite->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Property_setIsComposite_Boolean->getOwnedParameter()->push_back(uML_Property_setIsComposite_Boolean_UML_Property_setIsComposite_newIsComposite);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_setIsComposite_Boolean); 
	uML_Property_setIsNavigable_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_setIsNavigable_Boolean->setName("setIsNavigable");
	uML_Property_setIsNavigable_Boolean_UML_Property_setIsNavigable_isNavigable.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_setIsNavigable_Boolean_UML_Property_setIsNavigable_isNavigable->setName("isNavigable");
	uML_Property_setIsNavigable_Boolean_UML_Property_setIsNavigable_isNavigable->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Property_setIsNavigable_Boolean_UML_Property_setIsNavigable_isNavigable->setLower(1);
	uML_Property_setIsNavigable_Boolean_UML_Property_setIsNavigable_isNavigable->setUpper(1);
	uML_Property_setIsNavigable_Boolean_UML_Property_setIsNavigable_isNavigable->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Property_setIsNavigable_Boolean->getOwnedParameter()->push_back(uML_Property_setIsNavigable_Boolean_UML_Property_setIsNavigable_isNavigable);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_setIsNavigable_Boolean); 
	uML_Property_setNullDefaultValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_setNullDefaultValue_->setName("setNullDefaultValue");
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_setNullDefaultValue_); 
	uML_Property_setOpposite_Property.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_setOpposite_Property->setName("setOpposite");
	uML_Property_setOpposite_Property_UML_Property_setOpposite_newOpposite.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_setOpposite_Property_UML_Property_setOpposite_newOpposite->setName("newOpposite");
	uML_Property_setOpposite_Property_UML_Property_setOpposite_newOpposite->setType(get_UML_Property());
	uML_Property_setOpposite_Property_UML_Property_setOpposite_newOpposite->setLower(1);
	uML_Property_setOpposite_Property_UML_Property_setOpposite_newOpposite->setUpper(1);
	uML_Property_setOpposite_Property_UML_Property_setOpposite_newOpposite->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Property_setOpposite_Property->getOwnedParameter()->push_back(uML_Property_setOpposite_Property_UML_Property_setOpposite_newOpposite);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_setOpposite_Property); 
	uML_Property_setRealDefaultValue_Real.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_setRealDefaultValue_Real->setName("setRealDefaultValue");
	uML_Property_setRealDefaultValue_Real_UML_Property_setRealDefaultValue_value.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_setRealDefaultValue_Real_UML_Property_setRealDefaultValue_value->setName("value");
	uML_Property_setRealDefaultValue_Real_UML_Property_setRealDefaultValue_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Real());
	uML_Property_setRealDefaultValue_Real_UML_Property_setRealDefaultValue_value->setLower(1);
	uML_Property_setRealDefaultValue_Real_UML_Property_setRealDefaultValue_value->setUpper(1);
	uML_Property_setRealDefaultValue_Real_UML_Property_setRealDefaultValue_value->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Property_setRealDefaultValue_Real->getOwnedParameter()->push_back(uML_Property_setRealDefaultValue_Real_UML_Property_setRealDefaultValue_value);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_setRealDefaultValue_Real); 
	uML_Property_setStringDefaultValue_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_setStringDefaultValue_String->setName("setStringDefaultValue");
	uML_Property_setStringDefaultValue_String_UML_Property_setStringDefaultValue_value.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_setStringDefaultValue_String_UML_Property_setStringDefaultValue_value->setName("value");
	uML_Property_setStringDefaultValue_String_UML_Property_setStringDefaultValue_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Property_setStringDefaultValue_String_UML_Property_setStringDefaultValue_value->setLower(1);
	uML_Property_setStringDefaultValue_String_UML_Property_setStringDefaultValue_value->setUpper(1);
	uML_Property_setStringDefaultValue_String_UML_Property_setStringDefaultValue_value->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Property_setStringDefaultValue_String->getOwnedParameter()->push_back(uML_Property_setStringDefaultValue_String_UML_Property_setStringDefaultValue_value);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_setStringDefaultValue_String); 
	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural->setName("setUnlimitedNaturalDefaultValue");
	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Property_setUnlimitedNaturalDefaultValue_value.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Property_setUnlimitedNaturalDefaultValue_value->setName("value");
	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Property_setUnlimitedNaturalDefaultValue_value->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Property_setUnlimitedNaturalDefaultValue_value->setLower(1);
	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Property_setUnlimitedNaturalDefaultValue_value->setUpper(1);
	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Property_setUnlimitedNaturalDefaultValue_value->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural->getOwnedParameter()->push_back(uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Property_setUnlimitedNaturalDefaultValue_value);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural); 
	uML_Property_subsettingContext_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_subsettingContext_->setName("subsettingContext");
	uML_Property_subsettingContext_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Property_subsettingContext_result->setName("result");
	uML_Property_subsettingContext_result->setType(get_UML_Type());
	uML_Property_subsettingContext_result->setLower(0);
	uML_Property_subsettingContext_result->setUpper(-1);
	uML_Property_subsettingContext_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Property_subsettingContext_->getOwnedParameter()->push_back(uML_Property_subsettingContext_result);
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_subsettingContext_); 
	uML_Property_unsetDefault_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Property_unsetDefault_->setName("unsetDefault");
	
	
	uML_Property->getOwnedOperation()->push_back(uML_Property_unsetDefault_); 
	
	


	uML_ProtocolConformance.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ProtocolConformance->setName("ProtocolConformance");
	uML_ProtocolConformance->setIsAbstract(false);
	uML_ProtocolConformance->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ProtocolConformance);
	
	//constraints
	
	
	uML_ProtocolConformance_generalMachine.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ProtocolConformance_generalMachine->setName("generalMachine");
	uML_ProtocolConformance_generalMachine->setType(get_UML_ProtocolStateMachine());
	uML_ProtocolConformance_generalMachine->setLower(1);
	uML_ProtocolConformance_generalMachine->setUpper(1);
	uML_ProtocolConformance->getOwnedAttribute()->push_back(uML_ProtocolConformance_generalMachine);
	uML_ProtocolConformance_generalMachine->setClass(uML_ProtocolConformance);
	
	
	uML_ProtocolConformance_specificMachine.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ProtocolConformance_specificMachine->setName("specificMachine");
	uML_ProtocolConformance_specificMachine->setType(get_UML_ProtocolStateMachine());
	uML_ProtocolConformance_specificMachine->setLower(1);
	uML_ProtocolConformance_specificMachine->setUpper(1);
	uML_ProtocolConformance->getOwnedAttribute()->push_back(uML_ProtocolConformance_specificMachine);
	uML_ProtocolConformance_specificMachine->setClass(uML_ProtocolConformance);
	
	
	
	
	


	uML_ProtocolStateMachine.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ProtocolStateMachine->setName("ProtocolStateMachine");
	uML_ProtocolStateMachine->setIsAbstract(false);
	uML_ProtocolStateMachine->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ProtocolStateMachine);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("protocol_transitions");
	con->getConstrainedElement()->push_back(uML_ProtocolStateMachine);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("region->forAll(r | r.transition->forAll(t | t.oclIsTypeOf(ProtocolTransition)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ProtocolStateMachine->getOwnedRule()->push_back(con);
	con->setContext(uML_ProtocolStateMachine->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("entry_exit_do");
	con->getConstrainedElement()->push_back(uML_ProtocolStateMachine);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("region->forAll(r | r.subvertex->forAll(v | v.oclIsKindOf(State) implies(v.oclAsType(State).entry->isEmpty() and v.oclAsType(State).exit->isEmpty() and v.oclAsType(State).doActivity->isEmpty())))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ProtocolStateMachine->getOwnedRule()->push_back(con);
	con->setContext(uML_ProtocolStateMachine->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("deep_or_shallow_history");
	con->getConstrainedElement()->push_back(uML_ProtocolStateMachine);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("region->forAll (r | r.subvertex->forAll (v | v.oclIsKindOf(Pseudostate) implies((v.oclAsType(Pseudostate).kind <>  PseudostateKind::deepHistory) and (v.oclAsType(Pseudostate).kind <> PseudostateKind::shallowHistory))))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ProtocolStateMachine->getOwnedRule()->push_back(con);
	con->setContext(uML_ProtocolStateMachine->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("classifier_context");
	con->getConstrainedElement()->push_back(uML_ProtocolStateMachine);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("_'context' <> null and specification = null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ProtocolStateMachine->getOwnedRule()->push_back(con);
	con->setContext(uML_ProtocolStateMachine->getNamespace());
	
	
	uML_ProtocolStateMachine_conformance.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ProtocolStateMachine_conformance->setName("conformance");
	uML_ProtocolStateMachine_conformance->setType(get_UML_ProtocolConformance());
	uML_ProtocolStateMachine_conformance->setLower(0);
	uML_ProtocolStateMachine_conformance->setUpper(-1);
	uML_ProtocolStateMachine->getOwnedAttribute()->push_back(uML_ProtocolStateMachine_conformance);
	uML_ProtocolStateMachine_conformance->setClass(uML_ProtocolStateMachine);
	
	
	
	
	


	uML_ProtocolTransition.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ProtocolTransition->setName("ProtocolTransition");
	uML_ProtocolTransition->setIsAbstract(false);
	uML_ProtocolTransition->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ProtocolTransition);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("refers_to_operation");
	con->getConstrainedElement()->push_back(uML_ProtocolTransition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("if (referred()->notEmpty() and containingStateMachine()._'context'->notEmpty()) then "\
	"    containingStateMachine()._'context'.oclAsType(BehavioredClassifier).allFeatures()->includesAll(referred())"\
	"else true endif");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ProtocolTransition->getOwnedRule()->push_back(con);
	con->setContext(uML_ProtocolTransition->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("belongs_to_psm");
	con->getConstrainedElement()->push_back(uML_ProtocolTransition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("container.belongsToPSM()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ProtocolTransition->getOwnedRule()->push_back(con);
	con->setContext(uML_ProtocolTransition->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("associated_actions");
	con->getConstrainedElement()->push_back(uML_ProtocolTransition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("effect = null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ProtocolTransition->getOwnedRule()->push_back(con);
	con->setContext(uML_ProtocolTransition->getNamespace());
	
	
	uML_ProtocolTransition_postCondition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ProtocolTransition_postCondition->setName("postCondition");
	uML_ProtocolTransition_postCondition->setType(get_UML_Constraint());
	uML_ProtocolTransition_postCondition->setLower(0);
	uML_ProtocolTransition_postCondition->setUpper(1);
	uML_ProtocolTransition->getOwnedAttribute()->push_back(uML_ProtocolTransition_postCondition);
	uML_ProtocolTransition_postCondition->setClass(uML_ProtocolTransition);
	
	
	uML_ProtocolTransition_preCondition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ProtocolTransition_preCondition->setName("preCondition");
	uML_ProtocolTransition_preCondition->setType(get_UML_Constraint());
	uML_ProtocolTransition_preCondition->setLower(0);
	uML_ProtocolTransition_preCondition->setUpper(1);
	uML_ProtocolTransition->getOwnedAttribute()->push_back(uML_ProtocolTransition_preCondition);
	uML_ProtocolTransition_preCondition->setClass(uML_ProtocolTransition);
	
	
	uML_ProtocolTransition_referred.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ProtocolTransition_referred->setName("referred");
	uML_ProtocolTransition_referred->setType(get_UML_Operation());
	uML_ProtocolTransition_referred->setLower(0);
	uML_ProtocolTransition_referred->setUpper(-1);
	uML_ProtocolTransition->getOwnedAttribute()->push_back(uML_ProtocolTransition_referred);
	uML_ProtocolTransition_referred->setClass(uML_ProtocolTransition);
	
	
	
	uML_ProtocolTransition_referred_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ProtocolTransition_referred_->setName("referred");
	uML_ProtocolTransition_referred_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ProtocolTransition_referred_result->setName("result");
	uML_ProtocolTransition_referred_result->setType(get_UML_Operation());
	uML_ProtocolTransition_referred_result->setLower(0);
	uML_ProtocolTransition_referred_result->setUpper(-1);
	uML_ProtocolTransition_referred_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ProtocolTransition_referred_->getOwnedParameter()->push_back(uML_ProtocolTransition_referred_result);
	
	
	uML_ProtocolTransition->getOwnedOperation()->push_back(uML_ProtocolTransition_referred_); 
	
	


	uML_Pseudostate.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Pseudostate->setName("Pseudostate");
	uML_Pseudostate->setIsAbstract(false);
	uML_Pseudostate->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Pseudostate);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("history_vertices");
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("((kind = PseudostateKind::deepHistory) or (kind = PseudostateKind::shallowHistory)) implies (outgoing->size() <= 1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Pseudostate->getOwnedRule()->push_back(con);
	con->setContext(uML_Pseudostate->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("choice_vertex");
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(kind = PseudostateKind::choice) implies (incoming->size() >= 1 and outgoing->size() >= 1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Pseudostate->getOwnedRule()->push_back(con);
	con->setContext(uML_Pseudostate->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("transitions_incoming");
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(kind = PseudostateKind::join) implies-- for any pair of incoming transitions there exists an orthogonal state which contains the source vetices of these transitions -- such that these source vertices belong to different regions of that orthogonal state incoming->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.source, t2.source) in	((contState <> null) and (contState.region		->exists(r1:Region, r2: Region | (r1 <> r2) and t1.source.isContainedInRegion(r1) and t2.source.isContainedInRegion(r2)))))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Pseudostate->getOwnedRule()->push_back(con);
	con->setContext(uML_Pseudostate->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("junction_vertex");
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(kind = PseudostateKind::junction) implies (incoming->size() >= 1 and outgoing->size() >= 1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Pseudostate->getOwnedRule()->push_back(con);
	con->setContext(uML_Pseudostate->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("initial_vertex");
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(kind = PseudostateKind::initial) implies (outgoing->size() <= 1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Pseudostate->getOwnedRule()->push_back(con);
	con->setContext(uML_Pseudostate->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("transitions_outgoing");
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(kind = PseudostateKind::fork) implies"\
	""\
	"-- for any pair of outgoing transitions there exists an orthogonal state which contains the targets of these transitions "\
	"-- such that these targets belong to different regions of that orthogonal state "\
	""\
	"outgoing->forAll(t1:Transition, t2:Transition | let contState:State = containingStateMachine().LCAState(t1.target, t2.target) in"\
	"	((contState <> null) and (contState.region"\
	"		->exists(r1:Region, r2: Region | (r1 <> r2) and t1.target.isContainedInRegion(r1) and t2.target.isContainedInRegion(r2)))))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Pseudostate->getOwnedRule()->push_back(con);
	con->setContext(uML_Pseudostate->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("outgoing_from_initial");
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(kind = PseudostateKind::initial) implies (outgoing.guard = null and outgoing.trigger->isEmpty())");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Pseudostate->getOwnedRule()->push_back(con);
	con->setContext(uML_Pseudostate->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("fork_vertex");
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(kind = PseudostateKind::fork) implies (incoming->size() = 1 and outgoing->size() >= 2)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Pseudostate->getOwnedRule()->push_back(con);
	con->setContext(uML_Pseudostate->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("join_vertex");
	con->getConstrainedElement()->push_back(uML_Pseudostate);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(kind = PseudostateKind::join) implies (outgoing->size() = 1 and incoming->size() >= 2)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Pseudostate->getOwnedRule()->push_back(con);
	con->setContext(uML_Pseudostate->getNamespace());
	
	
	uML_Pseudostate_kind.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Pseudostate_kind->setName("kind");
	uML_Pseudostate_kind->setType(get_UML_PseudostateKind());
	uML_Pseudostate_kind->setLower(1);
	uML_Pseudostate_kind->setUpper(1);
	uML_Pseudostate->getOwnedAttribute()->push_back(uML_Pseudostate_kind);
	uML_Pseudostate_kind->setClass(uML_Pseudostate);
	uML_Pseudostate_kind->setDefaultValue(uML_Pseudostate_kind_defaultValue_InstanceValue);
	
	uML_Pseudostate_state.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Pseudostate_state->setName("state");
	uML_Pseudostate_state->setType(get_UML_State());
	uML_Pseudostate_state->setLower(0);
	uML_Pseudostate_state->setUpper(1);
	uML_Pseudostate->getOwnedAttribute()->push_back(uML_Pseudostate_state);
	uML_Pseudostate_state->setClass(uML_Pseudostate);
	
	
	uML_Pseudostate_stateMachine.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Pseudostate_stateMachine->setName("stateMachine");
	uML_Pseudostate_stateMachine->setType(get_UML_StateMachine());
	uML_Pseudostate_stateMachine->setLower(0);
	uML_Pseudostate_stateMachine->setUpper(1);
	uML_Pseudostate->getOwnedAttribute()->push_back(uML_Pseudostate_stateMachine);
	uML_Pseudostate_stateMachine->setClass(uML_Pseudostate);
	
	
	
	
	


	uML_QualifierValue.reset(uml::UmlFactory::eInstance()->createClass());
	uML_QualifierValue->setName("QualifierValue");
	uML_QualifierValue->setIsAbstract(false);
	uML_QualifierValue->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_QualifierValue);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_of_qualifier");
	con->getConstrainedElement()->push_back(uML_QualifierValue);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("value.type.conformsTo(qualifier.type)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_QualifierValue->getOwnedRule()->push_back(con);
	con->setContext(uML_QualifierValue->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("qualifier_attribute");
	con->getConstrainedElement()->push_back(uML_QualifierValue);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("linkEndData.end.qualifier->includes(qualifier)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_QualifierValue->getOwnedRule()->push_back(con);
	con->setContext(uML_QualifierValue->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity_of_qualifier");
	con->getConstrainedElement()->push_back(uML_QualifierValue);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("value.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_QualifierValue->getOwnedRule()->push_back(con);
	con->setContext(uML_QualifierValue->getNamespace());
	
	
	uML_QualifierValue_qualifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_QualifierValue_qualifier->setName("qualifier");
	uML_QualifierValue_qualifier->setType(get_UML_Property());
	uML_QualifierValue_qualifier->setLower(1);
	uML_QualifierValue_qualifier->setUpper(1);
	uML_QualifierValue->getOwnedAttribute()->push_back(uML_QualifierValue_qualifier);
	uML_QualifierValue_qualifier->setClass(uML_QualifierValue);
	
	
	uML_QualifierValue_value.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_QualifierValue_value->setName("value");
	uML_QualifierValue_value->setType(get_UML_InputPin());
	uML_QualifierValue_value->setLower(1);
	uML_QualifierValue_value->setUpper(1);
	uML_QualifierValue->getOwnedAttribute()->push_back(uML_QualifierValue_value);
	uML_QualifierValue_value->setClass(uML_QualifierValue);
	
	
	
	
	


	uML_RaiseExceptionAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_RaiseExceptionAction->setName("RaiseExceptionAction");
	uML_RaiseExceptionAction->setIsAbstract(false);
	uML_RaiseExceptionAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_RaiseExceptionAction);
	
	//constraints
	
	
	uML_RaiseExceptionAction_exception.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_RaiseExceptionAction_exception->setName("exception");
	uML_RaiseExceptionAction_exception->setType(get_UML_InputPin());
	uML_RaiseExceptionAction_exception->setLower(1);
	uML_RaiseExceptionAction_exception->setUpper(1);
	uML_RaiseExceptionAction->getOwnedAttribute()->push_back(uML_RaiseExceptionAction_exception);
	uML_RaiseExceptionAction_exception->setClass(uML_RaiseExceptionAction);
	
	
	
	
	


	uML_ReadExtentAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ReadExtentAction->setName("ReadExtentAction");
	uML_ReadExtentAction->setIsAbstract(false);
	uML_ReadExtentAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ReadExtentAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_is_classifier");
	con->getConstrainedElement()->push_back(uML_ReadExtentAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.type = classifier");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadExtentAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadExtentAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity_of_result");
	con->getConstrainedElement()->push_back(uML_ReadExtentAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.is(0,*)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadExtentAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadExtentAction->getNamespace());
	
	
	uML_ReadExtentAction_classifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadExtentAction_classifier->setName("classifier");
	uML_ReadExtentAction_classifier->setType(get_UML_Classifier());
	uML_ReadExtentAction_classifier->setLower(1);
	uML_ReadExtentAction_classifier->setUpper(1);
	uML_ReadExtentAction->getOwnedAttribute()->push_back(uML_ReadExtentAction_classifier);
	uML_ReadExtentAction_classifier->setClass(uML_ReadExtentAction);
	
	
	uML_ReadExtentAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadExtentAction_result->setName("result");
	uML_ReadExtentAction_result->setType(get_UML_OutputPin());
	uML_ReadExtentAction_result->setLower(1);
	uML_ReadExtentAction_result->setUpper(1);
	uML_ReadExtentAction->getOwnedAttribute()->push_back(uML_ReadExtentAction_result);
	uML_ReadExtentAction_result->setClass(uML_ReadExtentAction);
	
	
	
	
	


	uML_ReadIsClassifiedObjectAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ReadIsClassifiedObjectAction->setName("ReadIsClassifiedObjectAction");
	uML_ReadIsClassifiedObjectAction->setIsAbstract(false);
	uML_ReadIsClassifiedObjectAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ReadIsClassifiedObjectAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("boolean_result");
	con->getConstrainedElement()->push_back(uML_ReadIsClassifiedObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.type = Boolean");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadIsClassifiedObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadIsClassifiedObjectAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_type");
	con->getConstrainedElement()->push_back(uML_ReadIsClassifiedObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.type = null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadIsClassifiedObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadIsClassifiedObjectAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity_of_output");
	con->getConstrainedElement()->push_back(uML_ReadIsClassifiedObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadIsClassifiedObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadIsClassifiedObjectAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity_of_input");
	con->getConstrainedElement()->push_back(uML_ReadIsClassifiedObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadIsClassifiedObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadIsClassifiedObjectAction->getNamespace());
	
	
	uML_ReadIsClassifiedObjectAction_classifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadIsClassifiedObjectAction_classifier->setName("classifier");
	uML_ReadIsClassifiedObjectAction_classifier->setType(get_UML_Classifier());
	uML_ReadIsClassifiedObjectAction_classifier->setLower(1);
	uML_ReadIsClassifiedObjectAction_classifier->setUpper(1);
	uML_ReadIsClassifiedObjectAction->getOwnedAttribute()->push_back(uML_ReadIsClassifiedObjectAction_classifier);
	uML_ReadIsClassifiedObjectAction_classifier->setClass(uML_ReadIsClassifiedObjectAction);
	
	
	uML_ReadIsClassifiedObjectAction_isDirect.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadIsClassifiedObjectAction_isDirect->setName("isDirect");
	uML_ReadIsClassifiedObjectAction_isDirect->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ReadIsClassifiedObjectAction_isDirect->setLower(1);
	uML_ReadIsClassifiedObjectAction_isDirect->setUpper(1);
	uML_ReadIsClassifiedObjectAction->getOwnedAttribute()->push_back(uML_ReadIsClassifiedObjectAction_isDirect);
	uML_ReadIsClassifiedObjectAction_isDirect->setClass(uML_ReadIsClassifiedObjectAction);
	uML_ReadIsClassifiedObjectAction_isDirect->setDefaultValue(uML_ReadIsClassifiedObjectAction_isDirect_defaultValue_LiteralBoolean_UML_ReadIsClassifiedObjectAction_isDirect);
	
	uML_ReadIsClassifiedObjectAction_object.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadIsClassifiedObjectAction_object->setName("object");
	uML_ReadIsClassifiedObjectAction_object->setType(get_UML_InputPin());
	uML_ReadIsClassifiedObjectAction_object->setLower(1);
	uML_ReadIsClassifiedObjectAction_object->setUpper(1);
	uML_ReadIsClassifiedObjectAction->getOwnedAttribute()->push_back(uML_ReadIsClassifiedObjectAction_object);
	uML_ReadIsClassifiedObjectAction_object->setClass(uML_ReadIsClassifiedObjectAction);
	
	
	uML_ReadIsClassifiedObjectAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadIsClassifiedObjectAction_result->setName("result");
	uML_ReadIsClassifiedObjectAction_result->setType(get_UML_OutputPin());
	uML_ReadIsClassifiedObjectAction_result->setLower(1);
	uML_ReadIsClassifiedObjectAction_result->setUpper(1);
	uML_ReadIsClassifiedObjectAction->getOwnedAttribute()->push_back(uML_ReadIsClassifiedObjectAction_result);
	uML_ReadIsClassifiedObjectAction_result->setClass(uML_ReadIsClassifiedObjectAction);
	
	
	
	
	


	uML_ReadLinkAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ReadLinkAction->setName("ReadLinkAction");
	uML_ReadLinkAction->setIsAbstract(false);
	uML_ReadLinkAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ReadLinkAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("visibility");
	con->getConstrainedElement()->push_back(uML_ReadLinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let openEnd : Property = self.openEnd()->first() in  openEnd.visibility = VisibilityKind::public or   endData->exists(oed |     oed.end<>openEnd and     (_'context' = oed.end.type or       (openEnd.visibility = VisibilityKind::protected and         _'context'.conformsTo(oed.end.type.oclAsType(Classifier)))))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("compatible_multiplicity");
	con->getConstrainedElement()->push_back(uML_ReadLinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.openEnd()->first().compatibleWith(result)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("one_open_end");
	con->getConstrainedElement()->push_back(uML_ReadLinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.openEnd()->size() = 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_and_ordering");
	con->getConstrainedElement()->push_back(uML_ReadLinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.openEnd()->forAll(type=result.type and isOrdered=result.isOrdered)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("navigable_open_end");
	con->getConstrainedElement()->push_back(uML_ReadLinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.openEnd()->first().isNavigable()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkAction->getNamespace());
	
	
	uML_ReadLinkAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadLinkAction_result->setName("result");
	uML_ReadLinkAction_result->setType(get_UML_OutputPin());
	uML_ReadLinkAction_result->setLower(1);
	uML_ReadLinkAction_result->setUpper(1);
	uML_ReadLinkAction->getOwnedAttribute()->push_back(uML_ReadLinkAction_result);
	uML_ReadLinkAction_result->setClass(uML_ReadLinkAction);
	
	
	
	uML_ReadLinkAction_openEnd_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ReadLinkAction_openEnd_->setName("openEnd");
	uML_ReadLinkAction_openEnd_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ReadLinkAction_openEnd_result->setName("result");
	uML_ReadLinkAction_openEnd_result->setType(get_UML_Property());
	uML_ReadLinkAction_openEnd_result->setLower(0);
	uML_ReadLinkAction_openEnd_result->setUpper(-1);
	uML_ReadLinkAction_openEnd_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ReadLinkAction_openEnd_->getOwnedParameter()->push_back(uML_ReadLinkAction_openEnd_result);
	
	
	uML_ReadLinkAction->getOwnedOperation()->push_back(uML_ReadLinkAction_openEnd_); 
	
	


	uML_ReadLinkObjectEndAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ReadLinkObjectEndAction->setName("ReadLinkObjectEndAction");
	uML_ReadLinkObjectEndAction->setIsAbstract(false);
	uML_ReadLinkObjectEndAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ReadLinkObjectEndAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_of_object");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.type = end.association");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkObjectEndAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkObjectEndAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("ends_of_association");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("end.association.memberEnd->forAll(e | not e.isStatic)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkObjectEndAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkObjectEndAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("association_of_association");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("end.association.oclIsKindOf(AssociationClass)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkObjectEndAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkObjectEndAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity_of_result");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkObjectEndAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkObjectEndAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("property");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("end.association <> null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkObjectEndAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkObjectEndAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity_of_object");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkObjectEndAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkObjectEndAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_of_result");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.type = end.type");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkObjectEndAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkObjectEndAction->getNamespace());
	
	
	uML_ReadLinkObjectEndAction_end.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadLinkObjectEndAction_end->setName("end");
	uML_ReadLinkObjectEndAction_end->setType(get_UML_Property());
	uML_ReadLinkObjectEndAction_end->setLower(1);
	uML_ReadLinkObjectEndAction_end->setUpper(1);
	uML_ReadLinkObjectEndAction->getOwnedAttribute()->push_back(uML_ReadLinkObjectEndAction_end);
	uML_ReadLinkObjectEndAction_end->setClass(uML_ReadLinkObjectEndAction);
	
	
	uML_ReadLinkObjectEndAction_object.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadLinkObjectEndAction_object->setName("object");
	uML_ReadLinkObjectEndAction_object->setType(get_UML_InputPin());
	uML_ReadLinkObjectEndAction_object->setLower(1);
	uML_ReadLinkObjectEndAction_object->setUpper(1);
	uML_ReadLinkObjectEndAction->getOwnedAttribute()->push_back(uML_ReadLinkObjectEndAction_object);
	uML_ReadLinkObjectEndAction_object->setClass(uML_ReadLinkObjectEndAction);
	
	
	uML_ReadLinkObjectEndAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadLinkObjectEndAction_result->setName("result");
	uML_ReadLinkObjectEndAction_result->setType(get_UML_OutputPin());
	uML_ReadLinkObjectEndAction_result->setLower(1);
	uML_ReadLinkObjectEndAction_result->setUpper(1);
	uML_ReadLinkObjectEndAction->getOwnedAttribute()->push_back(uML_ReadLinkObjectEndAction_result);
	uML_ReadLinkObjectEndAction_result->setClass(uML_ReadLinkObjectEndAction);
	
	
	
	
	


	uML_ReadLinkObjectEndQualifierAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ReadLinkObjectEndQualifierAction->setName("ReadLinkObjectEndQualifierAction");
	uML_ReadLinkObjectEndQualifierAction->setIsAbstract(false);
	uML_ReadLinkObjectEndQualifierAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("qualifier_attribute");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("qualifier.associationEnd <> null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkObjectEndQualifierAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkObjectEndQualifierAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("ends_of_association");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("qualifier.associationEnd.association.memberEnd->forAll(e | not e.isStatic)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkObjectEndQualifierAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkObjectEndQualifierAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("same_type");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.type = qualifier.type");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkObjectEndQualifierAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkObjectEndQualifierAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("association_of_association");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("qualifier.associationEnd.association.oclIsKindOf(AssociationClass)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkObjectEndQualifierAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkObjectEndQualifierAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity_of_object");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkObjectEndQualifierAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkObjectEndQualifierAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_of_object");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.type = qualifier.associationEnd.association");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkObjectEndQualifierAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkObjectEndQualifierAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity_of_result");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkObjectEndQualifierAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkObjectEndQualifierAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity_of_qualifier");
	con->getConstrainedElement()->push_back(uML_ReadLinkObjectEndQualifierAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("qualifier.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadLinkObjectEndQualifierAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadLinkObjectEndQualifierAction->getNamespace());
	
	
	uML_ReadLinkObjectEndQualifierAction_object.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadLinkObjectEndQualifierAction_object->setName("object");
	uML_ReadLinkObjectEndQualifierAction_object->setType(get_UML_InputPin());
	uML_ReadLinkObjectEndQualifierAction_object->setLower(1);
	uML_ReadLinkObjectEndQualifierAction_object->setUpper(1);
	uML_ReadLinkObjectEndQualifierAction->getOwnedAttribute()->push_back(uML_ReadLinkObjectEndQualifierAction_object);
	uML_ReadLinkObjectEndQualifierAction_object->setClass(uML_ReadLinkObjectEndQualifierAction);
	
	
	uML_ReadLinkObjectEndQualifierAction_qualifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadLinkObjectEndQualifierAction_qualifier->setName("qualifier");
	uML_ReadLinkObjectEndQualifierAction_qualifier->setType(get_UML_Property());
	uML_ReadLinkObjectEndQualifierAction_qualifier->setLower(1);
	uML_ReadLinkObjectEndQualifierAction_qualifier->setUpper(1);
	uML_ReadLinkObjectEndQualifierAction->getOwnedAttribute()->push_back(uML_ReadLinkObjectEndQualifierAction_qualifier);
	uML_ReadLinkObjectEndQualifierAction_qualifier->setClass(uML_ReadLinkObjectEndQualifierAction);
	
	
	uML_ReadLinkObjectEndQualifierAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadLinkObjectEndQualifierAction_result->setName("result");
	uML_ReadLinkObjectEndQualifierAction_result->setType(get_UML_OutputPin());
	uML_ReadLinkObjectEndQualifierAction_result->setLower(1);
	uML_ReadLinkObjectEndQualifierAction_result->setUpper(1);
	uML_ReadLinkObjectEndQualifierAction->getOwnedAttribute()->push_back(uML_ReadLinkObjectEndQualifierAction_result);
	uML_ReadLinkObjectEndQualifierAction_result->setClass(uML_ReadLinkObjectEndQualifierAction);
	
	
	
	
	


	uML_ReadSelfAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ReadSelfAction->setName("ReadSelfAction");
	uML_ReadSelfAction->setIsAbstract(false);
	uML_ReadSelfAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ReadSelfAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("contained");
	con->getConstrainedElement()->push_back(uML_ReadSelfAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("_'context' <> null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadSelfAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadSelfAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_ReadSelfAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadSelfAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadSelfAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("not_static");
	con->getConstrainedElement()->push_back(uML_ReadSelfAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let behavior: Behavior = self.containingBehavior() in"\
	"behavior.specification<>null implies not behavior.specification.isStatic");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadSelfAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadSelfAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type");
	con->getConstrainedElement()->push_back(uML_ReadSelfAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.type = _'context'");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadSelfAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadSelfAction->getNamespace());
	
	
	uML_ReadSelfAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadSelfAction_result->setName("result");
	uML_ReadSelfAction_result->setType(get_UML_OutputPin());
	uML_ReadSelfAction_result->setLower(1);
	uML_ReadSelfAction_result->setUpper(1);
	uML_ReadSelfAction->getOwnedAttribute()->push_back(uML_ReadSelfAction_result);
	uML_ReadSelfAction_result->setClass(uML_ReadSelfAction);
	
	
	
	
	


	uML_ReadStructuralFeatureAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ReadStructuralFeatureAction->setName("ReadStructuralFeatureAction");
	uML_ReadStructuralFeatureAction->setIsAbstract(false);
	uML_ReadStructuralFeatureAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ReadStructuralFeatureAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_ReadStructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("structuralFeature.compatibleWith(result)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadStructuralFeatureAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadStructuralFeatureAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_and_ordering");
	con->getConstrainedElement()->push_back(uML_ReadStructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.type =structuralFeature.type and result.isOrdered = structuralFeature.isOrdered");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadStructuralFeatureAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadStructuralFeatureAction->getNamespace());
	
	
	uML_ReadStructuralFeatureAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadStructuralFeatureAction_result->setName("result");
	uML_ReadStructuralFeatureAction_result->setType(get_UML_OutputPin());
	uML_ReadStructuralFeatureAction_result->setLower(1);
	uML_ReadStructuralFeatureAction_result->setUpper(1);
	uML_ReadStructuralFeatureAction->getOwnedAttribute()->push_back(uML_ReadStructuralFeatureAction_result);
	uML_ReadStructuralFeatureAction_result->setClass(uML_ReadStructuralFeatureAction);
	
	
	
	
	


	uML_ReadVariableAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ReadVariableAction->setName("ReadVariableAction");
	uML_ReadVariableAction->setIsAbstract(false);
	uML_ReadVariableAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ReadVariableAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_and_ordering");
	con->getConstrainedElement()->push_back(uML_ReadVariableAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.type =variable.type and result.isOrdered = variable.isOrdered");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadVariableAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadVariableAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("compatible_multiplicity");
	con->getConstrainedElement()->push_back(uML_ReadVariableAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("variable.compatibleWith(result)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReadVariableAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReadVariableAction->getNamespace());
	
	
	uML_ReadVariableAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReadVariableAction_result->setName("result");
	uML_ReadVariableAction_result->setType(get_UML_OutputPin());
	uML_ReadVariableAction_result->setLower(1);
	uML_ReadVariableAction_result->setUpper(1);
	uML_ReadVariableAction->getOwnedAttribute()->push_back(uML_ReadVariableAction_result);
	uML_ReadVariableAction_result->setClass(uML_ReadVariableAction);
	
	
	
	
	


	uML_Realization.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Realization->setName("Realization");
	uML_Realization->setIsAbstract(false);
	uML_Realization->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Realization);
	
	//constraints
	
	
	
	
	


	uML_Reception.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Reception->setName("Reception");
	uML_Reception->setIsAbstract(false);
	uML_Reception->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Reception);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("same_name_as_signal");
	con->getConstrainedElement()->push_back(uML_Reception);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("name = signal.name");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Reception->getOwnedRule()->push_back(con);
	con->setContext(uML_Reception->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("same_structure_as_signal");
	con->getConstrainedElement()->push_back(uML_Reception);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("signal.ownedAttribute->size() = ownedParameter->size() and"\
	"Sequence{1..signal.ownedAttribute->size()}->forAll( i | "\
	"    ownedParameter->at(i).direction = ParameterDirectionKind::_'in' and "\
	"    ownedParameter->at(i).name = signal.ownedAttribute->at(i).name and"\
	"    ownedParameter->at(i).type = signal.ownedAttribute->at(i).type and"\
	"    ownedParameter->at(i).lowerBound() = signal.ownedAttribute->at(i).lowerBound() and"\
	"    ownedParameter->at(i).upperBound() = signal.ownedAttribute->at(i).upperBound()"\
	")");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Reception->getOwnedRule()->push_back(con);
	con->setContext(uML_Reception->getNamespace());
	
	
	uML_Reception_signal.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Reception_signal->setName("signal");
	uML_Reception_signal->setType(get_UML_Signal());
	uML_Reception_signal->setLower(1);
	uML_Reception_signal->setUpper(1);
	uML_Reception->getOwnedAttribute()->push_back(uML_Reception_signal);
	uML_Reception_signal->setClass(uML_Reception);
	
	
	
	
	


	uML_ReclassifyObjectAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ReclassifyObjectAction->setName("ReclassifyObjectAction");
	uML_ReclassifyObjectAction->setIsAbstract(false);
	uML_ReclassifyObjectAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ReclassifyObjectAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_ReclassifyObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReclassifyObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReclassifyObjectAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("classifier_not_abstract");
	con->getConstrainedElement()->push_back(uML_ReclassifyObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not newClassifier->exists(isAbstract)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReclassifyObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReclassifyObjectAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("input_pin");
	con->getConstrainedElement()->push_back(uML_ReclassifyObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.type = null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReclassifyObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReclassifyObjectAction->getNamespace());
	
	
	uML_ReclassifyObjectAction_isReplaceAll.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReclassifyObjectAction_isReplaceAll->setName("isReplaceAll");
	uML_ReclassifyObjectAction_isReplaceAll->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ReclassifyObjectAction_isReplaceAll->setLower(1);
	uML_ReclassifyObjectAction_isReplaceAll->setUpper(1);
	uML_ReclassifyObjectAction->getOwnedAttribute()->push_back(uML_ReclassifyObjectAction_isReplaceAll);
	uML_ReclassifyObjectAction_isReplaceAll->setClass(uML_ReclassifyObjectAction);
	uML_ReclassifyObjectAction_isReplaceAll->setDefaultValue(uML_ReclassifyObjectAction_isReplaceAll_defaultValue_LiteralBoolean_UML_ReclassifyObjectAction_isReplaceAll);
	
	uML_ReclassifyObjectAction_newClassifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReclassifyObjectAction_newClassifier->setName("newClassifier");
	uML_ReclassifyObjectAction_newClassifier->setType(get_UML_Classifier());
	uML_ReclassifyObjectAction_newClassifier->setLower(0);
	uML_ReclassifyObjectAction_newClassifier->setUpper(-1);
	uML_ReclassifyObjectAction->getOwnedAttribute()->push_back(uML_ReclassifyObjectAction_newClassifier);
	uML_ReclassifyObjectAction_newClassifier->setClass(uML_ReclassifyObjectAction);
	
	
	uML_ReclassifyObjectAction_object.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReclassifyObjectAction_object->setName("object");
	uML_ReclassifyObjectAction_object->setType(get_UML_InputPin());
	uML_ReclassifyObjectAction_object->setLower(1);
	uML_ReclassifyObjectAction_object->setUpper(1);
	uML_ReclassifyObjectAction->getOwnedAttribute()->push_back(uML_ReclassifyObjectAction_object);
	uML_ReclassifyObjectAction_object->setClass(uML_ReclassifyObjectAction);
	
	
	uML_ReclassifyObjectAction_oldClassifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReclassifyObjectAction_oldClassifier->setName("oldClassifier");
	uML_ReclassifyObjectAction_oldClassifier->setType(get_UML_Classifier());
	uML_ReclassifyObjectAction_oldClassifier->setLower(0);
	uML_ReclassifyObjectAction_oldClassifier->setUpper(-1);
	uML_ReclassifyObjectAction->getOwnedAttribute()->push_back(uML_ReclassifyObjectAction_oldClassifier);
	uML_ReclassifyObjectAction_oldClassifier->setClass(uML_ReclassifyObjectAction);
	
	
	
	
	


	uML_RedefinableElement.reset(uml::UmlFactory::eInstance()->createClass());
	uML_RedefinableElement->setName("RedefinableElement");
	uML_RedefinableElement->setIsAbstract(true);
	uML_RedefinableElement->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_RedefinableElement);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("redefinition_context_valid");
	con->getConstrainedElement()->push_back(uML_RedefinableElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("redefinedElement->forAll(re | self.isRedefinitionContextValid(re))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_RedefinableElement->getOwnedRule()->push_back(con);
	con->setContext(uML_RedefinableElement->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("redefinition_consistent");
	con->getConstrainedElement()->push_back(uML_RedefinableElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("redefinedElement->forAll(re | re.isConsistentWith(self))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_RedefinableElement->getOwnedRule()->push_back(con);
	con->setContext(uML_RedefinableElement->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("non_leaf_redefinition");
	con->getConstrainedElement()->push_back(uML_RedefinableElement);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("redefinedElement->forAll(re | not re.isLeaf)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_RedefinableElement->getOwnedRule()->push_back(con);
	con->setContext(uML_RedefinableElement->getNamespace());
	
	
	uML_RedefinableElement_isLeaf.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_RedefinableElement_isLeaf->setName("isLeaf");
	uML_RedefinableElement_isLeaf->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_RedefinableElement_isLeaf->setLower(1);
	uML_RedefinableElement_isLeaf->setUpper(1);
	uML_RedefinableElement->getOwnedAttribute()->push_back(uML_RedefinableElement_isLeaf);
	uML_RedefinableElement_isLeaf->setClass(uML_RedefinableElement);
	uML_RedefinableElement_isLeaf->setDefaultValue(uML_RedefinableElement_isLeaf_defaultValue_LiteralBoolean_UML_RedefinableElement_isLeaf);
	
	uML_RedefinableElement_redefinedElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_RedefinableElement_redefinedElement->setName("redefinedElement");
	uML_RedefinableElement_redefinedElement->setType(get_UML_RedefinableElement());
	uML_RedefinableElement_redefinedElement->setLower(0);
	uML_RedefinableElement_redefinedElement->setUpper(-1);
	uML_RedefinableElement->getOwnedAttribute()->push_back(uML_RedefinableElement_redefinedElement);
	uML_RedefinableElement_redefinedElement->setClass(uML_RedefinableElement);
	
	
	uML_RedefinableElement_redefinitionContext.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_RedefinableElement_redefinitionContext->setName("redefinitionContext");
	uML_RedefinableElement_redefinitionContext->setType(get_UML_Classifier());
	uML_RedefinableElement_redefinitionContext->setLower(0);
	uML_RedefinableElement_redefinitionContext->setUpper(-1);
	uML_RedefinableElement->getOwnedAttribute()->push_back(uML_RedefinableElement_redefinitionContext);
	uML_RedefinableElement_redefinitionContext->setClass(uML_RedefinableElement);
	
	
	
	uML_RedefinableElement_isConsistentWith_RedefinableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_RedefinableElement_isConsistentWith_RedefinableElement->setName("isConsistentWith");
	uML_RedefinableElement_isConsistentWith_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_RedefinableElement_isConsistentWith_result->setName("result");
	uML_RedefinableElement_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_RedefinableElement_isConsistentWith_result->setLower(1);
	uML_RedefinableElement_isConsistentWith_result->setUpper(1);
	uML_RedefinableElement_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_RedefinableElement_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_RedefinableElement_isConsistentWith_result);
	uML_RedefinableElement_isConsistentWith_RedefinableElement_UML_RedefinableElement_isConsistentWith_redefiningElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_RedefinableElement_isConsistentWith_RedefinableElement_UML_RedefinableElement_isConsistentWith_redefiningElement->setName("redefiningElement");
	uML_RedefinableElement_isConsistentWith_RedefinableElement_UML_RedefinableElement_isConsistentWith_redefiningElement->setType(get_UML_RedefinableElement());
	uML_RedefinableElement_isConsistentWith_RedefinableElement_UML_RedefinableElement_isConsistentWith_redefiningElement->setLower(1);
	uML_RedefinableElement_isConsistentWith_RedefinableElement_UML_RedefinableElement_isConsistentWith_redefiningElement->setUpper(1);
	uML_RedefinableElement_isConsistentWith_RedefinableElement_UML_RedefinableElement_isConsistentWith_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_RedefinableElement_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_RedefinableElement_isConsistentWith_RedefinableElement_UML_RedefinableElement_isConsistentWith_redefiningElement);
	
	
	uML_RedefinableElement->getOwnedOperation()->push_back(uML_RedefinableElement_isConsistentWith_RedefinableElement); 
	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement->setName("isRedefinitionContextValid");
	uML_RedefinableElement_isRedefinitionContextValid_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_RedefinableElement_isRedefinitionContextValid_result->setName("result");
	uML_RedefinableElement_isRedefinitionContextValid_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_RedefinableElement_isRedefinitionContextValid_result->setLower(1);
	uML_RedefinableElement_isRedefinitionContextValid_result->setUpper(1);
	uML_RedefinableElement_isRedefinitionContextValid_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement->getOwnedParameter()->push_back(uML_RedefinableElement_isRedefinitionContextValid_result);
	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_UML_RedefinableElement_isRedefinitionContextValid_redefinedElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_UML_RedefinableElement_isRedefinitionContextValid_redefinedElement->setName("redefinedElement");
	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_UML_RedefinableElement_isRedefinitionContextValid_redefinedElement->setType(get_UML_RedefinableElement());
	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_UML_RedefinableElement_isRedefinitionContextValid_redefinedElement->setLower(1);
	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_UML_RedefinableElement_isRedefinitionContextValid_redefinedElement->setUpper(1);
	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_UML_RedefinableElement_isRedefinitionContextValid_redefinedElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement->getOwnedParameter()->push_back(uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_UML_RedefinableElement_isRedefinitionContextValid_redefinedElement);
	
	
	uML_RedefinableElement->getOwnedOperation()->push_back(uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement); 
	
	


	uML_RedefinableTemplateSignature.reset(uml::UmlFactory::eInstance()->createClass());
	uML_RedefinableTemplateSignature->setName("RedefinableTemplateSignature");
	uML_RedefinableTemplateSignature->setIsAbstract(false);
	uML_RedefinableTemplateSignature->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_RedefinableTemplateSignature);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("redefines_parents");
	con->getConstrainedElement()->push_back(uML_RedefinableTemplateSignature);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("classifier.allParents()->forAll(c | c.ownedTemplateSignature->notEmpty() implies self->closure(extendedSignature)->includes(c.ownedTemplateSignature))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_RedefinableTemplateSignature->getOwnedRule()->push_back(con);
	con->setContext(uML_RedefinableTemplateSignature->getNamespace());
	
	
	uML_RedefinableTemplateSignature_classifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_RedefinableTemplateSignature_classifier->setName("classifier");
	uML_RedefinableTemplateSignature_classifier->setType(get_UML_Classifier());
	uML_RedefinableTemplateSignature_classifier->setLower(1);
	uML_RedefinableTemplateSignature_classifier->setUpper(1);
	uML_RedefinableTemplateSignature->getOwnedAttribute()->push_back(uML_RedefinableTemplateSignature_classifier);
	uML_RedefinableTemplateSignature_classifier->setClass(uML_RedefinableTemplateSignature);
	
	
	uML_RedefinableTemplateSignature_extendedSignature.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_RedefinableTemplateSignature_extendedSignature->setName("extendedSignature");
	uML_RedefinableTemplateSignature_extendedSignature->setType(get_UML_RedefinableTemplateSignature());
	uML_RedefinableTemplateSignature_extendedSignature->setLower(0);
	uML_RedefinableTemplateSignature_extendedSignature->setUpper(-1);
	uML_RedefinableTemplateSignature->getOwnedAttribute()->push_back(uML_RedefinableTemplateSignature_extendedSignature);
	uML_RedefinableTemplateSignature_extendedSignature->setClass(uML_RedefinableTemplateSignature);
	
	
	uML_RedefinableTemplateSignature_inheritedParameter.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_RedefinableTemplateSignature_inheritedParameter->setName("inheritedParameter");
	uML_RedefinableTemplateSignature_inheritedParameter->setType(get_UML_TemplateParameter());
	uML_RedefinableTemplateSignature_inheritedParameter->setLower(0);
	uML_RedefinableTemplateSignature_inheritedParameter->setUpper(-1);
	uML_RedefinableTemplateSignature->getOwnedAttribute()->push_back(uML_RedefinableTemplateSignature_inheritedParameter);
	uML_RedefinableTemplateSignature_inheritedParameter->setClass(uML_RedefinableTemplateSignature);
	
	
	
	uML_RedefinableTemplateSignature_inheritedParameter_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_RedefinableTemplateSignature_inheritedParameter_->setName("inheritedParameter");
	uML_RedefinableTemplateSignature_inheritedParameter_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_RedefinableTemplateSignature_inheritedParameter_result->setName("result");
	uML_RedefinableTemplateSignature_inheritedParameter_result->setType(get_UML_TemplateParameter());
	uML_RedefinableTemplateSignature_inheritedParameter_result->setLower(0);
	uML_RedefinableTemplateSignature_inheritedParameter_result->setUpper(-1);
	uML_RedefinableTemplateSignature_inheritedParameter_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_RedefinableTemplateSignature_inheritedParameter_->getOwnedParameter()->push_back(uML_RedefinableTemplateSignature_inheritedParameter_result);
	
	
	uML_RedefinableTemplateSignature->getOwnedOperation()->push_back(uML_RedefinableTemplateSignature_inheritedParameter_); 
	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement->setName("isConsistentWith");
	uML_RedefinableTemplateSignature_isConsistentWith_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_RedefinableTemplateSignature_isConsistentWith_result->setName("result");
	uML_RedefinableTemplateSignature_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_RedefinableTemplateSignature_isConsistentWith_result->setLower(1);
	uML_RedefinableTemplateSignature_isConsistentWith_result->setUpper(1);
	uML_RedefinableTemplateSignature_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_RedefinableTemplateSignature_isConsistentWith_result);
	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_UML_RedefinableTemplateSignature_isConsistentWith_redefiningElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_UML_RedefinableTemplateSignature_isConsistentWith_redefiningElement->setName("redefiningElement");
	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_UML_RedefinableTemplateSignature_isConsistentWith_redefiningElement->setType(get_UML_RedefinableElement());
	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_UML_RedefinableTemplateSignature_isConsistentWith_redefiningElement->setLower(1);
	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_UML_RedefinableTemplateSignature_isConsistentWith_redefiningElement->setUpper(1);
	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_UML_RedefinableTemplateSignature_isConsistentWith_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_UML_RedefinableTemplateSignature_isConsistentWith_redefiningElement);
	
	
	uML_RedefinableTemplateSignature->getOwnedOperation()->push_back(uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement); 
	
	


	uML_ReduceAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ReduceAction->setName("ReduceAction");
	uML_ReduceAction->setIsAbstract(false);
	uML_ReduceAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ReduceAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("reducer_inputs_output");
	con->getConstrainedElement()->push_back(uML_ReduceAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let inputs: OrderedSet(Parameter) = reducer.inputParameters() in"\
	"let outputs: OrderedSet(Parameter) = reducer.outputParameters() in"\
	"inputs->size()=2 and outputs->size()=1 and"\
	"inputs.type->forAll(t | "\
	"	outputs.type->forAll(conformsTo(t)) and "\
	"	-- Note that the following only checks the case when the collection is via multiple tokens."\
	"	collection.upperBound()>1 implies collection.type.conformsTo(t))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReduceAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReduceAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("input_type_is_collection");
	con->getConstrainedElement()->push_back(uML_ReduceAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReduceAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReduceAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("output_types_are_compatible");
	con->getConstrainedElement()->push_back(uML_ReduceAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("reducer.outputParameters().type->forAll(conformsTo(result.type))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReduceAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReduceAction->getNamespace());
	
	
	uML_ReduceAction_collection.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReduceAction_collection->setName("collection");
	uML_ReduceAction_collection->setType(get_UML_InputPin());
	uML_ReduceAction_collection->setLower(1);
	uML_ReduceAction_collection->setUpper(1);
	uML_ReduceAction->getOwnedAttribute()->push_back(uML_ReduceAction_collection);
	uML_ReduceAction_collection->setClass(uML_ReduceAction);
	
	
	uML_ReduceAction_isOrdered.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReduceAction_isOrdered->setName("isOrdered");
	uML_ReduceAction_isOrdered->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ReduceAction_isOrdered->setLower(1);
	uML_ReduceAction_isOrdered->setUpper(1);
	uML_ReduceAction->getOwnedAttribute()->push_back(uML_ReduceAction_isOrdered);
	uML_ReduceAction_isOrdered->setClass(uML_ReduceAction);
	uML_ReduceAction_isOrdered->setDefaultValue(uML_ReduceAction_isOrdered_defaultValue_LiteralBoolean_UML_ReduceAction_isOrdered);
	
	uML_ReduceAction_reducer.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReduceAction_reducer->setName("reducer");
	uML_ReduceAction_reducer->setType(get_UML_Behavior());
	uML_ReduceAction_reducer->setLower(1);
	uML_ReduceAction_reducer->setUpper(1);
	uML_ReduceAction->getOwnedAttribute()->push_back(uML_ReduceAction_reducer);
	uML_ReduceAction_reducer->setClass(uML_ReduceAction);
	
	
	uML_ReduceAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReduceAction_result->setName("result");
	uML_ReduceAction_result->setType(get_UML_OutputPin());
	uML_ReduceAction_result->setLower(1);
	uML_ReduceAction_result->setUpper(1);
	uML_ReduceAction->getOwnedAttribute()->push_back(uML_ReduceAction_result);
	uML_ReduceAction_result->setClass(uML_ReduceAction);
	
	
	
	
	


	uML_Region.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Region->setName("Region");
	uML_Region->setIsAbstract(false);
	uML_Region->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Region);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("initial_vertex");
	con->getConstrainedElement()->push_back(uML_Region);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::initial)->size() <= 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Region->getOwnedRule()->push_back(con);
	con->setContext(uML_Region->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("deep_history_vertex");
	con->getConstrainedElement()->push_back(uML_Region);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.subvertex->select (oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->   select(kind = PseudostateKind::deepHistory)->size() <= 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Region->getOwnedRule()->push_back(con);
	con->setContext(uML_Region->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("owned");
	con->getConstrainedElement()->push_back(uML_Region);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(stateMachine <> null implies state = null) and (state <> null implies stateMachine = null)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Region->getOwnedRule()->push_back(con);
	con->setContext(uML_Region->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("shallow_history_vertex");
	con->getConstrainedElement()->push_back(uML_Region);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("subvertex->select(oclIsKindOf(Pseudostate))->collect(oclAsType(Pseudostate))->  select(kind = PseudostateKind::shallowHistory)->size() <= 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Region->getOwnedRule()->push_back(con);
	con->setContext(uML_Region->getNamespace());
	
	
	uML_Region_extendedRegion.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Region_extendedRegion->setName("extendedRegion");
	uML_Region_extendedRegion->setType(get_UML_Region());
	uML_Region_extendedRegion->setLower(0);
	uML_Region_extendedRegion->setUpper(1);
	uML_Region->getOwnedAttribute()->push_back(uML_Region_extendedRegion);
	uML_Region_extendedRegion->setClass(uML_Region);
	
	
	uML_Region_redefinitionContext.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Region_redefinitionContext->setName("redefinitionContext");
	uML_Region_redefinitionContext->setType(get_UML_Classifier());
	uML_Region_redefinitionContext->setLower(1);
	uML_Region_redefinitionContext->setUpper(1);
	uML_Region->getOwnedAttribute()->push_back(uML_Region_redefinitionContext);
	uML_Region_redefinitionContext->setClass(uML_Region);
	
	
	uML_Region_state.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Region_state->setName("state");
	uML_Region_state->setType(get_UML_State());
	uML_Region_state->setLower(0);
	uML_Region_state->setUpper(1);
	uML_Region->getOwnedAttribute()->push_back(uML_Region_state);
	uML_Region_state->setClass(uML_Region);
	
	
	uML_Region_stateMachine.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Region_stateMachine->setName("stateMachine");
	uML_Region_stateMachine->setType(get_UML_StateMachine());
	uML_Region_stateMachine->setLower(0);
	uML_Region_stateMachine->setUpper(1);
	uML_Region->getOwnedAttribute()->push_back(uML_Region_stateMachine);
	uML_Region_stateMachine->setClass(uML_Region);
	
	
	uML_Region_subvertex.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Region_subvertex->setName("subvertex");
	uML_Region_subvertex->setType(get_UML_Vertex());
	uML_Region_subvertex->setLower(0);
	uML_Region_subvertex->setUpper(-1);
	uML_Region->getOwnedAttribute()->push_back(uML_Region_subvertex);
	uML_Region_subvertex->setClass(uML_Region);
	
	
	uML_Region_transition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Region_transition->setName("transition");
	uML_Region_transition->setType(get_UML_Transition());
	uML_Region_transition->setLower(0);
	uML_Region_transition->setUpper(-1);
	uML_Region->getOwnedAttribute()->push_back(uML_Region_transition);
	uML_Region_transition->setClass(uML_Region);
	
	
	
	uML_Region_belongsToPSM_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Region_belongsToPSM_->setName("belongsToPSM");
	uML_Region_belongsToPSM_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Region_belongsToPSM_result->setName("result");
	uML_Region_belongsToPSM_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Region_belongsToPSM_result->setLower(1);
	uML_Region_belongsToPSM_result->setUpper(1);
	uML_Region_belongsToPSM_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Region_belongsToPSM_->getOwnedParameter()->push_back(uML_Region_belongsToPSM_result);
	
	
	uML_Region->getOwnedOperation()->push_back(uML_Region_belongsToPSM_); 
	uML_Region_containingStateMachine_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Region_containingStateMachine_->setName("containingStateMachine");
	uML_Region_containingStateMachine_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Region_containingStateMachine_result->setName("result");
	uML_Region_containingStateMachine_result->setType(get_UML_StateMachine());
	uML_Region_containingStateMachine_result->setLower(1);
	uML_Region_containingStateMachine_result->setUpper(1);
	uML_Region_containingStateMachine_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Region_containingStateMachine_->getOwnedParameter()->push_back(uML_Region_containingStateMachine_result);
	
	
	uML_Region->getOwnedOperation()->push_back(uML_Region_containingStateMachine_); 
	uML_Region_isConsistentWith_RedefinableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Region_isConsistentWith_RedefinableElement->setName("isConsistentWith");
	uML_Region_isConsistentWith_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Region_isConsistentWith_result->setName("result");
	uML_Region_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Region_isConsistentWith_result->setLower(1);
	uML_Region_isConsistentWith_result->setUpper(1);
	uML_Region_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Region_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_Region_isConsistentWith_result);
	uML_Region_isConsistentWith_RedefinableElement_UML_Region_isConsistentWith_redefiningElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Region_isConsistentWith_RedefinableElement_UML_Region_isConsistentWith_redefiningElement->setName("redefiningElement");
	uML_Region_isConsistentWith_RedefinableElement_UML_Region_isConsistentWith_redefiningElement->setType(get_UML_RedefinableElement());
	uML_Region_isConsistentWith_RedefinableElement_UML_Region_isConsistentWith_redefiningElement->setLower(1);
	uML_Region_isConsistentWith_RedefinableElement_UML_Region_isConsistentWith_redefiningElement->setUpper(1);
	uML_Region_isConsistentWith_RedefinableElement_UML_Region_isConsistentWith_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Region_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_Region_isConsistentWith_RedefinableElement_UML_Region_isConsistentWith_redefiningElement);
	
	
	uML_Region->getOwnedOperation()->push_back(uML_Region_isConsistentWith_RedefinableElement); 
	uML_Region_isRedefinitionContextValid_RedefinableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Region_isRedefinitionContextValid_RedefinableElement->setName("isRedefinitionContextValid");
	uML_Region_isRedefinitionContextValid_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Region_isRedefinitionContextValid_result->setName("result");
	uML_Region_isRedefinitionContextValid_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Region_isRedefinitionContextValid_result->setLower(1);
	uML_Region_isRedefinitionContextValid_result->setUpper(1);
	uML_Region_isRedefinitionContextValid_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Region_isRedefinitionContextValid_RedefinableElement->getOwnedParameter()->push_back(uML_Region_isRedefinitionContextValid_result);
	uML_Region_isRedefinitionContextValid_RedefinableElement_UML_Region_isRedefinitionContextValid_redefinedElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Region_isRedefinitionContextValid_RedefinableElement_UML_Region_isRedefinitionContextValid_redefinedElement->setName("redefinedElement");
	uML_Region_isRedefinitionContextValid_RedefinableElement_UML_Region_isRedefinitionContextValid_redefinedElement->setType(get_UML_RedefinableElement());
	uML_Region_isRedefinitionContextValid_RedefinableElement_UML_Region_isRedefinitionContextValid_redefinedElement->setLower(1);
	uML_Region_isRedefinitionContextValid_RedefinableElement_UML_Region_isRedefinitionContextValid_redefinedElement->setUpper(1);
	uML_Region_isRedefinitionContextValid_RedefinableElement_UML_Region_isRedefinitionContextValid_redefinedElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Region_isRedefinitionContextValid_RedefinableElement->getOwnedParameter()->push_back(uML_Region_isRedefinitionContextValid_RedefinableElement_UML_Region_isRedefinitionContextValid_redefinedElement);
	
	
	uML_Region->getOwnedOperation()->push_back(uML_Region_isRedefinitionContextValid_RedefinableElement); 
	uML_Region_redefinitionContext_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Region_redefinitionContext_->setName("redefinitionContext");
	uML_Region_redefinitionContext_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Region_redefinitionContext_result->setName("result");
	uML_Region_redefinitionContext_result->setType(get_UML_Classifier());
	uML_Region_redefinitionContext_result->setLower(1);
	uML_Region_redefinitionContext_result->setUpper(1);
	uML_Region_redefinitionContext_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Region_redefinitionContext_->getOwnedParameter()->push_back(uML_Region_redefinitionContext_result);
	
	
	uML_Region->getOwnedOperation()->push_back(uML_Region_redefinitionContext_); 
	
	


	uML_Relationship.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Relationship->setName("Relationship");
	uML_Relationship->setIsAbstract(true);
	uML_Relationship->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Relationship);
	
	//constraints
	
	
	uML_Relationship_relatedElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Relationship_relatedElement->setName("relatedElement");
	uML_Relationship_relatedElement->setType(get_UML_Element());
	uML_Relationship_relatedElement->setLower(1);
	uML_Relationship_relatedElement->setUpper(-1);
	uML_Relationship->getOwnedAttribute()->push_back(uML_Relationship_relatedElement);
	uML_Relationship_relatedElement->setClass(uML_Relationship);
	
	
	
	
	


	uML_RemoveStructuralFeatureValueAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_RemoveStructuralFeatureValueAction->setName("RemoveStructuralFeatureValueAction");
	uML_RemoveStructuralFeatureValueAction->setIsAbstract(false);
	uML_RemoveStructuralFeatureValueAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_RemoveStructuralFeatureValueAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("removeAt_and_value");
	con->getConstrainedElement()->push_back(uML_RemoveStructuralFeatureValueAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("if structuralFeature.isOrdered and not structuralFeature.isUnique and  not isRemoveDuplicates then"\
	"  value = null and"\
	"  removeAt <> null and"\
	"  removeAt.type = UnlimitedNatural and"\
	"  removeAt.is(1,1)"\
	"else"\
	"  removeAt = null and value <> null"\
	"endif");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_RemoveStructuralFeatureValueAction->getOwnedRule()->push_back(con);
	con->setContext(uML_RemoveStructuralFeatureValueAction->getNamespace());
	
	
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates->setName("isRemoveDuplicates");
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates->setLower(1);
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates->setUpper(1);
	uML_RemoveStructuralFeatureValueAction->getOwnedAttribute()->push_back(uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates);
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates->setClass(uML_RemoveStructuralFeatureValueAction);
	uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates->setDefaultValue(uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates_defaultValue_LiteralBoolean_UML_RemoveStructuralFeatureValueAction_isRemoveDuplicates);
	
	uML_RemoveStructuralFeatureValueAction_removeAt.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_RemoveStructuralFeatureValueAction_removeAt->setName("removeAt");
	uML_RemoveStructuralFeatureValueAction_removeAt->setType(get_UML_InputPin());
	uML_RemoveStructuralFeatureValueAction_removeAt->setLower(0);
	uML_RemoveStructuralFeatureValueAction_removeAt->setUpper(1);
	uML_RemoveStructuralFeatureValueAction->getOwnedAttribute()->push_back(uML_RemoveStructuralFeatureValueAction_removeAt);
	uML_RemoveStructuralFeatureValueAction_removeAt->setClass(uML_RemoveStructuralFeatureValueAction);
	
	
	
	
	


	uML_RemoveVariableValueAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_RemoveVariableValueAction->setName("RemoveVariableValueAction");
	uML_RemoveVariableValueAction->setIsAbstract(false);
	uML_RemoveVariableValueAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_RemoveVariableValueAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("removeAt_and_value");
	con->getConstrainedElement()->push_back(uML_RemoveVariableValueAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("if  variable.isOrdered and not variable.isUnique and not isRemoveDuplicates then "\
	"  value = null and"\
	"  removeAt <> null and"\
	"  removeAt.type = UnlimitedNatural and"\
	"  removeAt.is(1,1)"\
	"else"\
	"  removeAt = null and value <> null"\
	"endif");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_RemoveVariableValueAction->getOwnedRule()->push_back(con);
	con->setContext(uML_RemoveVariableValueAction->getNamespace());
	
	
	uML_RemoveVariableValueAction_isRemoveDuplicates.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_RemoveVariableValueAction_isRemoveDuplicates->setName("isRemoveDuplicates");
	uML_RemoveVariableValueAction_isRemoveDuplicates->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_RemoveVariableValueAction_isRemoveDuplicates->setLower(1);
	uML_RemoveVariableValueAction_isRemoveDuplicates->setUpper(1);
	uML_RemoveVariableValueAction->getOwnedAttribute()->push_back(uML_RemoveVariableValueAction_isRemoveDuplicates);
	uML_RemoveVariableValueAction_isRemoveDuplicates->setClass(uML_RemoveVariableValueAction);
	uML_RemoveVariableValueAction_isRemoveDuplicates->setDefaultValue(uML_RemoveVariableValueAction_isRemoveDuplicates_defaultValue_LiteralBoolean_UML_RemoveVariableValueAction_isRemoveDuplicates);
	
	uML_RemoveVariableValueAction_removeAt.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_RemoveVariableValueAction_removeAt->setName("removeAt");
	uML_RemoveVariableValueAction_removeAt->setType(get_UML_InputPin());
	uML_RemoveVariableValueAction_removeAt->setLower(0);
	uML_RemoveVariableValueAction_removeAt->setUpper(1);
	uML_RemoveVariableValueAction->getOwnedAttribute()->push_back(uML_RemoveVariableValueAction_removeAt);
	uML_RemoveVariableValueAction_removeAt->setClass(uML_RemoveVariableValueAction);
	
	
	
	
	


	uML_ReplyAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ReplyAction->setName("ReplyAction");
	uML_ReplyAction->setIsAbstract(false);
	uML_ReplyAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ReplyAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("event_on_reply_to_call_trigger");
	con->getConstrainedElement()->push_back(uML_ReplyAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("replyToCall.event.oclIsKindOf(CallEvent)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReplyAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReplyAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("pins_match_parameter");
	con->getConstrainedElement()->push_back(uML_ReplyAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let parameter:OrderedSet(Parameter) = replyToCall.event.oclAsType(CallEvent).operation.outputParameters() in"\
	"replyValue->size()=parameter->size() and"\
	"Sequence{1..replyValue->size()}->forAll(i |"\
	"	replyValue->at(i).type.conformsTo(parameter->at(i).type) and"\
	"	replyValue->at(i).isOrdered=parameter->at(i).isOrdered and"\
	"	replyValue->at(i).compatibleWith(parameter->at(i)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ReplyAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ReplyAction->getNamespace());
	
	
	uML_ReplyAction_replyToCall.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReplyAction_replyToCall->setName("replyToCall");
	uML_ReplyAction_replyToCall->setType(get_UML_Trigger());
	uML_ReplyAction_replyToCall->setLower(1);
	uML_ReplyAction_replyToCall->setUpper(1);
	uML_ReplyAction->getOwnedAttribute()->push_back(uML_ReplyAction_replyToCall);
	uML_ReplyAction_replyToCall->setClass(uML_ReplyAction);
	
	
	uML_ReplyAction_replyValue.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReplyAction_replyValue->setName("replyValue");
	uML_ReplyAction_replyValue->setType(get_UML_InputPin());
	uML_ReplyAction_replyValue->setLower(0);
	uML_ReplyAction_replyValue->setUpper(-1);
	uML_ReplyAction->getOwnedAttribute()->push_back(uML_ReplyAction_replyValue);
	uML_ReplyAction_replyValue->setClass(uML_ReplyAction);
	
	
	uML_ReplyAction_returnInformation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ReplyAction_returnInformation->setName("returnInformation");
	uML_ReplyAction_returnInformation->setType(get_UML_InputPin());
	uML_ReplyAction_returnInformation->setLower(1);
	uML_ReplyAction_returnInformation->setUpper(1);
	uML_ReplyAction->getOwnedAttribute()->push_back(uML_ReplyAction_returnInformation);
	uML_ReplyAction_returnInformation->setClass(uML_ReplyAction);
	
	
	
	
	


	uML_SendObjectAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_SendObjectAction->setName("SendObjectAction");
	uML_SendObjectAction->setIsAbstract(false);
	uML_SendObjectAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_SendObjectAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_target_pin");
	con->getConstrainedElement()->push_back(uML_SendObjectAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("onPort<>null implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_SendObjectAction->getOwnedRule()->push_back(con);
	con->setContext(uML_SendObjectAction->getNamespace());
	
	
	uML_SendObjectAction_request.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_SendObjectAction_request->setName("request");
	uML_SendObjectAction_request->setType(get_UML_InputPin());
	uML_SendObjectAction_request->setLower(1);
	uML_SendObjectAction_request->setUpper(1);
	uML_SendObjectAction->getOwnedAttribute()->push_back(uML_SendObjectAction_request);
	uML_SendObjectAction_request->setClass(uML_SendObjectAction);
	
	
	uML_SendObjectAction_target.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_SendObjectAction_target->setName("target");
	uML_SendObjectAction_target->setType(get_UML_InputPin());
	uML_SendObjectAction_target->setLower(1);
	uML_SendObjectAction_target->setUpper(1);
	uML_SendObjectAction->getOwnedAttribute()->push_back(uML_SendObjectAction_target);
	uML_SendObjectAction_target->setClass(uML_SendObjectAction);
	
	
	
	
	


	uML_SendSignalAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_SendSignalAction->setName("SendSignalAction");
	uML_SendSignalAction->setIsAbstract(false);
	uML_SendSignalAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_SendSignalAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_ordering_multiplicity");
	con->getConstrainedElement()->push_back(uML_SendSignalAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let attribute: OrderedSet(Property) = signal.allAttributes() in"\
	"Sequence{1..argument->size()}->forAll(i | "\
	"	argument->at(i).type.conformsTo(attribute->at(i).type) and "\
	"	argument->at(i).isOrdered = attribute->at(i).isOrdered and"\
	"	argument->at(i).compatibleWith(attribute->at(i)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_SendSignalAction->getOwnedRule()->push_back(con);
	con->setContext(uML_SendSignalAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_target_pin");
	con->getConstrainedElement()->push_back(uML_SendSignalAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not onPort->isEmpty() implies target.type.oclAsType(Classifier).allFeatures()->includes(onPort)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_SendSignalAction->getOwnedRule()->push_back(con);
	con->setContext(uML_SendSignalAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("number_order");
	con->getConstrainedElement()->push_back(uML_SendSignalAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("argument->size()=signal.allAttributes()->size()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_SendSignalAction->getOwnedRule()->push_back(con);
	con->setContext(uML_SendSignalAction->getNamespace());
	
	
	uML_SendSignalAction_signal.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_SendSignalAction_signal->setName("signal");
	uML_SendSignalAction_signal->setType(get_UML_Signal());
	uML_SendSignalAction_signal->setLower(1);
	uML_SendSignalAction_signal->setUpper(1);
	uML_SendSignalAction->getOwnedAttribute()->push_back(uML_SendSignalAction_signal);
	uML_SendSignalAction_signal->setClass(uML_SendSignalAction);
	
	
	uML_SendSignalAction_target.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_SendSignalAction_target->setName("target");
	uML_SendSignalAction_target->setType(get_UML_InputPin());
	uML_SendSignalAction_target->setLower(1);
	uML_SendSignalAction_target->setUpper(1);
	uML_SendSignalAction->getOwnedAttribute()->push_back(uML_SendSignalAction_target);
	uML_SendSignalAction_target->setClass(uML_SendSignalAction);
	
	
	
	
	


	uML_SequenceNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_SequenceNode->setName("SequenceNode");
	uML_SequenceNode->setIsAbstract(false);
	uML_SequenceNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_SequenceNode);
	
	//constraints
	
	
	uML_SequenceNode_executableNode.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_SequenceNode_executableNode->setName("executableNode");
	uML_SequenceNode_executableNode->setType(get_UML_ExecutableNode());
	uML_SequenceNode_executableNode->setLower(0);
	uML_SequenceNode_executableNode->setUpper(-1);
	uML_SequenceNode->getOwnedAttribute()->push_back(uML_SequenceNode_executableNode);
	uML_SequenceNode_executableNode->setClass(uML_SequenceNode);
	
	
	
	
	


	uML_Signal.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Signal->setName("Signal");
	uML_Signal->setIsAbstract(false);
	uML_Signal->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Signal);
	
	//constraints
	
	
	uML_Signal_ownedAttribute.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Signal_ownedAttribute->setName("ownedAttribute");
	uML_Signal_ownedAttribute->setType(get_UML_Property());
	uML_Signal_ownedAttribute->setLower(0);
	uML_Signal_ownedAttribute->setUpper(-1);
	uML_Signal->getOwnedAttribute()->push_back(uML_Signal_ownedAttribute);
	uML_Signal_ownedAttribute->setClass(uML_Signal);
	
	
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->setName("createOwnedAttribute");
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setName("");
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setType(get_UML_Property());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setLower(1);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setUpper(1);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name->setName("name");
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name->setLower(0);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name->setUpper(1);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type->setName("type");
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type->setType(get_UML_Type());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type->setLower(0);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type->setUpper(1);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_lower.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_lower->setName("lower");
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_lower->setLower(1);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_lower->setUpper(1);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_lower->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_lower);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_upper.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_upper->setName("upper");
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_upper->setLower(1);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_upper->setUpper(1);
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_upper->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_upper);
	
	
	uML_Signal->getOwnedOperation()->push_back(uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural); 
	
	


	uML_SignalEvent.reset(uml::UmlFactory::eInstance()->createClass());
	uML_SignalEvent->setName("SignalEvent");
	uML_SignalEvent->setIsAbstract(false);
	uML_SignalEvent->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_SignalEvent);
	
	//constraints
	
	
	uML_SignalEvent_signal.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_SignalEvent_signal->setName("signal");
	uML_SignalEvent_signal->setType(get_UML_Signal());
	uML_SignalEvent_signal->setLower(1);
	uML_SignalEvent_signal->setUpper(1);
	uML_SignalEvent->getOwnedAttribute()->push_back(uML_SignalEvent_signal);
	uML_SignalEvent_signal->setClass(uML_SignalEvent);
	
	
	
	
	


	uML_Slot.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Slot->setName("Slot");
	uML_Slot->setIsAbstract(false);
	uML_Slot->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Slot);
	
	//constraints
	
	
	uML_Slot_definingFeature.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Slot_definingFeature->setName("definingFeature");
	uML_Slot_definingFeature->setType(get_UML_StructuralFeature());
	uML_Slot_definingFeature->setLower(1);
	uML_Slot_definingFeature->setUpper(1);
	uML_Slot->getOwnedAttribute()->push_back(uML_Slot_definingFeature);
	uML_Slot_definingFeature->setClass(uML_Slot);
	
	
	uML_Slot_owningInstance.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Slot_owningInstance->setName("owningInstance");
	uML_Slot_owningInstance->setType(get_UML_InstanceSpecification());
	uML_Slot_owningInstance->setLower(1);
	uML_Slot_owningInstance->setUpper(1);
	uML_Slot->getOwnedAttribute()->push_back(uML_Slot_owningInstance);
	uML_Slot_owningInstance->setClass(uML_Slot);
	
	
	uML_Slot_value.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Slot_value->setName("value");
	uML_Slot_value->setType(get_UML_ValueSpecification());
	uML_Slot_value->setLower(0);
	uML_Slot_value->setUpper(-1);
	uML_Slot->getOwnedAttribute()->push_back(uML_Slot_value);
	uML_Slot_value->setClass(uML_Slot);
	
	
	
	
	


	uML_StartClassifierBehaviorAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_StartClassifierBehaviorAction->setName("StartClassifierBehaviorAction");
	uML_StartClassifierBehaviorAction->setIsAbstract(false);
	uML_StartClassifierBehaviorAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_StartClassifierBehaviorAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_StartClassifierBehaviorAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StartClassifierBehaviorAction->getOwnedRule()->push_back(con);
	con->setContext(uML_StartClassifierBehaviorAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_has_classifier");
	con->getConstrainedElement()->push_back(uML_StartClassifierBehaviorAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.type->notEmpty() implies "\
	"   (object.type.oclIsKindOf(BehavioredClassifier) and object.type.oclAsType(BehavioredClassifier).classifierBehavior<>null)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StartClassifierBehaviorAction->getOwnedRule()->push_back(con);
	con->setContext(uML_StartClassifierBehaviorAction->getNamespace());
	
	
	uML_StartClassifierBehaviorAction_object.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StartClassifierBehaviorAction_object->setName("object");
	uML_StartClassifierBehaviorAction_object->setType(get_UML_InputPin());
	uML_StartClassifierBehaviorAction_object->setLower(1);
	uML_StartClassifierBehaviorAction_object->setUpper(1);
	uML_StartClassifierBehaviorAction->getOwnedAttribute()->push_back(uML_StartClassifierBehaviorAction_object);
	uML_StartClassifierBehaviorAction_object->setClass(uML_StartClassifierBehaviorAction);
	
	
	
	
	


	uML_StartObjectBehaviorAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_StartObjectBehaviorAction->setName("StartObjectBehaviorAction");
	uML_StartObjectBehaviorAction->setIsAbstract(false);
	uML_StartObjectBehaviorAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_StartObjectBehaviorAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_of_object");
	con->getConstrainedElement()->push_back(uML_StartObjectBehaviorAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.behavior()<>null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StartObjectBehaviorAction->getOwnedRule()->push_back(con);
	con->setContext(uML_StartObjectBehaviorAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity_of_object");
	con->getConstrainedElement()->push_back(uML_StartObjectBehaviorAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StartObjectBehaviorAction->getOwnedRule()->push_back(con);
	con->setContext(uML_StartObjectBehaviorAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_onport");
	con->getConstrainedElement()->push_back(uML_StartObjectBehaviorAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("onPort->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StartObjectBehaviorAction->getOwnedRule()->push_back(con);
	con->setContext(uML_StartObjectBehaviorAction->getNamespace());
	
	
	uML_StartObjectBehaviorAction_object.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StartObjectBehaviorAction_object->setName("object");
	uML_StartObjectBehaviorAction_object->setType(get_UML_InputPin());
	uML_StartObjectBehaviorAction_object->setLower(1);
	uML_StartObjectBehaviorAction_object->setUpper(1);
	uML_StartObjectBehaviorAction->getOwnedAttribute()->push_back(uML_StartObjectBehaviorAction_object);
	uML_StartObjectBehaviorAction_object->setClass(uML_StartObjectBehaviorAction);
	
	
	
	uML_StartObjectBehaviorAction_behavior_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StartObjectBehaviorAction_behavior_->setName("behavior");
	uML_StartObjectBehaviorAction_behavior_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StartObjectBehaviorAction_behavior_result->setName("result");
	uML_StartObjectBehaviorAction_behavior_result->setType(get_UML_Behavior());
	uML_StartObjectBehaviorAction_behavior_result->setLower(0);
	uML_StartObjectBehaviorAction_behavior_result->setUpper(1);
	uML_StartObjectBehaviorAction_behavior_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StartObjectBehaviorAction_behavior_->getOwnedParameter()->push_back(uML_StartObjectBehaviorAction_behavior_result);
	
	
	uML_StartObjectBehaviorAction->getOwnedOperation()->push_back(uML_StartObjectBehaviorAction_behavior_); 
	uML_StartObjectBehaviorAction_inputParameters_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StartObjectBehaviorAction_inputParameters_->setName("inputParameters");
	uML_StartObjectBehaviorAction_inputParameters_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StartObjectBehaviorAction_inputParameters_result->setName("result");
	uML_StartObjectBehaviorAction_inputParameters_result->setType(get_UML_Parameter());
	uML_StartObjectBehaviorAction_inputParameters_result->setLower(0);
	uML_StartObjectBehaviorAction_inputParameters_result->setUpper(-1);
	uML_StartObjectBehaviorAction_inputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StartObjectBehaviorAction_inputParameters_->getOwnedParameter()->push_back(uML_StartObjectBehaviorAction_inputParameters_result);
	
	
	uML_StartObjectBehaviorAction->getOwnedOperation()->push_back(uML_StartObjectBehaviorAction_inputParameters_); 
	uML_StartObjectBehaviorAction_outputParameters_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StartObjectBehaviorAction_outputParameters_->setName("outputParameters");
	uML_StartObjectBehaviorAction_outputParameters_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StartObjectBehaviorAction_outputParameters_result->setName("result");
	uML_StartObjectBehaviorAction_outputParameters_result->setType(get_UML_Parameter());
	uML_StartObjectBehaviorAction_outputParameters_result->setLower(0);
	uML_StartObjectBehaviorAction_outputParameters_result->setUpper(-1);
	uML_StartObjectBehaviorAction_outputParameters_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StartObjectBehaviorAction_outputParameters_->getOwnedParameter()->push_back(uML_StartObjectBehaviorAction_outputParameters_result);
	
	
	uML_StartObjectBehaviorAction->getOwnedOperation()->push_back(uML_StartObjectBehaviorAction_outputParameters_); 
	
	


	uML_State.reset(uml::UmlFactory::eInstance()->createClass());
	uML_State->setName("State");
	uML_State->setIsAbstract(false);
	uML_State->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_State);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("composite_states");
	con->getConstrainedElement()->push_back(uML_State);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("connectionPoint->notEmpty() implies isComposite");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_State->getOwnedRule()->push_back(con);
	con->setContext(uML_State->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("destinations_or_sources_of_transitions");
	con->getConstrainedElement()->push_back(uML_State);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("self.isSubmachineState implies (self.connection->forAll (cp |"\
	"  cp.entry->forAll (ps | ps.stateMachine = self.submachine) and"\
	"  cp.exit->forAll (ps | ps.stateMachine = self.submachine)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_State->getOwnedRule()->push_back(con);
	con->setContext(uML_State->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("submachine_or_regions");
	con->getConstrainedElement()->push_back(uML_State);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isComposite implies not isSubmachineState");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_State->getOwnedRule()->push_back(con);
	con->setContext(uML_State->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("entry_or_exit");
	con->getConstrainedElement()->push_back(uML_State);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("connectionPoint->forAll(kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_State->getOwnedRule()->push_back(con);
	con->setContext(uML_State->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("submachine_states");
	con->getConstrainedElement()->push_back(uML_State);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("isSubmachineState implies connection->notEmpty( )");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_State->getOwnedRule()->push_back(con);
	con->setContext(uML_State->getNamespace());
	
	
	uML_State_connection.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_State_connection->setName("connection");
	uML_State_connection->setType(get_UML_ConnectionPointReference());
	uML_State_connection->setLower(0);
	uML_State_connection->setUpper(-1);
	uML_State->getOwnedAttribute()->push_back(uML_State_connection);
	uML_State_connection->setClass(uML_State);
	
	
	uML_State_connectionPoint.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_State_connectionPoint->setName("connectionPoint");
	uML_State_connectionPoint->setType(get_UML_Pseudostate());
	uML_State_connectionPoint->setLower(0);
	uML_State_connectionPoint->setUpper(-1);
	uML_State->getOwnedAttribute()->push_back(uML_State_connectionPoint);
	uML_State_connectionPoint->setClass(uML_State);
	
	
	uML_State_deferrableTrigger.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_State_deferrableTrigger->setName("deferrableTrigger");
	uML_State_deferrableTrigger->setType(get_UML_Trigger());
	uML_State_deferrableTrigger->setLower(0);
	uML_State_deferrableTrigger->setUpper(-1);
	uML_State->getOwnedAttribute()->push_back(uML_State_deferrableTrigger);
	uML_State_deferrableTrigger->setClass(uML_State);
	
	
	uML_State_doActivity.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_State_doActivity->setName("doActivity");
	uML_State_doActivity->setType(get_UML_Behavior());
	uML_State_doActivity->setLower(0);
	uML_State_doActivity->setUpper(1);
	uML_State->getOwnedAttribute()->push_back(uML_State_doActivity);
	uML_State_doActivity->setClass(uML_State);
	
	
	uML_State_entry.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_State_entry->setName("entry");
	uML_State_entry->setType(get_UML_Behavior());
	uML_State_entry->setLower(0);
	uML_State_entry->setUpper(1);
	uML_State->getOwnedAttribute()->push_back(uML_State_entry);
	uML_State_entry->setClass(uML_State);
	
	
	uML_State_exit.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_State_exit->setName("exit");
	uML_State_exit->setType(get_UML_Behavior());
	uML_State_exit->setLower(0);
	uML_State_exit->setUpper(1);
	uML_State->getOwnedAttribute()->push_back(uML_State_exit);
	uML_State_exit->setClass(uML_State);
	
	
	uML_State_isComposite.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_State_isComposite->setName("isComposite");
	uML_State_isComposite->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isComposite->setLower(1);
	uML_State_isComposite->setUpper(1);
	uML_State->getOwnedAttribute()->push_back(uML_State_isComposite);
	uML_State_isComposite->setClass(uML_State);
	
	
	uML_State_isOrthogonal.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_State_isOrthogonal->setName("isOrthogonal");
	uML_State_isOrthogonal->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isOrthogonal->setLower(1);
	uML_State_isOrthogonal->setUpper(1);
	uML_State->getOwnedAttribute()->push_back(uML_State_isOrthogonal);
	uML_State_isOrthogonal->setClass(uML_State);
	
	
	uML_State_isSimple.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_State_isSimple->setName("isSimple");
	uML_State_isSimple->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isSimple->setLower(1);
	uML_State_isSimple->setUpper(1);
	uML_State->getOwnedAttribute()->push_back(uML_State_isSimple);
	uML_State_isSimple->setClass(uML_State);
	uML_State_isSimple->setDefaultValue(uML_State_isSimple_defaultValue_LiteralBoolean_UML_State_isSimple);
	
	uML_State_isSubmachineState.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_State_isSubmachineState->setName("isSubmachineState");
	uML_State_isSubmachineState->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isSubmachineState->setLower(1);
	uML_State_isSubmachineState->setUpper(1);
	uML_State->getOwnedAttribute()->push_back(uML_State_isSubmachineState);
	uML_State_isSubmachineState->setClass(uML_State);
	
	
	uML_State_redefinedState.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_State_redefinedState->setName("redefinedState");
	uML_State_redefinedState->setType(get_UML_State());
	uML_State_redefinedState->setLower(0);
	uML_State_redefinedState->setUpper(1);
	uML_State->getOwnedAttribute()->push_back(uML_State_redefinedState);
	uML_State_redefinedState->setClass(uML_State);
	
	
	uML_State_redefinitionContext.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_State_redefinitionContext->setName("redefinitionContext");
	uML_State_redefinitionContext->setType(get_UML_Classifier());
	uML_State_redefinitionContext->setLower(1);
	uML_State_redefinitionContext->setUpper(1);
	uML_State->getOwnedAttribute()->push_back(uML_State_redefinitionContext);
	uML_State_redefinitionContext->setClass(uML_State);
	
	
	uML_State_region.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_State_region->setName("region");
	uML_State_region->setType(get_UML_Region());
	uML_State_region->setLower(0);
	uML_State_region->setUpper(-1);
	uML_State->getOwnedAttribute()->push_back(uML_State_region);
	uML_State_region->setClass(uML_State);
	
	
	uML_State_stateInvariant.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_State_stateInvariant->setName("stateInvariant");
	uML_State_stateInvariant->setType(get_UML_Constraint());
	uML_State_stateInvariant->setLower(0);
	uML_State_stateInvariant->setUpper(1);
	uML_State->getOwnedAttribute()->push_back(uML_State_stateInvariant);
	uML_State_stateInvariant->setClass(uML_State);
	
	
	uML_State_submachine.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_State_submachine->setName("submachine");
	uML_State_submachine->setType(get_UML_StateMachine());
	uML_State_submachine->setLower(0);
	uML_State_submachine->setUpper(1);
	uML_State->getOwnedAttribute()->push_back(uML_State_submachine);
	uML_State_submachine->setClass(uML_State);
	
	
	
	uML_State_containingStateMachine_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_State_containingStateMachine_->setName("containingStateMachine");
	uML_State_containingStateMachine_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_State_containingStateMachine_result->setName("result");
	uML_State_containingStateMachine_result->setType(get_UML_StateMachine());
	uML_State_containingStateMachine_result->setLower(1);
	uML_State_containingStateMachine_result->setUpper(1);
	uML_State_containingStateMachine_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_State_containingStateMachine_->getOwnedParameter()->push_back(uML_State_containingStateMachine_result);
	
	
	uML_State->getOwnedOperation()->push_back(uML_State_containingStateMachine_); 
	uML_State_isComposite_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_State_isComposite_->setName("isComposite");
	uML_State_isComposite_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_State_isComposite_result->setName("result");
	uML_State_isComposite_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isComposite_result->setLower(1);
	uML_State_isComposite_result->setUpper(1);
	uML_State_isComposite_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_State_isComposite_->getOwnedParameter()->push_back(uML_State_isComposite_result);
	
	
	uML_State->getOwnedOperation()->push_back(uML_State_isComposite_); 
	uML_State_isConsistentWith_RedefinableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_State_isConsistentWith_RedefinableElement->setName("isConsistentWith");
	uML_State_isConsistentWith_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_State_isConsistentWith_result->setName("result");
	uML_State_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isConsistentWith_result->setLower(1);
	uML_State_isConsistentWith_result->setUpper(1);
	uML_State_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_State_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_State_isConsistentWith_result);
	uML_State_isConsistentWith_RedefinableElement_UML_State_isConsistentWith_redefiningElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_State_isConsistentWith_RedefinableElement_UML_State_isConsistentWith_redefiningElement->setName("redefiningElement");
	uML_State_isConsistentWith_RedefinableElement_UML_State_isConsistentWith_redefiningElement->setType(get_UML_RedefinableElement());
	uML_State_isConsistentWith_RedefinableElement_UML_State_isConsistentWith_redefiningElement->setLower(1);
	uML_State_isConsistentWith_RedefinableElement_UML_State_isConsistentWith_redefiningElement->setUpper(1);
	uML_State_isConsistentWith_RedefinableElement_UML_State_isConsistentWith_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_State_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_State_isConsistentWith_RedefinableElement_UML_State_isConsistentWith_redefiningElement);
	
	
	uML_State->getOwnedOperation()->push_back(uML_State_isConsistentWith_RedefinableElement); 
	uML_State_isOrthogonal_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_State_isOrthogonal_->setName("isOrthogonal");
	uML_State_isOrthogonal_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_State_isOrthogonal_result->setName("result");
	uML_State_isOrthogonal_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isOrthogonal_result->setLower(1);
	uML_State_isOrthogonal_result->setUpper(1);
	uML_State_isOrthogonal_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_State_isOrthogonal_->getOwnedParameter()->push_back(uML_State_isOrthogonal_result);
	
	
	uML_State->getOwnedOperation()->push_back(uML_State_isOrthogonal_); 
	uML_State_isRedefinitionContextValid_RedefinableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_State_isRedefinitionContextValid_RedefinableElement->setName("isRedefinitionContextValid");
	uML_State_isRedefinitionContextValid_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_State_isRedefinitionContextValid_result->setName("result");
	uML_State_isRedefinitionContextValid_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isRedefinitionContextValid_result->setLower(1);
	uML_State_isRedefinitionContextValid_result->setUpper(1);
	uML_State_isRedefinitionContextValid_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_State_isRedefinitionContextValid_RedefinableElement->getOwnedParameter()->push_back(uML_State_isRedefinitionContextValid_result);
	uML_State_isRedefinitionContextValid_RedefinableElement_UML_State_isRedefinitionContextValid_redefinedElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_State_isRedefinitionContextValid_RedefinableElement_UML_State_isRedefinitionContextValid_redefinedElement->setName("redefinedElement");
	uML_State_isRedefinitionContextValid_RedefinableElement_UML_State_isRedefinitionContextValid_redefinedElement->setType(get_UML_RedefinableElement());
	uML_State_isRedefinitionContextValid_RedefinableElement_UML_State_isRedefinitionContextValid_redefinedElement->setLower(1);
	uML_State_isRedefinitionContextValid_RedefinableElement_UML_State_isRedefinitionContextValid_redefinedElement->setUpper(1);
	uML_State_isRedefinitionContextValid_RedefinableElement_UML_State_isRedefinitionContextValid_redefinedElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_State_isRedefinitionContextValid_RedefinableElement->getOwnedParameter()->push_back(uML_State_isRedefinitionContextValid_RedefinableElement_UML_State_isRedefinitionContextValid_redefinedElement);
	
	
	uML_State->getOwnedOperation()->push_back(uML_State_isRedefinitionContextValid_RedefinableElement); 
	uML_State_isSimple_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_State_isSimple_->setName("isSimple");
	uML_State_isSimple_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_State_isSimple_result->setName("result");
	uML_State_isSimple_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isSimple_result->setLower(1);
	uML_State_isSimple_result->setUpper(1);
	uML_State_isSimple_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_State_isSimple_->getOwnedParameter()->push_back(uML_State_isSimple_result);
	
	
	uML_State->getOwnedOperation()->push_back(uML_State_isSimple_); 
	uML_State_isSubmachineState_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_State_isSubmachineState_->setName("isSubmachineState");
	uML_State_isSubmachineState_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_State_isSubmachineState_result->setName("result");
	uML_State_isSubmachineState_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_State_isSubmachineState_result->setLower(1);
	uML_State_isSubmachineState_result->setUpper(1);
	uML_State_isSubmachineState_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_State_isSubmachineState_->getOwnedParameter()->push_back(uML_State_isSubmachineState_result);
	
	
	uML_State->getOwnedOperation()->push_back(uML_State_isSubmachineState_); 
	uML_State_redefinitionContext_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_State_redefinitionContext_->setName("redefinitionContext");
	uML_State_redefinitionContext_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_State_redefinitionContext_result->setName("result");
	uML_State_redefinitionContext_result->setType(get_UML_Classifier());
	uML_State_redefinitionContext_result->setLower(1);
	uML_State_redefinitionContext_result->setUpper(1);
	uML_State_redefinitionContext_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_State_redefinitionContext_->getOwnedParameter()->push_back(uML_State_redefinitionContext_result);
	
	
	uML_State->getOwnedOperation()->push_back(uML_State_redefinitionContext_); 
	
	


	uML_StateInvariant.reset(uml::UmlFactory::eInstance()->createClass());
	uML_StateInvariant->setName("StateInvariant");
	uML_StateInvariant->setIsAbstract(false);
	uML_StateInvariant->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_StateInvariant);
	
	//constraints
	
	
	uML_StateInvariant_covered.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StateInvariant_covered->setName("covered");
	uML_StateInvariant_covered->setType(get_UML_Lifeline());
	uML_StateInvariant_covered->setLower(1);
	uML_StateInvariant_covered->setUpper(1);
	uML_StateInvariant->getOwnedAttribute()->push_back(uML_StateInvariant_covered);
	uML_StateInvariant_covered->setClass(uML_StateInvariant);
	
	
	uML_StateInvariant_invariant.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StateInvariant_invariant->setName("invariant");
	uML_StateInvariant_invariant->setType(get_UML_Constraint());
	uML_StateInvariant_invariant->setLower(1);
	uML_StateInvariant_invariant->setUpper(1);
	uML_StateInvariant->getOwnedAttribute()->push_back(uML_StateInvariant_invariant);
	uML_StateInvariant_invariant->setClass(uML_StateInvariant);
	
	
	
	
	


	uML_StateMachine.reset(uml::UmlFactory::eInstance()->createClass());
	uML_StateMachine->setName("StateMachine");
	uML_StateMachine->setIsAbstract(false);
	uML_StateMachine->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_StateMachine);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("connection_points");
	con->getConstrainedElement()->push_back(uML_StateMachine);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("connectionPoint->forAll (kind = PseudostateKind::entryPoint or kind = PseudostateKind::exitPoint)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StateMachine->getOwnedRule()->push_back(con);
	con->setContext(uML_StateMachine->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("classifier_context");
	con->getConstrainedElement()->push_back(uML_StateMachine);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("_'context' <> null implies not _'context'.oclIsKindOf(Interface)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StateMachine->getOwnedRule()->push_back(con);
	con->setContext(uML_StateMachine->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("method");
	con->getConstrainedElement()->push_back(uML_StateMachine);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("specification <> null implies connectionPoint->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StateMachine->getOwnedRule()->push_back(con);
	con->setContext(uML_StateMachine->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("context_classifier");
	con->getConstrainedElement()->push_back(uML_StateMachine);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("specification <> null implies ( _'context' <> null and specification.featuringClassifier->exists(c | c = _'context'))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StateMachine->getOwnedRule()->push_back(con);
	con->setContext(uML_StateMachine->getNamespace());
	
	
	uML_StateMachine_connectionPoint.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StateMachine_connectionPoint->setName("connectionPoint");
	uML_StateMachine_connectionPoint->setType(get_UML_Pseudostate());
	uML_StateMachine_connectionPoint->setLower(0);
	uML_StateMachine_connectionPoint->setUpper(-1);
	uML_StateMachine->getOwnedAttribute()->push_back(uML_StateMachine_connectionPoint);
	uML_StateMachine_connectionPoint->setClass(uML_StateMachine);
	
	
	uML_StateMachine_extendedStateMachine.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StateMachine_extendedStateMachine->setName("extendedStateMachine");
	uML_StateMachine_extendedStateMachine->setType(get_UML_StateMachine());
	uML_StateMachine_extendedStateMachine->setLower(0);
	uML_StateMachine_extendedStateMachine->setUpper(-1);
	uML_StateMachine->getOwnedAttribute()->push_back(uML_StateMachine_extendedStateMachine);
	uML_StateMachine_extendedStateMachine->setClass(uML_StateMachine);
	
	
	uML_StateMachine_region.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StateMachine_region->setName("region");
	uML_StateMachine_region->setType(get_UML_Region());
	uML_StateMachine_region->setLower(1);
	uML_StateMachine_region->setUpper(-1);
	uML_StateMachine->getOwnedAttribute()->push_back(uML_StateMachine_region);
	uML_StateMachine_region->setClass(uML_StateMachine);
	
	
	uML_StateMachine_submachineState.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StateMachine_submachineState->setName("submachineState");
	uML_StateMachine_submachineState->setType(get_UML_State());
	uML_StateMachine_submachineState->setLower(0);
	uML_StateMachine_submachineState->setUpper(-1);
	uML_StateMachine->getOwnedAttribute()->push_back(uML_StateMachine_submachineState);
	uML_StateMachine_submachineState->setClass(uML_StateMachine);
	
	
	
	uML_StateMachine_LCA_Vertex_Vertex.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StateMachine_LCA_Vertex_Vertex->setName("LCA");
	uML_StateMachine_LCA_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StateMachine_LCA_result->setName("result");
	uML_StateMachine_LCA_result->setType(get_UML_Region());
	uML_StateMachine_LCA_result->setLower(1);
	uML_StateMachine_LCA_result->setUpper(1);
	uML_StateMachine_LCA_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StateMachine_LCA_Vertex_Vertex->getOwnedParameter()->push_back(uML_StateMachine_LCA_result);
	uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s1.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s1->setName("s1");
	uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s1->setType(get_UML_Vertex());
	uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s1->setLower(1);
	uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s1->setUpper(1);
	uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s1->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_StateMachine_LCA_Vertex_Vertex->getOwnedParameter()->push_back(uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s1);
	uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s2.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s2->setName("s2");
	uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s2->setType(get_UML_Vertex());
	uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s2->setLower(1);
	uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s2->setUpper(1);
	uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s2->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_StateMachine_LCA_Vertex_Vertex->getOwnedParameter()->push_back(uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s2);
	
	
	uML_StateMachine->getOwnedOperation()->push_back(uML_StateMachine_LCA_Vertex_Vertex); 
	uML_StateMachine_LCAState_Vertex_Vertex.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StateMachine_LCAState_Vertex_Vertex->setName("LCAState");
	uML_StateMachine_LCAState_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StateMachine_LCAState_result->setName("result");
	uML_StateMachine_LCAState_result->setType(get_UML_State());
	uML_StateMachine_LCAState_result->setLower(1);
	uML_StateMachine_LCAState_result->setUpper(1);
	uML_StateMachine_LCAState_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StateMachine_LCAState_Vertex_Vertex->getOwnedParameter()->push_back(uML_StateMachine_LCAState_result);
	uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v1.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v1->setName("v1");
	uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v1->setType(get_UML_Vertex());
	uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v1->setLower(1);
	uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v1->setUpper(1);
	uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v1->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_StateMachine_LCAState_Vertex_Vertex->getOwnedParameter()->push_back(uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v1);
	uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v2.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v2->setName("v2");
	uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v2->setType(get_UML_Vertex());
	uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v2->setLower(1);
	uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v2->setUpper(1);
	uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v2->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_StateMachine_LCAState_Vertex_Vertex->getOwnedParameter()->push_back(uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v2);
	
	
	uML_StateMachine->getOwnedOperation()->push_back(uML_StateMachine_LCAState_Vertex_Vertex); 
	uML_StateMachine_ancestor_Vertex_Vertex.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StateMachine_ancestor_Vertex_Vertex->setName("ancestor");
	uML_StateMachine_ancestor_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StateMachine_ancestor_result->setName("result");
	uML_StateMachine_ancestor_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_StateMachine_ancestor_result->setLower(1);
	uML_StateMachine_ancestor_result->setUpper(1);
	uML_StateMachine_ancestor_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StateMachine_ancestor_Vertex_Vertex->getOwnedParameter()->push_back(uML_StateMachine_ancestor_result);
	uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s1.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s1->setName("s1");
	uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s1->setType(get_UML_Vertex());
	uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s1->setLower(1);
	uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s1->setUpper(1);
	uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s1->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_StateMachine_ancestor_Vertex_Vertex->getOwnedParameter()->push_back(uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s1);
	uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s2.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s2->setName("s2");
	uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s2->setType(get_UML_Vertex());
	uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s2->setLower(1);
	uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s2->setUpper(1);
	uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s2->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_StateMachine_ancestor_Vertex_Vertex->getOwnedParameter()->push_back(uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s2);
	
	
	uML_StateMachine->getOwnedOperation()->push_back(uML_StateMachine_ancestor_Vertex_Vertex); 
	uML_StateMachine_isConsistentWith_RedefinableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StateMachine_isConsistentWith_RedefinableElement->setName("isConsistentWith");
	uML_StateMachine_isConsistentWith_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StateMachine_isConsistentWith_result->setName("result");
	uML_StateMachine_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_StateMachine_isConsistentWith_result->setLower(1);
	uML_StateMachine_isConsistentWith_result->setUpper(1);
	uML_StateMachine_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StateMachine_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_StateMachine_isConsistentWith_result);
	uML_StateMachine_isConsistentWith_RedefinableElement_UML_StateMachine_isConsistentWith_redefiningElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StateMachine_isConsistentWith_RedefinableElement_UML_StateMachine_isConsistentWith_redefiningElement->setName("redefiningElement");
	uML_StateMachine_isConsistentWith_RedefinableElement_UML_StateMachine_isConsistentWith_redefiningElement->setType(get_UML_RedefinableElement());
	uML_StateMachine_isConsistentWith_RedefinableElement_UML_StateMachine_isConsistentWith_redefiningElement->setLower(1);
	uML_StateMachine_isConsistentWith_RedefinableElement_UML_StateMachine_isConsistentWith_redefiningElement->setUpper(1);
	uML_StateMachine_isConsistentWith_RedefinableElement_UML_StateMachine_isConsistentWith_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_StateMachine_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_StateMachine_isConsistentWith_RedefinableElement_UML_StateMachine_isConsistentWith_redefiningElement);
	
	
	uML_StateMachine->getOwnedOperation()->push_back(uML_StateMachine_isConsistentWith_RedefinableElement); 
	uML_StateMachine_isRedefinitionContextValid_RedefinableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StateMachine_isRedefinitionContextValid_RedefinableElement->setName("isRedefinitionContextValid");
	uML_StateMachine_isRedefinitionContextValid_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StateMachine_isRedefinitionContextValid_result->setName("result");
	uML_StateMachine_isRedefinitionContextValid_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_StateMachine_isRedefinitionContextValid_result->setLower(1);
	uML_StateMachine_isRedefinitionContextValid_result->setUpper(1);
	uML_StateMachine_isRedefinitionContextValid_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StateMachine_isRedefinitionContextValid_RedefinableElement->getOwnedParameter()->push_back(uML_StateMachine_isRedefinitionContextValid_result);
	uML_StateMachine_isRedefinitionContextValid_RedefinableElement_UML_StateMachine_isRedefinitionContextValid_redefinedElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StateMachine_isRedefinitionContextValid_RedefinableElement_UML_StateMachine_isRedefinitionContextValid_redefinedElement->setName("redefinedElement");
	uML_StateMachine_isRedefinitionContextValid_RedefinableElement_UML_StateMachine_isRedefinitionContextValid_redefinedElement->setType(get_UML_RedefinableElement());
	uML_StateMachine_isRedefinitionContextValid_RedefinableElement_UML_StateMachine_isRedefinitionContextValid_redefinedElement->setLower(1);
	uML_StateMachine_isRedefinitionContextValid_RedefinableElement_UML_StateMachine_isRedefinitionContextValid_redefinedElement->setUpper(1);
	uML_StateMachine_isRedefinitionContextValid_RedefinableElement_UML_StateMachine_isRedefinitionContextValid_redefinedElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_StateMachine_isRedefinitionContextValid_RedefinableElement->getOwnedParameter()->push_back(uML_StateMachine_isRedefinitionContextValid_RedefinableElement_UML_StateMachine_isRedefinitionContextValid_redefinedElement);
	
	
	uML_StateMachine->getOwnedOperation()->push_back(uML_StateMachine_isRedefinitionContextValid_RedefinableElement); 
	
	


	uML_Stereotype.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Stereotype->setName("Stereotype");
	uML_Stereotype->setIsAbstract(false);
	uML_Stereotype->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Stereotype);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("base_property_multiplicity_single_extension");
	con->getConstrainedElement()->push_back(uML_Stereotype);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Stereotype->getOwnedRule()->push_back(con);
	con->setContext(uML_Stereotype->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("base_property_upper_bound");
	con->getConstrainedElement()->push_back(uML_Stereotype);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Stereotype->getOwnedRule()->push_back(con);
	con->setContext(uML_Stereotype->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("base_property_multiplicity_multiple_extension");
	con->getConstrainedElement()->push_back(uML_Stereotype);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Stereotype->getOwnedRule()->push_back(con);
	con->setContext(uML_Stereotype->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("associationEndOwnership");
	con->getConstrainedElement()->push_back(uML_Stereotype);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("ownedAttribute"\
	"->select(association->notEmpty() and not association.oclIsKindOf(Extension) and not type.oclIsKindOf(Stereotype))"\
	"->forAll(opposite.owner = association)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Stereotype->getOwnedRule()->push_back(con);
	con->setContext(uML_Stereotype->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("generalize");
	con->getConstrainedElement()->push_back(uML_Stereotype);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("allParents()->forAll(oclIsKindOf(Stereotype)) "\
	"and Classifier.allInstances()->forAll(c | c.allParents()->exists(oclIsKindOf(Stereotype)) implies c.oclIsKindOf(Stereotype))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Stereotype->getOwnedRule()->push_back(con);
	con->setContext(uML_Stereotype->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("name_not_clash");
	con->getConstrainedElement()->push_back(uML_Stereotype);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Stereotype->getOwnedRule()->push_back(con);
	con->setContext(uML_Stereotype->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("binaryAssociationsOnly");
	con->getConstrainedElement()->push_back(uML_Stereotype);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("ownedAttribute.association->forAll(memberEnd->size()=2)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Stereotype->getOwnedRule()->push_back(con);
	con->setContext(uML_Stereotype->getNamespace());
	
	
	uML_Stereotype_icon.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Stereotype_icon->setName("icon");
	uML_Stereotype_icon->setType(get_UML_Image());
	uML_Stereotype_icon->setLower(0);
	uML_Stereotype_icon->setUpper(-1);
	uML_Stereotype->getOwnedAttribute()->push_back(uML_Stereotype_icon);
	uML_Stereotype_icon->setClass(uML_Stereotype);
	
	
	uML_Stereotype_profile.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Stereotype_profile->setName("profile");
	uML_Stereotype_profile->setType(get_UML_Profile());
	uML_Stereotype_profile->setLower(1);
	uML_Stereotype_profile->setUpper(1);
	uML_Stereotype->getOwnedAttribute()->push_back(uML_Stereotype_profile);
	uML_Stereotype_profile->setClass(uML_Stereotype);
	
	
	
	uML_Stereotype_containingProfile_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Stereotype_containingProfile_->setName("containingProfile");
	uML_Stereotype_containingProfile_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_containingProfile_result->setName("result");
	uML_Stereotype_containingProfile_result->setType(get_UML_Profile());
	uML_Stereotype_containingProfile_result->setLower(1);
	uML_Stereotype_containingProfile_result->setUpper(1);
	uML_Stereotype_containingProfile_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Stereotype_containingProfile_->getOwnedParameter()->push_back(uML_Stereotype_containingProfile_result);
	
	
	uML_Stereotype->getOwnedOperation()->push_back(uML_Stereotype_containingProfile_); 
	uML_Stereotype_createExtension_Class_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Stereotype_createExtension_Class_Boolean->setName("createExtension");
	uML_Stereotype_createExtension_Class_Boolean_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_createExtension_Class_Boolean_return->setName("");
	uML_Stereotype_createExtension_Class_Boolean_return->setType(get_UML_Extension());
	uML_Stereotype_createExtension_Class_Boolean_return->setLower(1);
	uML_Stereotype_createExtension_Class_Boolean_return->setUpper(1);
	uML_Stereotype_createExtension_Class_Boolean_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Stereotype_createExtension_Class_Boolean->getOwnedParameter()->push_back(uML_Stereotype_createExtension_Class_Boolean_return);
	uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_metaclass.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_metaclass->setName("metaclass");
	uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_metaclass->setType(get_UML_Class());
	uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_metaclass->setLower(1);
	uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_metaclass->setUpper(1);
	uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_metaclass->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Stereotype_createExtension_Class_Boolean->getOwnedParameter()->push_back(uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_metaclass);
	uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_isRequired.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_isRequired->setName("isRequired");
	uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_isRequired->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_isRequired->setLower(1);
	uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_isRequired->setUpper(1);
	uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_isRequired->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Stereotype_createExtension_Class_Boolean->getOwnedParameter()->push_back(uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_isRequired);
	
	
	uML_Stereotype->getOwnedOperation()->push_back(uML_Stereotype_createExtension_Class_Boolean); 
	uML_Stereotype_createIcon_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Stereotype_createIcon_String->setName("createIcon");
	uML_Stereotype_createIcon_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_createIcon_String_return->setName("");
	uML_Stereotype_createIcon_String_return->setType(get_UML_Image());
	uML_Stereotype_createIcon_String_return->setLower(1);
	uML_Stereotype_createIcon_String_return->setUpper(1);
	uML_Stereotype_createIcon_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Stereotype_createIcon_String->getOwnedParameter()->push_back(uML_Stereotype_createIcon_String_return);
	uML_Stereotype_createIcon_String_UML_Stereotype_createIcon_location.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_createIcon_String_UML_Stereotype_createIcon_location->setName("location");
	uML_Stereotype_createIcon_String_UML_Stereotype_createIcon_location->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Stereotype_createIcon_String_UML_Stereotype_createIcon_location->setLower(1);
	uML_Stereotype_createIcon_String_UML_Stereotype_createIcon_location->setUpper(1);
	uML_Stereotype_createIcon_String_UML_Stereotype_createIcon_location->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Stereotype_createIcon_String->getOwnedParameter()->push_back(uML_Stereotype_createIcon_String_UML_Stereotype_createIcon_location);
	
	
	uML_Stereotype->getOwnedOperation()->push_back(uML_Stereotype_createIcon_String); 
	uML_Stereotype_createIcon_String_String.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Stereotype_createIcon_String_String->setName("createIcon");
	uML_Stereotype_createIcon_String_String_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_createIcon_String_String_return->setName("");
	uML_Stereotype_createIcon_String_String_return->setType(get_UML_Image());
	uML_Stereotype_createIcon_String_String_return->setLower(1);
	uML_Stereotype_createIcon_String_String_return->setUpper(1);
	uML_Stereotype_createIcon_String_String_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Stereotype_createIcon_String_String->getOwnedParameter()->push_back(uML_Stereotype_createIcon_String_String_return);
	uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_format.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_format->setName("format");
	uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_format->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_format->setLower(1);
	uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_format->setUpper(1);
	uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_format->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Stereotype_createIcon_String_String->getOwnedParameter()->push_back(uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_format);
	uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_content.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_content->setName("content");
	uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_content->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_content->setLower(1);
	uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_content->setUpper(1);
	uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_content->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Stereotype_createIcon_String_String->getOwnedParameter()->push_back(uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_content);
	
	
	uML_Stereotype->getOwnedOperation()->push_back(uML_Stereotype_createIcon_String_String); 
	uML_Stereotype_getAllExtendedMetaclasses_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Stereotype_getAllExtendedMetaclasses_->setName("getAllExtendedMetaclasses");
	uML_Stereotype_getAllExtendedMetaclasses__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_getAllExtendedMetaclasses__return->setName("");
	uML_Stereotype_getAllExtendedMetaclasses__return->setType(get_UML_Class());
	uML_Stereotype_getAllExtendedMetaclasses__return->setLower(0);
	uML_Stereotype_getAllExtendedMetaclasses__return->setUpper(-1);
	uML_Stereotype_getAllExtendedMetaclasses__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Stereotype_getAllExtendedMetaclasses_->getOwnedParameter()->push_back(uML_Stereotype_getAllExtendedMetaclasses__return);
	
	
	uML_Stereotype->getOwnedOperation()->push_back(uML_Stereotype_getAllExtendedMetaclasses_); 
	uML_Stereotype_getDefinition_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Stereotype_getDefinition_->setName("getDefinition");
	uML_Stereotype_getDefinition__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_getDefinition__return->setName("");
	uML_Stereotype_getDefinition__return->setType(Ecore::EcorePackage::eInstance()->get_Ecore_EClass());
	uML_Stereotype_getDefinition__return->setLower(0);
	uML_Stereotype_getDefinition__return->setUpper(1);
	uML_Stereotype_getDefinition__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Stereotype_getDefinition_->getOwnedParameter()->push_back(uML_Stereotype_getDefinition__return);
	
	
	uML_Stereotype->getOwnedOperation()->push_back(uML_Stereotype_getDefinition_); 
	uML_Stereotype_getExtendedMetaclasses_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Stereotype_getExtendedMetaclasses_->setName("getExtendedMetaclasses");
	uML_Stereotype_getExtendedMetaclasses__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_getExtendedMetaclasses__return->setName("");
	uML_Stereotype_getExtendedMetaclasses__return->setType(get_UML_Class());
	uML_Stereotype_getExtendedMetaclasses__return->setLower(0);
	uML_Stereotype_getExtendedMetaclasses__return->setUpper(-1);
	uML_Stereotype_getExtendedMetaclasses__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Stereotype_getExtendedMetaclasses_->getOwnedParameter()->push_back(uML_Stereotype_getExtendedMetaclasses__return);
	
	
	uML_Stereotype->getOwnedOperation()->push_back(uML_Stereotype_getExtendedMetaclasses_); 
	uML_Stereotype_getKeyword_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Stereotype_getKeyword_->setName("getKeyword");
	uML_Stereotype_getKeyword__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_getKeyword__return->setName("");
	uML_Stereotype_getKeyword__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Stereotype_getKeyword__return->setLower(1);
	uML_Stereotype_getKeyword__return->setUpper(1);
	uML_Stereotype_getKeyword__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Stereotype_getKeyword_->getOwnedParameter()->push_back(uML_Stereotype_getKeyword__return);
	
	
	uML_Stereotype->getOwnedOperation()->push_back(uML_Stereotype_getKeyword_); 
	uML_Stereotype_getKeyword_Boolean.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Stereotype_getKeyword_Boolean->setName("getKeyword");
	uML_Stereotype_getKeyword_Boolean_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_getKeyword_Boolean_return->setName("");
	uML_Stereotype_getKeyword_Boolean_return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Stereotype_getKeyword_Boolean_return->setLower(1);
	uML_Stereotype_getKeyword_Boolean_return->setUpper(1);
	uML_Stereotype_getKeyword_Boolean_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Stereotype_getKeyword_Boolean->getOwnedParameter()->push_back(uML_Stereotype_getKeyword_Boolean_return);
	uML_Stereotype_getKeyword_Boolean_UML_Stereotype_getKeyword_localize.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_getKeyword_Boolean_UML_Stereotype_getKeyword_localize->setName("localize");
	uML_Stereotype_getKeyword_Boolean_UML_Stereotype_getKeyword_localize->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Stereotype_getKeyword_Boolean_UML_Stereotype_getKeyword_localize->setLower(1);
	uML_Stereotype_getKeyword_Boolean_UML_Stereotype_getKeyword_localize->setUpper(1);
	uML_Stereotype_getKeyword_Boolean_UML_Stereotype_getKeyword_localize->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Stereotype_getKeyword_Boolean->getOwnedParameter()->push_back(uML_Stereotype_getKeyword_Boolean_UML_Stereotype_getKeyword_localize);
	
	
	uML_Stereotype->getOwnedOperation()->push_back(uML_Stereotype_getKeyword_Boolean); 
	uML_Stereotype_profile_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Stereotype_profile_->setName("profile");
	uML_Stereotype_profile_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Stereotype_profile_result->setName("result");
	uML_Stereotype_profile_result->setType(get_UML_Profile());
	uML_Stereotype_profile_result->setLower(1);
	uML_Stereotype_profile_result->setUpper(1);
	uML_Stereotype_profile_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Stereotype_profile_->getOwnedParameter()->push_back(uML_Stereotype_profile_result);
	
	
	uML_Stereotype->getOwnedOperation()->push_back(uML_Stereotype_profile_); 
	
	


	uML_StringExpression.reset(uml::UmlFactory::eInstance()->createClass());
	uML_StringExpression->setName("StringExpression");
	uML_StringExpression->setIsAbstract(false);
	uML_StringExpression->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_StringExpression);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("subexpressions");
	con->getConstrainedElement()->push_back(uML_StringExpression);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("if subExpression->notEmpty() then operand->isEmpty() else operand->notEmpty() endif");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StringExpression->getOwnedRule()->push_back(con);
	con->setContext(uML_StringExpression->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("operands");
	con->getConstrainedElement()->push_back(uML_StringExpression);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("operand->forAll (oclIsKindOf (LiteralString))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StringExpression->getOwnedRule()->push_back(con);
	con->setContext(uML_StringExpression->getNamespace());
	
	
	uML_StringExpression_owningExpression.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StringExpression_owningExpression->setName("owningExpression");
	uML_StringExpression_owningExpression->setType(get_UML_StringExpression());
	uML_StringExpression_owningExpression->setLower(0);
	uML_StringExpression_owningExpression->setUpper(1);
	uML_StringExpression->getOwnedAttribute()->push_back(uML_StringExpression_owningExpression);
	uML_StringExpression_owningExpression->setClass(uML_StringExpression);
	
	
	uML_StringExpression_subExpression.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StringExpression_subExpression->setName("subExpression");
	uML_StringExpression_subExpression->setType(get_UML_StringExpression());
	uML_StringExpression_subExpression->setLower(0);
	uML_StringExpression_subExpression->setUpper(-1);
	uML_StringExpression->getOwnedAttribute()->push_back(uML_StringExpression_subExpression);
	uML_StringExpression_subExpression->setClass(uML_StringExpression);
	
	
	
	uML_StringExpression_stringValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StringExpression_stringValue_->setName("stringValue");
	uML_StringExpression_stringValue_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StringExpression_stringValue_result->setName("result");
	uML_StringExpression_stringValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_StringExpression_stringValue_result->setLower(1);
	uML_StringExpression_stringValue_result->setUpper(1);
	uML_StringExpression_stringValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StringExpression_stringValue_->getOwnedParameter()->push_back(uML_StringExpression_stringValue_result);
	
	
	uML_StringExpression->getOwnedOperation()->push_back(uML_StringExpression_stringValue_); 
	
	


	uML_StructuralFeature.reset(uml::UmlFactory::eInstance()->createClass());
	uML_StructuralFeature->setName("StructuralFeature");
	uML_StructuralFeature->setIsAbstract(true);
	uML_StructuralFeature->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_StructuralFeature);
	
	//constraints
	
	
	uML_StructuralFeature_isReadOnly.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StructuralFeature_isReadOnly->setName("isReadOnly");
	uML_StructuralFeature_isReadOnly->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_StructuralFeature_isReadOnly->setLower(1);
	uML_StructuralFeature_isReadOnly->setUpper(1);
	uML_StructuralFeature->getOwnedAttribute()->push_back(uML_StructuralFeature_isReadOnly);
	uML_StructuralFeature_isReadOnly->setClass(uML_StructuralFeature);
	uML_StructuralFeature_isReadOnly->setDefaultValue(uML_StructuralFeature_isReadOnly_defaultValue_LiteralBoolean_UML_StructuralFeature_isReadOnly);
	
	
	
	


	uML_StructuralFeatureAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_StructuralFeatureAction->setName("StructuralFeatureAction");
	uML_StructuralFeatureAction->setIsAbstract(true);
	uML_StructuralFeatureAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_StructuralFeatureAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("not_static");
	con->getConstrainedElement()->push_back(uML_StructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not structuralFeature.isStatic");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StructuralFeatureAction->getOwnedRule()->push_back(con);
	con->setContext(uML_StructuralFeatureAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("visibility");
	con->getConstrainedElement()->push_back(uML_StructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("structuralFeature.visibility = VisibilityKind::public or_'context'.allFeatures()->includes(structuralFeature) orstructuralFeature.visibility=VisibilityKind::protected and_'context'.conformsTo(structuralFeature.oclAsType(Property).opposite.type.oclAsType(Classifier))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StructuralFeatureAction->getOwnedRule()->push_back(con);
	con->setContext(uML_StructuralFeatureAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_StructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StructuralFeatureAction->getOwnedRule()->push_back(con);
	con->setContext(uML_StructuralFeatureAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("one_featuring_classifier");
	con->getConstrainedElement()->push_back(uML_StructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("structuralFeature.featuringClassifier->size() = 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StructuralFeatureAction->getOwnedRule()->push_back(con);
	con->setContext(uML_StructuralFeatureAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("object_type");
	con->getConstrainedElement()->push_back(uML_StructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.type.oclAsType(Classifier).allFeatures()->includes(structuralFeature) or"\
	"	object.type.conformsTo(structuralFeature.oclAsType(Property).opposite.type)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StructuralFeatureAction->getOwnedRule()->push_back(con);
	con->setContext(uML_StructuralFeatureAction->getNamespace());
	
	
	uML_StructuralFeatureAction_object.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StructuralFeatureAction_object->setName("object");
	uML_StructuralFeatureAction_object->setType(get_UML_InputPin());
	uML_StructuralFeatureAction_object->setLower(1);
	uML_StructuralFeatureAction_object->setUpper(1);
	uML_StructuralFeatureAction->getOwnedAttribute()->push_back(uML_StructuralFeatureAction_object);
	uML_StructuralFeatureAction_object->setClass(uML_StructuralFeatureAction);
	
	
	uML_StructuralFeatureAction_structuralFeature.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StructuralFeatureAction_structuralFeature->setName("structuralFeature");
	uML_StructuralFeatureAction_structuralFeature->setType(get_UML_StructuralFeature());
	uML_StructuralFeatureAction_structuralFeature->setLower(1);
	uML_StructuralFeatureAction_structuralFeature->setUpper(1);
	uML_StructuralFeatureAction->getOwnedAttribute()->push_back(uML_StructuralFeatureAction_structuralFeature);
	uML_StructuralFeatureAction_structuralFeature->setClass(uML_StructuralFeatureAction);
	
	
	
	
	


	uML_StructuredActivityNode.reset(uml::UmlFactory::eInstance()->createClass());
	uML_StructuredActivityNode->setName("StructuredActivityNode");
	uML_StructuredActivityNode->setIsAbstract(false);
	uML_StructuredActivityNode->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_StructuredActivityNode);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("output_pin_edges");
	con->getConstrainedElement()->push_back(uML_StructuredActivityNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("output.outgoing.target->excludesAll(allOwnedNodes()-input)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StructuredActivityNode->getOwnedRule()->push_back(con);
	con->setContext(uML_StructuredActivityNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("input_pin_edges");
	con->getConstrainedElement()->push_back(uML_StructuredActivityNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("input.incoming.source->excludesAll(allOwnedNodes()-output)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StructuredActivityNode->getOwnedRule()->push_back(con);
	con->setContext(uML_StructuredActivityNode->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("edges");
	con->getConstrainedElement()->push_back(uML_StructuredActivityNode);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("edge=self.sourceNodes().outgoing->intersection(self.allOwnedNodes().incoming)->"\
	"	union(self.targetNodes().incoming->intersection(self.allOwnedNodes().outgoing))->asSet()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_StructuredActivityNode->getOwnedRule()->push_back(con);
	con->setContext(uML_StructuredActivityNode->getNamespace());
	
	
	uML_StructuredActivityNode_activity.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StructuredActivityNode_activity->setName("activity");
	uML_StructuredActivityNode_activity->setType(get_UML_Activity());
	uML_StructuredActivityNode_activity->setLower(0);
	uML_StructuredActivityNode_activity->setUpper(1);
	uML_StructuredActivityNode->getOwnedAttribute()->push_back(uML_StructuredActivityNode_activity);
	uML_StructuredActivityNode_activity->setClass(uML_StructuredActivityNode);
	
	
	uML_StructuredActivityNode_edge.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StructuredActivityNode_edge->setName("edge");
	uML_StructuredActivityNode_edge->setType(get_UML_ActivityEdge());
	uML_StructuredActivityNode_edge->setLower(0);
	uML_StructuredActivityNode_edge->setUpper(-1);
	uML_StructuredActivityNode->getOwnedAttribute()->push_back(uML_StructuredActivityNode_edge);
	uML_StructuredActivityNode_edge->setClass(uML_StructuredActivityNode);
	
	
	uML_StructuredActivityNode_mustIsolate.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StructuredActivityNode_mustIsolate->setName("mustIsolate");
	uML_StructuredActivityNode_mustIsolate->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_StructuredActivityNode_mustIsolate->setLower(1);
	uML_StructuredActivityNode_mustIsolate->setUpper(1);
	uML_StructuredActivityNode->getOwnedAttribute()->push_back(uML_StructuredActivityNode_mustIsolate);
	uML_StructuredActivityNode_mustIsolate->setClass(uML_StructuredActivityNode);
	uML_StructuredActivityNode_mustIsolate->setDefaultValue(uML_StructuredActivityNode_mustIsolate_defaultValue_LiteralBoolean_UML_StructuredActivityNode_mustIsolate);
	
	uML_StructuredActivityNode_node.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StructuredActivityNode_node->setName("node");
	uML_StructuredActivityNode_node->setType(get_UML_ActivityNode());
	uML_StructuredActivityNode_node->setLower(0);
	uML_StructuredActivityNode_node->setUpper(-1);
	uML_StructuredActivityNode->getOwnedAttribute()->push_back(uML_StructuredActivityNode_node);
	uML_StructuredActivityNode_node->setClass(uML_StructuredActivityNode);
	
	
	uML_StructuredActivityNode_structuredNodeInput.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StructuredActivityNode_structuredNodeInput->setName("structuredNodeInput");
	uML_StructuredActivityNode_structuredNodeInput->setType(get_UML_InputPin());
	uML_StructuredActivityNode_structuredNodeInput->setLower(0);
	uML_StructuredActivityNode_structuredNodeInput->setUpper(-1);
	uML_StructuredActivityNode->getOwnedAttribute()->push_back(uML_StructuredActivityNode_structuredNodeInput);
	uML_StructuredActivityNode_structuredNodeInput->setClass(uML_StructuredActivityNode);
	
	
	uML_StructuredActivityNode_structuredNodeOutput.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StructuredActivityNode_structuredNodeOutput->setName("structuredNodeOutput");
	uML_StructuredActivityNode_structuredNodeOutput->setType(get_UML_OutputPin());
	uML_StructuredActivityNode_structuredNodeOutput->setLower(0);
	uML_StructuredActivityNode_structuredNodeOutput->setUpper(-1);
	uML_StructuredActivityNode->getOwnedAttribute()->push_back(uML_StructuredActivityNode_structuredNodeOutput);
	uML_StructuredActivityNode_structuredNodeOutput->setClass(uML_StructuredActivityNode);
	
	
	uML_StructuredActivityNode_variable.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StructuredActivityNode_variable->setName("variable");
	uML_StructuredActivityNode_variable->setType(get_UML_Variable());
	uML_StructuredActivityNode_variable->setLower(0);
	uML_StructuredActivityNode_variable->setUpper(-1);
	uML_StructuredActivityNode->getOwnedAttribute()->push_back(uML_StructuredActivityNode_variable);
	uML_StructuredActivityNode_variable->setClass(uML_StructuredActivityNode);
	
	
	
	uML_StructuredActivityNode_allActions_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StructuredActivityNode_allActions_->setName("allActions");
	uML_StructuredActivityNode_allActions_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StructuredActivityNode_allActions_result->setName("result");
	uML_StructuredActivityNode_allActions_result->setType(get_UML_Action());
	uML_StructuredActivityNode_allActions_result->setLower(0);
	uML_StructuredActivityNode_allActions_result->setUpper(-1);
	uML_StructuredActivityNode_allActions_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StructuredActivityNode_allActions_->getOwnedParameter()->push_back(uML_StructuredActivityNode_allActions_result);
	
	
	uML_StructuredActivityNode->getOwnedOperation()->push_back(uML_StructuredActivityNode_allActions_); 
	uML_StructuredActivityNode_allOwnedNodes_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StructuredActivityNode_allOwnedNodes_->setName("allOwnedNodes");
	uML_StructuredActivityNode_allOwnedNodes_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StructuredActivityNode_allOwnedNodes_result->setName("result");
	uML_StructuredActivityNode_allOwnedNodes_result->setType(get_UML_ActivityNode());
	uML_StructuredActivityNode_allOwnedNodes_result->setLower(0);
	uML_StructuredActivityNode_allOwnedNodes_result->setUpper(-1);
	uML_StructuredActivityNode_allOwnedNodes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StructuredActivityNode_allOwnedNodes_->getOwnedParameter()->push_back(uML_StructuredActivityNode_allOwnedNodes_result);
	
	
	uML_StructuredActivityNode->getOwnedOperation()->push_back(uML_StructuredActivityNode_allOwnedNodes_); 
	uML_StructuredActivityNode_containingActivity_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StructuredActivityNode_containingActivity_->setName("containingActivity");
	uML_StructuredActivityNode_containingActivity_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StructuredActivityNode_containingActivity_result->setName("result");
	uML_StructuredActivityNode_containingActivity_result->setType(get_UML_Activity());
	uML_StructuredActivityNode_containingActivity_result->setLower(0);
	uML_StructuredActivityNode_containingActivity_result->setUpper(1);
	uML_StructuredActivityNode_containingActivity_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StructuredActivityNode_containingActivity_->getOwnedParameter()->push_back(uML_StructuredActivityNode_containingActivity_result);
	
	
	uML_StructuredActivityNode->getOwnedOperation()->push_back(uML_StructuredActivityNode_containingActivity_); 
	uML_StructuredActivityNode_sourceNodes_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StructuredActivityNode_sourceNodes_->setName("sourceNodes");
	uML_StructuredActivityNode_sourceNodes_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StructuredActivityNode_sourceNodes_result->setName("result");
	uML_StructuredActivityNode_sourceNodes_result->setType(get_UML_ActivityNode());
	uML_StructuredActivityNode_sourceNodes_result->setLower(0);
	uML_StructuredActivityNode_sourceNodes_result->setUpper(-1);
	uML_StructuredActivityNode_sourceNodes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StructuredActivityNode_sourceNodes_->getOwnedParameter()->push_back(uML_StructuredActivityNode_sourceNodes_result);
	
	
	uML_StructuredActivityNode->getOwnedOperation()->push_back(uML_StructuredActivityNode_sourceNodes_); 
	uML_StructuredActivityNode_targetNodes_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StructuredActivityNode_targetNodes_->setName("targetNodes");
	uML_StructuredActivityNode_targetNodes_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StructuredActivityNode_targetNodes_result->setName("result");
	uML_StructuredActivityNode_targetNodes_result->setType(get_UML_ActivityNode());
	uML_StructuredActivityNode_targetNodes_result->setLower(0);
	uML_StructuredActivityNode_targetNodes_result->setUpper(-1);
	uML_StructuredActivityNode_targetNodes_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StructuredActivityNode_targetNodes_->getOwnedParameter()->push_back(uML_StructuredActivityNode_targetNodes_result);
	
	
	uML_StructuredActivityNode->getOwnedOperation()->push_back(uML_StructuredActivityNode_targetNodes_); 
	
	


	uML_StructuredClassifier.reset(uml::UmlFactory::eInstance()->createClass());
	uML_StructuredClassifier->setName("StructuredClassifier");
	uML_StructuredClassifier->setIsAbstract(true);
	uML_StructuredClassifier->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_StructuredClassifier);
	
	//constraints
	
	
	uML_StructuredClassifier_ownedAttribute.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StructuredClassifier_ownedAttribute->setName("ownedAttribute");
	uML_StructuredClassifier_ownedAttribute->setType(get_UML_Property());
	uML_StructuredClassifier_ownedAttribute->setLower(0);
	uML_StructuredClassifier_ownedAttribute->setUpper(-1);
	uML_StructuredClassifier->getOwnedAttribute()->push_back(uML_StructuredClassifier_ownedAttribute);
	uML_StructuredClassifier_ownedAttribute->setClass(uML_StructuredClassifier);
	
	
	uML_StructuredClassifier_ownedConnector.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StructuredClassifier_ownedConnector->setName("ownedConnector");
	uML_StructuredClassifier_ownedConnector->setType(get_UML_Connector());
	uML_StructuredClassifier_ownedConnector->setLower(0);
	uML_StructuredClassifier_ownedConnector->setUpper(-1);
	uML_StructuredClassifier->getOwnedAttribute()->push_back(uML_StructuredClassifier_ownedConnector);
	uML_StructuredClassifier_ownedConnector->setClass(uML_StructuredClassifier);
	
	
	uML_StructuredClassifier_part.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StructuredClassifier_part->setName("part");
	uML_StructuredClassifier_part->setType(get_UML_Property());
	uML_StructuredClassifier_part->setLower(0);
	uML_StructuredClassifier_part->setUpper(-1);
	uML_StructuredClassifier->getOwnedAttribute()->push_back(uML_StructuredClassifier_part);
	uML_StructuredClassifier_part->setClass(uML_StructuredClassifier);
	
	
	uML_StructuredClassifier_role.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_StructuredClassifier_role->setName("role");
	uML_StructuredClassifier_role->setType(get_UML_ConnectableElement());
	uML_StructuredClassifier_role->setLower(0);
	uML_StructuredClassifier_role->setUpper(-1);
	uML_StructuredClassifier->getOwnedAttribute()->push_back(uML_StructuredClassifier_role);
	uML_StructuredClassifier_role->setClass(uML_StructuredClassifier);
	
	
	
	uML_StructuredClassifier_allRoles_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StructuredClassifier_allRoles_->setName("allRoles");
	uML_StructuredClassifier_allRoles_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StructuredClassifier_allRoles_result->setName("result");
	uML_StructuredClassifier_allRoles_result->setType(get_UML_ConnectableElement());
	uML_StructuredClassifier_allRoles_result->setLower(0);
	uML_StructuredClassifier_allRoles_result->setUpper(-1);
	uML_StructuredClassifier_allRoles_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StructuredClassifier_allRoles_->getOwnedParameter()->push_back(uML_StructuredClassifier_allRoles_result);
	
	
	uML_StructuredClassifier->getOwnedOperation()->push_back(uML_StructuredClassifier_allRoles_); 
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->setName("createOwnedAttribute");
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setName("");
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setType(get_UML_Property());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setLower(1);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setUpper(1);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name->setName("name");
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name->setLower(0);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name->setUpper(1);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type->setName("type");
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type->setType(get_UML_Type());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type->setLower(0);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type->setUpper(1);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_lower.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_lower->setName("lower");
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_lower->setLower(1);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_lower->setUpper(1);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_lower->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_lower);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_upper.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_upper->setName("upper");
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_upper->setLower(1);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_upper->setUpper(1);
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_upper->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_upper);
	
	
	uML_StructuredClassifier->getOwnedOperation()->push_back(uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural); 
	uML_StructuredClassifier_part_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_StructuredClassifier_part_->setName("part");
	uML_StructuredClassifier_part_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_StructuredClassifier_part_result->setName("result");
	uML_StructuredClassifier_part_result->setType(get_UML_Property());
	uML_StructuredClassifier_part_result->setLower(0);
	uML_StructuredClassifier_part_result->setUpper(-1);
	uML_StructuredClassifier_part_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_StructuredClassifier_part_->getOwnedParameter()->push_back(uML_StructuredClassifier_part_result);
	
	
	uML_StructuredClassifier->getOwnedOperation()->push_back(uML_StructuredClassifier_part_); 
	
	


	uML_Substitution.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Substitution->setName("Substitution");
	uML_Substitution->setIsAbstract(false);
	uML_Substitution->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Substitution);
	
	//constraints
	
	
	uML_Substitution_contract.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Substitution_contract->setName("contract");
	uML_Substitution_contract->setType(get_UML_Classifier());
	uML_Substitution_contract->setLower(1);
	uML_Substitution_contract->setUpper(1);
	uML_Substitution->getOwnedAttribute()->push_back(uML_Substitution_contract);
	uML_Substitution_contract->setClass(uML_Substitution);
	
	
	uML_Substitution_substitutingClassifier.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Substitution_substitutingClassifier->setName("substitutingClassifier");
	uML_Substitution_substitutingClassifier->setType(get_UML_Classifier());
	uML_Substitution_substitutingClassifier->setLower(1);
	uML_Substitution_substitutingClassifier->setUpper(1);
	uML_Substitution->getOwnedAttribute()->push_back(uML_Substitution_substitutingClassifier);
	uML_Substitution_substitutingClassifier->setClass(uML_Substitution);
	
	
	
	
	


	uML_TemplateBinding.reset(uml::UmlFactory::eInstance()->createClass());
	uML_TemplateBinding->setName("TemplateBinding");
	uML_TemplateBinding->setIsAbstract(false);
	uML_TemplateBinding->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_TemplateBinding);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("one_parameter_substitution");
	con->getConstrainedElement()->push_back(uML_TemplateBinding);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("signature.parameter->forAll(p | parameterSubstitution->select(b | b.formal = p)->size() <= 1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_TemplateBinding->getOwnedRule()->push_back(con);
	con->setContext(uML_TemplateBinding->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("parameter_substitution_formal");
	con->getConstrainedElement()->push_back(uML_TemplateBinding);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("parameterSubstitution->forAll(b | signature.parameter->includes(b.formal))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_TemplateBinding->getOwnedRule()->push_back(con);
	con->setContext(uML_TemplateBinding->getNamespace());
	
	
	uML_TemplateBinding_boundElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateBinding_boundElement->setName("boundElement");
	uML_TemplateBinding_boundElement->setType(get_UML_TemplateableElement());
	uML_TemplateBinding_boundElement->setLower(1);
	uML_TemplateBinding_boundElement->setUpper(1);
	uML_TemplateBinding->getOwnedAttribute()->push_back(uML_TemplateBinding_boundElement);
	uML_TemplateBinding_boundElement->setClass(uML_TemplateBinding);
	
	
	uML_TemplateBinding_parameterSubstitution.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateBinding_parameterSubstitution->setName("parameterSubstitution");
	uML_TemplateBinding_parameterSubstitution->setType(get_UML_TemplateParameterSubstitution());
	uML_TemplateBinding_parameterSubstitution->setLower(0);
	uML_TemplateBinding_parameterSubstitution->setUpper(-1);
	uML_TemplateBinding->getOwnedAttribute()->push_back(uML_TemplateBinding_parameterSubstitution);
	uML_TemplateBinding_parameterSubstitution->setClass(uML_TemplateBinding);
	
	
	uML_TemplateBinding_signature.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateBinding_signature->setName("signature");
	uML_TemplateBinding_signature->setType(get_UML_TemplateSignature());
	uML_TemplateBinding_signature->setLower(1);
	uML_TemplateBinding_signature->setUpper(1);
	uML_TemplateBinding->getOwnedAttribute()->push_back(uML_TemplateBinding_signature);
	uML_TemplateBinding_signature->setClass(uML_TemplateBinding);
	
	
	
	
	


	uML_TemplateParameter.reset(uml::UmlFactory::eInstance()->createClass());
	uML_TemplateParameter->setName("TemplateParameter");
	uML_TemplateParameter->setIsAbstract(false);
	uML_TemplateParameter->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_TemplateParameter);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("must_be_compatible");
	con->getConstrainedElement()->push_back(uML_TemplateParameter);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("default <> null implies default.isCompatibleWith(parameteredElement)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_TemplateParameter->getOwnedRule()->push_back(con);
	con->setContext(uML_TemplateParameter->getNamespace());
	
	
	uML_TemplateParameter_default.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateParameter_default->setName("default");
	uML_TemplateParameter_default->setType(get_UML_ParameterableElement());
	uML_TemplateParameter_default->setLower(0);
	uML_TemplateParameter_default->setUpper(1);
	uML_TemplateParameter->getOwnedAttribute()->push_back(uML_TemplateParameter_default);
	uML_TemplateParameter_default->setClass(uML_TemplateParameter);
	
	
	uML_TemplateParameter_ownedDefault.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateParameter_ownedDefault->setName("ownedDefault");
	uML_TemplateParameter_ownedDefault->setType(get_UML_ParameterableElement());
	uML_TemplateParameter_ownedDefault->setLower(0);
	uML_TemplateParameter_ownedDefault->setUpper(1);
	uML_TemplateParameter->getOwnedAttribute()->push_back(uML_TemplateParameter_ownedDefault);
	uML_TemplateParameter_ownedDefault->setClass(uML_TemplateParameter);
	
	
	uML_TemplateParameter_ownedParameteredElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateParameter_ownedParameteredElement->setName("ownedParameteredElement");
	uML_TemplateParameter_ownedParameteredElement->setType(get_UML_ParameterableElement());
	uML_TemplateParameter_ownedParameteredElement->setLower(0);
	uML_TemplateParameter_ownedParameteredElement->setUpper(1);
	uML_TemplateParameter->getOwnedAttribute()->push_back(uML_TemplateParameter_ownedParameteredElement);
	uML_TemplateParameter_ownedParameteredElement->setClass(uML_TemplateParameter);
	
	
	uML_TemplateParameter_parameteredElement.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateParameter_parameteredElement->setName("parameteredElement");
	uML_TemplateParameter_parameteredElement->setType(get_UML_ParameterableElement());
	uML_TemplateParameter_parameteredElement->setLower(1);
	uML_TemplateParameter_parameteredElement->setUpper(1);
	uML_TemplateParameter->getOwnedAttribute()->push_back(uML_TemplateParameter_parameteredElement);
	uML_TemplateParameter_parameteredElement->setClass(uML_TemplateParameter);
	
	
	uML_TemplateParameter_signature.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateParameter_signature->setName("signature");
	uML_TemplateParameter_signature->setType(get_UML_TemplateSignature());
	uML_TemplateParameter_signature->setLower(1);
	uML_TemplateParameter_signature->setUpper(1);
	uML_TemplateParameter->getOwnedAttribute()->push_back(uML_TemplateParameter_signature);
	uML_TemplateParameter_signature->setClass(uML_TemplateParameter);
	
	
	
	
	


	uML_TemplateParameterSubstitution.reset(uml::UmlFactory::eInstance()->createClass());
	uML_TemplateParameterSubstitution->setName("TemplateParameterSubstitution");
	uML_TemplateParameterSubstitution->setIsAbstract(false);
	uML_TemplateParameterSubstitution->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_TemplateParameterSubstitution);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("must_be_compatible");
	con->getConstrainedElement()->push_back(uML_TemplateParameterSubstitution);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("actual->forAll(a | a.isCompatibleWith(formal.parameteredElement))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_TemplateParameterSubstitution->getOwnedRule()->push_back(con);
	con->setContext(uML_TemplateParameterSubstitution->getNamespace());
	
	
	uML_TemplateParameterSubstitution_actual.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateParameterSubstitution_actual->setName("actual");
	uML_TemplateParameterSubstitution_actual->setType(get_UML_ParameterableElement());
	uML_TemplateParameterSubstitution_actual->setLower(1);
	uML_TemplateParameterSubstitution_actual->setUpper(1);
	uML_TemplateParameterSubstitution->getOwnedAttribute()->push_back(uML_TemplateParameterSubstitution_actual);
	uML_TemplateParameterSubstitution_actual->setClass(uML_TemplateParameterSubstitution);
	
	
	uML_TemplateParameterSubstitution_formal.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateParameterSubstitution_formal->setName("formal");
	uML_TemplateParameterSubstitution_formal->setType(get_UML_TemplateParameter());
	uML_TemplateParameterSubstitution_formal->setLower(1);
	uML_TemplateParameterSubstitution_formal->setUpper(1);
	uML_TemplateParameterSubstitution->getOwnedAttribute()->push_back(uML_TemplateParameterSubstitution_formal);
	uML_TemplateParameterSubstitution_formal->setClass(uML_TemplateParameterSubstitution);
	
	
	uML_TemplateParameterSubstitution_ownedActual.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateParameterSubstitution_ownedActual->setName("ownedActual");
	uML_TemplateParameterSubstitution_ownedActual->setType(get_UML_ParameterableElement());
	uML_TemplateParameterSubstitution_ownedActual->setLower(0);
	uML_TemplateParameterSubstitution_ownedActual->setUpper(1);
	uML_TemplateParameterSubstitution->getOwnedAttribute()->push_back(uML_TemplateParameterSubstitution_ownedActual);
	uML_TemplateParameterSubstitution_ownedActual->setClass(uML_TemplateParameterSubstitution);
	
	
	uML_TemplateParameterSubstitution_templateBinding.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateParameterSubstitution_templateBinding->setName("templateBinding");
	uML_TemplateParameterSubstitution_templateBinding->setType(get_UML_TemplateBinding());
	uML_TemplateParameterSubstitution_templateBinding->setLower(1);
	uML_TemplateParameterSubstitution_templateBinding->setUpper(1);
	uML_TemplateParameterSubstitution->getOwnedAttribute()->push_back(uML_TemplateParameterSubstitution_templateBinding);
	uML_TemplateParameterSubstitution_templateBinding->setClass(uML_TemplateParameterSubstitution);
	
	
	
	
	


	uML_TemplateSignature.reset(uml::UmlFactory::eInstance()->createClass());
	uML_TemplateSignature->setName("TemplateSignature");
	uML_TemplateSignature->setIsAbstract(false);
	uML_TemplateSignature->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_TemplateSignature);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("own_elements");
	con->getConstrainedElement()->push_back(uML_TemplateSignature);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("template.ownedElement->includesAll(parameter.parameteredElement->asSet() - parameter.ownedParameteredElement->asSet())");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_TemplateSignature->getOwnedRule()->push_back(con);
	con->setContext(uML_TemplateSignature->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("unique_parameters");
	con->getConstrainedElement()->push_back(uML_TemplateSignature);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("parameter->forAll( p1, p2 | (p1 <> p2 and p1.parameteredElement.oclIsKindOf(NamedElement) and p2.parameteredElement.oclIsKindOf(NamedElement) ) implies"\
	"   p1.parameteredElement.oclAsType(NamedElement).name <> p2.parameteredElement.oclAsType(NamedElement).name)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_TemplateSignature->getOwnedRule()->push_back(con);
	con->setContext(uML_TemplateSignature->getNamespace());
	
	
	uML_TemplateSignature_ownedParameter.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateSignature_ownedParameter->setName("ownedParameter");
	uML_TemplateSignature_ownedParameter->setType(get_UML_TemplateParameter());
	uML_TemplateSignature_ownedParameter->setLower(0);
	uML_TemplateSignature_ownedParameter->setUpper(-1);
	uML_TemplateSignature->getOwnedAttribute()->push_back(uML_TemplateSignature_ownedParameter);
	uML_TemplateSignature_ownedParameter->setClass(uML_TemplateSignature);
	
	
	uML_TemplateSignature_parameter.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateSignature_parameter->setName("parameter");
	uML_TemplateSignature_parameter->setType(get_UML_TemplateParameter());
	uML_TemplateSignature_parameter->setLower(1);
	uML_TemplateSignature_parameter->setUpper(-1);
	uML_TemplateSignature->getOwnedAttribute()->push_back(uML_TemplateSignature_parameter);
	uML_TemplateSignature_parameter->setClass(uML_TemplateSignature);
	
	
	uML_TemplateSignature_template.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateSignature_template->setName("template");
	uML_TemplateSignature_template->setType(get_UML_TemplateableElement());
	uML_TemplateSignature_template->setLower(1);
	uML_TemplateSignature_template->setUpper(1);
	uML_TemplateSignature->getOwnedAttribute()->push_back(uML_TemplateSignature_template);
	uML_TemplateSignature_template->setClass(uML_TemplateSignature);
	
	
	
	
	


	uML_TemplateableElement.reset(uml::UmlFactory::eInstance()->createClass());
	uML_TemplateableElement->setName("TemplateableElement");
	uML_TemplateableElement->setIsAbstract(true);
	uML_TemplateableElement->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_TemplateableElement);
	
	//constraints
	
	
	uML_TemplateableElement_ownedTemplateSignature.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateableElement_ownedTemplateSignature->setName("ownedTemplateSignature");
	uML_TemplateableElement_ownedTemplateSignature->setType(get_UML_TemplateSignature());
	uML_TemplateableElement_ownedTemplateSignature->setLower(0);
	uML_TemplateableElement_ownedTemplateSignature->setUpper(1);
	uML_TemplateableElement->getOwnedAttribute()->push_back(uML_TemplateableElement_ownedTemplateSignature);
	uML_TemplateableElement_ownedTemplateSignature->setClass(uML_TemplateableElement);
	
	
	uML_TemplateableElement_templateBinding.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TemplateableElement_templateBinding->setName("templateBinding");
	uML_TemplateableElement_templateBinding->setType(get_UML_TemplateBinding());
	uML_TemplateableElement_templateBinding->setLower(0);
	uML_TemplateableElement_templateBinding->setUpper(-1);
	uML_TemplateableElement->getOwnedAttribute()->push_back(uML_TemplateableElement_templateBinding);
	uML_TemplateableElement_templateBinding->setClass(uML_TemplateableElement);
	
	
	
	uML_TemplateableElement_isTemplate_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_TemplateableElement_isTemplate_->setName("isTemplate");
	uML_TemplateableElement_isTemplate_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_TemplateableElement_isTemplate_result->setName("result");
	uML_TemplateableElement_isTemplate_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_TemplateableElement_isTemplate_result->setLower(1);
	uML_TemplateableElement_isTemplate_result->setUpper(1);
	uML_TemplateableElement_isTemplate_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_TemplateableElement_isTemplate_->getOwnedParameter()->push_back(uML_TemplateableElement_isTemplate_result);
	
	
	uML_TemplateableElement->getOwnedOperation()->push_back(uML_TemplateableElement_isTemplate_); 
	uML_TemplateableElement_parameterableElements_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_TemplateableElement_parameterableElements_->setName("parameterableElements");
	uML_TemplateableElement_parameterableElements_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_TemplateableElement_parameterableElements_result->setName("result");
	uML_TemplateableElement_parameterableElements_result->setType(get_UML_ParameterableElement());
	uML_TemplateableElement_parameterableElements_result->setLower(0);
	uML_TemplateableElement_parameterableElements_result->setUpper(-1);
	uML_TemplateableElement_parameterableElements_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_TemplateableElement_parameterableElements_->getOwnedParameter()->push_back(uML_TemplateableElement_parameterableElements_result);
	
	
	uML_TemplateableElement->getOwnedOperation()->push_back(uML_TemplateableElement_parameterableElements_); 
	
	


	uML_TestIdentityAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_TestIdentityAction->setName("TestIdentityAction");
	uML_TestIdentityAction->setIsAbstract(false);
	uML_TestIdentityAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_TestIdentityAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("result_is_boolean");
	con->getConstrainedElement()->push_back(uML_TestIdentityAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.type=Boolean");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_TestIdentityAction->getOwnedRule()->push_back(con);
	con->setContext(uML_TestIdentityAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_type");
	con->getConstrainedElement()->push_back(uML_TestIdentityAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("first.type= null and second.type = null");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_TestIdentityAction->getOwnedRule()->push_back(con);
	con->setContext(uML_TestIdentityAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_TestIdentityAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("first.is(1,1) and second.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_TestIdentityAction->getOwnedRule()->push_back(con);
	con->setContext(uML_TestIdentityAction->getNamespace());
	
	
	uML_TestIdentityAction_first.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TestIdentityAction_first->setName("first");
	uML_TestIdentityAction_first->setType(get_UML_InputPin());
	uML_TestIdentityAction_first->setLower(1);
	uML_TestIdentityAction_first->setUpper(1);
	uML_TestIdentityAction->getOwnedAttribute()->push_back(uML_TestIdentityAction_first);
	uML_TestIdentityAction_first->setClass(uML_TestIdentityAction);
	
	
	uML_TestIdentityAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TestIdentityAction_result->setName("result");
	uML_TestIdentityAction_result->setType(get_UML_OutputPin());
	uML_TestIdentityAction_result->setLower(1);
	uML_TestIdentityAction_result->setUpper(1);
	uML_TestIdentityAction->getOwnedAttribute()->push_back(uML_TestIdentityAction_result);
	uML_TestIdentityAction_result->setClass(uML_TestIdentityAction);
	
	
	uML_TestIdentityAction_second.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TestIdentityAction_second->setName("second");
	uML_TestIdentityAction_second->setType(get_UML_InputPin());
	uML_TestIdentityAction_second->setLower(1);
	uML_TestIdentityAction_second->setUpper(1);
	uML_TestIdentityAction->getOwnedAttribute()->push_back(uML_TestIdentityAction_second);
	uML_TestIdentityAction_second->setClass(uML_TestIdentityAction);
	
	
	
	
	


	uML_TimeConstraint.reset(uml::UmlFactory::eInstance()->createClass());
	uML_TimeConstraint->setName("TimeConstraint");
	uML_TimeConstraint->setIsAbstract(false);
	uML_TimeConstraint->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_TimeConstraint);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("has_one_constrainedElement");
	con->getConstrainedElement()->push_back(uML_TimeConstraint);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("constrainedElement->size() = 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_TimeConstraint->getOwnedRule()->push_back(con);
	con->setContext(uML_TimeConstraint->getNamespace());
	
	
	uML_TimeConstraint_firstEvent.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TimeConstraint_firstEvent->setName("firstEvent");
	uML_TimeConstraint_firstEvent->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_TimeConstraint_firstEvent->setLower(0);
	uML_TimeConstraint_firstEvent->setUpper(1);
	uML_TimeConstraint->getOwnedAttribute()->push_back(uML_TimeConstraint_firstEvent);
	uML_TimeConstraint_firstEvent->setClass(uML_TimeConstraint);
	uML_TimeConstraint_firstEvent->setDefaultValue(uML_TimeConstraint_firstEvent_defaultValue_LiteralBoolean_UML_TimeConstraint_firstEvent);
	
	uML_TimeConstraint_specification.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TimeConstraint_specification->setName("specification");
	uML_TimeConstraint_specification->setType(get_UML_TimeInterval());
	uML_TimeConstraint_specification->setLower(1);
	uML_TimeConstraint_specification->setUpper(1);
	uML_TimeConstraint->getOwnedAttribute()->push_back(uML_TimeConstraint_specification);
	uML_TimeConstraint_specification->setClass(uML_TimeConstraint);
	
	
	
	
	


	uML_TimeEvent.reset(uml::UmlFactory::eInstance()->createClass());
	uML_TimeEvent->setName("TimeEvent");
	uML_TimeEvent->setIsAbstract(false);
	uML_TimeEvent->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_TimeEvent);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("when_non_negative");
	con->getConstrainedElement()->push_back(uML_TimeEvent);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("when.integerValue() >= 0");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_TimeEvent->getOwnedRule()->push_back(con);
	con->setContext(uML_TimeEvent->getNamespace());
	
	
	uML_TimeEvent_isRelative.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TimeEvent_isRelative->setName("isRelative");
	uML_TimeEvent_isRelative->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_TimeEvent_isRelative->setLower(1);
	uML_TimeEvent_isRelative->setUpper(1);
	uML_TimeEvent->getOwnedAttribute()->push_back(uML_TimeEvent_isRelative);
	uML_TimeEvent_isRelative->setClass(uML_TimeEvent);
	uML_TimeEvent_isRelative->setDefaultValue(uML_TimeEvent_isRelative_defaultValue_LiteralBoolean_UML_TimeEvent_isRelative);
	
	uML_TimeEvent_when.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TimeEvent_when->setName("when");
	uML_TimeEvent_when->setType(get_UML_TimeExpression());
	uML_TimeEvent_when->setLower(1);
	uML_TimeEvent_when->setUpper(1);
	uML_TimeEvent->getOwnedAttribute()->push_back(uML_TimeEvent_when);
	uML_TimeEvent_when->setClass(uML_TimeEvent);
	
	
	
	
	


	uML_TimeExpression.reset(uml::UmlFactory::eInstance()->createClass());
	uML_TimeExpression->setName("TimeExpression");
	uML_TimeExpression->setIsAbstract(false);
	uML_TimeExpression->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_TimeExpression);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_expr_requires_observation");
	con->getConstrainedElement()->push_back(uML_TimeExpression);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("expr = null implies (observation->size() = 1 and observation->forAll(oclIsKindOf(TimeObservation)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_TimeExpression->getOwnedRule()->push_back(con);
	con->setContext(uML_TimeExpression->getNamespace());
	
	
	uML_TimeExpression_expr.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TimeExpression_expr->setName("expr");
	uML_TimeExpression_expr->setType(get_UML_ValueSpecification());
	uML_TimeExpression_expr->setLower(0);
	uML_TimeExpression_expr->setUpper(1);
	uML_TimeExpression->getOwnedAttribute()->push_back(uML_TimeExpression_expr);
	uML_TimeExpression_expr->setClass(uML_TimeExpression);
	
	
	uML_TimeExpression_observation.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TimeExpression_observation->setName("observation");
	uML_TimeExpression_observation->setType(get_UML_Observation());
	uML_TimeExpression_observation->setLower(0);
	uML_TimeExpression_observation->setUpper(-1);
	uML_TimeExpression->getOwnedAttribute()->push_back(uML_TimeExpression_observation);
	uML_TimeExpression_observation->setClass(uML_TimeExpression);
	
	
	
	uML_TimeExpression_stringValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_TimeExpression_stringValue_->setName("stringValue");
	uML_TimeExpression_stringValue__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_TimeExpression_stringValue__return->setName("");
	uML_TimeExpression_stringValue__return->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_TimeExpression_stringValue__return->setLower(1);
	uML_TimeExpression_stringValue__return->setUpper(1);
	uML_TimeExpression_stringValue__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_TimeExpression_stringValue_->getOwnedParameter()->push_back(uML_TimeExpression_stringValue__return);
	
	
	uML_TimeExpression->getOwnedOperation()->push_back(uML_TimeExpression_stringValue_); 
	
	


	uML_TimeInterval.reset(uml::UmlFactory::eInstance()->createClass());
	uML_TimeInterval->setName("TimeInterval");
	uML_TimeInterval->setIsAbstract(false);
	uML_TimeInterval->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_TimeInterval);
	
	//constraints
	
	
	uML_TimeInterval_max.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TimeInterval_max->setName("max");
	uML_TimeInterval_max->setType(get_UML_TimeExpression());
	uML_TimeInterval_max->setLower(1);
	uML_TimeInterval_max->setUpper(1);
	uML_TimeInterval->getOwnedAttribute()->push_back(uML_TimeInterval_max);
	uML_TimeInterval_max->setClass(uML_TimeInterval);
	
	
	uML_TimeInterval_min.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TimeInterval_min->setName("min");
	uML_TimeInterval_min->setType(get_UML_TimeExpression());
	uML_TimeInterval_min->setLower(1);
	uML_TimeInterval_min->setUpper(1);
	uML_TimeInterval->getOwnedAttribute()->push_back(uML_TimeInterval_min);
	uML_TimeInterval_min->setClass(uML_TimeInterval);
	
	
	
	
	


	uML_TimeObservation.reset(uml::UmlFactory::eInstance()->createClass());
	uML_TimeObservation->setName("TimeObservation");
	uML_TimeObservation->setIsAbstract(false);
	uML_TimeObservation->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_TimeObservation);
	
	//constraints
	
	
	uML_TimeObservation_event.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TimeObservation_event->setName("event");
	uML_TimeObservation_event->setType(get_UML_NamedElement());
	uML_TimeObservation_event->setLower(1);
	uML_TimeObservation_event->setUpper(1);
	uML_TimeObservation->getOwnedAttribute()->push_back(uML_TimeObservation_event);
	uML_TimeObservation_event->setClass(uML_TimeObservation);
	
	
	uML_TimeObservation_firstEvent.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TimeObservation_firstEvent->setName("firstEvent");
	uML_TimeObservation_firstEvent->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_TimeObservation_firstEvent->setLower(1);
	uML_TimeObservation_firstEvent->setUpper(1);
	uML_TimeObservation->getOwnedAttribute()->push_back(uML_TimeObservation_firstEvent);
	uML_TimeObservation_firstEvent->setClass(uML_TimeObservation);
	uML_TimeObservation_firstEvent->setDefaultValue(uML_TimeObservation_firstEvent_defaultValue_LiteralBoolean_UML_TimeObservation_firstEvent);
	
	
	
	


	uML_Transition.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Transition->setName("Transition");
	uML_Transition->setIsAbstract(false);
	uML_Transition->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Transition);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("state_is_internal");
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(kind = TransitionKind::internal) implies"\
	"		(source.oclIsKindOf (State) and source = target)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Transition->getOwnedRule()->push_back(con);
	con->setContext(uML_Transition->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("initial_transition");
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(source.oclIsKindOf(Pseudostate) and container.stateMachine->notEmpty()) implies	trigger->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Transition->getOwnedRule()->push_back(con);
	con->setContext(uML_Transition->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("state_is_local");
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(kind = TransitionKind::local) implies"\
	"		((source.oclIsKindOf (State) and source.oclAsType(State).isComposite) or"\
	"		(source.oclIsKindOf (Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Transition->getOwnedRule()->push_back(con);
	con->setContext(uML_Transition->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("state_is_external");
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(kind = TransitionKind::external) implies"\
	"	not (source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::entryPoint)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Transition->getOwnedRule()->push_back(con);
	con->setContext(uML_Transition->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("fork_segment_state");
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(source.oclIsKindOf(Pseudostate) and  source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (target.oclIsKindOf(State))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Transition->getOwnedRule()->push_back(con);
	con->setContext(uML_Transition->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("fork_segment_guards");
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(source.oclIsKindOf(Pseudostate) and source.oclAsType(Pseudostate).kind = PseudostateKind::fork) implies (guard = null and trigger->isEmpty())");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Transition->getOwnedRule()->push_back(con);
	con->setContext(uML_Transition->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("outgoing_pseudostates");
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("source.oclIsKindOf(Pseudostate) and (source.oclAsType(Pseudostate).kind <> PseudostateKind::initial) implies trigger->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Transition->getOwnedRule()->push_back(con);
	con->setContext(uML_Transition->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("join_segment_guards");
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (guard = null and trigger->isEmpty())");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Transition->getOwnedRule()->push_back(con);
	con->setContext(uML_Transition->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("join_segment_state");
	con->getConstrainedElement()->push_back(uML_Transition);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("(target.oclIsKindOf(Pseudostate) and target.oclAsType(Pseudostate).kind = PseudostateKind::join) implies (source.oclIsKindOf(State))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Transition->getOwnedRule()->push_back(con);
	con->setContext(uML_Transition->getNamespace());
	
	
	uML_Transition_container.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Transition_container->setName("container");
	uML_Transition_container->setType(get_UML_Region());
	uML_Transition_container->setLower(1);
	uML_Transition_container->setUpper(1);
	uML_Transition->getOwnedAttribute()->push_back(uML_Transition_container);
	uML_Transition_container->setClass(uML_Transition);
	
	
	uML_Transition_effect.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Transition_effect->setName("effect");
	uML_Transition_effect->setType(get_UML_Behavior());
	uML_Transition_effect->setLower(0);
	uML_Transition_effect->setUpper(1);
	uML_Transition->getOwnedAttribute()->push_back(uML_Transition_effect);
	uML_Transition_effect->setClass(uML_Transition);
	
	
	uML_Transition_guard.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Transition_guard->setName("guard");
	uML_Transition_guard->setType(get_UML_Constraint());
	uML_Transition_guard->setLower(0);
	uML_Transition_guard->setUpper(1);
	uML_Transition->getOwnedAttribute()->push_back(uML_Transition_guard);
	uML_Transition_guard->setClass(uML_Transition);
	
	
	uML_Transition_kind.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Transition_kind->setName("kind");
	uML_Transition_kind->setType(get_UML_TransitionKind());
	uML_Transition_kind->setLower(1);
	uML_Transition_kind->setUpper(1);
	uML_Transition->getOwnedAttribute()->push_back(uML_Transition_kind);
	uML_Transition_kind->setClass(uML_Transition);
	uML_Transition_kind->setDefaultValue(uML_Transition_kind_defaultValue_InstanceValue);
	
	uML_Transition_redefinedTransition.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Transition_redefinedTransition->setName("redefinedTransition");
	uML_Transition_redefinedTransition->setType(get_UML_Transition());
	uML_Transition_redefinedTransition->setLower(0);
	uML_Transition_redefinedTransition->setUpper(1);
	uML_Transition->getOwnedAttribute()->push_back(uML_Transition_redefinedTransition);
	uML_Transition_redefinedTransition->setClass(uML_Transition);
	
	
	uML_Transition_redefinitionContext.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Transition_redefinitionContext->setName("redefinitionContext");
	uML_Transition_redefinitionContext->setType(get_UML_Classifier());
	uML_Transition_redefinitionContext->setLower(1);
	uML_Transition_redefinitionContext->setUpper(1);
	uML_Transition->getOwnedAttribute()->push_back(uML_Transition_redefinitionContext);
	uML_Transition_redefinitionContext->setClass(uML_Transition);
	
	
	uML_Transition_source.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Transition_source->setName("source");
	uML_Transition_source->setType(get_UML_Vertex());
	uML_Transition_source->setLower(1);
	uML_Transition_source->setUpper(1);
	uML_Transition->getOwnedAttribute()->push_back(uML_Transition_source);
	uML_Transition_source->setClass(uML_Transition);
	
	
	uML_Transition_target.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Transition_target->setName("target");
	uML_Transition_target->setType(get_UML_Vertex());
	uML_Transition_target->setLower(1);
	uML_Transition_target->setUpper(1);
	uML_Transition->getOwnedAttribute()->push_back(uML_Transition_target);
	uML_Transition_target->setClass(uML_Transition);
	
	
	uML_Transition_trigger.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Transition_trigger->setName("trigger");
	uML_Transition_trigger->setType(get_UML_Trigger());
	uML_Transition_trigger->setLower(0);
	uML_Transition_trigger->setUpper(-1);
	uML_Transition->getOwnedAttribute()->push_back(uML_Transition_trigger);
	uML_Transition_trigger->setClass(uML_Transition);
	
	
	
	uML_Transition_containingStateMachine_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Transition_containingStateMachine_->setName("containingStateMachine");
	uML_Transition_containingStateMachine_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Transition_containingStateMachine_result->setName("result");
	uML_Transition_containingStateMachine_result->setType(get_UML_StateMachine());
	uML_Transition_containingStateMachine_result->setLower(1);
	uML_Transition_containingStateMachine_result->setUpper(1);
	uML_Transition_containingStateMachine_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Transition_containingStateMachine_->getOwnedParameter()->push_back(uML_Transition_containingStateMachine_result);
	
	
	uML_Transition->getOwnedOperation()->push_back(uML_Transition_containingStateMachine_); 
	uML_Transition_isConsistentWith_RedefinableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Transition_isConsistentWith_RedefinableElement->setName("isConsistentWith");
	uML_Transition_isConsistentWith_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Transition_isConsistentWith_result->setName("result");
	uML_Transition_isConsistentWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Transition_isConsistentWith_result->setLower(1);
	uML_Transition_isConsistentWith_result->setUpper(1);
	uML_Transition_isConsistentWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Transition_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_Transition_isConsistentWith_result);
	uML_Transition_isConsistentWith_RedefinableElement_UML_Transition_isConsistentWith_redefiningElement.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Transition_isConsistentWith_RedefinableElement_UML_Transition_isConsistentWith_redefiningElement->setName("redefiningElement");
	uML_Transition_isConsistentWith_RedefinableElement_UML_Transition_isConsistentWith_redefiningElement->setType(get_UML_RedefinableElement());
	uML_Transition_isConsistentWith_RedefinableElement_UML_Transition_isConsistentWith_redefiningElement->setLower(1);
	uML_Transition_isConsistentWith_RedefinableElement_UML_Transition_isConsistentWith_redefiningElement->setUpper(1);
	uML_Transition_isConsistentWith_RedefinableElement_UML_Transition_isConsistentWith_redefiningElement->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Transition_isConsistentWith_RedefinableElement->getOwnedParameter()->push_back(uML_Transition_isConsistentWith_RedefinableElement_UML_Transition_isConsistentWith_redefiningElement);
	
	
	uML_Transition->getOwnedOperation()->push_back(uML_Transition_isConsistentWith_RedefinableElement); 
	uML_Transition_redefinitionContext_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Transition_redefinitionContext_->setName("redefinitionContext");
	uML_Transition_redefinitionContext_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Transition_redefinitionContext_result->setName("result");
	uML_Transition_redefinitionContext_result->setType(get_UML_Classifier());
	uML_Transition_redefinitionContext_result->setLower(1);
	uML_Transition_redefinitionContext_result->setUpper(1);
	uML_Transition_redefinitionContext_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Transition_redefinitionContext_->getOwnedParameter()->push_back(uML_Transition_redefinitionContext_result);
	
	
	uML_Transition->getOwnedOperation()->push_back(uML_Transition_redefinitionContext_); 
	
	


	uML_Trigger.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Trigger->setName("Trigger");
	uML_Trigger->setIsAbstract(false);
	uML_Trigger->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Trigger);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("trigger_with_ports");
	con->getConstrainedElement()->push_back(uML_Trigger);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("port->notEmpty() implies event.oclIsKindOf(MessageEvent)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_Trigger->getOwnedRule()->push_back(con);
	con->setContext(uML_Trigger->getNamespace());
	
	
	uML_Trigger_event.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Trigger_event->setName("event");
	uML_Trigger_event->setType(get_UML_Event());
	uML_Trigger_event->setLower(1);
	uML_Trigger_event->setUpper(1);
	uML_Trigger->getOwnedAttribute()->push_back(uML_Trigger_event);
	uML_Trigger_event->setClass(uML_Trigger);
	
	
	uML_Trigger_port.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Trigger_port->setName("port");
	uML_Trigger_port->setType(get_UML_Port());
	uML_Trigger_port->setLower(0);
	uML_Trigger_port->setUpper(-1);
	uML_Trigger->getOwnedAttribute()->push_back(uML_Trigger_port);
	uML_Trigger_port->setClass(uML_Trigger);
	
	
	
	
	


	uML_Type.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Type->setName("Type");
	uML_Type->setIsAbstract(true);
	uML_Type->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Type);
	
	//constraints
	
	
	uML_Type_package.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Type_package->setName("package");
	uML_Type_package->setType(get_UML_Package());
	uML_Type_package->setLower(0);
	uML_Type_package->setUpper(1);
	uML_Type->getOwnedAttribute()->push_back(uML_Type_package);
	uML_Type_package->setClass(uML_Type);
	
	
	
	uML_Type_conformsTo_Type.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Type_conformsTo_Type->setName("conformsTo");
	uML_Type_conformsTo_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Type_conformsTo_result->setName("result");
	uML_Type_conformsTo_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Type_conformsTo_result->setLower(1);
	uML_Type_conformsTo_result->setUpper(1);
	uML_Type_conformsTo_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Type_conformsTo_Type->getOwnedParameter()->push_back(uML_Type_conformsTo_result);
	uML_Type_conformsTo_Type_UML_Type_conformsTo_other.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Type_conformsTo_Type_UML_Type_conformsTo_other->setName("other");
	uML_Type_conformsTo_Type_UML_Type_conformsTo_other->setType(get_UML_Type());
	uML_Type_conformsTo_Type_UML_Type_conformsTo_other->setLower(1);
	uML_Type_conformsTo_Type_UML_Type_conformsTo_other->setUpper(1);
	uML_Type_conformsTo_Type_UML_Type_conformsTo_other->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Type_conformsTo_Type->getOwnedParameter()->push_back(uML_Type_conformsTo_Type_UML_Type_conformsTo_other);
	
	
	uML_Type->getOwnedOperation()->push_back(uML_Type_conformsTo_Type); 
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural->setName("createAssociation");
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return->setName("");
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return->setType(get_UML_Association());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return->setLower(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return->setUpper(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1IsNavigable.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1IsNavigable->setName("end1IsNavigable");
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1IsNavigable->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1IsNavigable->setLower(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1IsNavigable->setUpper(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1IsNavigable->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1IsNavigable);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Aggregation.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Aggregation->setName("end1Aggregation");
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Aggregation->setType(get_UML_AggregationKind());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Aggregation->setLower(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Aggregation->setUpper(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Aggregation->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Aggregation);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Name->setName("end1Name");
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Name->setLower(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Name->setUpper(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Name);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Lower.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Lower->setName("end1Lower");
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Lower->setLower(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Lower->setUpper(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Lower->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Lower);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Upper.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Upper->setName("end1Upper");
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Upper->setLower(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Upper->setUpper(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Upper->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Upper);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Type.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Type->setName("end1Type");
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Type->setType(get_UML_Type());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Type->setLower(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Type->setUpper(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Type->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Type);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2IsNavigable.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2IsNavigable->setName("end2IsNavigable");
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2IsNavigable->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2IsNavigable->setLower(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2IsNavigable->setUpper(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2IsNavigable->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2IsNavigable);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Aggregation.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Aggregation->setName("end2Aggregation");
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Aggregation->setType(get_UML_AggregationKind());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Aggregation->setLower(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Aggregation->setUpper(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Aggregation->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Aggregation);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Name.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Name->setName("end2Name");
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Name->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Name->setLower(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Name->setUpper(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Name->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Name);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Lower.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Lower->setName("end2Lower");
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Lower->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Lower->setLower(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Lower->setUpper(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Lower->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Lower);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Upper.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Upper->setName("end2Upper");
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Upper->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Upper->setLower(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Upper->setUpper(1);
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Upper->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural->getOwnedParameter()->push_back(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Upper);
	
	
	uML_Type->getOwnedOperation()->push_back(uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural); 
	uML_Type_getAssociations_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Type_getAssociations_->setName("getAssociations");
	uML_Type_getAssociations__return.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Type_getAssociations__return->setName("");
	uML_Type_getAssociations__return->setType(get_UML_Association());
	uML_Type_getAssociations__return->setLower(0);
	uML_Type_getAssociations__return->setUpper(-1);
	uML_Type_getAssociations__return->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Type_getAssociations_->getOwnedParameter()->push_back(uML_Type_getAssociations__return);
	
	
	uML_Type->getOwnedOperation()->push_back(uML_Type_getAssociations_); 
	
	


	uML_TypedElement.reset(uml::UmlFactory::eInstance()->createClass());
	uML_TypedElement->setName("TypedElement");
	uML_TypedElement->setIsAbstract(true);
	uML_TypedElement->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_TypedElement);
	
	//constraints
	
	
	uML_TypedElement_type.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_TypedElement_type->setName("type");
	uML_TypedElement_type->setType(get_UML_Type());
	uML_TypedElement_type->setLower(0);
	uML_TypedElement_type->setUpper(1);
	uML_TypedElement->getOwnedAttribute()->push_back(uML_TypedElement_type);
	uML_TypedElement_type->setClass(uML_TypedElement);
	
	
	
	
	


	uML_UnmarshallAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_UnmarshallAction->setName("UnmarshallAction");
	uML_UnmarshallAction->setIsAbstract(false);
	uML_UnmarshallAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_UnmarshallAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("structural_feature");
	con->getConstrainedElement()->push_back(uML_UnmarshallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("unmarshallType.allAttributes()->size() >= 1");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_UnmarshallAction->getOwnedRule()->push_back(con);
	con->setContext(uML_UnmarshallAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_ordering_and_multiplicity");
	con->getConstrainedElement()->push_back(uML_UnmarshallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("let attribute:OrderedSet(Property) = unmarshallType.allAttributes() in"\
	"Sequence{1..result->size()}->forAll(i | "\
	"	attribute->at(i).type.conformsTo(result->at(i).type) and"\
	"	attribute->at(i).isOrdered=result->at(i).isOrdered and"\
	"	attribute->at(i).compatibleWith(result->at(i)))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_UnmarshallAction->getOwnedRule()->push_back(con);
	con->setContext(uML_UnmarshallAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity_of_object");
	con->getConstrainedElement()->push_back(uML_UnmarshallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_UnmarshallAction->getOwnedRule()->push_back(con);
	con->setContext(uML_UnmarshallAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("number_of_result");
	con->getConstrainedElement()->push_back(uML_UnmarshallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("unmarshallType.allAttributes()->size() = result->size()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_UnmarshallAction->getOwnedRule()->push_back(con);
	con->setContext(uML_UnmarshallAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("object_type");
	con->getConstrainedElement()->push_back(uML_UnmarshallAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("object.type.conformsTo(unmarshallType)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_UnmarshallAction->getOwnedRule()->push_back(con);
	con->setContext(uML_UnmarshallAction->getNamespace());
	
	
	uML_UnmarshallAction_object.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_UnmarshallAction_object->setName("object");
	uML_UnmarshallAction_object->setType(get_UML_InputPin());
	uML_UnmarshallAction_object->setLower(1);
	uML_UnmarshallAction_object->setUpper(1);
	uML_UnmarshallAction->getOwnedAttribute()->push_back(uML_UnmarshallAction_object);
	uML_UnmarshallAction_object->setClass(uML_UnmarshallAction);
	
	
	uML_UnmarshallAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_UnmarshallAction_result->setName("result");
	uML_UnmarshallAction_result->setType(get_UML_OutputPin());
	uML_UnmarshallAction_result->setLower(1);
	uML_UnmarshallAction_result->setUpper(-1);
	uML_UnmarshallAction->getOwnedAttribute()->push_back(uML_UnmarshallAction_result);
	uML_UnmarshallAction_result->setClass(uML_UnmarshallAction);
	
	
	uML_UnmarshallAction_unmarshallType.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_UnmarshallAction_unmarshallType->setName("unmarshallType");
	uML_UnmarshallAction_unmarshallType->setType(get_UML_Classifier());
	uML_UnmarshallAction_unmarshallType->setLower(1);
	uML_UnmarshallAction_unmarshallType->setUpper(1);
	uML_UnmarshallAction->getOwnedAttribute()->push_back(uML_UnmarshallAction_unmarshallType);
	uML_UnmarshallAction_unmarshallType->setClass(uML_UnmarshallAction);
	
	
	
	
	


	uML_Usage.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Usage->setName("Usage");
	uML_Usage->setIsAbstract(false);
	uML_Usage->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Usage);
	
	//constraints
	
	
	
	
	


	uML_UseCase.reset(uml::UmlFactory::eInstance()->createClass());
	uML_UseCase->setName("UseCase");
	uML_UseCase->setIsAbstract(false);
	uML_UseCase->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_UseCase);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("must_have_name");
	con->getConstrainedElement()->push_back(uML_UseCase);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("name -> notEmpty ()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_UseCase->getOwnedRule()->push_back(con);
	con->setContext(uML_UseCase->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_association_to_use_case");
	con->getConstrainedElement()->push_back(uML_UseCase);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies "\
	"   ("\
	"   let usecases: Set(UseCase) = a.memberEnd.type->select(oclIsKindOf(UseCase))->collect(oclAsType(UseCase))->asSet() in"\
	"   usecases->size() > 1 implies usecases->collect(subject)->size() > 1"\
	"   )"\
	")");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_UseCase->getOwnedRule()->push_back(con);
	con->setContext(uML_UseCase->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("cannot_include_self");
	con->getConstrainedElement()->push_back(uML_UseCase);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("not allIncludedUseCases()->includes(self)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_UseCase->getOwnedRule()->push_back(con);
	con->setContext(uML_UseCase->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("binary_associations");
	con->getConstrainedElement()->push_back(uML_UseCase);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("Association.allInstances()->forAll(a | a.memberEnd.type->includes(self) implies a.memberEnd->size() = 2)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_UseCase->getOwnedRule()->push_back(con);
	con->setContext(uML_UseCase->getNamespace());
	
	
	uML_UseCase_extend.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_UseCase_extend->setName("extend");
	uML_UseCase_extend->setType(get_UML_Extend());
	uML_UseCase_extend->setLower(0);
	uML_UseCase_extend->setUpper(-1);
	uML_UseCase->getOwnedAttribute()->push_back(uML_UseCase_extend);
	uML_UseCase_extend->setClass(uML_UseCase);
	
	
	uML_UseCase_extensionPoint.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_UseCase_extensionPoint->setName("extensionPoint");
	uML_UseCase_extensionPoint->setType(get_UML_ExtensionPoint());
	uML_UseCase_extensionPoint->setLower(0);
	uML_UseCase_extensionPoint->setUpper(-1);
	uML_UseCase->getOwnedAttribute()->push_back(uML_UseCase_extensionPoint);
	uML_UseCase_extensionPoint->setClass(uML_UseCase);
	
	
	uML_UseCase_include.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_UseCase_include->setName("include");
	uML_UseCase_include->setType(get_UML_Include());
	uML_UseCase_include->setLower(0);
	uML_UseCase_include->setUpper(-1);
	uML_UseCase->getOwnedAttribute()->push_back(uML_UseCase_include);
	uML_UseCase_include->setClass(uML_UseCase);
	
	
	uML_UseCase_subject.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_UseCase_subject->setName("subject");
	uML_UseCase_subject->setType(get_UML_Classifier());
	uML_UseCase_subject->setLower(0);
	uML_UseCase_subject->setUpper(-1);
	uML_UseCase->getOwnedAttribute()->push_back(uML_UseCase_subject);
	uML_UseCase_subject->setClass(uML_UseCase);
	
	
	
	uML_UseCase_allIncludedUseCases_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_UseCase_allIncludedUseCases_->setName("allIncludedUseCases");
	uML_UseCase_allIncludedUseCases_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_UseCase_allIncludedUseCases_result->setName("result");
	uML_UseCase_allIncludedUseCases_result->setType(get_UML_UseCase());
	uML_UseCase_allIncludedUseCases_result->setLower(0);
	uML_UseCase_allIncludedUseCases_result->setUpper(-1);
	uML_UseCase_allIncludedUseCases_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_UseCase_allIncludedUseCases_->getOwnedParameter()->push_back(uML_UseCase_allIncludedUseCases_result);
	
	
	uML_UseCase->getOwnedOperation()->push_back(uML_UseCase_allIncludedUseCases_); 
	
	


	uML_ValuePin.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ValuePin->setName("ValuePin");
	uML_ValuePin->setIsAbstract(false);
	uML_ValuePin->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ValuePin);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("compatible_type");
	con->getConstrainedElement()->push_back(uML_ValuePin);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("value.type.conformsTo(type)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ValuePin->getOwnedRule()->push_back(con);
	con->setContext(uML_ValuePin->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("no_incoming_edges");
	con->getConstrainedElement()->push_back(uML_ValuePin);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("incoming->isEmpty()");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ValuePin->getOwnedRule()->push_back(con);
	con->setContext(uML_ValuePin->getNamespace());
	
	
	uML_ValuePin_value.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ValuePin_value->setName("value");
	uML_ValuePin_value->setType(get_UML_ValueSpecification());
	uML_ValuePin_value->setLower(1);
	uML_ValuePin_value->setUpper(1);
	uML_ValuePin->getOwnedAttribute()->push_back(uML_ValuePin_value);
	uML_ValuePin_value->setClass(uML_ValuePin);
	
	
	
	
	


	uML_ValueSpecification.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ValueSpecification->setName("ValueSpecification");
	uML_ValueSpecification->setIsAbstract(true);
	uML_ValueSpecification->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ValueSpecification);
	
	//constraints
	
	
	
	uML_ValueSpecification_booleanValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ValueSpecification_booleanValue_->setName("booleanValue");
	uML_ValueSpecification_booleanValue_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ValueSpecification_booleanValue_result->setName("result");
	uML_ValueSpecification_booleanValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ValueSpecification_booleanValue_result->setLower(0);
	uML_ValueSpecification_booleanValue_result->setUpper(1);
	uML_ValueSpecification_booleanValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ValueSpecification_booleanValue_->getOwnedParameter()->push_back(uML_ValueSpecification_booleanValue_result);
	
	
	uML_ValueSpecification->getOwnedOperation()->push_back(uML_ValueSpecification_booleanValue_); 
	uML_ValueSpecification_integerValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ValueSpecification_integerValue_->setName("integerValue");
	uML_ValueSpecification_integerValue_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ValueSpecification_integerValue_result->setName("result");
	uML_ValueSpecification_integerValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	uML_ValueSpecification_integerValue_result->setLower(0);
	uML_ValueSpecification_integerValue_result->setUpper(1);
	uML_ValueSpecification_integerValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ValueSpecification_integerValue_->getOwnedParameter()->push_back(uML_ValueSpecification_integerValue_result);
	
	
	uML_ValueSpecification->getOwnedOperation()->push_back(uML_ValueSpecification_integerValue_); 
	uML_ValueSpecification_isCompatibleWith_ParameterableElement.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ValueSpecification_isCompatibleWith_ParameterableElement->setName("isCompatibleWith");
	uML_ValueSpecification_isCompatibleWith_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ValueSpecification_isCompatibleWith_result->setName("result");
	uML_ValueSpecification_isCompatibleWith_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ValueSpecification_isCompatibleWith_result->setLower(1);
	uML_ValueSpecification_isCompatibleWith_result->setUpper(1);
	uML_ValueSpecification_isCompatibleWith_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ValueSpecification_isCompatibleWith_ParameterableElement->getOwnedParameter()->push_back(uML_ValueSpecification_isCompatibleWith_result);
	uML_ValueSpecification_isCompatibleWith_ParameterableElement_UML_ValueSpecification_isCompatibleWith_p.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ValueSpecification_isCompatibleWith_ParameterableElement_UML_ValueSpecification_isCompatibleWith_p->setName("p");
	uML_ValueSpecification_isCompatibleWith_ParameterableElement_UML_ValueSpecification_isCompatibleWith_p->setType(get_UML_ParameterableElement());
	uML_ValueSpecification_isCompatibleWith_ParameterableElement_UML_ValueSpecification_isCompatibleWith_p->setLower(1);
	uML_ValueSpecification_isCompatibleWith_ParameterableElement_UML_ValueSpecification_isCompatibleWith_p->setUpper(1);
	uML_ValueSpecification_isCompatibleWith_ParameterableElement_UML_ValueSpecification_isCompatibleWith_p->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_ValueSpecification_isCompatibleWith_ParameterableElement->getOwnedParameter()->push_back(uML_ValueSpecification_isCompatibleWith_ParameterableElement_UML_ValueSpecification_isCompatibleWith_p);
	
	
	uML_ValueSpecification->getOwnedOperation()->push_back(uML_ValueSpecification_isCompatibleWith_ParameterableElement); 
	uML_ValueSpecification_isComputable_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ValueSpecification_isComputable_->setName("isComputable");
	uML_ValueSpecification_isComputable_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ValueSpecification_isComputable_result->setName("result");
	uML_ValueSpecification_isComputable_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ValueSpecification_isComputable_result->setLower(1);
	uML_ValueSpecification_isComputable_result->setUpper(1);
	uML_ValueSpecification_isComputable_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ValueSpecification_isComputable_->getOwnedParameter()->push_back(uML_ValueSpecification_isComputable_result);
	
	
	uML_ValueSpecification->getOwnedOperation()->push_back(uML_ValueSpecification_isComputable_); 
	uML_ValueSpecification_isNull_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ValueSpecification_isNull_->setName("isNull");
	uML_ValueSpecification_isNull_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ValueSpecification_isNull_result->setName("result");
	uML_ValueSpecification_isNull_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_ValueSpecification_isNull_result->setLower(1);
	uML_ValueSpecification_isNull_result->setUpper(1);
	uML_ValueSpecification_isNull_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ValueSpecification_isNull_->getOwnedParameter()->push_back(uML_ValueSpecification_isNull_result);
	
	
	uML_ValueSpecification->getOwnedOperation()->push_back(uML_ValueSpecification_isNull_); 
	uML_ValueSpecification_realValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ValueSpecification_realValue_->setName("realValue");
	uML_ValueSpecification_realValue_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ValueSpecification_realValue_result->setName("result");
	uML_ValueSpecification_realValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Real());
	uML_ValueSpecification_realValue_result->setLower(0);
	uML_ValueSpecification_realValue_result->setUpper(1);
	uML_ValueSpecification_realValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ValueSpecification_realValue_->getOwnedParameter()->push_back(uML_ValueSpecification_realValue_result);
	
	
	uML_ValueSpecification->getOwnedOperation()->push_back(uML_ValueSpecification_realValue_); 
	uML_ValueSpecification_stringValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ValueSpecification_stringValue_->setName("stringValue");
	uML_ValueSpecification_stringValue_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ValueSpecification_stringValue_result->setName("result");
	uML_ValueSpecification_stringValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_String());
	uML_ValueSpecification_stringValue_result->setLower(0);
	uML_ValueSpecification_stringValue_result->setUpper(1);
	uML_ValueSpecification_stringValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ValueSpecification_stringValue_->getOwnedParameter()->push_back(uML_ValueSpecification_stringValue_result);
	
	
	uML_ValueSpecification->getOwnedOperation()->push_back(uML_ValueSpecification_stringValue_); 
	uML_ValueSpecification_unlimitedValue_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_ValueSpecification_unlimitedValue_->setName("unlimitedValue");
	uML_ValueSpecification_unlimitedValue_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_ValueSpecification_unlimitedValue_result->setName("result");
	uML_ValueSpecification_unlimitedValue_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_UnlimitedNatural());
	uML_ValueSpecification_unlimitedValue_result->setLower(0);
	uML_ValueSpecification_unlimitedValue_result->setUpper(1);
	uML_ValueSpecification_unlimitedValue_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_ValueSpecification_unlimitedValue_->getOwnedParameter()->push_back(uML_ValueSpecification_unlimitedValue_result);
	
	
	uML_ValueSpecification->getOwnedOperation()->push_back(uML_ValueSpecification_unlimitedValue_); 
	
	


	uML_ValueSpecificationAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_ValueSpecificationAction->setName("ValueSpecificationAction");
	uML_ValueSpecificationAction->setIsAbstract(false);
	uML_ValueSpecificationAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_ValueSpecificationAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_ValueSpecificationAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ValueSpecificationAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ValueSpecificationAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("compatible_type");
	con->getConstrainedElement()->push_back(uML_ValueSpecificationAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("value.type.conformsTo(result.type)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_ValueSpecificationAction->getOwnedRule()->push_back(con);
	con->setContext(uML_ValueSpecificationAction->getNamespace());
	
	
	uML_ValueSpecificationAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ValueSpecificationAction_result->setName("result");
	uML_ValueSpecificationAction_result->setType(get_UML_OutputPin());
	uML_ValueSpecificationAction_result->setLower(1);
	uML_ValueSpecificationAction_result->setUpper(1);
	uML_ValueSpecificationAction->getOwnedAttribute()->push_back(uML_ValueSpecificationAction_result);
	uML_ValueSpecificationAction_result->setClass(uML_ValueSpecificationAction);
	
	
	uML_ValueSpecificationAction_value.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_ValueSpecificationAction_value->setName("value");
	uML_ValueSpecificationAction_value->setType(get_UML_ValueSpecification());
	uML_ValueSpecificationAction_value->setLower(1);
	uML_ValueSpecificationAction_value->setUpper(1);
	uML_ValueSpecificationAction->getOwnedAttribute()->push_back(uML_ValueSpecificationAction_value);
	uML_ValueSpecificationAction_value->setClass(uML_ValueSpecificationAction);
	
	
	
	
	


	uML_Variable.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Variable->setName("Variable");
	uML_Variable->setIsAbstract(false);
	uML_Variable->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Variable);
	
	//constraints
	
	
	uML_Variable_activityScope.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Variable_activityScope->setName("activityScope");
	uML_Variable_activityScope->setType(get_UML_Activity());
	uML_Variable_activityScope->setLower(0);
	uML_Variable_activityScope->setUpper(1);
	uML_Variable->getOwnedAttribute()->push_back(uML_Variable_activityScope);
	uML_Variable_activityScope->setClass(uML_Variable);
	
	
	uML_Variable_scope.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Variable_scope->setName("scope");
	uML_Variable_scope->setType(get_UML_StructuredActivityNode());
	uML_Variable_scope->setLower(0);
	uML_Variable_scope->setUpper(1);
	uML_Variable->getOwnedAttribute()->push_back(uML_Variable_scope);
	uML_Variable_scope->setClass(uML_Variable);
	
	
	
	uML_Variable_isAccessibleBy_Action.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Variable_isAccessibleBy_Action->setName("isAccessibleBy");
	uML_Variable_isAccessibleBy_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Variable_isAccessibleBy_result->setName("result");
	uML_Variable_isAccessibleBy_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Variable_isAccessibleBy_result->setLower(1);
	uML_Variable_isAccessibleBy_result->setUpper(1);
	uML_Variable_isAccessibleBy_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Variable_isAccessibleBy_Action->getOwnedParameter()->push_back(uML_Variable_isAccessibleBy_result);
	uML_Variable_isAccessibleBy_Action_UML_Variable_isAccessibleBy_a.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Variable_isAccessibleBy_Action_UML_Variable_isAccessibleBy_a->setName("a");
	uML_Variable_isAccessibleBy_Action_UML_Variable_isAccessibleBy_a->setType(get_UML_Action());
	uML_Variable_isAccessibleBy_Action_UML_Variable_isAccessibleBy_a->setLower(1);
	uML_Variable_isAccessibleBy_Action_UML_Variable_isAccessibleBy_a->setUpper(1);
	uML_Variable_isAccessibleBy_Action_UML_Variable_isAccessibleBy_a->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Variable_isAccessibleBy_Action->getOwnedParameter()->push_back(uML_Variable_isAccessibleBy_Action_UML_Variable_isAccessibleBy_a);
	
	
	uML_Variable->getOwnedOperation()->push_back(uML_Variable_isAccessibleBy_Action); 
	
	


	uML_VariableAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_VariableAction->setName("VariableAction");
	uML_VariableAction->setIsAbstract(true);
	uML_VariableAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_VariableAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("scope_of_variable");
	con->getConstrainedElement()->push_back(uML_VariableAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("variable.isAccessibleBy(self)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_VariableAction->getOwnedRule()->push_back(con);
	con->setContext(uML_VariableAction->getNamespace());
	
	
	uML_VariableAction_variable.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_VariableAction_variable->setName("variable");
	uML_VariableAction_variable->setType(get_UML_Variable());
	uML_VariableAction_variable->setLower(1);
	uML_VariableAction_variable->setUpper(1);
	uML_VariableAction->getOwnedAttribute()->push_back(uML_VariableAction_variable);
	uML_VariableAction_variable->setClass(uML_VariableAction);
	
	
	
	
	


	uML_Vertex.reset(uml::UmlFactory::eInstance()->createClass());
	uML_Vertex->setName("Vertex");
	uML_Vertex->setIsAbstract(true);
	uML_Vertex->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_Vertex);
	
	//constraints
	
	
	uML_Vertex_container.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Vertex_container->setName("container");
	uML_Vertex_container->setType(get_UML_Region());
	uML_Vertex_container->setLower(0);
	uML_Vertex_container->setUpper(1);
	uML_Vertex->getOwnedAttribute()->push_back(uML_Vertex_container);
	uML_Vertex_container->setClass(uML_Vertex);
	
	
	uML_Vertex_incoming.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Vertex_incoming->setName("incoming");
	uML_Vertex_incoming->setType(get_UML_Transition());
	uML_Vertex_incoming->setLower(0);
	uML_Vertex_incoming->setUpper(-1);
	uML_Vertex->getOwnedAttribute()->push_back(uML_Vertex_incoming);
	uML_Vertex_incoming->setClass(uML_Vertex);
	
	
	uML_Vertex_outgoing.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_Vertex_outgoing->setName("outgoing");
	uML_Vertex_outgoing->setType(get_UML_Transition());
	uML_Vertex_outgoing->setLower(0);
	uML_Vertex_outgoing->setUpper(-1);
	uML_Vertex->getOwnedAttribute()->push_back(uML_Vertex_outgoing);
	uML_Vertex_outgoing->setClass(uML_Vertex);
	
	
	
	uML_Vertex_containingStateMachine_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Vertex_containingStateMachine_->setName("containingStateMachine");
	uML_Vertex_containingStateMachine_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Vertex_containingStateMachine_result->setName("result");
	uML_Vertex_containingStateMachine_result->setType(get_UML_StateMachine());
	uML_Vertex_containingStateMachine_result->setLower(1);
	uML_Vertex_containingStateMachine_result->setUpper(1);
	uML_Vertex_containingStateMachine_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Vertex_containingStateMachine_->getOwnedParameter()->push_back(uML_Vertex_containingStateMachine_result);
	
	
	uML_Vertex->getOwnedOperation()->push_back(uML_Vertex_containingStateMachine_); 
	uML_Vertex_incoming_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Vertex_incoming_->setName("incoming");
	uML_Vertex_incoming_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Vertex_incoming_result->setName("result");
	uML_Vertex_incoming_result->setType(get_UML_Transition());
	uML_Vertex_incoming_result->setLower(0);
	uML_Vertex_incoming_result->setUpper(-1);
	uML_Vertex_incoming_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Vertex_incoming_->getOwnedParameter()->push_back(uML_Vertex_incoming_result);
	
	
	uML_Vertex->getOwnedOperation()->push_back(uML_Vertex_incoming_); 
	uML_Vertex_isContainedInRegion_Region.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Vertex_isContainedInRegion_Region->setName("isContainedInRegion");
	uML_Vertex_isContainedInRegion_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Vertex_isContainedInRegion_result->setName("result");
	uML_Vertex_isContainedInRegion_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Vertex_isContainedInRegion_result->setLower(1);
	uML_Vertex_isContainedInRegion_result->setUpper(1);
	uML_Vertex_isContainedInRegion_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Vertex_isContainedInRegion_Region->getOwnedParameter()->push_back(uML_Vertex_isContainedInRegion_result);
	uML_Vertex_isContainedInRegion_Region_UML_Vertex_isContainedInRegion_r.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Vertex_isContainedInRegion_Region_UML_Vertex_isContainedInRegion_r->setName("r");
	uML_Vertex_isContainedInRegion_Region_UML_Vertex_isContainedInRegion_r->setType(get_UML_Region());
	uML_Vertex_isContainedInRegion_Region_UML_Vertex_isContainedInRegion_r->setLower(1);
	uML_Vertex_isContainedInRegion_Region_UML_Vertex_isContainedInRegion_r->setUpper(1);
	uML_Vertex_isContainedInRegion_Region_UML_Vertex_isContainedInRegion_r->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Vertex_isContainedInRegion_Region->getOwnedParameter()->push_back(uML_Vertex_isContainedInRegion_Region_UML_Vertex_isContainedInRegion_r);
	
	
	uML_Vertex->getOwnedOperation()->push_back(uML_Vertex_isContainedInRegion_Region); 
	uML_Vertex_isContainedInState_State.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Vertex_isContainedInState_State->setName("isContainedInState");
	uML_Vertex_isContainedInState_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Vertex_isContainedInState_result->setName("result");
	uML_Vertex_isContainedInState_result->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	uML_Vertex_isContainedInState_result->setLower(1);
	uML_Vertex_isContainedInState_result->setUpper(1);
	uML_Vertex_isContainedInState_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Vertex_isContainedInState_State->getOwnedParameter()->push_back(uML_Vertex_isContainedInState_result);
	uML_Vertex_isContainedInState_State_UML_Vertex_isContainedInState_s.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Vertex_isContainedInState_State_UML_Vertex_isContainedInState_s->setName("s");
	uML_Vertex_isContainedInState_State_UML_Vertex_isContainedInState_s->setType(get_UML_State());
	uML_Vertex_isContainedInState_State_UML_Vertex_isContainedInState_s->setLower(1);
	uML_Vertex_isContainedInState_State_UML_Vertex_isContainedInState_s->setUpper(1);
	uML_Vertex_isContainedInState_State_UML_Vertex_isContainedInState_s->setDirection(uml::ParameterDirectionKind::IN);
	
	uML_Vertex_isContainedInState_State->getOwnedParameter()->push_back(uML_Vertex_isContainedInState_State_UML_Vertex_isContainedInState_s);
	
	
	uML_Vertex->getOwnedOperation()->push_back(uML_Vertex_isContainedInState_State); 
	uML_Vertex_outgoing_.reset(uml::UmlFactory::eInstance()->createOperation());
	uML_Vertex_outgoing_->setName("outgoing");
	uML_Vertex_outgoing_result.reset(uml::UmlFactory::eInstance()->createParameter());
	uML_Vertex_outgoing_result->setName("result");
	uML_Vertex_outgoing_result->setType(get_UML_Transition());
	uML_Vertex_outgoing_result->setLower(0);
	uML_Vertex_outgoing_result->setUpper(-1);
	uML_Vertex_outgoing_result->setDirection(uml::ParameterDirectionKind::RETURN);
	
	uML_Vertex_outgoing_->getOwnedParameter()->push_back(uML_Vertex_outgoing_result);
	
	
	uML_Vertex->getOwnedOperation()->push_back(uML_Vertex_outgoing_); 
	
	


	uML_WriteLinkAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_WriteLinkAction->setName("WriteLinkAction");
	uML_WriteLinkAction->setIsAbstract(true);
	uML_WriteLinkAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_WriteLinkAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("allow_access");
	con->getConstrainedElement()->push_back(uML_WriteLinkAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("endData.end->exists(end |"\
	"  end.type=_'context' or"\
	"  end.visibility=VisibilityKind::public or "\
	"  end.visibility=VisibilityKind::protected and"\
	"  endData.end->exists(other | "\
	"    other<>end and _'context'.conformsTo(other.type.oclAsType(Classifier))))");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_WriteLinkAction->getOwnedRule()->push_back(con);
	con->setContext(uML_WriteLinkAction->getNamespace());
	
	
	
	
	


	uML_WriteStructuralFeatureAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_WriteStructuralFeatureAction->setName("WriteStructuralFeatureAction");
	uML_WriteStructuralFeatureAction->setIsAbstract(true);
	uML_WriteStructuralFeatureAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_WriteStructuralFeatureAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity_of_result");
	con->getConstrainedElement()->push_back(uML_WriteStructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result <> null implies result.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_WriteStructuralFeatureAction->getOwnedRule()->push_back(con);
	con->setContext(uML_WriteStructuralFeatureAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_of_value");
	con->getConstrainedElement()->push_back(uML_WriteStructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("value <> null implies value.type.conformsTo(structuralFeature.type)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_WriteStructuralFeatureAction->getOwnedRule()->push_back(con);
	con->setContext(uML_WriteStructuralFeatureAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("type_of_result");
	con->getConstrainedElement()->push_back(uML_WriteStructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("result <> null implies result.type = object.type");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_WriteStructuralFeatureAction->getOwnedRule()->push_back(con);
	con->setContext(uML_WriteStructuralFeatureAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity_of_value");
	con->getConstrainedElement()->push_back(uML_WriteStructuralFeatureAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("value<>null implies value.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_WriteStructuralFeatureAction->getOwnedRule()->push_back(con);
	con->setContext(uML_WriteStructuralFeatureAction->getNamespace());
	
	
	uML_WriteStructuralFeatureAction_result.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_WriteStructuralFeatureAction_result->setName("result");
	uML_WriteStructuralFeatureAction_result->setType(get_UML_OutputPin());
	uML_WriteStructuralFeatureAction_result->setLower(0);
	uML_WriteStructuralFeatureAction_result->setUpper(1);
	uML_WriteStructuralFeatureAction->getOwnedAttribute()->push_back(uML_WriteStructuralFeatureAction_result);
	uML_WriteStructuralFeatureAction_result->setClass(uML_WriteStructuralFeatureAction);
	
	
	uML_WriteStructuralFeatureAction_value.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_WriteStructuralFeatureAction_value->setName("value");
	uML_WriteStructuralFeatureAction_value->setType(get_UML_InputPin());
	uML_WriteStructuralFeatureAction_value->setLower(0);
	uML_WriteStructuralFeatureAction_value->setUpper(1);
	uML_WriteStructuralFeatureAction->getOwnedAttribute()->push_back(uML_WriteStructuralFeatureAction_value);
	uML_WriteStructuralFeatureAction_value->setClass(uML_WriteStructuralFeatureAction);
	
	
	
	
	


	uML_WriteVariableAction.reset(uml::UmlFactory::eInstance()->createClass());
	uML_WriteVariableAction->setName("WriteVariableAction");
	uML_WriteVariableAction->setIsAbstract(true);
	uML_WriteVariableAction->setPackage(uML);
	uML->getPackagedElement()->push_back(uML_WriteVariableAction);
	
	//constraints
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("multiplicity");
	con->getConstrainedElement()->push_back(uML_WriteVariableAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("value<>null implies value.is(1,1)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_WriteVariableAction->getOwnedRule()->push_back(con);
	con->setContext(uML_WriteVariableAction->getNamespace());
	con = std::shared_ptr<uml::Constraint>(uml::UmlFactory::eInstance()->createConstraint());
	
	con->setName("value_type");
	con->getConstrainedElement()->push_back(uML_WriteVariableAction);
	
	oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression());
	oe->getLanguage()->push_back("OCL");
	oe->getBody()->push_back("value <> null implies value.type.conformsTo(variable.type)");
	
	con->setSpecification(oe);
	
	//insert into model hirachie
	uML_WriteVariableAction->getOwnedRule()->push_back(con);
	con->setContext(uML_WriteVariableAction->getNamespace());
	
	
	uML_WriteVariableAction_value.reset(uml::UmlFactory::eInstance()->createProperty());
	uML_WriteVariableAction_value->setName("value");
	uML_WriteVariableAction_value->setType(get_UML_InputPin());
	uML_WriteVariableAction_value->setLower(0);
	uML_WriteVariableAction_value->setUpper(1);
	uML_WriteVariableAction->getOwnedAttribute()->push_back(uML_WriteVariableAction_value);
	uML_WriteVariableAction_value->setClass(uML_WriteVariableAction);
	
	
	
	
	





//Dependency 

	

	std::shared_ptr<uml::EnumerationLiteral> lit = nullptr;
		uML_TransitionKind.reset(uml::UmlFactory::eInstance()->createEnumeration());
		uML_TransitionKind->setName("TransitionKind");
	
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("external");
			uML_TransitionKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_TransitionKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("internal");
			uML_TransitionKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_TransitionKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("local");
			uML_TransitionKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_TransitionKind);
		uML_PseudostateKind.reset(uml::UmlFactory::eInstance()->createEnumeration());
		uML_PseudostateKind->setName("PseudostateKind");
	
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("choice");
			uML_PseudostateKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_PseudostateKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("deepHistory");
			uML_PseudostateKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_PseudostateKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("entryPoint");
			uML_PseudostateKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_PseudostateKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("exitPoint");
			uML_PseudostateKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_PseudostateKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("fork");
			uML_PseudostateKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_PseudostateKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("initial");
			uML_PseudostateKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_PseudostateKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("join");
			uML_PseudostateKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_PseudostateKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("junction");
			uML_PseudostateKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_PseudostateKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("shallowHistory");
			uML_PseudostateKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_PseudostateKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("terminate");
			uML_PseudostateKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_PseudostateKind);
		uML_ConnectorKind.reset(uml::UmlFactory::eInstance()->createEnumeration());
		uML_ConnectorKind->setName("ConnectorKind");
	
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("assembly");
			uML_ConnectorKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ConnectorKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("delegation");
			uML_ConnectorKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ConnectorKind);
		uML_ParameterEffectKind.reset(uml::UmlFactory::eInstance()->createEnumeration());
		uML_ParameterEffectKind->setName("ParameterEffectKind");
	
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("create");
			uML_ParameterEffectKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ParameterEffectKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("delete");
			uML_ParameterEffectKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ParameterEffectKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("read");
			uML_ParameterEffectKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ParameterEffectKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("update");
			uML_ParameterEffectKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ParameterEffectKind);
		uML_VisibilityKind.reset(uml::UmlFactory::eInstance()->createEnumeration());
		uML_VisibilityKind->setName("VisibilityKind");
	
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("package");
			uML_VisibilityKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_VisibilityKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("private");
			uML_VisibilityKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_VisibilityKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("protected");
			uML_VisibilityKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_VisibilityKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("public");
			uML_VisibilityKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_VisibilityKind);
		uML_ParameterDirectionKind.reset(uml::UmlFactory::eInstance()->createEnumeration());
		uML_ParameterDirectionKind->setName("ParameterDirectionKind");
	
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("in");
			uML_ParameterDirectionKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ParameterDirectionKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("inout");
			uML_ParameterDirectionKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ParameterDirectionKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("out");
			uML_ParameterDirectionKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ParameterDirectionKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("return");
			uML_ParameterDirectionKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ParameterDirectionKind);
		uML_ExpansionKind.reset(uml::UmlFactory::eInstance()->createEnumeration());
		uML_ExpansionKind->setName("ExpansionKind");
	
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("iterative");
			uML_ExpansionKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ExpansionKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("parallel");
			uML_ExpansionKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ExpansionKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("stream");
			uML_ExpansionKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ExpansionKind);
		uML_MessageKind.reset(uml::UmlFactory::eInstance()->createEnumeration());
		uML_MessageKind->setName("MessageKind");
	
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("complete");
			uML_MessageKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_MessageKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("found");
			uML_MessageKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_MessageKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("lost");
			uML_MessageKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_MessageKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("unknown");
			uML_MessageKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_MessageKind);
		uML_MessageSort.reset(uml::UmlFactory::eInstance()->createEnumeration());
		uML_MessageSort->setName("MessageSort");
	
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("asynchCall");
			uML_MessageSort->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_MessageSort);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("asynchSignal");
			uML_MessageSort->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_MessageSort);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("createMessage");
			uML_MessageSort->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_MessageSort);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("deleteMessage");
			uML_MessageSort->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_MessageSort);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("reply");
			uML_MessageSort->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_MessageSort);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("synchCall");
			uML_MessageSort->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_MessageSort);
		uML_InteractionOperatorKind.reset(uml::UmlFactory::eInstance()->createEnumeration());
		uML_InteractionOperatorKind->setName("InteractionOperatorKind");
	
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("alt");
			uML_InteractionOperatorKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_InteractionOperatorKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("assert");
			uML_InteractionOperatorKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_InteractionOperatorKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("break");
			uML_InteractionOperatorKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_InteractionOperatorKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("consider");
			uML_InteractionOperatorKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_InteractionOperatorKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("critical");
			uML_InteractionOperatorKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_InteractionOperatorKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("ignore");
			uML_InteractionOperatorKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_InteractionOperatorKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("loop");
			uML_InteractionOperatorKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_InteractionOperatorKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("neg");
			uML_InteractionOperatorKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_InteractionOperatorKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("opt");
			uML_InteractionOperatorKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_InteractionOperatorKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("par");
			uML_InteractionOperatorKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_InteractionOperatorKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("seq");
			uML_InteractionOperatorKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_InteractionOperatorKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("strict");
			uML_InteractionOperatorKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_InteractionOperatorKind);
		uML_ObjectNodeOrderingKind.reset(uml::UmlFactory::eInstance()->createEnumeration());
		uML_ObjectNodeOrderingKind->setName("ObjectNodeOrderingKind");
	
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("FIFO");
			uML_ObjectNodeOrderingKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ObjectNodeOrderingKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("LIFO");
			uML_ObjectNodeOrderingKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ObjectNodeOrderingKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("ordered");
			uML_ObjectNodeOrderingKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ObjectNodeOrderingKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("unordered");
			uML_ObjectNodeOrderingKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_ObjectNodeOrderingKind);
		uML_AggregationKind.reset(uml::UmlFactory::eInstance()->createEnumeration());
		uML_AggregationKind->setName("AggregationKind");
	
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("composite");
			uML_AggregationKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_AggregationKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("none");
			uML_AggregationKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_AggregationKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("shared");
			uML_AggregationKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_AggregationKind);
		uML_CallConcurrencyKind.reset(uml::UmlFactory::eInstance()->createEnumeration());
		uML_CallConcurrencyKind->setName("CallConcurrencyKind");
	
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("concurrent");
			uML_CallConcurrencyKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_CallConcurrencyKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("guarded");
			uML_CallConcurrencyKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_CallConcurrencyKind);
			lit = std::shared_ptr<uml::EnumerationLiteral>(uml::UmlFactory::eInstance()->createEnumerationLiteral());
			lit->setName("sequential");
			uML_CallConcurrencyKind->getOwnedLiteral()->push_back(lit);
			lit->setEnumeration(uML_CallConcurrencyKind);
	
}

void UMLPackageImpl::initializePackageContents()
{
	if (isInitialized)
	{
		return;
	}
	isInitialized = true;

	// Initialize package
	setName(eNAME);
	setURI(eNS_URI);

	// Add supertypes to classes
	struct null_deleter{void operator()(void const *) const {} };
	std::shared_ptr<UMLPackageImpl> uML = std::shared_ptr<UMLPackageImpl>(this, null_deleter());
	std::shared_ptr<uml::Generalization> gen = nullptr;
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Node());
	gen->setSpecific(get_UML_Device());
	uML_Device->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_VariableAction());
	gen->setSpecific(get_UML_ClearVariableAction());
	uML_ClearVariableAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ConnectableElement());
	gen->setSpecific(get_UML_Parameter());
	uML_Parameter->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_MultiplicityElement());
	gen->setSpecific(get_UML_Parameter());
	uML_Parameter->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_ReduceAction());
	uML_ReduceAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_RedefinableElement());
	uML_RedefinableElement->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_FinalNode());
	gen->setSpecific(get_UML_ActivityFinalNode());
	uML_ActivityFinalNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ExecutableNode());
	gen->setSpecific(get_UML_Action());
	uML_Action->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Namespace());
	gen->setSpecific(get_UML_Region());
	uML_Region->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_RedefinableElement());
	gen->setSpecific(get_UML_Region());
	uML_Region->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_StructuredActivityNode());
	gen->setSpecific(get_UML_LoopNode());
	uML_LoopNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_RedefinableElement());
	gen->setSpecific(get_UML_ExtensionPoint());
	uML_ExtensionPoint->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InputPin());
	gen->setSpecific(get_UML_ValuePin());
	uML_ValuePin->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_PackageableElement());
	gen->setSpecific(get_UML_ValueSpecification());
	uML_ValueSpecification->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_TypedElement());
	gen->setSpecific(get_UML_ValueSpecification());
	uML_ValueSpecification->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Feature());
	gen->setSpecific(get_UML_BehavioralFeature());
	uML_BehavioralFeature->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Namespace());
	gen->setSpecific(get_UML_BehavioralFeature());
	uML_BehavioralFeature->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Namespace());
	gen->setSpecific(get_UML_Package());
	uML_Package->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_PackageableElement());
	gen->setSpecific(get_UML_Package());
	uML_Package->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_TemplateableElement());
	gen->setSpecific(get_UML_Package());
	uML_Package->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DataType());
	gen->setSpecific(get_UML_Enumeration());
	uML_Enumeration->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_BehavioredClassifier());
	gen->setSpecific(get_UML_Actor());
	uML_Actor->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_LiteralSpecification());
	gen->setSpecific(get_UML_LiteralInteger());
	uML_LiteralInteger->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Observation());
	gen->setSpecific(get_UML_TimeObservation());
	uML_TimeObservation->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ActivityEdge());
	gen->setSpecific(get_UML_ObjectFlow());
	uML_ObjectFlow->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Association());
	gen->setSpecific(get_UML_Extension());
	uML_Extension->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(Ecore::EcorePackage::eInstance()->get_Ecore_EModelElement());
	gen->setSpecific(get_UML_Element());
	uML_Element->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Element());
	gen->setSpecific(get_UML_TemplateParameter());
	uML_TemplateParameter->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_StructuredActivityNode());
	gen->setSpecific(get_UML_ConditionalNode());
	uML_ConditionalNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Observation());
	gen->setSpecific(get_UML_DurationObservation());
	uML_DurationObservation->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_MessageEnd());
	gen->setSpecific(get_UML_MessageOccurrenceSpecification());
	uML_MessageOccurrenceSpecification->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_OccurrenceSpecification());
	gen->setSpecific(get_UML_MessageOccurrenceSpecification());
	uML_MessageOccurrenceSpecification->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Feature());
	gen->setSpecific(get_UML_StructuralFeature());
	uML_StructuralFeature->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_MultiplicityElement());
	gen->setSpecific(get_UML_StructuralFeature());
	uML_StructuralFeature->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_TypedElement());
	gen->setSpecific(get_UML_StructuralFeature());
	uML_StructuralFeature->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_Lifeline());
	uML_Lifeline->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DirectedRelationship());
	gen->setSpecific(get_UML_PackageImport());
	uML_PackageImport->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InteractionFragment());
	gen->setSpecific(get_UML_InteractionUse());
	uML_InteractionUse->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InvocationAction());
	gen->setSpecific(get_UML_SendSignalAction());
	uML_SendSignalAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_DestroyObjectAction());
	uML_DestroyObjectAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DirectedRelationship());
	gen->setSpecific(get_UML_TemplateBinding());
	uML_TemplateBinding->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_WriteLinkAction());
	gen->setSpecific(get_UML_CreateLinkAction());
	uML_CreateLinkAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_StartClassifierBehaviorAction());
	uML_StartClassifierBehaviorAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InteractionFragment());
	gen->setSpecific(get_UML_CombinedFragment());
	uML_CombinedFragment->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_VariableAction());
	gen->setSpecific(get_UML_ReadVariableAction());
	uML_ReadVariableAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Namespace());
	gen->setSpecific(get_UML_Classifier());
	uML_Classifier->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_RedefinableElement());
	gen->setSpecific(get_UML_Classifier());
	uML_Classifier->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_TemplateableElement());
	gen->setSpecific(get_UML_Classifier());
	uML_Classifier->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Type());
	gen->setSpecific(get_UML_Classifier());
	uML_Classifier->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_WriteStructuralFeatureAction());
	gen->setSpecific(get_UML_AddStructuralFeatureValueAction());
	uML_AddStructuralFeatureValueAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_WriteVariableAction());
	gen->setSpecific(get_UML_RemoveVariableValueAction());
	uML_RemoveVariableValueAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Feature());
	gen->setSpecific(get_UML_Connector());
	uML_Connector->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DataType());
	gen->setSpecific(get_UML_PrimitiveType());
	uML_PrimitiveType->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_ReadLinkObjectEndQualifierAction());
	uML_ReadLinkObjectEndQualifierAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Package());
	gen->setSpecific(get_UML_Profile());
	uML_Profile->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InvocationAction());
	gen->setSpecific(get_UML_CallAction());
	uML_CallAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Element());
	gen->setSpecific(get_UML_Comment());
	uML_Comment->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_StateMachine());
	gen->setSpecific(get_UML_ProtocolStateMachine());
	uML_ProtocolStateMachine->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Classifier());
	gen->setSpecific(get_UML_BehavioredClassifier());
	uML_BehavioredClassifier->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_AcceptEventAction());
	uML_AcceptEventAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ActivityEdge());
	gen->setSpecific(get_UML_ControlFlow());
	uML_ControlFlow->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_StructuralFeatureAction());
	gen->setSpecific(get_UML_WriteStructuralFeatureAction());
	uML_WriteStructuralFeatureAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_CollaborationUse());
	uML_CollaborationUse->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_LiteralSpecification());
	gen->setSpecific(get_UML_LiteralReal());
	uML_LiteralReal->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Association());
	gen->setSpecific(get_UML_CommunicationPath());
	uML_CommunicationPath->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Abstraction());
	gen->setSpecific(get_UML_Realization());
	uML_Realization->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ParameterableElement());
	gen->setSpecific(get_UML_ConnectableElement());
	uML_ConnectableElement->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_TypedElement());
	gen->setSpecific(get_UML_ConnectableElement());
	uML_ConnectableElement->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InstanceSpecification());
	gen->setSpecific(get_UML_EnumerationLiteral());
	uML_EnumerationLiteral->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_CentralBufferNode());
	gen->setSpecific(get_UML_DataStoreNode());
	uML_DataStoreNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ControlNode());
	gen->setSpecific(get_UML_ForkNode());
	uML_ForkNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_CallAction());
	gen->setSpecific(get_UML_CallBehaviorAction());
	uML_CallBehaviorAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_MessageEvent());
	gen->setSpecific(get_UML_CallEvent());
	uML_CallEvent->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Constraint());
	gen->setSpecific(get_UML_IntervalConstraint());
	uML_IntervalConstraint->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_LinkAction());
	uML_LinkAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Property());
	gen->setSpecific(get_UML_ExtensionEnd());
	uML_ExtensionEnd->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ControlNode());
	gen->setSpecific(get_UML_InitialNode());
	uML_InitialNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Classifier());
	gen->setSpecific(get_UML_Interface());
	uML_Interface->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_ReplyAction());
	uML_ReplyAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_LinkEndData());
	gen->setSpecific(get_UML_LinkEndCreationData());
	uML_LinkEndCreationData->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_Namespace());
	uML_Namespace->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DirectedRelationship());
	gen->setSpecific(get_UML_ProtocolConformance());
	uML_ProtocolConformance->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ValueSpecification());
	gen->setSpecific(get_UML_Duration());
	uML_Duration->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_IntervalConstraint());
	gen->setSpecific(get_UML_TimeConstraint());
	uML_TimeConstraint->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InteractionFragment());
	gen->setSpecific(get_UML_Continuation());
	uML_Continuation->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Transition());
	gen->setSpecific(get_UML_ProtocolTransition());
	uML_ProtocolTransition->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ObjectNode());
	gen->setSpecific(get_UML_ExpansionNode());
	uML_ExpansionNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_DeploymentTarget());
	uML_DeploymentTarget->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DirectedRelationship());
	gen->setSpecific(get_UML_Extend());
	uML_Extend->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_Extend());
	uML_Extend->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InteractionUse());
	gen->setSpecific(get_UML_PartDecomposition());
	uML_PartDecomposition->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_OpaqueAction());
	uML_OpaqueAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_PackageableElement());
	gen->setSpecific(get_UML_Constraint());
	uML_Constraint->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_Trigger());
	uML_Trigger->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_StructuredActivityNode());
	uML_StructuredActivityNode->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ActivityGroup());
	gen->setSpecific(get_UML_StructuredActivityNode());
	uML_StructuredActivityNode->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Namespace());
	gen->setSpecific(get_UML_StructuredActivityNode());
	uML_StructuredActivityNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Classifier());
	gen->setSpecific(get_UML_Association());
	uML_Association->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Relationship());
	gen->setSpecific(get_UML_Association());
	uML_Association->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_GeneralOrdering());
	uML_GeneralOrdering->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ControlNode());
	gen->setSpecific(get_UML_FinalNode());
	uML_FinalNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ControlNode());
	gen->setSpecific(get_UML_MergeNode());
	uML_MergeNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Constraint());
	gen->setSpecific(get_UML_InteractionConstraint());
	uML_InteractionConstraint->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Element());
	gen->setSpecific(get_UML_ParameterableElement());
	uML_ParameterableElement->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_LiteralSpecification());
	gen->setSpecific(get_UML_LiteralString());
	uML_LiteralString->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Class());
	gen->setSpecific(get_UML_Component());
	uML_Component->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_TypedElement());
	uML_TypedElement->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_IntervalConstraint());
	gen->setSpecific(get_UML_DurationConstraint());
	uML_DurationConstraint->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_PackageableElement());
	gen->setSpecific(get_UML_Type());
	uML_Type->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Realization());
	gen->setSpecific(get_UML_Substitution());
	uML_Substitution->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_LiteralSpecification());
	gen->setSpecific(get_UML_LiteralUnlimitedNatural());
	uML_LiteralUnlimitedNatural->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Behavior());
	gen->setSpecific(get_UML_StateMachine());
	uML_StateMachine->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DirectedRelationship());
	gen->setSpecific(get_UML_ElementImport());
	uML_ElementImport->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_DeployedArtifact());
	uML_DeployedArtifact->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Classifier());
	gen->setSpecific(get_UML_StructuredClassifier());
	uML_StructuredClassifier->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_AcceptEventAction());
	gen->setSpecific(get_UML_AcceptCallAction());
	uML_AcceptCallAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Element());
	gen->setSpecific(get_UML_MultiplicityElement());
	uML_MultiplicityElement->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Abstraction());
	gen->setSpecific(get_UML_Manifestation());
	uML_Manifestation->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InvocationAction());
	gen->setSpecific(get_UML_SendObjectAction());
	uML_SendObjectAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InteractionFragment());
	gen->setSpecific(get_UML_InteractionOperand());
	uML_InteractionOperand->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Namespace());
	gen->setSpecific(get_UML_InteractionOperand());
	uML_InteractionOperand->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Classifier());
	gen->setSpecific(get_UML_Signal());
	uML_Signal->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ActivityNode());
	gen->setSpecific(get_UML_ObjectNode());
	uML_ObjectNode->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_TypedElement());
	gen->setSpecific(get_UML_ObjectNode());
	uML_ObjectNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Element());
	gen->setSpecific(get_UML_TemplateSignature());
	uML_TemplateSignature->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Property());
	gen->setSpecific(get_UML_Port());
	uML_Port->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_PackageableElement());
	uML_PackageableElement->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ParameterableElement());
	gen->setSpecific(get_UML_PackageableElement());
	uML_PackageableElement->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_TemplateParameter());
	gen->setSpecific(get_UML_OperationTemplateParameter());
	uML_OperationTemplateParameter->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_UnmarshallAction());
	uML_UnmarshallAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Association());
	gen->setSpecific(get_UML_AssociationClass());
	uML_AssociationClass->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Class());
	gen->setSpecific(get_UML_AssociationClass());
	uML_AssociationClass->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InteractionFragment());
	gen->setSpecific(get_UML_OccurrenceSpecification());
	uML_OccurrenceSpecification->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DirectedRelationship());
	gen->setSpecific(get_UML_InformationFlow());
	uML_InformationFlow->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_PackageableElement());
	gen->setSpecific(get_UML_InformationFlow());
	uML_InformationFlow->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_CallAction());
	gen->setSpecific(get_UML_StartObjectBehaviorAction());
	uML_StartObjectBehaviorAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_StructuredActivityNode());
	gen->setSpecific(get_UML_SequenceNode());
	uML_SequenceNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_RedefinableElement());
	gen->setSpecific(get_UML_RedefinableTemplateSignature());
	uML_RedefinableTemplateSignature->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_TemplateSignature());
	gen->setSpecific(get_UML_RedefinableTemplateSignature());
	uML_RedefinableTemplateSignature->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_StructuralFeatureAction());
	gen->setSpecific(get_UML_ClearStructuralFeatureAction());
	uML_ClearStructuralFeatureAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ValueSpecification());
	gen->setSpecific(get_UML_OpaqueExpression());
	uML_OpaqueExpression->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_CreateLinkAction());
	gen->setSpecific(get_UML_CreateLinkObjectAction());
	uML_CreateLinkObjectAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_MultiplicityElement());
	gen->setSpecific(get_UML_Pin());
	uML_Pin->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ObjectNode());
	gen->setSpecific(get_UML_Pin());
	uML_Pin->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_ReadExtentAction());
	uML_ReadExtentAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ValueSpecification());
	gen->setSpecific(get_UML_LiteralSpecification());
	uML_LiteralSpecification->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ObjectNode());
	gen->setSpecific(get_UML_ActivityParameterNode());
	uML_ActivityParameterNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DeployedArtifact());
	gen->setSpecific(get_UML_InstanceSpecification());
	uML_InstanceSpecification->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DeploymentTarget());
	gen->setSpecific(get_UML_InstanceSpecification());
	uML_InstanceSpecification->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_PackageableElement());
	gen->setSpecific(get_UML_InstanceSpecification());
	uML_InstanceSpecification->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InputPin());
	gen->setSpecific(get_UML_ActionInputPin());
	uML_ActionInputPin->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_MultiplicityElement());
	gen->setSpecific(get_UML_ConnectorEnd());
	uML_ConnectorEnd->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_State());
	gen->setSpecific(get_UML_FinalState());
	uML_FinalState->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_RedefinableElement());
	gen->setSpecific(get_UML_ActivityNode());
	uML_ActivityNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_StructuredActivityNode());
	gen->setSpecific(get_UML_ExpansionRegion());
	uML_ExpansionRegion->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_CreateObjectAction());
	uML_CreateObjectAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_InvocationAction());
	uML_InvocationAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_TestIdentityAction());
	uML_TestIdentityAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Namespace());
	gen->setSpecific(get_UML_Transition());
	uML_Transition->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_RedefinableElement());
	gen->setSpecific(get_UML_Transition());
	uML_Transition->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ObjectNode());
	gen->setSpecific(get_UML_CentralBufferNode());
	uML_CentralBufferNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Behavior());
	gen->setSpecific(get_UML_Interaction());
	uML_Interaction->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InteractionFragment());
	gen->setSpecific(get_UML_Interaction());
	uML_Interaction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_StructuredClassifier());
	gen->setSpecific(get_UML_EncapsulatedClassifier());
	uML_EncapsulatedClassifier->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Vertex());
	gen->setSpecific(get_UML_Pseudostate());
	uML_Pseudostate->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_ReadIsClassifiedObjectAction());
	uML_ReadIsClassifiedObjectAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Interval());
	gen->setSpecific(get_UML_TimeInterval());
	uML_TimeInterval->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_ReclassifyObjectAction());
	uML_ReclassifyObjectAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_ValueSpecificationAction());
	uML_ValueSpecificationAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Element());
	gen->setSpecific(get_UML_Relationship());
	uML_Relationship->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Element());
	gen->setSpecific(get_UML_ExceptionHandler());
	uML_ExceptionHandler->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_InteractionFragment());
	uML_InteractionFragment->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Package());
	gen->setSpecific(get_UML_Model());
	uML_Model->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_MessageOccurrenceSpecification());
	gen->setSpecific(get_UML_DestructionOccurrenceSpecification());
	uML_DestructionOccurrenceSpecification->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_LiteralSpecification());
	gen->setSpecific(get_UML_LiteralNull());
	uML_LiteralNull->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Element());
	gen->setSpecific(get_UML_TemplateParameterSubstitution());
	uML_TemplateParameterSubstitution->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_TemplateParameter());
	gen->setSpecific(get_UML_ConnectableElementTemplateParameter());
	uML_ConnectableElementTemplateParameter->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_LinkAction());
	gen->setSpecific(get_UML_ReadLinkAction());
	uML_ReadLinkAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_RedefinableElement());
	gen->setSpecific(get_UML_ActivityEdge());
	uML_ActivityEdge->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ConnectableElement());
	gen->setSpecific(get_UML_Variable());
	uML_Variable->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_MultiplicityElement());
	gen->setSpecific(get_UML_Variable());
	uML_Variable->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_MessageEvent());
	gen->setSpecific(get_UML_SignalEvent());
	uML_SignalEvent->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InvocationAction());
	gen->setSpecific(get_UML_BroadcastSignalAction());
	uML_BroadcastSignalAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ActivityNode());
	gen->setSpecific(get_UML_ExecutableNode());
	uML_ExecutableNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Pin());
	gen->setSpecific(get_UML_InputPin());
	uML_InputPin->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Relationship());
	gen->setSpecific(get_UML_DirectedRelationship());
	uML_DirectedRelationship->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Namespace());
	gen->setSpecific(get_UML_State());
	uML_State->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_RedefinableElement());
	gen->setSpecific(get_UML_State());
	uML_State->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Vertex());
	gen->setSpecific(get_UML_State());
	uML_State->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DirectedRelationship());
	gen->setSpecific(get_UML_PackageMerge());
	uML_PackageMerge->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Class());
	gen->setSpecific(get_UML_Stereotype());
	uML_Stereotype->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Pin());
	gen->setSpecific(get_UML_OutputPin());
	uML_OutputPin->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Class());
	gen->setSpecific(get_UML_Node());
	uML_Node->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DeploymentTarget());
	gen->setSpecific(get_UML_Node());
	uML_Node->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Element());
	gen->setSpecific(get_UML_NamedElement());
	uML_NamedElement->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ExecutionSpecification());
	gen->setSpecific(get_UML_ActionExecutionSpecification());
	uML_ActionExecutionSpecification->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Vertex());
	gen->setSpecific(get_UML_ConnectionPointReference());
	uML_ConnectionPointReference->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_OpaqueBehavior());
	gen->setSpecific(get_UML_FunctionBehavior());
	uML_FunctionBehavior->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Dependency());
	gen->setSpecific(get_UML_Abstraction());
	uML_Abstraction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ValueSpecification());
	gen->setSpecific(get_UML_Interval());
	uML_Interval->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_WriteVariableAction());
	gen->setSpecific(get_UML_AddVariableValueAction());
	uML_AddVariableValueAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_PackageableElement());
	gen->setSpecific(get_UML_Observation());
	uML_Observation->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_PackageableElement());
	gen->setSpecific(get_UML_GeneralizationSet());
	uML_GeneralizationSet->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_Message());
	uML_Message->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_Vertex());
	uML_Vertex->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_WriteLinkAction());
	gen->setSpecific(get_UML_DestroyLinkAction());
	uML_DestroyLinkAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_ClearAssociationAction());
	uML_ClearAssociationAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_VariableAction());
	uML_VariableAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Element());
	gen->setSpecific(get_UML_QualifierValue());
	uML_QualifierValue->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_RaiseExceptionAction());
	uML_RaiseExceptionAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ValueSpecification());
	gen->setSpecific(get_UML_Expression());
	uML_Expression->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_ReadSelfAction());
	uML_ReadSelfAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_TemplateParameter());
	gen->setSpecific(get_UML_ClassifierTemplateParameter());
	uML_ClassifierTemplateParameter->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_BehavioredClassifier());
	gen->setSpecific(get_UML_UseCase());
	uML_UseCase->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_MessageEvent());
	gen->setSpecific(get_UML_AnyReceiveEvent());
	uML_AnyReceiveEvent->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_BehavioralFeature());
	gen->setSpecific(get_UML_Reception());
	uML_Reception->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Element());
	gen->setSpecific(get_UML_LinkEndData());
	uML_LinkEndData->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Behavior());
	gen->setSpecific(get_UML_OpaqueBehavior());
	uML_OpaqueBehavior->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_MessageEnd());
	gen->setSpecific(get_UML_Gate());
	uML_Gate->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_ParameterSet());
	uML_ParameterSet->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_RedefinableElement());
	gen->setSpecific(get_UML_Feature());
	uML_Feature->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ControlNode());
	gen->setSpecific(get_UML_JoinNode());
	uML_JoinNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_FinalNode());
	gen->setSpecific(get_UML_FlowFinalNode());
	uML_FlowFinalNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ControlNode());
	gen->setSpecific(get_UML_DecisionNode());
	uML_DecisionNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Behavior());
	gen->setSpecific(get_UML_Activity());
	uML_Activity->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_LiteralSpecification());
	gen->setSpecific(get_UML_LiteralBoolean());
	uML_LiteralBoolean->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Interval());
	gen->setSpecific(get_UML_DurationInterval());
	uML_DurationInterval->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DirectedRelationship());
	gen->setSpecific(get_UML_Include());
	uML_Include->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_Include());
	uML_Include->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_BehavioralFeature());
	gen->setSpecific(get_UML_Operation());
	uML_Operation->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ParameterableElement());
	gen->setSpecific(get_UML_Operation());
	uML_Operation->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_TemplateableElement());
	gen->setSpecific(get_UML_Operation());
	uML_Operation->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_StructuralFeatureAction());
	uML_StructuralFeatureAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Classifier());
	gen->setSpecific(get_UML_Artifact());
	uML_Artifact->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DeployedArtifact());
	gen->setSpecific(get_UML_Artifact());
	uML_Artifact->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Element());
	gen->setSpecific(get_UML_Image());
	uML_Image->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_WriteStructuralFeatureAction());
	gen->setSpecific(get_UML_RemoveStructuralFeatureValueAction());
	uML_RemoveStructuralFeatureValueAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_CombinedFragment());
	gen->setSpecific(get_UML_ConsiderIgnoreFragment());
	uML_ConsiderIgnoreFragment->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DirectedRelationship());
	gen->setSpecific(get_UML_Generalization());
	uML_Generalization->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_LinkEndData());
	gen->setSpecific(get_UML_LinkEndDestructionData());
	uML_LinkEndDestructionData->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ValueSpecification());
	gen->setSpecific(get_UML_InstanceValue());
	uML_InstanceValue->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Classifier());
	gen->setSpecific(get_UML_InformationItem());
	uML_InformationItem->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ActivityGroup());
	gen->setSpecific(get_UML_ActivityPartition());
	uML_ActivityPartition->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InteractionFragment());
	gen->setSpecific(get_UML_StateInvariant());
	uML_StateInvariant->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DirectedRelationship());
	gen->setSpecific(get_UML_Dependency());
	uML_Dependency->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_PackageableElement());
	gen->setSpecific(get_UML_Dependency());
	uML_Dependency->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Expression());
	gen->setSpecific(get_UML_StringExpression());
	uML_StringExpression->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_TemplateableElement());
	gen->setSpecific(get_UML_StringExpression());
	uML_StringExpression->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ValueSpecification());
	gen->setSpecific(get_UML_TimeExpression());
	uML_TimeExpression->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Element());
	gen->setSpecific(get_UML_Clause());
	uML_Clause->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ConnectableElement());
	gen->setSpecific(get_UML_Property());
	uML_Property->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DeploymentTarget());
	gen->setSpecific(get_UML_Property());
	uML_Property->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_StructuralFeature());
	gen->setSpecific(get_UML_Property());
	uML_Property->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ActivityGroup());
	gen->setSpecific(get_UML_InterruptibleActivityRegion());
	uML_InterruptibleActivityRegion->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Realization());
	gen->setSpecific(get_UML_ComponentRealization());
	uML_ComponentRealization->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Node());
	gen->setSpecific(get_UML_ExecutionEnvironment());
	uML_ExecutionEnvironment->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ActivityNode());
	gen->setSpecific(get_UML_ControlNode());
	uML_ControlNode->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Class());
	gen->setSpecific(get_UML_Behavior());
	uML_Behavior->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_PackageableElement());
	gen->setSpecific(get_UML_Event());
	uML_Event->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Element());
	gen->setSpecific(get_UML_TemplateableElement());
	uML_TemplateableElement->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Realization());
	gen->setSpecific(get_UML_InterfaceRealization());
	uML_InterfaceRealization->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_ExecutionSpecification());
	gen->setSpecific(get_UML_BehaviorExecutionSpecification());
	uML_BehaviorExecutionSpecification->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_CallAction());
	gen->setSpecific(get_UML_CallOperationAction());
	uML_CallOperationAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_LinkAction());
	gen->setSpecific(get_UML_WriteLinkAction());
	uML_WriteLinkAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Event());
	gen->setSpecific(get_UML_MessageEvent());
	uML_MessageEvent->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_BehavioredClassifier());
	gen->setSpecific(get_UML_Collaboration());
	uML_Collaboration->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_StructuredClassifier());
	gen->setSpecific(get_UML_Collaboration());
	uML_Collaboration->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_MessageEnd());
	uML_MessageEnd->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Classifier());
	gen->setSpecific(get_UML_DataType());
	uML_DataType->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_VariableAction());
	gen->setSpecific(get_UML_WriteVariableAction());
	uML_WriteVariableAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Dependency());
	gen->setSpecific(get_UML_Deployment());
	uML_Deployment->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_BehavioredClassifier());
	gen->setSpecific(get_UML_Class());
	uML_Class->getGeneralization()->push_back(gen);
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_EncapsulatedClassifier());
	gen->setSpecific(get_UML_Class());
	uML_Class->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_OccurrenceSpecification());
	gen->setSpecific(get_UML_ExecutionOccurrenceSpecification());
	uML_ExecutionOccurrenceSpecification->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Element());
	gen->setSpecific(get_UML_Slot());
	uML_Slot->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Event());
	gen->setSpecific(get_UML_TimeEvent());
	uML_TimeEvent->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_InteractionFragment());
	gen->setSpecific(get_UML_ExecutionSpecification());
	uML_ExecutionSpecification->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Action());
	gen->setSpecific(get_UML_ReadLinkObjectEndAction());
	uML_ReadLinkObjectEndAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_StructuralFeatureAction());
	gen->setSpecific(get_UML_ReadStructuralFeatureAction());
	uML_ReadStructuralFeatureAction->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_DirectedRelationship());
	gen->setSpecific(get_UML_ProfileApplication());
	uML_ProfileApplication->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_NamedElement());
	gen->setSpecific(get_UML_ActivityGroup());
	uML_ActivityGroup->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Event());
	gen->setSpecific(get_UML_ChangeEvent());
	uML_ChangeEvent->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Dependency());
	gen->setSpecific(get_UML_Usage());
	uML_Usage->getGeneralization()->push_back(gen);
	
	gen = std::shared_ptr<uml::Generalization>(uml::UmlFactory::eInstance()->createGeneralization());
	gen->setGeneral(get_UML_Artifact());
	gen->setSpecific(get_UML_DeploymentSpecification());
	uML_DeploymentSpecification->getGeneralization()->push_back(gen);
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	//initalize ActivityNodes and Edges
}

std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_action_actionExecutionSpecification()
{
	return uML_A_action_actionExecutionSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_action_actionExecutionSpecification_actionExecutionSpecification()
{
	return uML_A_action_actionExecutionSpecification_actionExecutionSpecification;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_action_interaction()
{
	return uML_A_action_interaction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_action_interaction_interaction()
{
	return uML_A_action_interaction_interaction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_actualGate_interactionUse()
{
	return uML_A_actualGate_interactionUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_actualGate_interactionUse_interactionUse()
{
	return uML_A_actualGate_interactionUse_interactionUse;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_actual_templateParameterSubstitution()
{
	return uML_A_actual_templateParameterSubstitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_actual_templateParameterSubstitution_templateParameterSubstitution()
{
	return uML_A_actual_templateParameterSubstitution_templateParameterSubstitution;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_addition_include()
{
	return uML_A_addition_include;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_addition_include_include()
{
	return uML_A_addition_include_include;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_annotatedElement_comment()
{
	return uML_A_annotatedElement_comment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_annotatedElement_comment_comment()
{
	return uML_A_annotatedElement_comment_comment;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_appliedProfile_profileApplication()
{
	return uML_A_appliedProfile_profileApplication;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_appliedProfile_profileApplication_profileApplication()
{
	return uML_A_appliedProfile_profileApplication_profileApplication;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_argument_interactionUse()
{
	return uML_A_argument_interactionUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_argument_interactionUse_interactionUse()
{
	return uML_A_argument_interactionUse_interactionUse;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_argument_invocationAction()
{
	return uML_A_argument_invocationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_argument_invocationAction_invocationAction()
{
	return uML_A_argument_invocationAction_invocationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_argument_message()
{
	return uML_A_argument_message;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_argument_message_message()
{
	return uML_A_argument_message_message;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_association_clearAssociationAction()
{
	return uML_A_association_clearAssociationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_association_clearAssociationAction_clearAssociationAction()
{
	return uML_A_association_clearAssociationAction_clearAssociationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_attribute_classifier()
{
	return uML_A_attribute_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_attribute_classifier_classifier()
{
	return uML_A_attribute_classifier_classifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_before_toAfter()
{
	return uML_A_before_toAfter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_behavior_behaviorExecutionSpecification()
{
	return uML_A_behavior_behaviorExecutionSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification()
{
	return uML_A_behavior_behaviorExecutionSpecification_behaviorExecutionSpecification;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_behavior_callBehaviorAction()
{
	return uML_A_behavior_callBehaviorAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_behavior_callBehaviorAction_callBehaviorAction()
{
	return uML_A_behavior_callBehaviorAction_callBehaviorAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_behavior_opaqueExpression()
{
	return uML_A_behavior_opaqueExpression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_behavior_opaqueExpression_opaqueExpression()
{
	return uML_A_behavior_opaqueExpression_opaqueExpression;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_bodyCondition_bodyContext()
{
	return uML_A_bodyCondition_bodyContext;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_bodyCondition_bodyContext_bodyContext()
{
	return uML_A_bodyCondition_bodyContext_bodyContext;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_bodyOutput_clause()
{
	return uML_A_bodyOutput_clause;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_bodyOutput_clause_clause()
{
	return uML_A_bodyOutput_clause_clause;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_bodyOutput_loopNode()
{
	return uML_A_bodyOutput_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_bodyOutput_loopNode_loopNode()
{
	return uML_A_bodyOutput_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_bodyPart_loopNode()
{
	return uML_A_bodyPart_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_bodyPart_loopNode_loopNode()
{
	return uML_A_bodyPart_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_body_clause()
{
	return uML_A_body_clause;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_body_clause_clause()
{
	return uML_A_body_clause_clause;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_cfragmentGate_combinedFragment()
{
	return uML_A_cfragmentGate_combinedFragment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_cfragmentGate_combinedFragment_combinedFragment()
{
	return uML_A_cfragmentGate_combinedFragment_combinedFragment;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_changeExpression_changeEvent()
{
	return uML_A_changeExpression_changeEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_changeExpression_changeEvent_changeEvent()
{
	return uML_A_changeExpression_changeEvent_changeEvent;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_classifierBehavior_behavioredClassifier()
{
	return uML_A_classifierBehavior_behavioredClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_classifierBehavior_behavioredClassifier_behavioredClassifier()
{
	return uML_A_classifierBehavior_behavioredClassifier_behavioredClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_classifier_createObjectAction()
{
	return uML_A_classifier_createObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_classifier_createObjectAction_createObjectAction()
{
	return uML_A_classifier_createObjectAction_createObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_classifier_enumerationLiteral()
{
	return uML_A_classifier_enumerationLiteral;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_classifier_enumerationLiteral_enumerationLiteral()
{
	return uML_A_classifier_enumerationLiteral_enumerationLiteral;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_classifier_instanceSpecification()
{
	return uML_A_classifier_instanceSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_classifier_instanceSpecification_instanceSpecification()
{
	return uML_A_classifier_instanceSpecification_instanceSpecification;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_classifier_readExtentAction()
{
	return uML_A_classifier_readExtentAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_classifier_readExtentAction_readExtentAction()
{
	return uML_A_classifier_readExtentAction_readExtentAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_classifier_readIsClassifiedObjectAction()
{
	return uML_A_classifier_readIsClassifiedObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction()
{
	return uML_A_classifier_readIsClassifiedObjectAction_readIsClassifiedObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_classifier_templateParameter_parameteredElement()
{
	return uML_A_classifier_templateParameter_parameteredElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_clause_conditionalNode()
{
	return uML_A_clause_conditionalNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_clause_conditionalNode_conditionalNode()
{
	return uML_A_clause_conditionalNode_conditionalNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_clientDependency_client()
{
	return uML_A_clientDependency_client;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_clientDependency_client_dependency()
{
	return uML_A_clientDependency_client_dependency;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_collaborationRole_collaboration()
{
	return uML_A_collaborationRole_collaboration;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_collaborationRole_collaboration_collaboration()
{
	return uML_A_collaborationRole_collaboration_collaboration;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_collaborationUse_classifier()
{
	return uML_A_collaborationUse_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_collaborationUse_classifier_classifier()
{
	return uML_A_collaborationUse_classifier_classifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_collection_reduceAction()
{
	return uML_A_collection_reduceAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_collection_reduceAction_reduceAction()
{
	return uML_A_collection_reduceAction_reduceAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_condition_extend()
{
	return uML_A_condition_extend;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_condition_extend_extend()
{
	return uML_A_condition_extend_extend;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_condition_parameterSet()
{
	return uML_A_condition_parameterSet;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_condition_parameterSet_parameterSet()
{
	return uML_A_condition_parameterSet_parameterSet;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_configuration_deployment()
{
	return uML_A_configuration_deployment;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_conformance_specificMachine()
{
	return uML_A_conformance_specificMachine;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_connectableElement_templateParameter_parameteredElement()
{
	return uML_A_connectableElement_templateParameter_parameteredElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_connectionPoint_state()
{
	return uML_A_connectionPoint_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_connectionPoint_stateMachine()
{
	return uML_A_connectionPoint_stateMachine;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_connection_state()
{
	return uML_A_connection_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_connector_message()
{
	return uML_A_connector_message;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_connector_message_message()
{
	return uML_A_connector_message_message;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_constrainedElement_constraint()
{
	return uML_A_constrainedElement_constraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_constrainedElement_constraint_constraint()
{
	return uML_A_constrainedElement_constraint_constraint;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_constrainingClassifier_classifierTemplateParameter()
{
	return uML_A_constrainingClassifier_classifierTemplateParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter()
{
	return uML_A_constrainingClassifier_classifierTemplateParameter_classifierTemplateParameter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_containedEdge_inGroup()
{
	return uML_A_containedEdge_inGroup;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_containedNode_inGroup()
{
	return uML_A_containedNode_inGroup;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_context_action()
{
	return uML_A_context_action;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_context_action_action()
{
	return uML_A_context_action_action;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_context_behavior()
{
	return uML_A_context_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_context_behavior_behavior()
{
	return uML_A_context_behavior_behavior;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_contract_connector()
{
	return uML_A_contract_connector;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_contract_connector_connector()
{
	return uML_A_contract_connector_connector;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_contract_interfaceRealization()
{
	return uML_A_contract_interfaceRealization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_contract_interfaceRealization_interfaceRealization()
{
	return uML_A_contract_interfaceRealization_interfaceRealization;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_contract_substitution()
{
	return uML_A_contract_substitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_contract_substitution_substitution()
{
	return uML_A_contract_substitution_substitution;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_conveyed_conveyingFlow()
{
	return uML_A_conveyed_conveyingFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_conveyed_conveyingFlow_conveyingFlow()
{
	return uML_A_conveyed_conveyingFlow_conveyingFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_covered_coveredBy()
{
	return uML_A_covered_coveredBy;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_covered_events()
{
	return uML_A_covered_events;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_covered_events_events()
{
	return uML_A_covered_events_events;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_covered_stateInvariant()
{
	return uML_A_covered_stateInvariant;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_covered_stateInvariant_stateInvariant()
{
	return uML_A_covered_stateInvariant_stateInvariant;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_decider_clause()
{
	return uML_A_decider_clause;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_decider_clause_clause()
{
	return uML_A_decider_clause_clause;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_decider_loopNode()
{
	return uML_A_decider_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_decider_loopNode_loopNode()
{
	return uML_A_decider_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_decisionInputFlow_decisionNode()
{
	return uML_A_decisionInputFlow_decisionNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_decisionInputFlow_decisionNode_decisionNode()
{
	return uML_A_decisionInputFlow_decisionNode_decisionNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_decisionInput_decisionNode()
{
	return uML_A_decisionInput_decisionNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_decisionInput_decisionNode_decisionNode()
{
	return uML_A_decisionInput_decisionNode_decisionNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_decomposedAs_lifeline()
{
	return uML_A_decomposedAs_lifeline;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_decomposedAs_lifeline_lifeline()
{
	return uML_A_decomposedAs_lifeline_lifeline;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_defaultValue_owningParameter()
{
	return uML_A_defaultValue_owningParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_defaultValue_owningParameter_owningParameter()
{
	return uML_A_defaultValue_owningParameter_owningParameter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_defaultValue_owningProperty()
{
	return uML_A_defaultValue_owningProperty;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_defaultValue_owningProperty_owningProperty()
{
	return uML_A_defaultValue_owningProperty_owningProperty;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_default_templateParameter()
{
	return uML_A_default_templateParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_default_templateParameter_templateParameter()
{
	return uML_A_default_templateParameter_templateParameter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_deferrableTrigger_state()
{
	return uML_A_deferrableTrigger_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_deferrableTrigger_state_state()
{
	return uML_A_deferrableTrigger_state_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_definingEnd_connectorEnd()
{
	return uML_A_definingEnd_connectorEnd;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_definingEnd_connectorEnd_connectorEnd()
{
	return uML_A_definingEnd_connectorEnd_connectorEnd;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_definingFeature_slot()
{
	return uML_A_definingFeature_slot;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_definingFeature_slot_slot()
{
	return uML_A_definingFeature_slot_slot;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_deployedArtifact_deploymentForArtifact()
{
	return uML_A_deployedArtifact_deploymentForArtifact;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact()
{
	return uML_A_deployedArtifact_deploymentForArtifact_deploymentForArtifact;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_deployedElement_deploymentTarget()
{
	return uML_A_deployedElement_deploymentTarget;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_deployedElement_deploymentTarget_deploymentTarget()
{
	return uML_A_deployedElement_deploymentTarget_deploymentTarget;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_deployment_location()
{
	return uML_A_deployment_location;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_destroyAt_linkEndDestructionData()
{
	return uML_A_destroyAt_linkEndDestructionData;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_destroyAt_linkEndDestructionData_linkEndDestructionData()
{
	return uML_A_destroyAt_linkEndDestructionData_linkEndDestructionData;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_doActivity_state()
{
	return uML_A_doActivity_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_doActivity_state_state()
{
	return uML_A_doActivity_state_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_edge_activity()
{
	return uML_A_edge_activity;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_edge_inPartition()
{
	return uML_A_edge_inPartition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_edge_inStructuredNode()
{
	return uML_A_edge_inStructuredNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_effect_transition()
{
	return uML_A_effect_transition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_effect_transition_transition()
{
	return uML_A_effect_transition_transition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_elementImport_importingNamespace()
{
	return uML_A_elementImport_importingNamespace;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_endData_createLinkAction()
{
	return uML_A_endData_createLinkAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_endData_createLinkAction_createLinkAction()
{
	return uML_A_endData_createLinkAction_createLinkAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_endData_destroyLinkAction()
{
	return uML_A_endData_destroyLinkAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_endData_destroyLinkAction_destroyLinkAction()
{
	return uML_A_endData_destroyLinkAction_destroyLinkAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_endData_linkAction()
{
	return uML_A_endData_linkAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_endData_linkAction_linkAction()
{
	return uML_A_endData_linkAction_linkAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_endType_association()
{
	return uML_A_endType_association;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_endType_association_association()
{
	return uML_A_endType_association_association;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_end_connector()
{
	return uML_A_end_connector;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_end_connector_connector()
{
	return uML_A_end_connector_connector;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_end_linkEndData()
{
	return uML_A_end_linkEndData;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_end_linkEndData_linkEndData()
{
	return uML_A_end_linkEndData_linkEndData;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_end_readLinkObjectEndAction()
{
	return uML_A_end_readLinkObjectEndAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_end_readLinkObjectEndAction_readLinkObjectEndAction()
{
	return uML_A_end_readLinkObjectEndAction_readLinkObjectEndAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_end_role()
{
	return uML_A_end_role;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_end_role_end()
{
	return uML_A_end_role_end;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_entry_connectionPointReference()
{
	return uML_A_entry_connectionPointReference;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_entry_connectionPointReference_connectionPointReference()
{
	return uML_A_entry_connectionPointReference_connectionPointReference;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_entry_state()
{
	return uML_A_entry_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_entry_state_state()
{
	return uML_A_entry_state_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_event_durationObservation()
{
	return uML_A_event_durationObservation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_event_durationObservation_durationObservation()
{
	return uML_A_event_durationObservation_durationObservation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_event_timeObservation()
{
	return uML_A_event_timeObservation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_event_timeObservation_timeObservation()
{
	return uML_A_event_timeObservation_timeObservation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_event_trigger()
{
	return uML_A_event_trigger;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_event_trigger_trigger()
{
	return uML_A_event_trigger_trigger;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_exceptionInput_exceptionHandler()
{
	return uML_A_exceptionInput_exceptionHandler;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_exceptionInput_exceptionHandler_exceptionHandler()
{
	return uML_A_exceptionInput_exceptionHandler_exceptionHandler;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_exceptionType_exceptionHandler()
{
	return uML_A_exceptionType_exceptionHandler;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_exceptionType_exceptionHandler_exceptionHandler()
{
	return uML_A_exceptionType_exceptionHandler_exceptionHandler;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_exception_raiseExceptionAction()
{
	return uML_A_exception_raiseExceptionAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_exception_raiseExceptionAction_raiseExceptionAction()
{
	return uML_A_exception_raiseExceptionAction_raiseExceptionAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_executableNode_sequenceNode()
{
	return uML_A_executableNode_sequenceNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_executableNode_sequenceNode_sequenceNode()
{
	return uML_A_executableNode_sequenceNode_sequenceNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_execution_executionOccurrenceSpecification()
{
	return uML_A_execution_executionOccurrenceSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification()
{
	return uML_A_execution_executionOccurrenceSpecification_executionOccurrenceSpecification;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_exit_connectionPointReference()
{
	return uML_A_exit_connectionPointReference;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_exit_connectionPointReference_connectionPointReference()
{
	return uML_A_exit_connectionPointReference_connectionPointReference;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_exit_state()
{
	return uML_A_exit_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_exit_state_state()
{
	return uML_A_exit_state_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_expr_duration()
{
	return uML_A_expr_duration;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_expr_duration_duration()
{
	return uML_A_expr_duration_duration;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_expr_timeExpression()
{
	return uML_A_expr_timeExpression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_expr_timeExpression_timeExpression()
{
	return uML_A_expr_timeExpression_timeExpression;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extend_extension()
{
	return uML_A_extend_extension;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extendedCase_extend()
{
	return uML_A_extendedCase_extend;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_extendedCase_extend_extend()
{
	return uML_A_extendedCase_extend_extend;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extendedRegion_region()
{
	return uML_A_extendedRegion_region;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_extendedRegion_region_region()
{
	return uML_A_extendedRegion_region_region;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extendedSignature_redefinableTemplateSignature()
{
	return uML_A_extendedSignature_redefinableTemplateSignature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature()
{
	return uML_A_extendedSignature_redefinableTemplateSignature_redefinableTemplateSignature;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extendedStateMachine_stateMachine()
{
	return uML_A_extendedStateMachine_stateMachine;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_extendedStateMachine_stateMachine_stateMachine()
{
	return uML_A_extendedStateMachine_stateMachine_stateMachine;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extensionLocation_extension()
{
	return uML_A_extensionLocation_extension;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_extensionLocation_extension_extension()
{
	return uML_A_extensionLocation_extension_extension;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extensionPoint_useCase()
{
	return uML_A_extensionPoint_useCase;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_extension_metaclass()
{
	return uML_A_extension_metaclass;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_feature_featuringClassifier()
{
	return uML_A_feature_featuringClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_finish_executionSpecification()
{
	return uML_A_finish_executionSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_finish_executionSpecification_executionSpecification()
{
	return uML_A_finish_executionSpecification_executionSpecification;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_first_testIdentityAction()
{
	return uML_A_first_testIdentityAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_first_testIdentityAction_testIdentityAction()
{
	return uML_A_first_testIdentityAction_testIdentityAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_formalGate_interaction()
{
	return uML_A_formalGate_interaction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_formalGate_interaction_interaction()
{
	return uML_A_formalGate_interaction_interaction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_formal_templateParameterSubstitution()
{
	return uML_A_formal_templateParameterSubstitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_formal_templateParameterSubstitution_templateParameterSubstitution()
{
	return uML_A_formal_templateParameterSubstitution_templateParameterSubstitution;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_fragment_enclosingInteraction()
{
	return uML_A_fragment_enclosingInteraction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_fragment_enclosingOperand()
{
	return uML_A_fragment_enclosingOperand;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_fromAction_actionInputPin()
{
	return uML_A_fromAction_actionInputPin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_fromAction_actionInputPin_actionInputPin()
{
	return uML_A_fromAction_actionInputPin_actionInputPin;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_generalMachine_protocolConformance()
{
	return uML_A_generalMachine_protocolConformance;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_generalMachine_protocolConformance_protocolConformance()
{
	return uML_A_generalMachine_protocolConformance_protocolConformance;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_generalOrdering_interactionFragment()
{
	return uML_A_generalOrdering_interactionFragment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_generalOrdering_interactionFragment_interactionFragment()
{
	return uML_A_generalOrdering_interactionFragment_interactionFragment;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_general_classifier()
{
	return uML_A_general_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_general_classifier_classifier()
{
	return uML_A_general_classifier_classifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_general_generalization()
{
	return uML_A_general_generalization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_general_generalization_generalization()
{
	return uML_A_general_generalization_generalization;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_generalizationSet_generalization()
{
	return uML_A_generalizationSet_generalization;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_generalization_specific()
{
	return uML_A_generalization_specific;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_group_inActivity()
{
	return uML_A_group_inActivity;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_guard_activityEdge()
{
	return uML_A_guard_activityEdge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_guard_activityEdge_activityEdge()
{
	return uML_A_guard_activityEdge_activityEdge;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_guard_interactionOperand()
{
	return uML_A_guard_interactionOperand;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_guard_interactionOperand_interactionOperand()
{
	return uML_A_guard_interactionOperand_interactionOperand;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_guard_transition()
{
	return uML_A_guard_transition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_guard_transition_transition()
{
	return uML_A_guard_transition_transition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_handlerBody_exceptionHandler()
{
	return uML_A_handlerBody_exceptionHandler;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_handlerBody_exceptionHandler_exceptionHandler()
{
	return uML_A_handlerBody_exceptionHandler_exceptionHandler;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_handler_protectedNode()
{
	return uML_A_handler_protectedNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_icon_stereotype()
{
	return uML_A_icon_stereotype;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_icon_stereotype_stereotype()
{
	return uML_A_icon_stereotype_stereotype;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_importedElement_import()
{
	return uML_A_importedElement_import;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_importedElement_import_import()
{
	return uML_A_importedElement_import_import;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_importedMember_namespace()
{
	return uML_A_importedMember_namespace;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_importedMember_namespace_namespace()
{
	return uML_A_importedMember_namespace_namespace;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_importedPackage_packageImport()
{
	return uML_A_importedPackage_packageImport;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_importedPackage_packageImport_packageImport()
{
	return uML_A_importedPackage_packageImport_packageImport;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inInterruptibleRegion_node()
{
	return uML_A_inInterruptibleRegion_node;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inPartition_node()
{
	return uML_A_inPartition_node;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inState_objectNode()
{
	return uML_A_inState_objectNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_inState_objectNode_objectNode()
{
	return uML_A_inState_objectNode_objectNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_include_includingCase()
{
	return uML_A_include_includingCase;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_incoming_target_node()
{
	return uML_A_incoming_target_node;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_incoming_target_vertex()
{
	return uML_A_incoming_target_vertex;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_incoming_target_vertex_incoming()
{
	return uML_A_incoming_target_vertex_incoming;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_informationSource_informationFlow()
{
	return uML_A_informationSource_informationFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_informationSource_informationFlow_informationFlow()
{
	return uML_A_informationSource_informationFlow_informationFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_informationTarget_informationFlow()
{
	return uML_A_informationTarget_informationFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_informationTarget_informationFlow_informationFlow()
{
	return uML_A_informationTarget_informationFlow_informationFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inheritedMember_inheritingClassifier()
{
	return uML_A_inheritedMember_inheritingClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_inheritedMember_inheritingClassifier_inheritingClassifier()
{
	return uML_A_inheritedMember_inheritingClassifier_inheritingClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inheritedParameter_redefinableTemplateSignature()
{
	return uML_A_inheritedParameter_redefinableTemplateSignature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature()
{
	return uML_A_inheritedParameter_redefinableTemplateSignature_redefinableTemplateSignature;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inputElement_regionAsInput()
{
	return uML_A_inputElement_regionAsInput;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inputValue_linkAction()
{
	return uML_A_inputValue_linkAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_inputValue_linkAction_linkAction()
{
	return uML_A_inputValue_linkAction_linkAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_inputValue_opaqueAction()
{
	return uML_A_inputValue_opaqueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_inputValue_opaqueAction_opaqueAction()
{
	return uML_A_inputValue_opaqueAction_opaqueAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_input_action()
{
	return uML_A_input_action;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_input_action_action()
{
	return uML_A_input_action_action;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_insertAt_addStructuralFeatureValueAction()
{
	return uML_A_insertAt_addStructuralFeatureValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_insertAt_addStructuralFeatureValueAction_addStructuralFeatureValueAction()
{
	return uML_A_insertAt_addStructuralFeatureValueAction_addStructuralFeatureValueAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_insertAt_addVariableValueAction()
{
	return uML_A_insertAt_addVariableValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_insertAt_addVariableValueAction_addVariableValueAction()
{
	return uML_A_insertAt_addVariableValueAction_addVariableValueAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_insertAt_linkEndCreationData()
{
	return uML_A_insertAt_linkEndCreationData;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_insertAt_linkEndCreationData_linkEndCreationData()
{
	return uML_A_insertAt_linkEndCreationData_linkEndCreationData;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_instance_instanceValue()
{
	return uML_A_instance_instanceValue;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_instance_instanceValue_instanceValue()
{
	return uML_A_instance_instanceValue_instanceValue;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_interfaceRealization_implementingClassifier()
{
	return uML_A_interfaceRealization_implementingClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_interruptingEdge_interrupts()
{
	return uML_A_interruptingEdge_interrupts;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_invariant_stateInvariant()
{
	return uML_A_invariant_stateInvariant;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_invariant_stateInvariant_stateInvariant()
{
	return uML_A_invariant_stateInvariant_stateInvariant;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_joinSpec_joinNode()
{
	return uML_A_joinSpec_joinNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_joinSpec_joinNode_joinNode()
{
	return uML_A_joinSpec_joinNode_joinNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_lifeline_interaction()
{
	return uML_A_lifeline_interaction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_localPostcondition_action()
{
	return uML_A_localPostcondition_action;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_localPostcondition_action_action()
{
	return uML_A_localPostcondition_action_action;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_localPrecondition_action()
{
	return uML_A_localPrecondition_action;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_localPrecondition_action_action()
{
	return uML_A_localPrecondition_action_action;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_loopVariableInput_loopNode()
{
	return uML_A_loopVariableInput_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_loopVariableInput_loopNode_loopNode()
{
	return uML_A_loopVariableInput_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_loopVariable_loopNode()
{
	return uML_A_loopVariable_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_loopVariable_loopNode_loopNode()
{
	return uML_A_loopVariable_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_lowerValue_owningLower()
{
	return uML_A_lowerValue_owningLower;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_lowerValue_owningLower_owningLower()
{
	return uML_A_lowerValue_owningLower_owningLower;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_manifestation_artifact()
{
	return uML_A_manifestation_artifact;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_manifestation_artifact_artifact()
{
	return uML_A_manifestation_artifact_artifact;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_mapping_abstraction()
{
	return uML_A_mapping_abstraction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_mapping_abstraction_abstraction()
{
	return uML_A_mapping_abstraction_abstraction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_max_durationInterval()
{
	return uML_A_max_durationInterval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_max_durationInterval_durationInterval()
{
	return uML_A_max_durationInterval_durationInterval;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_max_interval()
{
	return uML_A_max_interval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_max_interval_interval()
{
	return uML_A_max_interval_interval;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_max_timeInterval()
{
	return uML_A_max_timeInterval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_max_timeInterval_timeInterval()
{
	return uML_A_max_timeInterval_timeInterval;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_maxint_interactionConstraint()
{
	return uML_A_maxint_interactionConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_maxint_interactionConstraint_interactionConstraint()
{
	return uML_A_maxint_interactionConstraint_interactionConstraint;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_memberEnd_association()
{
	return uML_A_memberEnd_association;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_member_memberNamespace()
{
	return uML_A_member_memberNamespace;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_member_memberNamespace_memberNamespace()
{
	return uML_A_member_memberNamespace_memberNamespace;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_mergedPackage_packageMerge()
{
	return uML_A_mergedPackage_packageMerge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_mergedPackage_packageMerge_packageMerge()
{
	return uML_A_mergedPackage_packageMerge_packageMerge;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_message_considerIgnoreFragment()
{
	return uML_A_message_considerIgnoreFragment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_message_considerIgnoreFragment_considerIgnoreFragment()
{
	return uML_A_message_considerIgnoreFragment_considerIgnoreFragment;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_message_interaction()
{
	return uML_A_message_interaction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_message_messageEnd()
{
	return uML_A_message_messageEnd;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_message_messageEnd_messageEnd()
{
	return uML_A_message_messageEnd_messageEnd;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_metaclassReference_profile()
{
	return uML_A_metaclassReference_profile;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_metaclassReference_profile_profile()
{
	return uML_A_metaclassReference_profile_profile;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_metamodelReference_profile()
{
	return uML_A_metamodelReference_profile;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_metamodelReference_profile_profile()
{
	return uML_A_metamodelReference_profile_profile;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_method_specification()
{
	return uML_A_method_specification;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_min_durationInterval()
{
	return uML_A_min_durationInterval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_min_durationInterval_durationInterval()
{
	return uML_A_min_durationInterval_durationInterval;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_min_interval()
{
	return uML_A_min_interval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_min_interval_interval()
{
	return uML_A_min_interval_interval;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_min_timeInterval()
{
	return uML_A_min_timeInterval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_min_timeInterval_timeInterval()
{
	return uML_A_min_timeInterval_timeInterval;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_minint_interactionConstraint()
{
	return uML_A_minint_interactionConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_minint_interactionConstraint_interactionConstraint()
{
	return uML_A_minint_interactionConstraint_interactionConstraint;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_nameExpression_namedElement()
{
	return uML_A_nameExpression_namedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_nameExpression_namedElement_namedElement()
{
	return uML_A_nameExpression_namedElement_namedElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_navigableOwnedEnd_association()
{
	return uML_A_navigableOwnedEnd_association;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_navigableOwnedEnd_association_association()
{
	return uML_A_navigableOwnedEnd_association_association;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_nestedArtifact_artifact()
{
	return uML_A_nestedArtifact_artifact;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_nestedArtifact_artifact_artifact()
{
	return uML_A_nestedArtifact_artifact_artifact;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_nestedClassifier_interface()
{
	return uML_A_nestedClassifier_interface;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_nestedClassifier_interface_interface()
{
	return uML_A_nestedClassifier_interface_interface;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_nestedClassifier_nestingClass()
{
	return uML_A_nestedClassifier_nestingClass;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_nestedClassifier_nestingClass_nestingClass()
{
	return uML_A_nestedClassifier_nestingClass_nestingClass;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_nestedNode_node()
{
	return uML_A_nestedNode_node;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_nestedNode_node_node()
{
	return uML_A_nestedNode_node_node;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_nestedPackage_nestingPackage()
{
	return uML_A_nestedPackage_nestingPackage;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_newClassifier_reclassifyObjectAction()
{
	return uML_A_newClassifier_reclassifyObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction()
{
	return uML_A_newClassifier_reclassifyObjectAction_reclassifyObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_node_activity()
{
	return uML_A_node_activity;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_node_inStructuredNode()
{
	return uML_A_node_inStructuredNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_clearAssociationAction()
{
	return uML_A_object_clearAssociationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_clearAssociationAction_clearAssociationAction()
{
	return uML_A_object_clearAssociationAction_clearAssociationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_readIsClassifiedObjectAction()
{
	return uML_A_object_readIsClassifiedObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_readIsClassifiedObjectAction_readIsClassifiedObjectAction()
{
	return uML_A_object_readIsClassifiedObjectAction_readIsClassifiedObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_readLinkObjectEndAction()
{
	return uML_A_object_readLinkObjectEndAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_readLinkObjectEndAction_readLinkObjectEndAction()
{
	return uML_A_object_readLinkObjectEndAction_readLinkObjectEndAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_readLinkObjectEndQualifierAction()
{
	return uML_A_object_readLinkObjectEndQualifierAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction()
{
	return uML_A_object_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_reclassifyObjectAction()
{
	return uML_A_object_reclassifyObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_reclassifyObjectAction_reclassifyObjectAction()
{
	return uML_A_object_reclassifyObjectAction_reclassifyObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_startClassifierBehaviorAction()
{
	return uML_A_object_startClassifierBehaviorAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_startClassifierBehaviorAction_startClassifierBehaviorAction()
{
	return uML_A_object_startClassifierBehaviorAction_startClassifierBehaviorAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_startObjectBehaviorAction()
{
	return uML_A_object_startObjectBehaviorAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_startObjectBehaviorAction_startObjectBehaviorAction()
{
	return uML_A_object_startObjectBehaviorAction_startObjectBehaviorAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_structuralFeatureAction()
{
	return uML_A_object_structuralFeatureAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_structuralFeatureAction_structuralFeatureAction()
{
	return uML_A_object_structuralFeatureAction_structuralFeatureAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_object_unmarshallAction()
{
	return uML_A_object_unmarshallAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_object_unmarshallAction_unmarshallAction()
{
	return uML_A_object_unmarshallAction_unmarshallAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_observation_duration()
{
	return uML_A_observation_duration;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_observation_duration_duration()
{
	return uML_A_observation_duration_duration;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_observation_timeExpression()
{
	return uML_A_observation_timeExpression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_observation_timeExpression_timeExpression()
{
	return uML_A_observation_timeExpression_timeExpression;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_oldClassifier_reclassifyObjectAction()
{
	return uML_A_oldClassifier_reclassifyObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction()
{
	return uML_A_oldClassifier_reclassifyObjectAction_reclassifyObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_onPort_invocationAction()
{
	return uML_A_onPort_invocationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_onPort_invocationAction_invocationAction()
{
	return uML_A_onPort_invocationAction_invocationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_operand_combinedFragment()
{
	return uML_A_operand_combinedFragment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_operand_combinedFragment_combinedFragment()
{
	return uML_A_operand_combinedFragment_combinedFragment;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_operand_expression()
{
	return uML_A_operand_expression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_operand_expression_expression()
{
	return uML_A_operand_expression_expression;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_operation_callEvent()
{
	return uML_A_operation_callEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_operation_callEvent_callEvent()
{
	return uML_A_operation_callEvent_callEvent;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_operation_callOperationAction()
{
	return uML_A_operation_callOperationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_operation_callOperationAction_callOperationAction()
{
	return uML_A_operation_callOperationAction_callOperationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_operation_templateParameter_parameteredElement()
{
	return uML_A_operation_templateParameter_parameteredElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_opposite_property()
{
	return uML_A_opposite_property;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_opposite_property_property()
{
	return uML_A_opposite_property_property;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_outgoing_source_node()
{
	return uML_A_outgoing_source_node;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_outgoing_source_vertex()
{
	return uML_A_outgoing_source_vertex;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_outgoing_source_vertex_outgoing()
{
	return uML_A_outgoing_source_vertex_outgoing;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_outputElement_regionAsOutput()
{
	return uML_A_outputElement_regionAsOutput;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_outputValue_opaqueAction()
{
	return uML_A_outputValue_opaqueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_outputValue_opaqueAction_opaqueAction()
{
	return uML_A_outputValue_opaqueAction_opaqueAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_output_action()
{
	return uML_A_output_action;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_output_action_action()
{
	return uML_A_output_action_action;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedActual_owningTemplateParameterSubstitution()
{
	return uML_A_ownedActual_owningTemplateParameterSubstitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedActual_owningTemplateParameterSubstitution_owningTemplateParameterSubstitution()
{
	return uML_A_ownedActual_owningTemplateParameterSubstitution_owningTemplateParameterSubstitution;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedAttribute_artifact()
{
	return uML_A_ownedAttribute_artifact;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedAttribute_artifact_artifact()
{
	return uML_A_ownedAttribute_artifact_artifact;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedAttribute_class()
{
	return uML_A_ownedAttribute_class;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedAttribute_datatype()
{
	return uML_A_ownedAttribute_datatype;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedAttribute_interface()
{
	return uML_A_ownedAttribute_interface;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedAttribute_owningSignal()
{
	return uML_A_ownedAttribute_owningSignal;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedAttribute_owningSignal_owningSignal()
{
	return uML_A_ownedAttribute_owningSignal_owningSignal;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedAttribute_structuredClassifier()
{
	return uML_A_ownedAttribute_structuredClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedAttribute_structuredClassifier_structuredClassifier()
{
	return uML_A_ownedAttribute_structuredClassifier_structuredClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedBehavior_behavioredClassifier()
{
	return uML_A_ownedBehavior_behavioredClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedBehavior_behavioredClassifier_behavioredClassifier()
{
	return uML_A_ownedBehavior_behavioredClassifier_behavioredClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedComment_owningElement()
{
	return uML_A_ownedComment_owningElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedComment_owningElement_owningElement()
{
	return uML_A_ownedComment_owningElement_owningElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedConnector_structuredClassifier()
{
	return uML_A_ownedConnector_structuredClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedConnector_structuredClassifier_structuredClassifier()
{
	return uML_A_ownedConnector_structuredClassifier_structuredClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedDefault_templateParameter()
{
	return uML_A_ownedDefault_templateParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedDefault_templateParameter_templateParameter()
{
	return uML_A_ownedDefault_templateParameter_templateParameter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedElement_owner()
{
	return uML_A_ownedElement_owner;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedEnd_extension()
{
	return uML_A_ownedEnd_extension;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedEnd_extension_extension()
{
	return uML_A_ownedEnd_extension_extension;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedEnd_owningAssociation()
{
	return uML_A_ownedEnd_owningAssociation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedLiteral_enumeration()
{
	return uML_A_ownedLiteral_enumeration;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedMember_namespace()
{
	return uML_A_ownedMember_namespace;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedOperation_artifact()
{
	return uML_A_ownedOperation_artifact;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedOperation_artifact_artifact()
{
	return uML_A_ownedOperation_artifact_artifact;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedOperation_class()
{
	return uML_A_ownedOperation_class;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedOperation_datatype()
{
	return uML_A_ownedOperation_datatype;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedOperation_interface()
{
	return uML_A_ownedOperation_interface;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedParameterSet_behavior()
{
	return uML_A_ownedParameterSet_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedParameterSet_behavior_behavior()
{
	return uML_A_ownedParameterSet_behavior_behavior;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedParameterSet_behavioralFeature()
{
	return uML_A_ownedParameterSet_behavioralFeature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedParameterSet_behavioralFeature_behavioralFeature()
{
	return uML_A_ownedParameterSet_behavioralFeature_behavioralFeature;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedParameter_behavior()
{
	return uML_A_ownedParameter_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedParameter_behavior_behavior()
{
	return uML_A_ownedParameter_behavior_behavior;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedParameter_operation()
{
	return uML_A_ownedParameter_operation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedParameter_ownerFormalParam()
{
	return uML_A_ownedParameter_ownerFormalParam;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedParameter_ownerFormalParam_ownerFormalParam()
{
	return uML_A_ownedParameter_ownerFormalParam_ownerFormalParam;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedParameter_signature()
{
	return uML_A_ownedParameter_signature;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedParameteredElement_owningTemplateParameter()
{
	return uML_A_ownedParameteredElement_owningTemplateParameter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedPort_encapsulatedClassifier()
{
	return uML_A_ownedPort_encapsulatedClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedPort_encapsulatedClassifier_encapsulatedClassifier()
{
	return uML_A_ownedPort_encapsulatedClassifier_encapsulatedClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedReception_class()
{
	return uML_A_ownedReception_class;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedReception_class_class()
{
	return uML_A_ownedReception_class_class;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedReception_interface()
{
	return uML_A_ownedReception_interface;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedReception_interface_interface()
{
	return uML_A_ownedReception_interface_interface;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedRule_context()
{
	return uML_A_ownedRule_context;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedStereotype_owningPackage()
{
	return uML_A_ownedStereotype_owningPackage;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedStereotype_owningPackage_owningPackage()
{
	return uML_A_ownedStereotype_owningPackage_owningPackage;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedTemplateSignature_classifier()
{
	return uML_A_ownedTemplateSignature_classifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedTemplateSignature_template()
{
	return uML_A_ownedTemplateSignature_template;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedType_package()
{
	return uML_A_ownedType_package;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_ownedUseCase_classifier()
{
	return uML_A_ownedUseCase_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_ownedUseCase_classifier_classifier()
{
	return uML_A_ownedUseCase_classifier_classifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_packageImport_importingNamespace()
{
	return uML_A_packageImport_importingNamespace;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_packageMerge_receivingPackage()
{
	return uML_A_packageMerge_receivingPackage;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_packagedElement_component()
{
	return uML_A_packagedElement_component;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_packagedElement_component_component()
{
	return uML_A_packagedElement_component_component;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_packagedElement_owningPackage()
{
	return uML_A_packagedElement_owningPackage;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_packagedElement_owningPackage_owningPackage()
{
	return uML_A_packagedElement_owningPackage_owningPackage;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_parameterSet_parameter()
{
	return uML_A_parameterSet_parameter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_parameterSubstitution_templateBinding()
{
	return uML_A_parameterSubstitution_templateBinding;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_parameter_activityParameterNode()
{
	return uML_A_parameter_activityParameterNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_parameter_activityParameterNode_activityParameterNode()
{
	return uML_A_parameter_activityParameterNode_activityParameterNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_parameter_templateSignature()
{
	return uML_A_parameter_templateSignature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_parameter_templateSignature_templateSignature()
{
	return uML_A_parameter_templateSignature_templateSignature;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_parameteredElement_templateParameter()
{
	return uML_A_parameteredElement_templateParameter;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_partWithPort_connectorEnd()
{
	return uML_A_partWithPort_connectorEnd;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_partWithPort_connectorEnd_connectorEnd()
{
	return uML_A_partWithPort_connectorEnd_connectorEnd;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_part_structuredClassifier()
{
	return uML_A_part_structuredClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_part_structuredClassifier_structuredClassifier()
{
	return uML_A_part_structuredClassifier_structuredClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_partition_activity()
{
	return uML_A_partition_activity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_partition_activity_activity()
{
	return uML_A_partition_activity_activity;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_port_trigger()
{
	return uML_A_port_trigger;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_port_trigger_trigger()
{
	return uML_A_port_trigger_trigger;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_postCondition_owningTransition()
{
	return uML_A_postCondition_owningTransition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_postCondition_owningTransition_owningTransition()
{
	return uML_A_postCondition_owningTransition_owningTransition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_postcondition_behavior()
{
	return uML_A_postcondition_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_postcondition_behavior_behavior()
{
	return uML_A_postcondition_behavior_behavior;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_postcondition_postContext()
{
	return uML_A_postcondition_postContext;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_postcondition_postContext_postContext()
{
	return uML_A_postcondition_postContext_postContext;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_powertypeExtent_powertype()
{
	return uML_A_powertypeExtent_powertype;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_preCondition_protocolTransition()
{
	return uML_A_preCondition_protocolTransition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_preCondition_protocolTransition_protocolTransition()
{
	return uML_A_preCondition_protocolTransition_protocolTransition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_precondition_behavior()
{
	return uML_A_precondition_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_precondition_behavior_behavior()
{
	return uML_A_precondition_behavior_behavior;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_precondition_preContext()
{
	return uML_A_precondition_preContext;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_precondition_preContext_preContext()
{
	return uML_A_precondition_preContext_preContext;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_predecessorClause_successorClause()
{
	return uML_A_predecessorClause_successorClause;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_profileApplication_applyingPackage()
{
	return uML_A_profileApplication_applyingPackage;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_profile_stereotype()
{
	return uML_A_profile_stereotype;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_profile_stereotype_stereotype()
{
	return uML_A_profile_stereotype_stereotype;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_protocol_interface()
{
	return uML_A_protocol_interface;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_protocol_interface_interface()
{
	return uML_A_protocol_interface_interface;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_protocol_port()
{
	return uML_A_protocol_port;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_protocol_port_port()
{
	return uML_A_protocol_port_port;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_provided_component()
{
	return uML_A_provided_component;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_provided_component_component()
{
	return uML_A_provided_component_component;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_provided_port()
{
	return uML_A_provided_port;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_provided_port_port()
{
	return uML_A_provided_port_port;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_qualifier_associationEnd()
{
	return uML_A_qualifier_associationEnd;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_qualifier_linkEndData()
{
	return uML_A_qualifier_linkEndData;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_qualifier_linkEndData_linkEndData()
{
	return uML_A_qualifier_linkEndData_linkEndData;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_qualifier_qualifierValue()
{
	return uML_A_qualifier_qualifierValue;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_qualifier_qualifierValue_qualifierValue()
{
	return uML_A_qualifier_qualifierValue_qualifierValue;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_qualifier_readLinkObjectEndQualifierAction()
{
	return uML_A_qualifier_readLinkObjectEndQualifierAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_qualifier_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction()
{
	return uML_A_qualifier_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_raisedException_behavioralFeature()
{
	return uML_A_raisedException_behavioralFeature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_raisedException_behavioralFeature_behavioralFeature()
{
	return uML_A_raisedException_behavioralFeature_behavioralFeature;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_raisedException_operation()
{
	return uML_A_raisedException_operation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_raisedException_operation_operation()
{
	return uML_A_raisedException_operation_operation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_realization_abstraction_component()
{
	return uML_A_realization_abstraction_component;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_realization_abstraction_flow()
{
	return uML_A_realization_abstraction_flow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_realization_abstraction_flow_abstraction()
{
	return uML_A_realization_abstraction_flow_abstraction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_realizingActivityEdge_informationFlow()
{
	return uML_A_realizingActivityEdge_informationFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_realizingActivityEdge_informationFlow_informationFlow()
{
	return uML_A_realizingActivityEdge_informationFlow_informationFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_realizingClassifier_componentRealization()
{
	return uML_A_realizingClassifier_componentRealization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_realizingClassifier_componentRealization_componentRealization()
{
	return uML_A_realizingClassifier_componentRealization_componentRealization;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_realizingConnector_informationFlow()
{
	return uML_A_realizingConnector_informationFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_realizingConnector_informationFlow_informationFlow()
{
	return uML_A_realizingConnector_informationFlow_informationFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_realizingMessage_informationFlow()
{
	return uML_A_realizingMessage_informationFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_realizingMessage_informationFlow_informationFlow()
{
	return uML_A_realizingMessage_informationFlow_informationFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_receiveEvent_endMessage()
{
	return uML_A_receiveEvent_endMessage;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_receiveEvent_endMessage_endMessage()
{
	return uML_A_receiveEvent_endMessage_endMessage;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedBehavior_behavior()
{
	return uML_A_redefinedBehavior_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedBehavior_behavior_behavior()
{
	return uML_A_redefinedBehavior_behavior_behavior;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedClassifier_classifier()
{
	return uML_A_redefinedClassifier_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedClassifier_classifier_classifier()
{
	return uML_A_redefinedClassifier_classifier_classifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedConnector_connector()
{
	return uML_A_redefinedConnector_connector;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedConnector_connector_connector()
{
	return uML_A_redefinedConnector_connector_connector;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedEdge_activityEdge()
{
	return uML_A_redefinedEdge_activityEdge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedEdge_activityEdge_activityEdge()
{
	return uML_A_redefinedEdge_activityEdge_activityEdge;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedElement_redefinableElement()
{
	return uML_A_redefinedElement_redefinableElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedElement_redefinableElement_redefinableElement()
{
	return uML_A_redefinedElement_redefinableElement_redefinableElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedInterface_interface()
{
	return uML_A_redefinedInterface_interface;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedInterface_interface_interface()
{
	return uML_A_redefinedInterface_interface_interface;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedNode_activityNode()
{
	return uML_A_redefinedNode_activityNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedNode_activityNode_activityNode()
{
	return uML_A_redefinedNode_activityNode_activityNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedOperation_operation()
{
	return uML_A_redefinedOperation_operation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedOperation_operation_operation()
{
	return uML_A_redefinedOperation_operation_operation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedPort_port()
{
	return uML_A_redefinedPort_port;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedPort_port_port()
{
	return uML_A_redefinedPort_port_port;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedProperty_property()
{
	return uML_A_redefinedProperty_property;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedProperty_property_property()
{
	return uML_A_redefinedProperty_property_property;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedState_state()
{
	return uML_A_redefinedState_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedState_state_state()
{
	return uML_A_redefinedState_state_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinedTransition_transition()
{
	return uML_A_redefinedTransition_transition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinedTransition_transition_transition()
{
	return uML_A_redefinedTransition_transition_transition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinitionContext_redefinableElement()
{
	return uML_A_redefinitionContext_redefinableElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinitionContext_redefinableElement_redefinableElement()
{
	return uML_A_redefinitionContext_redefinableElement_redefinableElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinitionContext_region()
{
	return uML_A_redefinitionContext_region;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinitionContext_region_region()
{
	return uML_A_redefinitionContext_region_region;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinitionContext_state()
{
	return uML_A_redefinitionContext_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinitionContext_state_state()
{
	return uML_A_redefinitionContext_state_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_redefinitionContext_transition()
{
	return uML_A_redefinitionContext_transition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_redefinitionContext_transition_transition()
{
	return uML_A_redefinitionContext_transition_transition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_reducer_reduceAction()
{
	return uML_A_reducer_reduceAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_reducer_reduceAction_reduceAction()
{
	return uML_A_reducer_reduceAction_reduceAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_referred_protocolTransition()
{
	return uML_A_referred_protocolTransition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_referred_protocolTransition_protocolTransition()
{
	return uML_A_referred_protocolTransition_protocolTransition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_refersTo_interactionUse()
{
	return uML_A_refersTo_interactionUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_refersTo_interactionUse_interactionUse()
{
	return uML_A_refersTo_interactionUse_interactionUse;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_region_state()
{
	return uML_A_region_state;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_region_stateMachine()
{
	return uML_A_region_stateMachine;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_relatedElement_relationship()
{
	return uML_A_relatedElement_relationship;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_relatedElement_relationship_relationship()
{
	return uML_A_relatedElement_relationship_relationship;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_removeAt_removeStructuralFeatureValueAction()
{
	return uML_A_removeAt_removeStructuralFeatureValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_removeAt_removeStructuralFeatureValueAction_removeStructuralFeatureValueAction()
{
	return uML_A_removeAt_removeStructuralFeatureValueAction_removeStructuralFeatureValueAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_removeAt_removeVariableValueAction()
{
	return uML_A_removeAt_removeVariableValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_removeAt_removeVariableValueAction_removeVariableValueAction()
{
	return uML_A_removeAt_removeVariableValueAction_removeVariableValueAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_replyToCall_replyAction()
{
	return uML_A_replyToCall_replyAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_replyToCall_replyAction_replyAction()
{
	return uML_A_replyToCall_replyAction_replyAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_replyValue_replyAction()
{
	return uML_A_replyValue_replyAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_replyValue_replyAction_replyAction()
{
	return uML_A_replyValue_replyAction_replyAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_representation_classifier()
{
	return uML_A_representation_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_representation_classifier_classifier()
{
	return uML_A_representation_classifier_classifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_represented_representation()
{
	return uML_A_represented_representation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_represented_representation_representation()
{
	return uML_A_represented_representation_representation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_represents_activityPartition()
{
	return uML_A_represents_activityPartition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_represents_activityPartition_activityPartition()
{
	return uML_A_represents_activityPartition_activityPartition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_represents_lifeline()
{
	return uML_A_represents_lifeline;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_represents_lifeline_lifeline()
{
	return uML_A_represents_lifeline_lifeline;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_request_sendObjectAction()
{
	return uML_A_request_sendObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_request_sendObjectAction_sendObjectAction()
{
	return uML_A_request_sendObjectAction_sendObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_required_component()
{
	return uML_A_required_component;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_required_component_component()
{
	return uML_A_required_component_component;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_required_port()
{
	return uML_A_required_port;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_required_port_port()
{
	return uML_A_required_port_port;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_acceptEventAction()
{
	return uML_A_result_acceptEventAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_acceptEventAction_acceptEventAction()
{
	return uML_A_result_acceptEventAction_acceptEventAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_callAction()
{
	return uML_A_result_callAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_callAction_callAction()
{
	return uML_A_result_callAction_callAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_clearStructuralFeatureAction()
{
	return uML_A_result_clearStructuralFeatureAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_clearStructuralFeatureAction_clearStructuralFeatureAction()
{
	return uML_A_result_clearStructuralFeatureAction_clearStructuralFeatureAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_conditionalNode()
{
	return uML_A_result_conditionalNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_conditionalNode_conditionalNode()
{
	return uML_A_result_conditionalNode_conditionalNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_createLinkObjectAction()
{
	return uML_A_result_createLinkObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_createLinkObjectAction_createLinkObjectAction()
{
	return uML_A_result_createLinkObjectAction_createLinkObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_createObjectAction()
{
	return uML_A_result_createObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_createObjectAction_createObjectAction()
{
	return uML_A_result_createObjectAction_createObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_loopNode()
{
	return uML_A_result_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_loopNode_loopNode()
{
	return uML_A_result_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_opaqueExpression()
{
	return uML_A_result_opaqueExpression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_opaqueExpression_opaqueExpression()
{
	return uML_A_result_opaqueExpression_opaqueExpression;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readExtentAction()
{
	return uML_A_result_readExtentAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readExtentAction_readExtentAction()
{
	return uML_A_result_readExtentAction_readExtentAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readIsClassifiedObjectAction()
{
	return uML_A_result_readIsClassifiedObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readIsClassifiedObjectAction_readIsClassifiedObjectAction()
{
	return uML_A_result_readIsClassifiedObjectAction_readIsClassifiedObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readLinkAction()
{
	return uML_A_result_readLinkAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readLinkAction_readLinkAction()
{
	return uML_A_result_readLinkAction_readLinkAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readLinkObjectEndAction()
{
	return uML_A_result_readLinkObjectEndAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readLinkObjectEndAction_readLinkObjectEndAction()
{
	return uML_A_result_readLinkObjectEndAction_readLinkObjectEndAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readLinkObjectEndQualifierAction()
{
	return uML_A_result_readLinkObjectEndQualifierAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction()
{
	return uML_A_result_readLinkObjectEndQualifierAction_readLinkObjectEndQualifierAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readSelfAction()
{
	return uML_A_result_readSelfAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readSelfAction_readSelfAction()
{
	return uML_A_result_readSelfAction_readSelfAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readStructuralFeatureAction()
{
	return uML_A_result_readStructuralFeatureAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readStructuralFeatureAction_readStructuralFeatureAction()
{
	return uML_A_result_readStructuralFeatureAction_readStructuralFeatureAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_readVariableAction()
{
	return uML_A_result_readVariableAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_readVariableAction_readVariableAction()
{
	return uML_A_result_readVariableAction_readVariableAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_reduceAction()
{
	return uML_A_result_reduceAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_reduceAction_reduceAction()
{
	return uML_A_result_reduceAction_reduceAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_testIdentityAction()
{
	return uML_A_result_testIdentityAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_testIdentityAction_testIdentityAction()
{
	return uML_A_result_testIdentityAction_testIdentityAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_unmarshallAction()
{
	return uML_A_result_unmarshallAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_unmarshallAction_unmarshallAction()
{
	return uML_A_result_unmarshallAction_unmarshallAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_valueSpecificationAction()
{
	return uML_A_result_valueSpecificationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_valueSpecificationAction_valueSpecificationAction()
{
	return uML_A_result_valueSpecificationAction_valueSpecificationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_result_writeStructuralFeatureAction()
{
	return uML_A_result_writeStructuralFeatureAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_result_writeStructuralFeatureAction_writeStructuralFeatureAction()
{
	return uML_A_result_writeStructuralFeatureAction_writeStructuralFeatureAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_returnInformation_acceptCallAction()
{
	return uML_A_returnInformation_acceptCallAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_returnInformation_acceptCallAction_acceptCallAction()
{
	return uML_A_returnInformation_acceptCallAction_acceptCallAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_returnInformation_replyAction()
{
	return uML_A_returnInformation_replyAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_returnInformation_replyAction_replyAction()
{
	return uML_A_returnInformation_replyAction_replyAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_returnValueRecipient_interactionUse()
{
	return uML_A_returnValueRecipient_interactionUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_returnValueRecipient_interactionUse_interactionUse()
{
	return uML_A_returnValueRecipient_interactionUse_interactionUse;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_returnValue_interactionUse()
{
	return uML_A_returnValue_interactionUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_returnValue_interactionUse_interactionUse()
{
	return uML_A_returnValue_interactionUse_interactionUse;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_roleBinding_collaborationUse()
{
	return uML_A_roleBinding_collaborationUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_roleBinding_collaborationUse_collaborationUse()
{
	return uML_A_roleBinding_collaborationUse_collaborationUse;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_role_structuredClassifier()
{
	return uML_A_role_structuredClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_role_structuredClassifier_structuredClassifier()
{
	return uML_A_role_structuredClassifier_structuredClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_second_testIdentityAction()
{
	return uML_A_second_testIdentityAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_second_testIdentityAction_testIdentityAction()
{
	return uML_A_second_testIdentityAction_testIdentityAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_selection_objectFlow()
{
	return uML_A_selection_objectFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_selection_objectFlow_objectFlow()
{
	return uML_A_selection_objectFlow_objectFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_selection_objectNode()
{
	return uML_A_selection_objectNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_selection_objectNode_objectNode()
{
	return uML_A_selection_objectNode_objectNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_selector_lifeline()
{
	return uML_A_selector_lifeline;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_selector_lifeline_lifeline()
{
	return uML_A_selector_lifeline_lifeline;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_sendEvent_endMessage()
{
	return uML_A_sendEvent_endMessage;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_sendEvent_endMessage_endMessage()
{
	return uML_A_sendEvent_endMessage_endMessage;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_setupPart_loopNode()
{
	return uML_A_setupPart_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_setupPart_loopNode_loopNode()
{
	return uML_A_setupPart_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_signal_broadcastSignalAction()
{
	return uML_A_signal_broadcastSignalAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_signal_broadcastSignalAction_broadcastSignalAction()
{
	return uML_A_signal_broadcastSignalAction_broadcastSignalAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_signal_reception()
{
	return uML_A_signal_reception;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_signal_reception_reception()
{
	return uML_A_signal_reception_reception;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_signal_sendSignalAction()
{
	return uML_A_signal_sendSignalAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_signal_sendSignalAction_sendSignalAction()
{
	return uML_A_signal_sendSignalAction_sendSignalAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_signal_signalEvent()
{
	return uML_A_signal_signalEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_signal_signalEvent_signalEvent()
{
	return uML_A_signal_signalEvent_signalEvent;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_signature_message()
{
	return uML_A_signature_message;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_signature_message_message()
{
	return uML_A_signature_message_message;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_signature_templateBinding()
{
	return uML_A_signature_templateBinding;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_signature_templateBinding_templateBinding()
{
	return uML_A_signature_templateBinding_templateBinding;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_slot_owningInstance()
{
	return uML_A_slot_owningInstance;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_source_directedRelationship()
{
	return uML_A_source_directedRelationship;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_source_directedRelationship_directedRelationship()
{
	return uML_A_source_directedRelationship_directedRelationship;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_specification_durationConstraint()
{
	return uML_A_specification_durationConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_specification_durationConstraint_durationConstraint()
{
	return uML_A_specification_durationConstraint_durationConstraint;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_specification_intervalConstraint()
{
	return uML_A_specification_intervalConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_specification_intervalConstraint_intervalConstraint()
{
	return uML_A_specification_intervalConstraint_intervalConstraint;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_specification_owningConstraint()
{
	return uML_A_specification_owningConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_specification_owningConstraint_owningConstraint()
{
	return uML_A_specification_owningConstraint_owningConstraint;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_specification_owningInstanceSpec()
{
	return uML_A_specification_owningInstanceSpec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_specification_owningInstanceSpec_owningInstanceSpec()
{
	return uML_A_specification_owningInstanceSpec_owningInstanceSpec;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_specification_timeConstraint()
{
	return uML_A_specification_timeConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_specification_timeConstraint_timeConstraint()
{
	return uML_A_specification_timeConstraint_timeConstraint;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_start_executionSpecification()
{
	return uML_A_start_executionSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_start_executionSpecification_executionSpecification()
{
	return uML_A_start_executionSpecification_executionSpecification;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_stateInvariant_owningState()
{
	return uML_A_stateInvariant_owningState;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_stateInvariant_owningState_owningState()
{
	return uML_A_stateInvariant_owningState_owningState;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_structuralFeature_structuralFeatureAction()
{
	return uML_A_structuralFeature_structuralFeatureAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction()
{
	return uML_A_structuralFeature_structuralFeatureAction_structuralFeatureAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_structuredNodeInput_structuredActivityNode()
{
	return uML_A_structuredNodeInput_structuredActivityNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_structuredNodeInput_structuredActivityNode_structuredActivityNode()
{
	return uML_A_structuredNodeInput_structuredActivityNode_structuredActivityNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_structuredNodeOutput_structuredActivityNode()
{
	return uML_A_structuredNodeOutput_structuredActivityNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_structuredNodeOutput_structuredActivityNode_structuredActivityNode()
{
	return uML_A_structuredNodeOutput_structuredActivityNode_structuredActivityNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_structuredNode_activity()
{
	return uML_A_structuredNode_activity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_structuredNode_activity_activity()
{
	return uML_A_structuredNode_activity_activity;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_subExpression_owningExpression()
{
	return uML_A_subExpression_owningExpression;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_subgroup_superGroup()
{
	return uML_A_subgroup_superGroup;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_subject_useCase()
{
	return uML_A_subject_useCase;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_submachineState_submachine()
{
	return uML_A_submachineState_submachine;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_subpartition_superPartition()
{
	return uML_A_subpartition_superPartition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_subsettedProperty_property()
{
	return uML_A_subsettedProperty_property;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_subsettedProperty_property_property()
{
	return uML_A_subsettedProperty_property_property;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_substitution_substitutingClassifier()
{
	return uML_A_substitution_substitutingClassifier;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_subvertex_container()
{
	return uML_A_subvertex_container;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_superClass_class()
{
	return uML_A_superClass_class;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_superClass_class_class()
{
	return uML_A_superClass_class_class;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_supplier_supplierDependency()
{
	return uML_A_supplier_supplierDependency;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_supplier_supplierDependency_supplierDependency()
{
	return uML_A_supplier_supplierDependency_supplierDependency;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_target_callOperationAction()
{
	return uML_A_target_callOperationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_target_callOperationAction_callOperationAction()
{
	return uML_A_target_callOperationAction_callOperationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_target_destroyObjectAction()
{
	return uML_A_target_destroyObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_target_destroyObjectAction_destroyObjectAction()
{
	return uML_A_target_destroyObjectAction_destroyObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_target_directedRelationship()
{
	return uML_A_target_directedRelationship;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_target_directedRelationship_directedRelationship()
{
	return uML_A_target_directedRelationship_directedRelationship;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_target_sendObjectAction()
{
	return uML_A_target_sendObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_target_sendObjectAction_sendObjectAction()
{
	return uML_A_target_sendObjectAction_sendObjectAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_target_sendSignalAction()
{
	return uML_A_target_sendSignalAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_target_sendSignalAction_sendSignalAction()
{
	return uML_A_target_sendSignalAction_sendSignalAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_templateBinding_boundElement()
{
	return uML_A_templateBinding_boundElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_test_clause()
{
	return uML_A_test_clause;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_test_clause_clause()
{
	return uML_A_test_clause_clause;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_test_loopNode()
{
	return uML_A_test_loopNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_test_loopNode_loopNode()
{
	return uML_A_test_loopNode_loopNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_toBefore_after()
{
	return uML_A_toBefore_after;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_transformation_objectFlow()
{
	return uML_A_transformation_objectFlow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_transformation_objectFlow_objectFlow()
{
	return uML_A_transformation_objectFlow_objectFlow;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_transition_container()
{
	return uML_A_transition_container;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_trigger_acceptEventAction()
{
	return uML_A_trigger_acceptEventAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_trigger_acceptEventAction_acceptEventAction()
{
	return uML_A_trigger_acceptEventAction_acceptEventAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_trigger_transition()
{
	return uML_A_trigger_transition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_trigger_transition_transition()
{
	return uML_A_trigger_transition_transition;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_type_collaborationUse()
{
	return uML_A_type_collaborationUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_type_collaborationUse_collaborationUse()
{
	return uML_A_type_collaborationUse_collaborationUse;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_type_connector()
{
	return uML_A_type_connector;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_type_connector_connector()
{
	return uML_A_type_connector_connector;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_type_extensionEnd()
{
	return uML_A_type_extensionEnd;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_type_extensionEnd_extensionEnd()
{
	return uML_A_type_extensionEnd_extensionEnd;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_type_operation()
{
	return uML_A_type_operation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_type_operation_operation()
{
	return uML_A_type_operation_operation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_type_typedElement()
{
	return uML_A_type_typedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_type_typedElement_typedElement()
{
	return uML_A_type_typedElement_typedElement;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_unmarshallType_unmarshallAction()
{
	return uML_A_unmarshallType_unmarshallAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_unmarshallType_unmarshallAction_unmarshallAction()
{
	return uML_A_unmarshallType_unmarshallAction_unmarshallAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_upperBound_objectNode()
{
	return uML_A_upperBound_objectNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_upperBound_objectNode_objectNode()
{
	return uML_A_upperBound_objectNode_objectNode;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_upperValue_owningUpper()
{
	return uML_A_upperValue_owningUpper;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_upperValue_owningUpper_owningUpper()
{
	return uML_A_upperValue_owningUpper_owningUpper;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_utilizedElement_manifestation()
{
	return uML_A_utilizedElement_manifestation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_utilizedElement_manifestation_manifestation()
{
	return uML_A_utilizedElement_manifestation_manifestation;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_value_linkEndData()
{
	return uML_A_value_linkEndData;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_value_linkEndData_linkEndData()
{
	return uML_A_value_linkEndData_linkEndData;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_value_owningSlot()
{
	return uML_A_value_owningSlot;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_value_owningSlot_owningSlot()
{
	return uML_A_value_owningSlot_owningSlot;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_value_qualifierValue()
{
	return uML_A_value_qualifierValue;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_value_qualifierValue_qualifierValue()
{
	return uML_A_value_qualifierValue_qualifierValue;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_value_valuePin()
{
	return uML_A_value_valuePin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_value_valuePin_valuePin()
{
	return uML_A_value_valuePin_valuePin;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_value_valueSpecificationAction()
{
	return uML_A_value_valueSpecificationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_value_valueSpecificationAction_valueSpecificationAction()
{
	return uML_A_value_valueSpecificationAction_valueSpecificationAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_value_writeStructuralFeatureAction()
{
	return uML_A_value_writeStructuralFeatureAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_value_writeStructuralFeatureAction_writeStructuralFeatureAction()
{
	return uML_A_value_writeStructuralFeatureAction_writeStructuralFeatureAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_value_writeVariableAction()
{
	return uML_A_value_writeVariableAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_value_writeVariableAction_writeVariableAction()
{
	return uML_A_value_writeVariableAction_writeVariableAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_variable_activityScope()
{
	return uML_A_variable_activityScope;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_variable_scope()
{
	return uML_A_variable_scope;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_variable_variableAction()
{
	return uML_A_variable_variableAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_variable_variableAction_variableAction()
{
	return uML_A_variable_variableAction_variableAction;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_weight_activityEdge()
{
	return uML_A_weight_activityEdge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_weight_activityEdge_activityEdge()
{
	return uML_A_weight_activityEdge_activityEdge;
}
std::shared_ptr<uml::Association> UMLPackageImpl::get_UML_A_when_timeEvent()
{
	return uML_A_when_timeEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_A_when_timeEvent_timeEvent()
{
	return uML_A_when_timeEvent_timeEvent;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Abstraction()
{
	return uML_Abstraction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Abstraction_mapping()
{
	return uML_Abstraction_mapping;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_AcceptCallAction()
{
	return uML_AcceptCallAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptCallAction_result_pins()
{
	return uML_AcceptCallAction_result_pins;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AcceptCallAction_returnInformation()
{
	return uML_AcceptCallAction_returnInformation;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptCallAction_trigger_call_event()
{
	return uML_AcceptCallAction_trigger_call_event;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptCallAction_unmarshall()
{
	return uML_AcceptCallAction_unmarshall;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_AcceptEventAction()
{
	return uML_AcceptEventAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptEventAction_conforming_type()
{
	return uML_AcceptEventAction_conforming_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AcceptEventAction_isUnmarshall()
{
	return uML_AcceptEventAction_isUnmarshall;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptEventAction_no_input_pins()
{
	return uML_AcceptEventAction_no_input_pins;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptEventAction_no_output_pins()
{
	return uML_AcceptEventAction_no_output_pins;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptEventAction_one_output_pin()
{
	return uML_AcceptEventAction_one_output_pin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AcceptEventAction_result()
{
	return uML_AcceptEventAction_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AcceptEventAction_trigger()
{
	return uML_AcceptEventAction_trigger;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AcceptEventAction_unmarshall_signal_events()
{
	return uML_AcceptEventAction_unmarshall_signal_events;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Action()
{
	return uML_Action;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Action_allActions_result()
{
	return uML_Action_allActions_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Action_allActions_spec()
{
	return uML_Action_allActions_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Action_allActions_()
{
	return uML_Action_allActions_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Action_allOwnedNodes_result()
{
	return uML_Action_allOwnedNodes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Action_allOwnedNodes_spec()
{
	return uML_Action_allOwnedNodes_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Action_allOwnedNodes_()
{
	return uML_Action_allOwnedNodes_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Action_containingBehavior_result()
{
	return uML_Action_containingBehavior_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Action_containingBehavior_spec()
{
	return uML_Action_containingBehavior_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Action_containingBehavior_()
{
	return uML_Action_containingBehavior_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Action_context()
{
	return uML_Action_context;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Action_context_result()
{
	return uML_Action_context_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Action_context_spec()
{
	return uML_Action_context_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Action_context_()
{
	return uML_Action_context_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Action_input()
{
	return uML_Action_input;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Action_isLocallyReentrant()
{
	return uML_Action_isLocallyReentrant;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Action_localPostcondition()
{
	return uML_Action_localPostcondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Action_localPrecondition()
{
	return uML_Action_localPrecondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Action_output()
{
	return uML_Action_output;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActionExecutionSpecification()
{
	return uML_ActionExecutionSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActionExecutionSpecification_action()
{
	return uML_ActionExecutionSpecification_action;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActionExecutionSpecification_action_referenced()
{
	return uML_ActionExecutionSpecification_action_referenced;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActionInputPin()
{
	return uML_ActionInputPin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActionInputPin_fromAction()
{
	return uML_ActionInputPin_fromAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActionInputPin_input_pin()
{
	return uML_ActionInputPin_input_pin;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActionInputPin_no_control_or_object_flow()
{
	return uML_ActionInputPin_no_control_or_object_flow;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActionInputPin_one_output_pin()
{
	return uML_ActionInputPin_one_output_pin;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Activity()
{
	return uML_Activity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_edge()
{
	return uML_Activity_edge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_group()
{
	return uML_Activity_group;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_isReadOnly()
{
	return uML_Activity_isReadOnly;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_isSingleExecution()
{
	return uML_Activity_isSingleExecution;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Activity_maximum_one_parameter_node()
{
	return uML_Activity_maximum_one_parameter_node;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Activity_maximum_two_parameter_nodes()
{
	return uML_Activity_maximum_two_parameter_nodes;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_node()
{
	return uML_Activity_node;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_ownedGroup()
{
	return uML_Activity_ownedGroup;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_ownedNode()
{
	return uML_Activity_ownedNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_partition()
{
	return uML_Activity_partition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_structuredNode()
{
	return uML_Activity_structuredNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Activity_variable()
{
	return uML_Activity_variable;
}
std::shared_ptr<uml::Interface> UMLPackageImpl::get_UML_ActivityContent()
{
	return uML_ActivityContent;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ActivityContent_containingActivity_containingActivity()
{
	return uML_ActivityContent_containingActivity_containingActivity;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ActivityContent_containingActivity_()
{
	return uML_ActivityContent_containingActivity_;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActivityEdge()
{
	return uML_ActivityEdge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_activity()
{
	return uML_ActivityEdge_activity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_guard()
{
	return uML_ActivityEdge_guard;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_inGroup()
{
	return uML_ActivityEdge_inGroup;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_inPartition()
{
	return uML_ActivityEdge_inPartition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_inStructuredNode()
{
	return uML_ActivityEdge_inStructuredNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_interrupts()
{
	return uML_ActivityEdge_interrupts;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ActivityEdge_isConsistentWith_result()
{
	return uML_ActivityEdge_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityEdge_isConsistentWith_spec()
{
	return uML_ActivityEdge_isConsistentWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ActivityEdge_isConsistentWith_RedefinableElement()
{
	return uML_ActivityEdge_isConsistentWith_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ActivityEdge_isConsistentWith_RedefinableElement_UML_ActivityEdge_isConsistentWith_redefiningElement()
{
	return uML_ActivityEdge_isConsistentWith_RedefinableElement_UML_ActivityEdge_isConsistentWith_redefiningElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_redefinedEdge()
{
	return uML_ActivityEdge_redefinedEdge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_source()
{
	return uML_ActivityEdge_source;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityEdge_source_and_target()
{
	return uML_ActivityEdge_source_and_target;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_target()
{
	return uML_ActivityEdge_target;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityEdge_weight()
{
	return uML_ActivityEdge_weight;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActivityFinalNode()
{
	return uML_ActivityFinalNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActivityGroup()
{
	return uML_ActivityGroup;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityGroup_containedEdge()
{
	return uML_ActivityGroup_containedEdge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityGroup_containedNode()
{
	return uML_ActivityGroup_containedNode;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ActivityGroup_containingActivity_result()
{
	return uML_ActivityGroup_containingActivity_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityGroup_containingActivity_spec()
{
	return uML_ActivityGroup_containingActivity_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ActivityGroup_containingActivity_()
{
	return uML_ActivityGroup_containingActivity_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityGroup_inActivity()
{
	return uML_ActivityGroup_inActivity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityGroup_nodes_and_edges()
{
	return uML_ActivityGroup_nodes_and_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityGroup_not_contained()
{
	return uML_ActivityGroup_not_contained;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityGroup_subgroup()
{
	return uML_ActivityGroup_subgroup;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityGroup_superGroup()
{
	return uML_ActivityGroup_superGroup;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActivityNode()
{
	return uML_ActivityNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_activity()
{
	return uML_ActivityNode_activity;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ActivityNode_containingActivity_result()
{
	return uML_ActivityNode_containingActivity_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityNode_containingActivity_spec()
{
	return uML_ActivityNode_containingActivity_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ActivityNode_containingActivity_()
{
	return uML_ActivityNode_containingActivity_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_inGroup()
{
	return uML_ActivityNode_inGroup;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_inInterruptibleRegion()
{
	return uML_ActivityNode_inInterruptibleRegion;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_inPartition()
{
	return uML_ActivityNode_inPartition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_inStructuredNode()
{
	return uML_ActivityNode_inStructuredNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_incoming()
{
	return uML_ActivityNode_incoming;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ActivityNode_isConsistentWith_result()
{
	return uML_ActivityNode_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityNode_isConsistentWith_spec()
{
	return uML_ActivityNode_isConsistentWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ActivityNode_isConsistentWith_RedefinableElement()
{
	return uML_ActivityNode_isConsistentWith_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ActivityNode_isConsistentWith_RedefinableElement_UML_ActivityNode_isConsistentWith_redefiningElement()
{
	return uML_ActivityNode_isConsistentWith_RedefinableElement_UML_ActivityNode_isConsistentWith_redefiningElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_outgoing()
{
	return uML_ActivityNode_outgoing;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityNode_redefinedNode()
{
	return uML_ActivityNode_redefinedNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActivityParameterNode()
{
	return uML_ActivityParameterNode;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityParameterNode_has_parameters()
{
	return uML_ActivityParameterNode_has_parameters;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityParameterNode_no_edges()
{
	return uML_ActivityParameterNode_no_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityParameterNode_no_incoming_edges()
{
	return uML_ActivityParameterNode_no_incoming_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityParameterNode_no_outgoing_edges()
{
	return uML_ActivityParameterNode_no_outgoing_edges;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityParameterNode_parameter()
{
	return uML_ActivityParameterNode_parameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityParameterNode_same_type()
{
	return uML_ActivityParameterNode_same_type;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ActivityPartition()
{
	return uML_ActivityPartition;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityPartition_dimension_not_contained()
{
	return uML_ActivityPartition_dimension_not_contained;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityPartition_edge()
{
	return uML_ActivityPartition_edge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityPartition_isDimension()
{
	return uML_ActivityPartition_isDimension;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityPartition_isExternal()
{
	return uML_ActivityPartition_isExternal;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityPartition_node()
{
	return uML_ActivityPartition_node;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityPartition_represents()
{
	return uML_ActivityPartition_represents;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityPartition_represents_classifier()
{
	return uML_ActivityPartition_represents_classifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityPartition_represents_property()
{
	return uML_ActivityPartition_represents_property;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ActivityPartition_represents_property_and_is_contained()
{
	return uML_ActivityPartition_represents_property_and_is_contained;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityPartition_subpartition()
{
	return uML_ActivityPartition_subpartition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ActivityPartition_superPartition()
{
	return uML_ActivityPartition_superPartition;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Actor()
{
	return uML_Actor;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Actor_associations()
{
	return uML_Actor_associations;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Actor_must_have_name()
{
	return uML_Actor_must_have_name;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_AddStructuralFeatureValueAction()
{
	return uML_AddStructuralFeatureValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AddStructuralFeatureValueAction_insertAt()
{
	return uML_AddStructuralFeatureValueAction_insertAt;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AddStructuralFeatureValueAction_insertAt_pin()
{
	return uML_AddStructuralFeatureValueAction_insertAt_pin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AddStructuralFeatureValueAction_isReplaceAll()
{
	return uML_AddStructuralFeatureValueAction_isReplaceAll;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AddStructuralFeatureValueAction_required_value()
{
	return uML_AddStructuralFeatureValueAction_required_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_AddVariableValueAction()
{
	return uML_AddVariableValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AddVariableValueAction_insertAt()
{
	return uML_AddVariableValueAction_insertAt;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AddVariableValueAction_insertAt_pin()
{
	return uML_AddVariableValueAction_insertAt_pin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_AddVariableValueAction_isReplaceAll()
{
	return uML_AddVariableValueAction_isReplaceAll;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AddVariableValueAction_required_value()
{
	return uML_AddVariableValueAction_required_value;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_AggregationKind()
{
	return uML_AggregationKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_AggregationKind_composite()
{
	return uML_AggregationKind_composite;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_AggregationKind_none()
{
	return uML_AggregationKind_none;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_AggregationKind_shared()
{
	return uML_AggregationKind_shared;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_AnyReceiveEvent()
{
	return uML_AnyReceiveEvent;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Artifact()
{
	return uML_Artifact;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural()
{
	return uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_lower()
{
	return uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name()
{
	return uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type()
{
	return uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_upper()
{
	return uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Artifact_createOwnedAttribute_upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return()
{
	return uML_Artifact_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Artifact_createOwnedOperation_String_String_Type_Type()
{
	return uML_Artifact_createOwnedOperation_String_String_Type_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name()
{
	return uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames()
{
	return uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterNames;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes()
{
	return uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_parameterTypes;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType()
{
	return uML_Artifact_createOwnedOperation_String_String_Type_Type_UML_Artifact_createOwnedOperation_returnType;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Artifact_createOwnedOperation_String_String_Type_Type_return()
{
	return uML_Artifact_createOwnedOperation_String_String_Type_Type_return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Artifact_fileName()
{
	return uML_Artifact_fileName;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Artifact_manifestation()
{
	return uML_Artifact_manifestation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Artifact_nestedArtifact()
{
	return uML_Artifact_nestedArtifact;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Artifact_ownedAttribute()
{
	return uML_Artifact_ownedAttribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Artifact_ownedOperation()
{
	return uML_Artifact_ownedOperation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Association()
{
	return uML_Association;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Association_association_ends()
{
	return uML_Association_association_ends;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Association_binary_associations()
{
	return uML_Association_binary_associations;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Association_endType()
{
	return uML_Association_endType;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Association_endType_result()
{
	return uML_Association_endType_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Association_endType_spec()
{
	return uML_Association_endType_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Association_endType_()
{
	return uML_Association_endType_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Association_ends_must_be_typed()
{
	return uML_Association_ends_must_be_typed;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Association_isBinary_()
{
	return uML_Association_isBinary_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Association_isBinary__return()
{
	return uML_Association_isBinary__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Association_isDerived()
{
	return uML_Association_isDerived;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Association_memberEnd()
{
	return uML_Association_memberEnd;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Association_navigableOwnedEnd()
{
	return uML_Association_navigableOwnedEnd;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Association_ownedEnd()
{
	return uML_Association_ownedEnd;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Association_specialized_end_number()
{
	return uML_Association_specialized_end_number;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Association_specialized_end_types()
{
	return uML_Association_specialized_end_types;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_AssociationClass()
{
	return uML_AssociationClass;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AssociationClass_cannot_be_defined()
{
	return uML_AssociationClass_cannot_be_defined;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_AssociationClass_disjoint_attributes_ends()
{
	return uML_AssociationClass_disjoint_attributes_ends;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Behavior()
{
	return uML_Behavior;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Behavior_behavioredClassifier_result()
{
	return uML_Behavior_behavioredClassifier_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Behavior_behavioredClassifier_spec()
{
	return uML_Behavior_behavioredClassifier_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Behavior_behavioredClassifier_Element()
{
	return uML_Behavior_behavioredClassifier_Element;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Behavior_behavioredClassifier_Element_UML_Behavior_behavioredClassifier_from()
{
	return uML_Behavior_behavioredClassifier_Element_UML_Behavior_behavioredClassifier_from;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_context()
{
	return uML_Behavior_context;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Behavior_context_result()
{
	return uML_Behavior_context_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Behavior_context_spec()
{
	return uML_Behavior_context_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Behavior_context_()
{
	return uML_Behavior_context_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Behavior_feature_of_context_classifier()
{
	return uML_Behavior_feature_of_context_classifier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Behavior_inputParameters_result()
{
	return uML_Behavior_inputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Behavior_inputParameters_spec()
{
	return uML_Behavior_inputParameters_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Behavior_inputParameters_()
{
	return uML_Behavior_inputParameters_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_isReentrant()
{
	return uML_Behavior_isReentrant;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Behavior_most_one_behavior()
{
	return uML_Behavior_most_one_behavior;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Behavior_outputParameters_result()
{
	return uML_Behavior_outputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Behavior_outputParameters_spec()
{
	return uML_Behavior_outputParameters_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Behavior_outputParameters_()
{
	return uML_Behavior_outputParameters_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_ownedParameter()
{
	return uML_Behavior_ownedParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_ownedParameterSet()
{
	return uML_Behavior_ownedParameterSet;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Behavior_parameters_match()
{
	return uML_Behavior_parameters_match;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_postcondition()
{
	return uML_Behavior_postcondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_precondition()
{
	return uML_Behavior_precondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_redefinedBehavior()
{
	return uML_Behavior_redefinedBehavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Behavior_specification()
{
	return uML_Behavior_specification;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_BehaviorExecutionSpecification()
{
	return uML_BehaviorExecutionSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehaviorExecutionSpecification_behavior()
{
	return uML_BehaviorExecutionSpecification_behavior;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_BehavioralFeature()
{
	return uML_BehavioralFeature;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BehavioralFeature_abstract_no_method()
{
	return uML_BehavioralFeature_abstract_no_method;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioralFeature_concurrency()
{
	return uML_BehavioralFeature_concurrency;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_BehavioralFeature_createReturnResult_String_Type()
{
	return uML_BehavioralFeature_createReturnResult_String_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name()
{
	return uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type()
{
	return uML_BehavioralFeature_createReturnResult_String_Type_UML_BehavioralFeature_createReturnResult_type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_createReturnResult_String_Type_return()
{
	return uML_BehavioralFeature_createReturnResult_String_Type_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_inputParameters_result()
{
	return uML_BehavioralFeature_inputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BehavioralFeature_inputParameters_spec()
{
	return uML_BehavioralFeature_inputParameters_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_BehavioralFeature_inputParameters_()
{
	return uML_BehavioralFeature_inputParameters_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioralFeature_isAbstract()
{
	return uML_BehavioralFeature_isAbstract;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_isDistinguishableFrom_result()
{
	return uML_BehavioralFeature_isDistinguishableFrom_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BehavioralFeature_isDistinguishableFrom_spec()
{
	return uML_BehavioralFeature_isDistinguishableFrom_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace()
{
	return uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_n()
{
	return uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_n;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_ns()
{
	return uML_BehavioralFeature_isDistinguishableFrom_NamedElement_Namespace_UML_BehavioralFeature_isDistinguishableFrom_ns;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioralFeature_method()
{
	return uML_BehavioralFeature_method;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioralFeature_outputParameters_result()
{
	return uML_BehavioralFeature_outputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BehavioralFeature_outputParameters_spec()
{
	return uML_BehavioralFeature_outputParameters_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_BehavioralFeature_outputParameters_()
{
	return uML_BehavioralFeature_outputParameters_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioralFeature_ownedParameter()
{
	return uML_BehavioralFeature_ownedParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioralFeature_ownedParameterSet()
{
	return uML_BehavioralFeature_ownedParameterSet;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioralFeature_raisedException()
{
	return uML_BehavioralFeature_raisedException;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_BehavioredClassifier()
{
	return uML_BehavioredClassifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BehavioredClassifier_class_behavior()
{
	return uML_BehavioredClassifier_class_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioredClassifier_classifierBehavior()
{
	return uML_BehavioredClassifier_classifierBehavior;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_BehavioredClassifier_getAllImplementedInterfaces_()
{
	return uML_BehavioredClassifier_getAllImplementedInterfaces_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioredClassifier_getAllImplementedInterfaces__return()
{
	return uML_BehavioredClassifier_getAllImplementedInterfaces__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_BehavioredClassifier_getImplementedInterfaces_()
{
	return uML_BehavioredClassifier_getImplementedInterfaces_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_BehavioredClassifier_getImplementedInterfaces__return()
{
	return uML_BehavioredClassifier_getImplementedInterfaces__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioredClassifier_interfaceRealization()
{
	return uML_BehavioredClassifier_interfaceRealization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BehavioredClassifier_ownedBehavior()
{
	return uML_BehavioredClassifier_ownedBehavior;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_BroadcastSignalAction()
{
	return uML_BroadcastSignalAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BroadcastSignalAction_no_onport()
{
	return uML_BroadcastSignalAction_no_onport;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BroadcastSignalAction_number_of_arguments()
{
	return uML_BroadcastSignalAction_number_of_arguments;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_BroadcastSignalAction_signal()
{
	return uML_BroadcastSignalAction_signal;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_BroadcastSignalAction_type_ordering_multiplicity()
{
	return uML_BroadcastSignalAction_type_ordering_multiplicity;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CallAction()
{
	return uML_CallAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallAction_argument_pins()
{
	return uML_CallAction_argument_pins;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_CallAction_inputParameters_result()
{
	return uML_CallAction_inputParameters_result;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_CallAction_inputParameters_()
{
	return uML_CallAction_inputParameters_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CallAction_isSynchronous()
{
	return uML_CallAction_isSynchronous;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_CallAction_outputParameters_result()
{
	return uML_CallAction_outputParameters_result;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_CallAction_outputParameters_()
{
	return uML_CallAction_outputParameters_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CallAction_result()
{
	return uML_CallAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallAction_result_pins()
{
	return uML_CallAction_result_pins;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallAction_synchronous_call()
{
	return uML_CallAction_synchronous_call;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CallBehaviorAction()
{
	return uML_CallBehaviorAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CallBehaviorAction_behavior()
{
	return uML_CallBehaviorAction_behavior;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_CallBehaviorAction_inputParameters_result()
{
	return uML_CallBehaviorAction_inputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallBehaviorAction_inputParameters_spec()
{
	return uML_CallBehaviorAction_inputParameters_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_CallBehaviorAction_inputParameters_()
{
	return uML_CallBehaviorAction_inputParameters_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallBehaviorAction_no_onport()
{
	return uML_CallBehaviorAction_no_onport;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_CallBehaviorAction_outputParameters_result()
{
	return uML_CallBehaviorAction_outputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallBehaviorAction_outputParameters_spec()
{
	return uML_CallBehaviorAction_outputParameters_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_CallBehaviorAction_outputParameters_()
{
	return uML_CallBehaviorAction_outputParameters_;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_CallConcurrencyKind()
{
	return uML_CallConcurrencyKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_CallConcurrencyKind_concurrent()
{
	return uML_CallConcurrencyKind_concurrent;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_CallConcurrencyKind_guarded()
{
	return uML_CallConcurrencyKind_guarded;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_CallConcurrencyKind_sequential()
{
	return uML_CallConcurrencyKind_sequential;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CallEvent()
{
	return uML_CallEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CallEvent_operation()
{
	return uML_CallEvent_operation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CallOperationAction()
{
	return uML_CallOperationAction;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_CallOperationAction_inputParameters_result()
{
	return uML_CallOperationAction_inputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallOperationAction_inputParameters_spec()
{
	return uML_CallOperationAction_inputParameters_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_CallOperationAction_inputParameters_()
{
	return uML_CallOperationAction_inputParameters_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CallOperationAction_operation()
{
	return uML_CallOperationAction_operation;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_CallOperationAction_outputParameters_result()
{
	return uML_CallOperationAction_outputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallOperationAction_outputParameters_spec()
{
	return uML_CallOperationAction_outputParameters_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_CallOperationAction_outputParameters_()
{
	return uML_CallOperationAction_outputParameters_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CallOperationAction_target()
{
	return uML_CallOperationAction_target;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CallOperationAction_type_target_pin()
{
	return uML_CallOperationAction_type_target_pin;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CentralBufferNode()
{
	return uML_CentralBufferNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ChangeEvent()
{
	return uML_ChangeEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ChangeEvent_changeExpression()
{
	return uML_ChangeEvent_changeExpression;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Class()
{
	return uML_Class;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Class_createOwnedOperation_String_String_Type_Type()
{
	return uML_Class_createOwnedOperation_String_String_Type_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name()
{
	return uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames()
{
	return uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterNames;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes()
{
	return uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_parameterTypes;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType()
{
	return uML_Class_createOwnedOperation_String_String_Type_Type_UML_Class_createOwnedOperation_returnType;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_createOwnedOperation_String_String_Type_Type_return()
{
	return uML_Class_createOwnedOperation_String_String_Type_Type_return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_extension()
{
	return uML_Class_extension;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_extension_result()
{
	return uML_Class_extension_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Class_extension_spec()
{
	return uML_Class_extension_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Class_extension_()
{
	return uML_Class_extension_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_isAbstract()
{
	return uML_Class_isAbstract;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_isActive()
{
	return uML_Class_isActive;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Class_isMetaclass_()
{
	return uML_Class_isMetaclass_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_isMetaclass__return()
{
	return uML_Class_isMetaclass__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_nestedClassifier()
{
	return uML_Class_nestedClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_ownedAttribute()
{
	return uML_Class_ownedAttribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_ownedOperation()
{
	return uML_Class_ownedOperation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_ownedReception()
{
	return uML_Class_ownedReception;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Class_passive_class()
{
	return uML_Class_passive_class;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Class_superClass()
{
	return uML_Class_superClass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Class_superClass_result()
{
	return uML_Class_superClass_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Class_superClass_spec()
{
	return uML_Class_superClass_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Class_superClass_()
{
	return uML_Class_superClass_;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Classifier()
{
	return uML_Classifier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_allAttributes_result()
{
	return uML_Classifier_allAttributes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_allAttributes_spec()
{
	return uML_Classifier_allAttributes_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_allAttributes_()
{
	return uML_Classifier_allAttributes_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_allFeatures_result()
{
	return uML_Classifier_allFeatures_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_allFeatures_spec()
{
	return uML_Classifier_allFeatures_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_allFeatures_()
{
	return uML_Classifier_allFeatures_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_allParents_result()
{
	return uML_Classifier_allParents_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_allParents_spec()
{
	return uML_Classifier_allParents_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_allParents_()
{
	return uML_Classifier_allParents_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_allRealizedInterfaces_result()
{
	return uML_Classifier_allRealizedInterfaces_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_allRealizedInterfaces_spec()
{
	return uML_Classifier_allRealizedInterfaces_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_allRealizedInterfaces_()
{
	return uML_Classifier_allRealizedInterfaces_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_allSlottableFeatures_result()
{
	return uML_Classifier_allSlottableFeatures_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_allSlottableFeatures_spec()
{
	return uML_Classifier_allSlottableFeatures_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_allSlottableFeatures_()
{
	return uML_Classifier_allSlottableFeatures_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_allUsedInterfaces_result()
{
	return uML_Classifier_allUsedInterfaces_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_allUsedInterfaces_spec()
{
	return uML_Classifier_allUsedInterfaces_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_allUsedInterfaces_()
{
	return uML_Classifier_allUsedInterfaces_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_attribute()
{
	return uML_Classifier_attribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_collaborationUse()
{
	return uML_Classifier_collaborationUse;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_conformsTo_result()
{
	return uML_Classifier_conformsTo_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_conformsTo_spec()
{
	return uML_Classifier_conformsTo_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_conformsTo_Type()
{
	return uML_Classifier_conformsTo_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_conformsTo_Type_UML_Classifier_conformsTo_other()
{
	return uML_Classifier_conformsTo_Type_UML_Classifier_conformsTo_other;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_directlyRealizedInterfaces_result()
{
	return uML_Classifier_directlyRealizedInterfaces_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_directlyRealizedInterfaces_spec()
{
	return uML_Classifier_directlyRealizedInterfaces_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_directlyRealizedInterfaces_()
{
	return uML_Classifier_directlyRealizedInterfaces_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_directlyUsedInterfaces_result()
{
	return uML_Classifier_directlyUsedInterfaces_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_directlyUsedInterfaces_spec()
{
	return uML_Classifier_directlyUsedInterfaces_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_directlyUsedInterfaces_()
{
	return uML_Classifier_directlyUsedInterfaces_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_feature()
{
	return uML_Classifier_feature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_general()
{
	return uML_Classifier_general;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_general_result()
{
	return uML_Classifier_general_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_general_spec()
{
	return uML_Classifier_general_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_general_()
{
	return uML_Classifier_general_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_generalization()
{
	return uML_Classifier_generalization;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_getAllAttributes_()
{
	return uML_Classifier_getAllAttributes_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getAllAttributes__return()
{
	return uML_Classifier_getAllAttributes__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_getAllOperations_()
{
	return uML_Classifier_getAllOperations_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getAllOperations__return()
{
	return uML_Classifier_getAllOperations__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_getAllUsedInterfaces_()
{
	return uML_Classifier_getAllUsedInterfaces_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getAllUsedInterfaces__return()
{
	return uML_Classifier_getAllUsedInterfaces__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type()
{
	return uML_Classifier_getOperation_String_String_Type;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_Boolean()
{
	return uML_Classifier_getOperation_String_String_Type_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_ignoreCase()
{
	return uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_ignoreCase;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name()
{
	return uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames()
{
	return uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterNames;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes()
{
	return uML_Classifier_getOperation_String_String_Type_Boolean_UML_Classifier_getOperation_parameterTypes;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_Boolean_return()
{
	return uML_Classifier_getOperation_String_String_Type_Boolean_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name()
{
	return uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames()
{
	return uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterNames;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes()
{
	return uML_Classifier_getOperation_String_String_Type_UML_Classifier_getOperation_parameterTypes;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperation_String_String_Type_return()
{
	return uML_Classifier_getOperation_String_String_Type_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_getOperations_()
{
	return uML_Classifier_getOperations_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getOperations__return()
{
	return uML_Classifier_getOperations__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_getUsedInterfaces_()
{
	return uML_Classifier_getUsedInterfaces_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_getUsedInterfaces__return()
{
	return uML_Classifier_getUsedInterfaces__return;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_hasVisibilityOf_pre()
{
	return uML_Classifier_hasVisibilityOf_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_hasVisibilityOf_result()
{
	return uML_Classifier_hasVisibilityOf_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_hasVisibilityOf_spec()
{
	return uML_Classifier_hasVisibilityOf_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_hasVisibilityOf_NamedElement()
{
	return uML_Classifier_hasVisibilityOf_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_hasVisibilityOf_NamedElement_UML_Classifier_hasVisibilityOf_n()
{
	return uML_Classifier_hasVisibilityOf_NamedElement_UML_Classifier_hasVisibilityOf_n;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_inherit_result()
{
	return uML_Classifier_inherit_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_inherit_spec()
{
	return uML_Classifier_inherit_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_inherit_NamedElement()
{
	return uML_Classifier_inherit_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs()
{
	return uML_Classifier_inherit_NamedElement_UML_Classifier_inherit_inhs;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_inheritableMembers_pre()
{
	return uML_Classifier_inheritableMembers_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_inheritableMembers_result()
{
	return uML_Classifier_inheritableMembers_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_inheritableMembers_spec()
{
	return uML_Classifier_inheritableMembers_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_inheritableMembers_Classifier()
{
	return uML_Classifier_inheritableMembers_Classifier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_inheritableMembers_Classifier_UML_Classifier_inheritableMembers_c()
{
	return uML_Classifier_inheritableMembers_Classifier_UML_Classifier_inheritableMembers_c;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_inheritedMember()
{
	return uML_Classifier_inheritedMember;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_inheritedMember_result()
{
	return uML_Classifier_inheritedMember_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_inheritedMember_spec()
{
	return uML_Classifier_inheritedMember_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_inheritedMember_()
{
	return uML_Classifier_inheritedMember_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_isAbstract()
{
	return uML_Classifier_isAbstract;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_isFinalSpecialization()
{
	return uML_Classifier_isFinalSpecialization;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_isSubstitutableFor_result()
{
	return uML_Classifier_isSubstitutableFor_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_isSubstitutableFor_spec()
{
	return uML_Classifier_isSubstitutableFor_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_isSubstitutableFor_Classifier()
{
	return uML_Classifier_isSubstitutableFor_Classifier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_isSubstitutableFor_Classifier_UML_Classifier_isSubstitutableFor_contract()
{
	return uML_Classifier_isSubstitutableFor_Classifier_UML_Classifier_isSubstitutableFor_contract;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_isTemplate_result()
{
	return uML_Classifier_isTemplate_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_isTemplate_spec()
{
	return uML_Classifier_isTemplate_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_isTemplate_()
{
	return uML_Classifier_isTemplate_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_maps_to_generalization_set()
{
	return uML_Classifier_maps_to_generalization_set;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_maySpecializeType_result()
{
	return uML_Classifier_maySpecializeType_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_maySpecializeType_spec()
{
	return uML_Classifier_maySpecializeType_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_maySpecializeType_Classifier()
{
	return uML_Classifier_maySpecializeType_Classifier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_maySpecializeType_Classifier_UML_Classifier_maySpecializeType_c()
{
	return uML_Classifier_maySpecializeType_Classifier_UML_Classifier_maySpecializeType_c;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_no_cycles_in_generalization()
{
	return uML_Classifier_no_cycles_in_generalization;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_non_final_parents()
{
	return uML_Classifier_non_final_parents;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_ownedTemplateSignature()
{
	return uML_Classifier_ownedTemplateSignature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_ownedUseCase()
{
	return uML_Classifier_ownedUseCase;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Classifier_parents_result()
{
	return uML_Classifier_parents_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_parents_spec()
{
	return uML_Classifier_parents_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Classifier_parents_()
{
	return uML_Classifier_parents_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_powertypeExtent()
{
	return uML_Classifier_powertypeExtent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_redefinedClassifier()
{
	return uML_Classifier_redefinedClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_representation()
{
	return uML_Classifier_representation;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Classifier_specialize_type()
{
	return uML_Classifier_specialize_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_substitution()
{
	return uML_Classifier_substitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_templateParameter()
{
	return uML_Classifier_templateParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Classifier_useCase()
{
	return uML_Classifier_useCase;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ClassifierTemplateParameter()
{
	return uML_ClassifierTemplateParameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClassifierTemplateParameter_actual_is_classifier()
{
	return uML_ClassifierTemplateParameter_actual_is_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ClassifierTemplateParameter_allowSubstitutable()
{
	return uML_ClassifierTemplateParameter_allowSubstitutable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ClassifierTemplateParameter_constrainingClassifier()
{
	return uML_ClassifierTemplateParameter_constrainingClassifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClassifierTemplateParameter_constraining_classifiers_constrain_args()
{
	return uML_ClassifierTemplateParameter_constraining_classifiers_constrain_args;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClassifierTemplateParameter_constraining_classifiers_constrain_parametered_element()
{
	return uML_ClassifierTemplateParameter_constraining_classifiers_constrain_parametered_element;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClassifierTemplateParameter_has_constraining_classifier()
{
	return uML_ClassifierTemplateParameter_has_constraining_classifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClassifierTemplateParameter_matching_abstract()
{
	return uML_ClassifierTemplateParameter_matching_abstract;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ClassifierTemplateParameter_parameteredElement()
{
	return uML_ClassifierTemplateParameter_parameteredElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClassifierTemplateParameter_parametered_element_no_features()
{
	return uML_ClassifierTemplateParameter_parametered_element_no_features;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Clause()
{
	return uML_Clause;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Clause_body()
{
	return uML_Clause_body;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Clause_bodyOutput()
{
	return uML_Clause_bodyOutput;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Clause_body_output_pins()
{
	return uML_Clause_body_output_pins;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Clause_decider()
{
	return uML_Clause_decider;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Clause_decider_output()
{
	return uML_Clause_decider_output;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Clause_predecessorClause()
{
	return uML_Clause_predecessorClause;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Clause_successorClause()
{
	return uML_Clause_successorClause;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Clause_test()
{
	return uML_Clause_test;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Clause_test_and_body()
{
	return uML_Clause_test_and_body;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ClearAssociationAction()
{
	return uML_ClearAssociationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ClearAssociationAction_association()
{
	return uML_ClearAssociationAction_association;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClearAssociationAction_multiplicity()
{
	return uML_ClearAssociationAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ClearAssociationAction_object()
{
	return uML_ClearAssociationAction_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClearAssociationAction_same_type()
{
	return uML_ClearAssociationAction_same_type;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ClearStructuralFeatureAction()
{
	return uML_ClearStructuralFeatureAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClearStructuralFeatureAction_multiplicity_of_result()
{
	return uML_ClearStructuralFeatureAction_multiplicity_of_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ClearStructuralFeatureAction_result()
{
	return uML_ClearStructuralFeatureAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ClearStructuralFeatureAction_type_of_result()
{
	return uML_ClearStructuralFeatureAction_type_of_result;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ClearVariableAction()
{
	return uML_ClearVariableAction;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Collaboration()
{
	return uML_Collaboration;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Collaboration_collaborationRole()
{
	return uML_Collaboration_collaborationRole;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CollaborationUse()
{
	return uML_CollaborationUse;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CollaborationUse_client_elements()
{
	return uML_CollaborationUse_client_elements;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CollaborationUse_connectors()
{
	return uML_CollaborationUse_connectors;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CollaborationUse_every_role()
{
	return uML_CollaborationUse_every_role;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CollaborationUse_roleBinding()
{
	return uML_CollaborationUse_roleBinding;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CollaborationUse_type()
{
	return uML_CollaborationUse_type;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CombinedFragment()
{
	return uML_CombinedFragment;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CombinedFragment_break()
{
	return uML_CombinedFragment_break;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CombinedFragment_cfragmentGate()
{
	return uML_CombinedFragment_cfragmentGate;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CombinedFragment_consider_and_ignore()
{
	return uML_CombinedFragment_consider_and_ignore;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CombinedFragment_interactionOperator()
{
	return uML_CombinedFragment_interactionOperator;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CombinedFragment_operand()
{
	return uML_CombinedFragment_operand;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CombinedFragment_opt_loop_break_neg()
{
	return uML_CombinedFragment_opt_loop_break_neg;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Comment()
{
	return uML_Comment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Comment_annotatedElement()
{
	return uML_Comment_annotatedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Comment_body()
{
	return uML_Comment_body;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CommunicationPath()
{
	return uML_CommunicationPath;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CommunicationPath_association_ends()
{
	return uML_CommunicationPath_association_ends;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Component()
{
	return uML_Component;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Component_createOwnedClass_String_Boolean()
{
	return uML_Component_createOwnedClass_String_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_isAbstract()
{
	return uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_isAbstract;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_name()
{
	return uML_Component_createOwnedClass_String_Boolean_UML_Component_createOwnedClass_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedClass_String_Boolean_return()
{
	return uML_Component_createOwnedClass_String_Boolean_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Component_createOwnedEnumeration_String()
{
	return uML_Component_createOwnedEnumeration_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedEnumeration_String_UML_Component_createOwnedEnumeration_name()
{
	return uML_Component_createOwnedEnumeration_String_UML_Component_createOwnedEnumeration_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedEnumeration_String_return()
{
	return uML_Component_createOwnedEnumeration_String_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Component_createOwnedInterface_String()
{
	return uML_Component_createOwnedInterface_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedInterface_String_UML_Component_createOwnedInterface_name()
{
	return uML_Component_createOwnedInterface_String_UML_Component_createOwnedInterface_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedInterface_String_return()
{
	return uML_Component_createOwnedInterface_String_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Component_createOwnedPrimitiveType_String()
{
	return uML_Component_createOwnedPrimitiveType_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedPrimitiveType_String_UML_Component_createOwnedPrimitiveType_name()
{
	return uML_Component_createOwnedPrimitiveType_String_UML_Component_createOwnedPrimitiveType_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_createOwnedPrimitiveType_String_return()
{
	return uML_Component_createOwnedPrimitiveType_String_return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Component_isIndirectlyInstantiated()
{
	return uML_Component_isIndirectlyInstantiated;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Component_no_nested_classifiers()
{
	return uML_Component_no_nested_classifiers;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Component_no_packaged_elements()
{
	return uML_Component_no_packaged_elements;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Component_packagedElement()
{
	return uML_Component_packagedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Component_provided()
{
	return uML_Component_provided;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_provided_result()
{
	return uML_Component_provided_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Component_provided_spec()
{
	return uML_Component_provided_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Component_provided_()
{
	return uML_Component_provided_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Component_realization()
{
	return uML_Component_realization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Component_required()
{
	return uML_Component_required;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Component_required_result()
{
	return uML_Component_required_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Component_required_spec()
{
	return uML_Component_required_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Component_required_()
{
	return uML_Component_required_;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ComponentRealization()
{
	return uML_ComponentRealization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ComponentRealization_abstraction()
{
	return uML_ComponentRealization_abstraction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ComponentRealization_realizingClassifier()
{
	return uML_ComponentRealization_realizingClassifier;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ConditionalNode()
{
	return uML_ConditionalNode;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ConditionalNode_allActions_result()
{
	return uML_ConditionalNode_allActions_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConditionalNode_allActions_spec()
{
	return uML_ConditionalNode_allActions_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ConditionalNode_allActions_()
{
	return uML_ConditionalNode_allActions_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConditionalNode_clause()
{
	return uML_ConditionalNode_clause;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConditionalNode_clause_no_predecessor()
{
	return uML_ConditionalNode_clause_no_predecessor;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConditionalNode_executable_nodes()
{
	return uML_ConditionalNode_executable_nodes;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConditionalNode_isAssured()
{
	return uML_ConditionalNode_isAssured;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConditionalNode_isDeterminate()
{
	return uML_ConditionalNode_isDeterminate;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConditionalNode_matching_output_pins()
{
	return uML_ConditionalNode_matching_output_pins;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConditionalNode_no_input_pins()
{
	return uML_ConditionalNode_no_input_pins;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConditionalNode_one_clause_with_executable_node()
{
	return uML_ConditionalNode_one_clause_with_executable_node;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConditionalNode_result()
{
	return uML_ConditionalNode_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConditionalNode_result_no_incoming()
{
	return uML_ConditionalNode_result_no_incoming;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ConnectableElement()
{
	return uML_ConnectableElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectableElement_end()
{
	return uML_ConnectableElement_end;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ConnectableElement_end_result()
{
	return uML_ConnectableElement_end_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectableElement_end_spec()
{
	return uML_ConnectableElement_end_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ConnectableElement_end_()
{
	return uML_ConnectableElement_end_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectableElement_templateParameter()
{
	return uML_ConnectableElement_templateParameter;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ConnectableElementTemplateParameter()
{
	return uML_ConnectableElementTemplateParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectableElementTemplateParameter_parameteredElement()
{
	return uML_ConnectableElementTemplateParameter_parameteredElement;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ConnectionPointReference()
{
	return uML_ConnectionPointReference;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectionPointReference_entry()
{
	return uML_ConnectionPointReference_entry;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectionPointReference_entry_pseudostates()
{
	return uML_ConnectionPointReference_entry_pseudostates;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectionPointReference_exit()
{
	return uML_ConnectionPointReference_exit;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectionPointReference_exit_pseudostates()
{
	return uML_ConnectionPointReference_exit_pseudostates;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectionPointReference_state()
{
	return uML_ConnectionPointReference_state;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Connector()
{
	return uML_Connector;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Connector_contract()
{
	return uML_Connector_contract;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Connector_end()
{
	return uML_Connector_end;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Connector_kind()
{
	return uML_Connector_kind;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Connector_kind_result()
{
	return uML_Connector_kind_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Connector_kind_spec()
{
	return uML_Connector_kind_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Connector_kind_()
{
	return uML_Connector_kind_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Connector_redefinedConnector()
{
	return uML_Connector_redefinedConnector;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Connector_roles()
{
	return uML_Connector_roles;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Connector_type()
{
	return uML_Connector_type;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Connector_types()
{
	return uML_Connector_types;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ConnectorEnd()
{
	return uML_ConnectorEnd;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectorEnd_definingEnd()
{
	return uML_ConnectorEnd_definingEnd;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ConnectorEnd_definingEnd_result()
{
	return uML_ConnectorEnd_definingEnd_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectorEnd_definingEnd_spec()
{
	return uML_ConnectorEnd_definingEnd_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ConnectorEnd_definingEnd_()
{
	return uML_ConnectorEnd_definingEnd_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectorEnd_multiplicity()
{
	return uML_ConnectorEnd_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectorEnd_partWithPort()
{
	return uML_ConnectorEnd_partWithPort;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectorEnd_part_with_port_empty()
{
	return uML_ConnectorEnd_part_with_port_empty;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConnectorEnd_role()
{
	return uML_ConnectorEnd_role;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectorEnd_role_and_part_with_port()
{
	return uML_ConnectorEnd_role_and_part_with_port;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConnectorEnd_self_part_with_port()
{
	return uML_ConnectorEnd_self_part_with_port;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_ConnectorKind()
{
	return uML_ConnectorKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ConnectorKind_assembly()
{
	return uML_ConnectorKind_assembly;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ConnectorKind_delegation()
{
	return uML_ConnectorKind_delegation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ConsiderIgnoreFragment()
{
	return uML_ConsiderIgnoreFragment;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConsiderIgnoreFragment_consider_or_ignore()
{
	return uML_ConsiderIgnoreFragment_consider_or_ignore;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ConsiderIgnoreFragment_message()
{
	return uML_ConsiderIgnoreFragment_message;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ConsiderIgnoreFragment_type()
{
	return uML_ConsiderIgnoreFragment_type;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Constraint()
{
	return uML_Constraint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Constraint_boolean_value()
{
	return uML_Constraint_boolean_value;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Constraint_constrainedElement()
{
	return uML_Constraint_constrainedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Constraint_context()
{
	return uML_Constraint_context;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Constraint_no_side_effects()
{
	return uML_Constraint_no_side_effects;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Constraint_not_apply_to_self()
{
	return uML_Constraint_not_apply_to_self;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Constraint_specification()
{
	return uML_Constraint_specification;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Continuation()
{
	return uML_Continuation;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Continuation_first_or_last_interaction_fragment()
{
	return uML_Continuation_first_or_last_interaction_fragment;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Continuation_global()
{
	return uML_Continuation_global;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Continuation_same_name()
{
	return uML_Continuation_same_name;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Continuation_setting()
{
	return uML_Continuation_setting;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ControlFlow()
{
	return uML_ControlFlow;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ControlFlow_object_nodes()
{
	return uML_ControlFlow_object_nodes;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ControlNode()
{
	return uML_ControlNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CreateLinkAction()
{
	return uML_CreateLinkAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateLinkAction_association_not_abstract()
{
	return uML_CreateLinkAction_association_not_abstract;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CreateLinkAction_endData()
{
	return uML_CreateLinkAction_endData;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CreateLinkObjectAction()
{
	return uML_CreateLinkObjectAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateLinkObjectAction_association_class()
{
	return uML_CreateLinkObjectAction_association_class;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateLinkObjectAction_multiplicity()
{
	return uML_CreateLinkObjectAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CreateLinkObjectAction_result()
{
	return uML_CreateLinkObjectAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateLinkObjectAction_type_of_result()
{
	return uML_CreateLinkObjectAction_type_of_result;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_CreateObjectAction()
{
	return uML_CreateObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CreateObjectAction_classifier()
{
	return uML_CreateObjectAction_classifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateObjectAction_classifier_not_abstract()
{
	return uML_CreateObjectAction_classifier_not_abstract;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateObjectAction_classifier_not_association_class()
{
	return uML_CreateObjectAction_classifier_not_association_class;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateObjectAction_multiplicity()
{
	return uML_CreateObjectAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_CreateObjectAction_result()
{
	return uML_CreateObjectAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_CreateObjectAction_same_type()
{
	return uML_CreateObjectAction_same_type;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DataStoreNode()
{
	return uML_DataStoreNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DataType()
{
	return uML_DataType;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural()
{
	return uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_lower()
{
	return uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name()
{
	return uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type()
{
	return uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_upper()
{
	return uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_DataType_createOwnedAttribute_upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return()
{
	return uML_DataType_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_DataType_createOwnedOperation_String_String_Type_Type()
{
	return uML_DataType_createOwnedOperation_String_String_Type_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name()
{
	return uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames()
{
	return uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterNames;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes()
{
	return uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_parameterTypes;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType()
{
	return uML_DataType_createOwnedOperation_String_String_Type_Type_UML_DataType_createOwnedOperation_returnType;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DataType_createOwnedOperation_String_String_Type_Type_return()
{
	return uML_DataType_createOwnedOperation_String_String_Type_Type_return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DataType_ownedAttribute()
{
	return uML_DataType_ownedAttribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DataType_ownedOperation()
{
	return uML_DataType_ownedOperation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DecisionNode()
{
	return uML_DecisionNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DecisionNode_decisionInput()
{
	return uML_DecisionNode_decisionInput;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DecisionNode_decisionInputFlow()
{
	return uML_DecisionNode_decisionInputFlow;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_decision_input_flow_incoming()
{
	return uML_DecisionNode_decision_input_flow_incoming;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_edges()
{
	return uML_DecisionNode_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_incoming_control_one_input_parameter()
{
	return uML_DecisionNode_incoming_control_one_input_parameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_incoming_object_one_input_parameter()
{
	return uML_DecisionNode_incoming_object_one_input_parameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_incoming_outgoing_edges()
{
	return uML_DecisionNode_incoming_outgoing_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_parameters()
{
	return uML_DecisionNode_parameters;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_two_input_parameters()
{
	return uML_DecisionNode_two_input_parameters;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DecisionNode_zero_input_parameters()
{
	return uML_DecisionNode_zero_input_parameters;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Dependency()
{
	return uML_Dependency;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Dependency_client()
{
	return uML_Dependency_client;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Dependency_supplier()
{
	return uML_Dependency_supplier;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DeployedArtifact()
{
	return uML_DeployedArtifact;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Deployment()
{
	return uML_Deployment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Deployment_configuration()
{
	return uML_Deployment_configuration;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Deployment_deployedArtifact()
{
	return uML_Deployment_deployedArtifact;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Deployment_location()
{
	return uML_Deployment_location;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DeploymentSpecification()
{
	return uML_DeploymentSpecification;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DeploymentSpecification_deployed_elements()
{
	return uML_DeploymentSpecification_deployed_elements;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DeploymentSpecification_deployment()
{
	return uML_DeploymentSpecification_deployment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DeploymentSpecification_deploymentLocation()
{
	return uML_DeploymentSpecification_deploymentLocation;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DeploymentSpecification_deployment_target()
{
	return uML_DeploymentSpecification_deployment_target;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DeploymentSpecification_executionLocation()
{
	return uML_DeploymentSpecification_executionLocation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DeploymentTarget()
{
	return uML_DeploymentTarget;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DeploymentTarget_deployedElement()
{
	return uML_DeploymentTarget_deployedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_DeploymentTarget_deployedElement_result()
{
	return uML_DeploymentTarget_deployedElement_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DeploymentTarget_deployedElement_spec()
{
	return uML_DeploymentTarget_deployedElement_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_DeploymentTarget_deployedElement_()
{
	return uML_DeploymentTarget_deployedElement_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DeploymentTarget_deployment()
{
	return uML_DeploymentTarget_deployment;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DestroyLinkAction()
{
	return uML_DestroyLinkAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DestroyLinkAction_endData()
{
	return uML_DestroyLinkAction_endData;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DestroyObjectAction()
{
	return uML_DestroyObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DestroyObjectAction_isDestroyLinks()
{
	return uML_DestroyObjectAction_isDestroyLinks;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DestroyObjectAction_isDestroyOwnedObjects()
{
	return uML_DestroyObjectAction_isDestroyOwnedObjects;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DestroyObjectAction_multiplicity()
{
	return uML_DestroyObjectAction_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DestroyObjectAction_no_type()
{
	return uML_DestroyObjectAction_no_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DestroyObjectAction_target()
{
	return uML_DestroyObjectAction_target;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DestructionOccurrenceSpecification()
{
	return uML_DestructionOccurrenceSpecification;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DestructionOccurrenceSpecification_no_occurrence_specifications_below()
{
	return uML_DestructionOccurrenceSpecification_no_occurrence_specifications_below;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Device()
{
	return uML_Device;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DirectedRelationship()
{
	return uML_DirectedRelationship;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DirectedRelationship_source()
{
	return uML_DirectedRelationship_source;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DirectedRelationship_target()
{
	return uML_DirectedRelationship_target;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Duration()
{
	return uML_Duration;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Duration_expr()
{
	return uML_Duration_expr;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Duration_no_expr_requires_observation()
{
	return uML_Duration_no_expr_requires_observation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Duration_observation()
{
	return uML_Duration_observation;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Duration_stringValue_()
{
	return uML_Duration_stringValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Duration_stringValue__return()
{
	return uML_Duration_stringValue__return;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DurationConstraint()
{
	return uML_DurationConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DurationConstraint_firstEvent()
{
	return uML_DurationConstraint_firstEvent;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DurationConstraint_first_event_multiplicity()
{
	return uML_DurationConstraint_first_event_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DurationConstraint_has_one_or_two_constrainedElements()
{
	return uML_DurationConstraint_has_one_or_two_constrainedElements;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DurationConstraint_specification()
{
	return uML_DurationConstraint_specification;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DurationInterval()
{
	return uML_DurationInterval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DurationInterval_max()
{
	return uML_DurationInterval_max;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DurationInterval_min()
{
	return uML_DurationInterval_min;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_DurationObservation()
{
	return uML_DurationObservation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DurationObservation_event()
{
	return uML_DurationObservation_event;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_DurationObservation_firstEvent()
{
	return uML_DurationObservation_firstEvent;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_DurationObservation_first_event_multiplicity()
{
	return uML_DurationObservation_first_event_multiplicity;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Element()
{
	return uML_Element;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_addKeyword_String()
{
	return uML_Element_addKeyword_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_addKeyword_String_UML_Element_addKeyword_keyword()
{
	return uML_Element_addKeyword_String_UML_Element_addKeyword_keyword;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_addKeyword_String_return()
{
	return uML_Element_addKeyword_String_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_allOwnedElements_result()
{
	return uML_Element_allOwnedElements_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Element_allOwnedElements_spec()
{
	return uML_Element_allOwnedElements_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_allOwnedElements_()
{
	return uML_Element_allOwnedElements_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_applyStereotype_Stereotype()
{
	return uML_Element_applyStereotype_Stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_applyStereotype_Stereotype_UML_Element_applyStereotype_stereotype()
{
	return uML_Element_applyStereotype_Stereotype_UML_Element_applyStereotype_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_applyStereotype_Stereotype_return()
{
	return uML_Element_applyStereotype_Stereotype_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_createEAnnotation_String()
{
	return uML_Element_createEAnnotation_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_createEAnnotation_String_UML_Element_createEAnnotation_source()
{
	return uML_Element_createEAnnotation_String_UML_Element_createEAnnotation_source;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_createEAnnotation_String_return()
{
	return uML_Element_createEAnnotation_String_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_destroy_()
{
	return uML_Element_destroy_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getApplicableStereotype_String()
{
	return uML_Element_getApplicableStereotype_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getApplicableStereotype_String_UML_Element_getApplicableStereotype_qualifiedName()
{
	return uML_Element_getApplicableStereotype_String_UML_Element_getApplicableStereotype_qualifiedName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getApplicableStereotype_String_return()
{
	return uML_Element_getApplicableStereotype_String_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getApplicableStereotypes_()
{
	return uML_Element_getApplicableStereotypes_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getApplicableStereotypes__return()
{
	return uML_Element_getApplicableStereotypes__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getAppliedStereotype_String()
{
	return uML_Element_getAppliedStereotype_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedStereotype_String_UML_Element_getAppliedStereotype_qualifiedName()
{
	return uML_Element_getAppliedStereotype_String_UML_Element_getAppliedStereotype_qualifiedName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedStereotype_String_return()
{
	return uML_Element_getAppliedStereotype_String_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getAppliedStereotypes_()
{
	return uML_Element_getAppliedStereotypes_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedStereotypes__return()
{
	return uML_Element_getAppliedStereotypes__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getAppliedSubstereotype_Stereotype_String()
{
	return uML_Element_getAppliedSubstereotype_Stereotype_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_qualifiedName()
{
	return uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_qualifiedName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_stereotype()
{
	return uML_Element_getAppliedSubstereotype_Stereotype_String_UML_Element_getAppliedSubstereotype_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedSubstereotype_Stereotype_String_return()
{
	return uML_Element_getAppliedSubstereotype_Stereotype_String_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getAppliedSubstereotypes_Stereotype()
{
	return uML_Element_getAppliedSubstereotypes_Stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedSubstereotypes_Stereotype_UML_Element_getAppliedSubstereotypes_stereotype()
{
	return uML_Element_getAppliedSubstereotypes_Stereotype_UML_Element_getAppliedSubstereotypes_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getAppliedSubstereotypes_Stereotype_return()
{
	return uML_Element_getAppliedSubstereotypes_Stereotype_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getKeywords_()
{
	return uML_Element_getKeywords_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getKeywords__return()
{
	return uML_Element_getKeywords__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getModel_()
{
	return uML_Element_getModel_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getModel__return()
{
	return uML_Element_getModel__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getNearestPackage_()
{
	return uML_Element_getNearestPackage_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getNearestPackage__return()
{
	return uML_Element_getNearestPackage__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getRelationships_()
{
	return uML_Element_getRelationships_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getRelationships_EClass()
{
	return uML_Element_getRelationships_EClass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getRelationships_EClass_UML_Element_getRelationships_eClass()
{
	return uML_Element_getRelationships_EClass_UML_Element_getRelationships_eClass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getRelationships_EClass_return()
{
	return uML_Element_getRelationships_EClass_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getRelationships__return()
{
	return uML_Element_getRelationships__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getRequiredStereotype_String()
{
	return uML_Element_getRequiredStereotype_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getRequiredStereotype_String_UML_Element_getRequiredStereotype_qualifiedName()
{
	return uML_Element_getRequiredStereotype_String_UML_Element_getRequiredStereotype_qualifiedName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getRequiredStereotype_String_return()
{
	return uML_Element_getRequiredStereotype_String_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getRequiredStereotypes_()
{
	return uML_Element_getRequiredStereotypes_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getRequiredStereotypes__return()
{
	return uML_Element_getRequiredStereotypes__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getSourceDirectedRelationships_()
{
	return uML_Element_getSourceDirectedRelationships_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getSourceDirectedRelationships_EClass()
{
	return uML_Element_getSourceDirectedRelationships_EClass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getSourceDirectedRelationships_EClass_UML_Element_getSourceDirectedRelationships_eClass()
{
	return uML_Element_getSourceDirectedRelationships_EClass_UML_Element_getSourceDirectedRelationships_eClass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getSourceDirectedRelationships_EClass_return()
{
	return uML_Element_getSourceDirectedRelationships_EClass_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getSourceDirectedRelationships__return()
{
	return uML_Element_getSourceDirectedRelationships__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getStereotypeApplication_Stereotype()
{
	return uML_Element_getStereotypeApplication_Stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getStereotypeApplication_Stereotype_UML_Element_getStereotypeApplication_stereotype()
{
	return uML_Element_getStereotypeApplication_Stereotype_UML_Element_getStereotypeApplication_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getStereotypeApplication_Stereotype_return()
{
	return uML_Element_getStereotypeApplication_Stereotype_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getStereotypeApplications_()
{
	return uML_Element_getStereotypeApplications_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getStereotypeApplications__return()
{
	return uML_Element_getStereotypeApplications__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getTargetDirectedRelationships_()
{
	return uML_Element_getTargetDirectedRelationships_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getTargetDirectedRelationships_EClass()
{
	return uML_Element_getTargetDirectedRelationships_EClass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getTargetDirectedRelationships_EClass_UML_Element_getTargetDirectedRelationships_eClass()
{
	return uML_Element_getTargetDirectedRelationships_EClass_UML_Element_getTargetDirectedRelationships_eClass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getTargetDirectedRelationships_EClass_return()
{
	return uML_Element_getTargetDirectedRelationships_EClass_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getTargetDirectedRelationships__return()
{
	return uML_Element_getTargetDirectedRelationships__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_getValue_Stereotype_String()
{
	return uML_Element_getValue_Stereotype_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getValue_Stereotype_String_UML_Element_getValue_propertyName()
{
	return uML_Element_getValue_Stereotype_String_UML_Element_getValue_propertyName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getValue_Stereotype_String_UML_Element_getValue_stereotype()
{
	return uML_Element_getValue_Stereotype_String_UML_Element_getValue_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_getValue_Stereotype_String_return()
{
	return uML_Element_getValue_Stereotype_String_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_hasKeyword_String()
{
	return uML_Element_hasKeyword_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_hasKeyword_String_UML_Element_hasKeyword_keyword()
{
	return uML_Element_hasKeyword_String_UML_Element_hasKeyword_keyword;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_hasKeyword_String_return()
{
	return uML_Element_hasKeyword_String_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_hasValue_Stereotype_String()
{
	return uML_Element_hasValue_Stereotype_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_hasValue_Stereotype_String_UML_Element_hasValue_propertyName()
{
	return uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_propertyName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_hasValue_Stereotype_String_UML_Element_hasValue_stereotype()
{
	return uML_Element_hasValue_Stereotype_String_UML_Element_hasValue_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_hasValue_Stereotype_String_return()
{
	return uML_Element_hasValue_Stereotype_String_return;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Element_has_owner()
{
	return uML_Element_has_owner;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_isStereotypeApplicable_Stereotype()
{
	return uML_Element_isStereotypeApplicable_Stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_isStereotypeApplicable_Stereotype_UML_Element_isStereotypeApplicable_stereotype()
{
	return uML_Element_isStereotypeApplicable_Stereotype_UML_Element_isStereotypeApplicable_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_isStereotypeApplicable_Stereotype_return()
{
	return uML_Element_isStereotypeApplicable_Stereotype_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_isStereotypeApplied_Stereotype()
{
	return uML_Element_isStereotypeApplied_Stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_isStereotypeApplied_Stereotype_UML_Element_isStereotypeApplied_stereotype()
{
	return uML_Element_isStereotypeApplied_Stereotype_UML_Element_isStereotypeApplied_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_isStereotypeApplied_Stereotype_return()
{
	return uML_Element_isStereotypeApplied_Stereotype_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_isStereotypeRequired_Stereotype()
{
	return uML_Element_isStereotypeRequired_Stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_isStereotypeRequired_Stereotype_UML_Element_isStereotypeRequired_stereotype()
{
	return uML_Element_isStereotypeRequired_Stereotype_UML_Element_isStereotypeRequired_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_isStereotypeRequired_Stereotype_return()
{
	return uML_Element_isStereotypeRequired_Stereotype_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_mustBeOwned_result()
{
	return uML_Element_mustBeOwned_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Element_mustBeOwned_spec()
{
	return uML_Element_mustBeOwned_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_mustBeOwned_()
{
	return uML_Element_mustBeOwned_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Element_not_own_self()
{
	return uML_Element_not_own_self;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Element_ownedComment()
{
	return uML_Element_ownedComment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Element_ownedElement()
{
	return uML_Element_ownedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Element_owner()
{
	return uML_Element_owner;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_removeKeyword_String()
{
	return uML_Element_removeKeyword_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_removeKeyword_String_UML_Element_removeKeyword_keyword()
{
	return uML_Element_removeKeyword_String_UML_Element_removeKeyword_keyword;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_removeKeyword_String_return()
{
	return uML_Element_removeKeyword_String_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_setValue_Stereotype_String_EJavaObject()
{
	return uML_Element_setValue_Stereotype_String_EJavaObject;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_newValue()
{
	return uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_newValue;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_propertyName()
{
	return uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_propertyName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_stereotype()
{
	return uML_Element_setValue_Stereotype_String_EJavaObject_UML_Element_setValue_stereotype;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Element_unapplyStereotype_Stereotype()
{
	return uML_Element_unapplyStereotype_Stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_unapplyStereotype_Stereotype_UML_Element_unapplyStereotype_stereotype()
{
	return uML_Element_unapplyStereotype_Stereotype_UML_Element_unapplyStereotype_stereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Element_unapplyStereotype_Stereotype_return()
{
	return uML_Element_unapplyStereotype_Stereotype_return;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ElementImport()
{
	return uML_ElementImport;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ElementImport_alias()
{
	return uML_ElementImport_alias;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ElementImport_getName_result()
{
	return uML_ElementImport_getName_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ElementImport_getName_spec()
{
	return uML_ElementImport_getName_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ElementImport_getName_()
{
	return uML_ElementImport_getName_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ElementImport_importedElement()
{
	return uML_ElementImport_importedElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ElementImport_imported_element_is_public()
{
	return uML_ElementImport_imported_element_is_public;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ElementImport_importingNamespace()
{
	return uML_ElementImport_importingNamespace;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ElementImport_visibility()
{
	return uML_ElementImport_visibility;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ElementImport_visibility_public_or_private()
{
	return uML_ElementImport_visibility_public_or_private;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_EncapsulatedClassifier()
{
	return uML_EncapsulatedClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_EncapsulatedClassifier_ownedPort()
{
	return uML_EncapsulatedClassifier_ownedPort;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_EncapsulatedClassifier_ownedPort_result()
{
	return uML_EncapsulatedClassifier_ownedPort_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_EncapsulatedClassifier_ownedPort_spec()
{
	return uML_EncapsulatedClassifier_ownedPort_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_EncapsulatedClassifier_ownedPort_()
{
	return uML_EncapsulatedClassifier_ownedPort_;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Enumeration()
{
	return uML_Enumeration;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Enumeration_immutable()
{
	return uML_Enumeration_immutable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Enumeration_ownedLiteral()
{
	return uML_Enumeration_ownedLiteral;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_EnumerationLiteral()
{
	return uML_EnumerationLiteral;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_EnumerationLiteral_classifier()
{
	return uML_EnumerationLiteral_classifier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_EnumerationLiteral_classifier_result()
{
	return uML_EnumerationLiteral_classifier_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_EnumerationLiteral_classifier_spec()
{
	return uML_EnumerationLiteral_classifier_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_EnumerationLiteral_classifier_()
{
	return uML_EnumerationLiteral_classifier_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_EnumerationLiteral_enumeration()
{
	return uML_EnumerationLiteral_enumeration;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_EnumerationLiteral_getClassifiers_()
{
	return uML_EnumerationLiteral_getClassifiers_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_EnumerationLiteral_getClassifiers__return()
{
	return uML_EnumerationLiteral_getClassifiers__return;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Event()
{
	return uML_Event;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExceptionHandler()
{
	return uML_ExceptionHandler;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExceptionHandler_edge_source_target()
{
	return uML_ExceptionHandler_edge_source_target;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExceptionHandler_exceptionInput()
{
	return uML_ExceptionHandler_exceptionInput;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExceptionHandler_exceptionType()
{
	return uML_ExceptionHandler_exceptionType;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExceptionHandler_exception_input_type()
{
	return uML_ExceptionHandler_exception_input_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExceptionHandler_handlerBody()
{
	return uML_ExceptionHandler_handlerBody;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExceptionHandler_handler_body_edges()
{
	return uML_ExceptionHandler_handler_body_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExceptionHandler_handler_body_owner()
{
	return uML_ExceptionHandler_handler_body_owner;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExceptionHandler_one_input()
{
	return uML_ExceptionHandler_one_input;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExceptionHandler_output_pins()
{
	return uML_ExceptionHandler_output_pins;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExceptionHandler_protectedNode()
{
	return uML_ExceptionHandler_protectedNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExecutableNode()
{
	return uML_ExecutableNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExecutableNode_handler()
{
	return uML_ExecutableNode_handler;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExecutionEnvironment()
{
	return uML_ExecutionEnvironment;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExecutionOccurrenceSpecification()
{
	return uML_ExecutionOccurrenceSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExecutionOccurrenceSpecification_execution()
{
	return uML_ExecutionOccurrenceSpecification_execution;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExecutionSpecification()
{
	return uML_ExecutionSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExecutionSpecification_finish()
{
	return uML_ExecutionSpecification_finish;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExecutionSpecification_same_lifeline()
{
	return uML_ExecutionSpecification_same_lifeline;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExecutionSpecification_start()
{
	return uML_ExecutionSpecification_start;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_ExpansionKind()
{
	return uML_ExpansionKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ExpansionKind_iterative()
{
	return uML_ExpansionKind_iterative;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ExpansionKind_parallel()
{
	return uML_ExpansionKind_parallel;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ExpansionKind_stream()
{
	return uML_ExpansionKind_stream;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExpansionNode()
{
	return uML_ExpansionNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExpansionNode_regionAsInput()
{
	return uML_ExpansionNode_regionAsInput;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExpansionNode_regionAsOutput()
{
	return uML_ExpansionNode_regionAsOutput;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExpansionNode_region_as_input_or_output()
{
	return uML_ExpansionNode_region_as_input_or_output;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExpansionRegion()
{
	return uML_ExpansionRegion;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExpansionRegion_inputElement()
{
	return uML_ExpansionRegion_inputElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExpansionRegion_mode()
{
	return uML_ExpansionRegion_mode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExpansionRegion_outputElement()
{
	return uML_ExpansionRegion_outputElement;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Expression()
{
	return uML_Expression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Expression_operand()
{
	return uML_Expression_operand;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Expression_symbol()
{
	return uML_Expression_symbol;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Extend()
{
	return uML_Extend;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Extend_condition()
{
	return uML_Extend_condition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Extend_extendedCase()
{
	return uML_Extend_extendedCase;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Extend_extension()
{
	return uML_Extend_extension;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Extend_extensionLocation()
{
	return uML_Extend_extensionLocation;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Extend_extension_points()
{
	return uML_Extend_extension_points;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Extension()
{
	return uML_Extension;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Extension_getStereotypeEnd_()
{
	return uML_Extension_getStereotypeEnd_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Extension_getStereotypeEnd__return()
{
	return uML_Extension_getStereotypeEnd__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Extension_getStereotype_()
{
	return uML_Extension_getStereotype_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Extension_getStereotype__return()
{
	return uML_Extension_getStereotype__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Extension_isRequired()
{
	return uML_Extension_isRequired;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Extension_isRequired_result()
{
	return uML_Extension_isRequired_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Extension_isRequired_spec()
{
	return uML_Extension_isRequired_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Extension_isRequired_()
{
	return uML_Extension_isRequired_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Extension_is_binary()
{
	return uML_Extension_is_binary;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Extension_metaclass()
{
	return uML_Extension_metaclass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Extension_metaclass_result()
{
	return uML_Extension_metaclass_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Extension_metaclass_spec()
{
	return uML_Extension_metaclass_spec;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Extension_metaclassEnd_result()
{
	return uML_Extension_metaclassEnd_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Extension_metaclassEnd_spec()
{
	return uML_Extension_metaclassEnd_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Extension_metaclassEnd_()
{
	return uML_Extension_metaclassEnd_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Extension_metaclass_()
{
	return uML_Extension_metaclass_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Extension_non_owned_end()
{
	return uML_Extension_non_owned_end;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Extension_ownedEnd()
{
	return uML_Extension_ownedEnd;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExtensionEnd()
{
	return uML_ExtensionEnd;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExtensionEnd_aggregation()
{
	return uML_ExtensionEnd_aggregation;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ExtensionEnd_getLower_()
{
	return uML_ExtensionEnd_getLower_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ExtensionEnd_getLower__return()
{
	return uML_ExtensionEnd_getLower__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExtensionEnd_lower()
{
	return uML_ExtensionEnd_lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ExtensionEnd_lowerBound_result()
{
	return uML_ExtensionEnd_lowerBound_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExtensionEnd_lowerBound_spec()
{
	return uML_ExtensionEnd_lowerBound_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ExtensionEnd_lowerBound_()
{
	return uML_ExtensionEnd_lowerBound_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExtensionEnd_multiplicity()
{
	return uML_ExtensionEnd_multiplicity;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ExtensionEnd_setLower_Integer()
{
	return uML_ExtensionEnd_setLower_Integer;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ExtensionEnd_setLower_Integer_UML_ExtensionEnd_setLower_newLower()
{
	return uML_ExtensionEnd_setLower_Integer_UML_ExtensionEnd_setLower_newLower;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExtensionEnd_type()
{
	return uML_ExtensionEnd_type;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ExtensionPoint()
{
	return uML_ExtensionPoint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ExtensionPoint_must_have_name()
{
	return uML_ExtensionPoint_must_have_name;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ExtensionPoint_useCase()
{
	return uML_ExtensionPoint_useCase;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Feature()
{
	return uML_Feature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Feature_featuringClassifier()
{
	return uML_Feature_featuringClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Feature_isStatic()
{
	return uML_Feature_isStatic;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_FinalNode()
{
	return uML_FinalNode;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FinalNode_no_outgoing_edges()
{
	return uML_FinalNode_no_outgoing_edges;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_FinalState()
{
	return uML_FinalState;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FinalState_cannot_reference_submachine()
{
	return uML_FinalState_cannot_reference_submachine;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FinalState_no_entry_behavior()
{
	return uML_FinalState_no_entry_behavior;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FinalState_no_exit_behavior()
{
	return uML_FinalState_no_exit_behavior;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FinalState_no_outgoing_transitions()
{
	return uML_FinalState_no_outgoing_transitions;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FinalState_no_regions()
{
	return uML_FinalState_no_regions;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FinalState_no_state_behavior()
{
	return uML_FinalState_no_state_behavior;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_FlowFinalNode()
{
	return uML_FlowFinalNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ForkNode()
{
	return uML_ForkNode;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ForkNode_edges()
{
	return uML_ForkNode_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ForkNode_one_incoming_edge()
{
	return uML_ForkNode_one_incoming_edge;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_FunctionBehavior()
{
	return uML_FunctionBehavior;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_FunctionBehavior_hasAllDataTypeAttributes_result()
{
	return uML_FunctionBehavior_hasAllDataTypeAttributes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FunctionBehavior_hasAllDataTypeAttributes_spec()
{
	return uML_FunctionBehavior_hasAllDataTypeAttributes_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_FunctionBehavior_hasAllDataTypeAttributes_DataType()
{
	return uML_FunctionBehavior_hasAllDataTypeAttributes_DataType;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_FunctionBehavior_hasAllDataTypeAttributes_DataType_UML_FunctionBehavior_hasAllDataTypeAttributes_d()
{
	return uML_FunctionBehavior_hasAllDataTypeAttributes_DataType_UML_FunctionBehavior_hasAllDataTypeAttributes_d;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FunctionBehavior_one_output_parameter()
{
	return uML_FunctionBehavior_one_output_parameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_FunctionBehavior_types_of_parameters()
{
	return uML_FunctionBehavior_types_of_parameters;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Gate()
{
	return uML_Gate;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_actual_gate_distinguishable()
{
	return uML_Gate_actual_gate_distinguishable;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_actual_gate_matched()
{
	return uML_Gate_actual_gate_matched;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_formal_gate_distinguishable()
{
	return uML_Gate_formal_gate_distinguishable;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_getName_result()
{
	return uML_Gate_getName_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_getName_spec()
{
	return uML_Gate_getName_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_getName_()
{
	return uML_Gate_getName_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_getOperand_result()
{
	return uML_Gate_getOperand_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_getOperand_spec()
{
	return uML_Gate_getOperand_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_getOperand_()
{
	return uML_Gate_getOperand_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_inside_cf_gate_distinguishable()
{
	return uML_Gate_inside_cf_gate_distinguishable;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_inside_cf_matched()
{
	return uML_Gate_inside_cf_matched;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_isActual_result()
{
	return uML_Gate_isActual_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_isActual_spec()
{
	return uML_Gate_isActual_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_isActual_()
{
	return uML_Gate_isActual_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_isDistinguishableFrom_result()
{
	return uML_Gate_isDistinguishableFrom_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_isDistinguishableFrom_spec()
{
	return uML_Gate_isDistinguishableFrom_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_isDistinguishableFrom_NamedElement_Namespace()
{
	return uML_Gate_isDistinguishableFrom_NamedElement_Namespace;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_n()
{
	return uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_n;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_ns()
{
	return uML_Gate_isDistinguishableFrom_NamedElement_Namespace_UML_Gate_isDistinguishableFrom_ns;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_isFormal_result()
{
	return uML_Gate_isFormal_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_isFormal_spec()
{
	return uML_Gate_isFormal_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_isFormal_()
{
	return uML_Gate_isFormal_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_isInsideCF_result()
{
	return uML_Gate_isInsideCF_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_isInsideCF_spec()
{
	return uML_Gate_isInsideCF_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_isInsideCF_()
{
	return uML_Gate_isInsideCF_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_isOutsideCF_result()
{
	return uML_Gate_isOutsideCF_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_isOutsideCF_spec()
{
	return uML_Gate_isOutsideCF_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_isOutsideCF_()
{
	return uML_Gate_isOutsideCF_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_matches_result()
{
	return uML_Gate_matches_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_matches_spec()
{
	return uML_Gate_matches_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Gate_matches_Gate()
{
	return uML_Gate_matches_Gate;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Gate_matches_Gate_UML_Gate_matches_gateToMatch()
{
	return uML_Gate_matches_Gate_UML_Gate_matches_gateToMatch;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_outside_cf_gate_distinguishable()
{
	return uML_Gate_outside_cf_gate_distinguishable;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Gate_outside_cf_matched()
{
	return uML_Gate_outside_cf_matched;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_GeneralOrdering()
{
	return uML_GeneralOrdering;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_GeneralOrdering_after()
{
	return uML_GeneralOrdering_after;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_GeneralOrdering_before()
{
	return uML_GeneralOrdering_before;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_GeneralOrdering_irreflexive_transitive_closure()
{
	return uML_GeneralOrdering_irreflexive_transitive_closure;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Generalization()
{
	return uML_Generalization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Generalization_general()
{
	return uML_Generalization_general;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Generalization_generalizationSet()
{
	return uML_Generalization_generalizationSet;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Generalization_isSubstitutable()
{
	return uML_Generalization_isSubstitutable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Generalization_specific()
{
	return uML_Generalization_specific;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_GeneralizationSet()
{
	return uML_GeneralizationSet;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_GeneralizationSet_generalization()
{
	return uML_GeneralizationSet_generalization;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_GeneralizationSet_generalization_same_classifier()
{
	return uML_GeneralizationSet_generalization_same_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_GeneralizationSet_isCovering()
{
	return uML_GeneralizationSet_isCovering;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_GeneralizationSet_isDisjoint()
{
	return uML_GeneralizationSet_isDisjoint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_GeneralizationSet_maps_to_generalization_set()
{
	return uML_GeneralizationSet_maps_to_generalization_set;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_GeneralizationSet_powertype()
{
	return uML_GeneralizationSet_powertype;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Image()
{
	return uML_Image;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Image_content()
{
	return uML_Image_content;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Image_format()
{
	return uML_Image_format;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Image_location()
{
	return uML_Image_location;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Include()
{
	return uML_Include;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Include_addition()
{
	return uML_Include_addition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Include_includingCase()
{
	return uML_Include_includingCase;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InformationFlow()
{
	return uML_InformationFlow;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InformationFlow_convey_classifiers()
{
	return uML_InformationFlow_convey_classifiers;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationFlow_conveyed()
{
	return uML_InformationFlow_conveyed;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationFlow_informationSource()
{
	return uML_InformationFlow_informationSource;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationFlow_informationTarget()
{
	return uML_InformationFlow_informationTarget;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InformationFlow_must_conform()
{
	return uML_InformationFlow_must_conform;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationFlow_realization()
{
	return uML_InformationFlow_realization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationFlow_realizingActivityEdge()
{
	return uML_InformationFlow_realizingActivityEdge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationFlow_realizingConnector()
{
	return uML_InformationFlow_realizingConnector;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationFlow_realizingMessage()
{
	return uML_InformationFlow_realizingMessage;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InformationFlow_sources_and_targets_kind()
{
	return uML_InformationFlow_sources_and_targets_kind;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InformationItem()
{
	return uML_InformationItem;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InformationItem_has_no()
{
	return uML_InformationItem_has_no;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InformationItem_not_instantiable()
{
	return uML_InformationItem_not_instantiable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InformationItem_represented()
{
	return uML_InformationItem_represented;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InformationItem_sources_and_targets()
{
	return uML_InformationItem_sources_and_targets;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InitialNode()
{
	return uML_InitialNode;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InitialNode_control_edges()
{
	return uML_InitialNode_control_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InitialNode_no_incoming_edges()
{
	return uML_InitialNode_no_incoming_edges;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InputPin()
{
	return uML_InputPin;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InputPin_outgoing_edges_structured_only()
{
	return uML_InputPin_outgoing_edges_structured_only;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InstanceSpecification()
{
	return uML_InstanceSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InstanceSpecification_classifier()
{
	return uML_InstanceSpecification_classifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InstanceSpecification_defining_feature()
{
	return uML_InstanceSpecification_defining_feature;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InstanceSpecification_deployment_artifact()
{
	return uML_InstanceSpecification_deployment_artifact;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InstanceSpecification_deployment_target()
{
	return uML_InstanceSpecification_deployment_target;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InstanceSpecification_slot()
{
	return uML_InstanceSpecification_slot;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InstanceSpecification_specification()
{
	return uML_InstanceSpecification_specification;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InstanceSpecification_structural_feature()
{
	return uML_InstanceSpecification_structural_feature;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InstanceValue()
{
	return uML_InstanceValue;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InstanceValue_instance()
{
	return uML_InstanceValue_instance;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_InstanceValue_stringValue_()
{
	return uML_InstanceValue_stringValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_InstanceValue_stringValue__return()
{
	return uML_InstanceValue_stringValue__return;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Interaction()
{
	return uML_Interaction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interaction_action()
{
	return uML_Interaction_action;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interaction_formalGate()
{
	return uML_Interaction_formalGate;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interaction_fragment()
{
	return uML_Interaction_fragment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interaction_lifeline()
{
	return uML_Interaction_lifeline;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interaction_message()
{
	return uML_Interaction_message;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Interaction_not_contained()
{
	return uML_Interaction_not_contained;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InteractionConstraint()
{
	return uML_InteractionConstraint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionConstraint_dynamic_variables()
{
	return uML_InteractionConstraint_dynamic_variables;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionConstraint_global_data()
{
	return uML_InteractionConstraint_global_data;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionConstraint_maxint()
{
	return uML_InteractionConstraint_maxint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionConstraint_maxint_greater_equal_minint()
{
	return uML_InteractionConstraint_maxint_greater_equal_minint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionConstraint_maxint_positive()
{
	return uML_InteractionConstraint_maxint_positive;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionConstraint_minint()
{
	return uML_InteractionConstraint_minint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionConstraint_minint_maxint()
{
	return uML_InteractionConstraint_minint_maxint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionConstraint_minint_non_negative()
{
	return uML_InteractionConstraint_minint_non_negative;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InteractionFragment()
{
	return uML_InteractionFragment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionFragment_covered()
{
	return uML_InteractionFragment_covered;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionFragment_enclosingInteraction()
{
	return uML_InteractionFragment_enclosingInteraction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionFragment_enclosingOperand()
{
	return uML_InteractionFragment_enclosingOperand;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionFragment_generalOrdering()
{
	return uML_InteractionFragment_generalOrdering;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InteractionOperand()
{
	return uML_InteractionOperand;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionOperand_fragment()
{
	return uML_InteractionOperand_fragment;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionOperand_guard()
{
	return uML_InteractionOperand_guard;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionOperand_guard_contain_references()
{
	return uML_InteractionOperand_guard_contain_references;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionOperand_guard_directly_prior()
{
	return uML_InteractionOperand_guard_directly_prior;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_InteractionOperatorKind()
{
	return uML_InteractionOperatorKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_alt()
{
	return uML_InteractionOperatorKind_alt;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_assert()
{
	return uML_InteractionOperatorKind_assert;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_break()
{
	return uML_InteractionOperatorKind_break;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_consider()
{
	return uML_InteractionOperatorKind_consider;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_critical()
{
	return uML_InteractionOperatorKind_critical;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_ignore()
{
	return uML_InteractionOperatorKind_ignore;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_loop()
{
	return uML_InteractionOperatorKind_loop;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_neg()
{
	return uML_InteractionOperatorKind_neg;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_opt()
{
	return uML_InteractionOperatorKind_opt;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_par()
{
	return uML_InteractionOperatorKind_par;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_seq()
{
	return uML_InteractionOperatorKind_seq;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_InteractionOperatorKind_strict()
{
	return uML_InteractionOperatorKind_strict;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InteractionUse()
{
	return uML_InteractionUse;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionUse_actualGate()
{
	return uML_InteractionUse_actualGate;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionUse_all_lifelines()
{
	return uML_InteractionUse_all_lifelines;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionUse_argument()
{
	return uML_InteractionUse_argument;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionUse_arguments_are_constants()
{
	return uML_InteractionUse_arguments_are_constants;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionUse_arguments_correspond_to_parameters()
{
	return uML_InteractionUse_arguments_correspond_to_parameters;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionUse_gates_match()
{
	return uML_InteractionUse_gates_match;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionUse_refersTo()
{
	return uML_InteractionUse_refersTo;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionUse_returnValue()
{
	return uML_InteractionUse_returnValue;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InteractionUse_returnValueRecipient()
{
	return uML_InteractionUse_returnValueRecipient;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionUse_returnValueRecipient_coverage()
{
	return uML_InteractionUse_returnValueRecipient_coverage;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InteractionUse_returnValue_type_recipient_correspondence()
{
	return uML_InteractionUse_returnValue_type_recipient_correspondence;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Interface()
{
	return uML_Interface;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural()
{
	return uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_lower()
{
	return uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name()
{
	return uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type()
{
	return uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_upper()
{
	return uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Interface_createOwnedAttribute_upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return()
{
	return uML_Interface_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Interface_createOwnedOperation_String_String_Type_Type()
{
	return uML_Interface_createOwnedOperation_String_String_Type_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name()
{
	return uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames()
{
	return uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterNames;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes()
{
	return uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_parameterTypes;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType()
{
	return uML_Interface_createOwnedOperation_String_String_Type_Type_UML_Interface_createOwnedOperation_returnType;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Interface_createOwnedOperation_String_String_Type_Type_return()
{
	return uML_Interface_createOwnedOperation_String_String_Type_Type_return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interface_nestedClassifier()
{
	return uML_Interface_nestedClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interface_ownedAttribute()
{
	return uML_Interface_ownedAttribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interface_ownedOperation()
{
	return uML_Interface_ownedOperation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interface_ownedReception()
{
	return uML_Interface_ownedReception;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interface_protocol()
{
	return uML_Interface_protocol;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interface_redefinedInterface()
{
	return uML_Interface_redefinedInterface;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Interface_visibility()
{
	return uML_Interface_visibility;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InterfaceRealization()
{
	return uML_InterfaceRealization;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InterfaceRealization_contract()
{
	return uML_InterfaceRealization_contract;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InterfaceRealization_implementingClassifier()
{
	return uML_InterfaceRealization_implementingClassifier;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InterruptibleActivityRegion()
{
	return uML_InterruptibleActivityRegion;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InterruptibleActivityRegion_interruptingEdge()
{
	return uML_InterruptibleActivityRegion_interruptingEdge;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_InterruptibleActivityRegion_interrupting_edges()
{
	return uML_InterruptibleActivityRegion_interrupting_edges;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InterruptibleActivityRegion_node()
{
	return uML_InterruptibleActivityRegion_node;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Interval()
{
	return uML_Interval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interval_max()
{
	return uML_Interval_max;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Interval_min()
{
	return uML_Interval_min;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_IntervalConstraint()
{
	return uML_IntervalConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_IntervalConstraint_specification()
{
	return uML_IntervalConstraint_specification;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_InvocationAction()
{
	return uML_InvocationAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InvocationAction_argument()
{
	return uML_InvocationAction_argument;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_InvocationAction_onPort()
{
	return uML_InvocationAction_onPort;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_JoinNode()
{
	return uML_JoinNode;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_JoinNode_incoming_object_flow()
{
	return uML_JoinNode_incoming_object_flow;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_JoinNode_isCombineDuplicate()
{
	return uML_JoinNode_isCombineDuplicate;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_JoinNode_joinSpec()
{
	return uML_JoinNode_joinSpec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_JoinNode_one_outgoing_edge()
{
	return uML_JoinNode_one_outgoing_edge;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Lifeline()
{
	return uML_Lifeline;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Lifeline_coveredBy()
{
	return uML_Lifeline_coveredBy;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Lifeline_decomposedAs()
{
	return uML_Lifeline_decomposedAs;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Lifeline_interaction()
{
	return uML_Lifeline_interaction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Lifeline_interaction_uses_share_lifeline()
{
	return uML_Lifeline_interaction_uses_share_lifeline;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Lifeline_represents()
{
	return uML_Lifeline_represents;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Lifeline_same_classifier()
{
	return uML_Lifeline_same_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Lifeline_selector()
{
	return uML_Lifeline_selector;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Lifeline_selector_int_or_string()
{
	return uML_Lifeline_selector_int_or_string;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Lifeline_selector_specified()
{
	return uML_Lifeline_selector_specified;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LinkAction()
{
	return uML_LinkAction;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LinkAction_association_result()
{
	return uML_LinkAction_association_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkAction_association_spec()
{
	return uML_LinkAction_association_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LinkAction_association_()
{
	return uML_LinkAction_association_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkAction_endData()
{
	return uML_LinkAction_endData;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkAction_inputValue()
{
	return uML_LinkAction_inputValue;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkAction_not_static()
{
	return uML_LinkAction_not_static;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkAction_same_association()
{
	return uML_LinkAction_same_association;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkAction_same_pins()
{
	return uML_LinkAction_same_pins;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LinkEndCreationData()
{
	return uML_LinkEndCreationData;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LinkEndCreationData_allPins_result()
{
	return uML_LinkEndCreationData_allPins_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndCreationData_allPins_spec()
{
	return uML_LinkEndCreationData_allPins_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LinkEndCreationData_allPins_()
{
	return uML_LinkEndCreationData_allPins_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkEndCreationData_insertAt()
{
	return uML_LinkEndCreationData_insertAt;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndCreationData_insertAt_pin()
{
	return uML_LinkEndCreationData_insertAt_pin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkEndCreationData_isReplaceAll()
{
	return uML_LinkEndCreationData_isReplaceAll;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LinkEndData()
{
	return uML_LinkEndData;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LinkEndData_allPins_result()
{
	return uML_LinkEndData_allPins_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndData_allPins_spec()
{
	return uML_LinkEndData_allPins_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LinkEndData_allPins_()
{
	return uML_LinkEndData_allPins_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkEndData_end()
{
	return uML_LinkEndData_end;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndData_end_object_input_pin()
{
	return uML_LinkEndData_end_object_input_pin;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndData_multiplicity()
{
	return uML_LinkEndData_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndData_property_is_association_end()
{
	return uML_LinkEndData_property_is_association_end;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkEndData_qualifier()
{
	return uML_LinkEndData_qualifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndData_qualifiers()
{
	return uML_LinkEndData_qualifiers;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndData_same_type()
{
	return uML_LinkEndData_same_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkEndData_value()
{
	return uML_LinkEndData_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LinkEndDestructionData()
{
	return uML_LinkEndDestructionData;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LinkEndDestructionData_allPins_result()
{
	return uML_LinkEndDestructionData_allPins_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndDestructionData_allPins_spec()
{
	return uML_LinkEndDestructionData_allPins_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LinkEndDestructionData_allPins_()
{
	return uML_LinkEndDestructionData_allPins_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkEndDestructionData_destroyAt()
{
	return uML_LinkEndDestructionData_destroyAt;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LinkEndDestructionData_destroyAt_pin()
{
	return uML_LinkEndDestructionData_destroyAt_pin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LinkEndDestructionData_isDestroyDuplicates()
{
	return uML_LinkEndDestructionData_isDestroyDuplicates;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LiteralBoolean()
{
	return uML_LiteralBoolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralBoolean_booleanValue_result()
{
	return uML_LiteralBoolean_booleanValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralBoolean_booleanValue_spec()
{
	return uML_LiteralBoolean_booleanValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralBoolean_booleanValue_()
{
	return uML_LiteralBoolean_booleanValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralBoolean_isComputable_result()
{
	return uML_LiteralBoolean_isComputable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralBoolean_isComputable_spec()
{
	return uML_LiteralBoolean_isComputable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralBoolean_isComputable_()
{
	return uML_LiteralBoolean_isComputable_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralBoolean_stringValue_()
{
	return uML_LiteralBoolean_stringValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralBoolean_stringValue__return()
{
	return uML_LiteralBoolean_stringValue__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LiteralBoolean_value()
{
	return uML_LiteralBoolean_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LiteralInteger()
{
	return uML_LiteralInteger;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralInteger_integerValue_result()
{
	return uML_LiteralInteger_integerValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralInteger_integerValue_spec()
{
	return uML_LiteralInteger_integerValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralInteger_integerValue_()
{
	return uML_LiteralInteger_integerValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralInteger_isComputable_result()
{
	return uML_LiteralInteger_isComputable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralInteger_isComputable_spec()
{
	return uML_LiteralInteger_isComputable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralInteger_isComputable_()
{
	return uML_LiteralInteger_isComputable_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralInteger_stringValue_()
{
	return uML_LiteralInteger_stringValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralInteger_stringValue__return()
{
	return uML_LiteralInteger_stringValue__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LiteralInteger_value()
{
	return uML_LiteralInteger_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LiteralNull()
{
	return uML_LiteralNull;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralNull_isComputable_result()
{
	return uML_LiteralNull_isComputable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralNull_isComputable_spec()
{
	return uML_LiteralNull_isComputable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralNull_isComputable_()
{
	return uML_LiteralNull_isComputable_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralNull_isNull_result()
{
	return uML_LiteralNull_isNull_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralNull_isNull_spec()
{
	return uML_LiteralNull_isNull_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralNull_isNull_()
{
	return uML_LiteralNull_isNull_;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LiteralReal()
{
	return uML_LiteralReal;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralReal_isComputable_result()
{
	return uML_LiteralReal_isComputable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralReal_isComputable_spec()
{
	return uML_LiteralReal_isComputable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralReal_isComputable_()
{
	return uML_LiteralReal_isComputable_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralReal_realValue_result()
{
	return uML_LiteralReal_realValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralReal_realValue_spec()
{
	return uML_LiteralReal_realValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralReal_realValue_()
{
	return uML_LiteralReal_realValue_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralReal_stringValue_()
{
	return uML_LiteralReal_stringValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralReal_stringValue__return()
{
	return uML_LiteralReal_stringValue__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LiteralReal_value()
{
	return uML_LiteralReal_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LiteralSpecification()
{
	return uML_LiteralSpecification;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LiteralString()
{
	return uML_LiteralString;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralString_integerValue_()
{
	return uML_LiteralString_integerValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralString_integerValue__return()
{
	return uML_LiteralString_integerValue__return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralString_isComputable_result()
{
	return uML_LiteralString_isComputable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralString_isComputable_spec()
{
	return uML_LiteralString_isComputable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralString_isComputable_()
{
	return uML_LiteralString_isComputable_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralString_stringValue_result()
{
	return uML_LiteralString_stringValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralString_stringValue_spec()
{
	return uML_LiteralString_stringValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralString_stringValue_()
{
	return uML_LiteralString_stringValue_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralString_unlimitedValue_()
{
	return uML_LiteralString_unlimitedValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralString_unlimitedValue__return()
{
	return uML_LiteralString_unlimitedValue__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LiteralString_value()
{
	return uML_LiteralString_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LiteralUnlimitedNatural()
{
	return uML_LiteralUnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_isComputable_result()
{
	return uML_LiteralUnlimitedNatural_isComputable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_isComputable_spec()
{
	return uML_LiteralUnlimitedNatural_isComputable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_isComputable_()
{
	return uML_LiteralUnlimitedNatural_isComputable_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_stringValue_()
{
	return uML_LiteralUnlimitedNatural_stringValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_stringValue__return()
{
	return uML_LiteralUnlimitedNatural_stringValue__return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_unlimitedValue_result()
{
	return uML_LiteralUnlimitedNatural_unlimitedValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_unlimitedValue_spec()
{
	return uML_LiteralUnlimitedNatural_unlimitedValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_unlimitedValue_()
{
	return uML_LiteralUnlimitedNatural_unlimitedValue_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LiteralUnlimitedNatural_value()
{
	return uML_LiteralUnlimitedNatural_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_LoopNode()
{
	return uML_LoopNode;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LoopNode_allActions_result()
{
	return uML_LoopNode_allActions_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_allActions_spec()
{
	return uML_LoopNode_allActions_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LoopNode_allActions_()
{
	return uML_LoopNode_allActions_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_bodyOutput()
{
	return uML_LoopNode_bodyOutput;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_bodyPart()
{
	return uML_LoopNode_bodyPart;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_body_output_pins()
{
	return uML_LoopNode_body_output_pins;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_decider()
{
	return uML_LoopNode_decider;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_executable_nodes()
{
	return uML_LoopNode_executable_nodes;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_input_edges()
{
	return uML_LoopNode_input_edges;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_isTestedFirst()
{
	return uML_LoopNode_isTestedFirst;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_loopVariable()
{
	return uML_LoopNode_loopVariable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_loopVariableInput()
{
	return uML_LoopNode_loopVariableInput;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_loop_variable_outgoing()
{
	return uML_LoopNode_loop_variable_outgoing;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_matching_loop_variables()
{
	return uML_LoopNode_matching_loop_variables;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_matching_output_pins()
{
	return uML_LoopNode_matching_output_pins;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_matching_result_pins()
{
	return uML_LoopNode_matching_result_pins;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_result()
{
	return uML_LoopNode_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_result_no_incoming()
{
	return uML_LoopNode_result_no_incoming;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_setupPart()
{
	return uML_LoopNode_setupPart;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_setup_test_and_body()
{
	return uML_LoopNode_setup_test_and_body;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_LoopNode_sourceNodes_result()
{
	return uML_LoopNode_sourceNodes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_LoopNode_sourceNodes_spec()
{
	return uML_LoopNode_sourceNodes_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_LoopNode_sourceNodes_()
{
	return uML_LoopNode_sourceNodes_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_LoopNode_test()
{
	return uML_LoopNode_test;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Manifestation()
{
	return uML_Manifestation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Manifestation_utilizedElement()
{
	return uML_Manifestation_utilizedElement;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_MergeNode()
{
	return uML_MergeNode;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MergeNode_edges()
{
	return uML_MergeNode_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MergeNode_one_outgoing_edge()
{
	return uML_MergeNode_one_outgoing_edge;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Message()
{
	return uML_Message;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_argument()
{
	return uML_Message_argument;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_arguments()
{
	return uML_Message_arguments;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_cannot_cross_boundaries()
{
	return uML_Message_cannot_cross_boundaries;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_connector()
{
	return uML_Message_connector;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_interaction()
{
	return uML_Message_interaction;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Message_isDistinguishableFrom_result()
{
	return uML_Message_isDistinguishableFrom_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_isDistinguishableFrom_spec()
{
	return uML_Message_isDistinguishableFrom_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Message_isDistinguishableFrom_NamedElement_Namespace()
{
	return uML_Message_isDistinguishableFrom_NamedElement_Namespace;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_n()
{
	return uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_n;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_ns()
{
	return uML_Message_isDistinguishableFrom_NamedElement_Namespace_UML_Message_isDistinguishableFrom_ns;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_messageKind()
{
	return uML_Message_messageKind;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Message_messageKind_result()
{
	return uML_Message_messageKind_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_messageKind_spec()
{
	return uML_Message_messageKind_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Message_messageKind_()
{
	return uML_Message_messageKind_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_messageSort()
{
	return uML_Message_messageSort;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_occurrence_specifications()
{
	return uML_Message_occurrence_specifications;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_receiveEvent()
{
	return uML_Message_receiveEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_sendEvent()
{
	return uML_Message_sendEvent;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_sending_receiving_message_event()
{
	return uML_Message_sending_receiving_message_event;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Message_signature()
{
	return uML_Message_signature;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_signature_is_operation_reply()
{
	return uML_Message_signature_is_operation_reply;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_signature_is_operation_request()
{
	return uML_Message_signature_is_operation_request;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_signature_is_signal()
{
	return uML_Message_signature_is_signal;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Message_signature_refer_to()
{
	return uML_Message_signature_refer_to;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_MessageEnd()
{
	return uML_MessageEnd;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MessageEnd_enclosingFragment_result()
{
	return uML_MessageEnd_enclosingFragment_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MessageEnd_enclosingFragment_spec()
{
	return uML_MessageEnd_enclosingFragment_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MessageEnd_enclosingFragment_()
{
	return uML_MessageEnd_enclosingFragment_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MessageEnd_isReceive_pre()
{
	return uML_MessageEnd_isReceive_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MessageEnd_isReceive_result()
{
	return uML_MessageEnd_isReceive_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MessageEnd_isReceive_spec()
{
	return uML_MessageEnd_isReceive_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MessageEnd_isReceive_()
{
	return uML_MessageEnd_isReceive_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MessageEnd_isSend_pre()
{
	return uML_MessageEnd_isSend_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MessageEnd_isSend_result()
{
	return uML_MessageEnd_isSend_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MessageEnd_isSend_spec()
{
	return uML_MessageEnd_isSend_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MessageEnd_isSend_()
{
	return uML_MessageEnd_isSend_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_MessageEnd_message()
{
	return uML_MessageEnd_message;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MessageEnd_oppositeEnd_pre()
{
	return uML_MessageEnd_oppositeEnd_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MessageEnd_oppositeEnd_result()
{
	return uML_MessageEnd_oppositeEnd_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MessageEnd_oppositeEnd_spec()
{
	return uML_MessageEnd_oppositeEnd_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MessageEnd_oppositeEnd_()
{
	return uML_MessageEnd_oppositeEnd_;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_MessageEvent()
{
	return uML_MessageEvent;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_MessageKind()
{
	return uML_MessageKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageKind_complete()
{
	return uML_MessageKind_complete;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageKind_found()
{
	return uML_MessageKind_found;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageKind_lost()
{
	return uML_MessageKind_lost;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageKind_unknown()
{
	return uML_MessageKind_unknown;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_MessageOccurrenceSpecification()
{
	return uML_MessageOccurrenceSpecification;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_MessageSort()
{
	return uML_MessageSort;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageSort_asynchCall()
{
	return uML_MessageSort_asynchCall;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageSort_asynchSignal()
{
	return uML_MessageSort_asynchSignal;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageSort_createMessage()
{
	return uML_MessageSort_createMessage;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageSort_deleteMessage()
{
	return uML_MessageSort_deleteMessage;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageSort_reply()
{
	return uML_MessageSort_reply;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_MessageSort_synchCall()
{
	return uML_MessageSort_synchCall;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Model()
{
	return uML_Model;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Model_isMetamodel_()
{
	return uML_Model_isMetamodel_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Model_isMetamodel__return()
{
	return uML_Model_isMetamodel__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Model_viewpoint()
{
	return uML_Model_viewpoint;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_MultiplicityElement()
{
	return uML_MultiplicityElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_compatibleWith_result()
{
	return uML_MultiplicityElement_compatibleWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_compatibleWith_spec()
{
	return uML_MultiplicityElement_compatibleWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_compatibleWith_MultiplicityElement()
{
	return uML_MultiplicityElement_compatibleWith_MultiplicityElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_compatibleWith_MultiplicityElement_UML_MultiplicityElement_compatibleWith_other()
{
	return uML_MultiplicityElement_compatibleWith_MultiplicityElement_UML_MultiplicityElement_compatibleWith_other;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_includesMultiplicity_pre()
{
	return uML_MultiplicityElement_includesMultiplicity_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_includesMultiplicity_result()
{
	return uML_MultiplicityElement_includesMultiplicity_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_includesMultiplicity_spec()
{
	return uML_MultiplicityElement_includesMultiplicity_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_includesMultiplicity_MultiplicityElement()
{
	return uML_MultiplicityElement_includesMultiplicity_MultiplicityElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_includesMultiplicity_MultiplicityElement_UML_MultiplicityElement_includesMultiplicity_M()
{
	return uML_MultiplicityElement_includesMultiplicity_MultiplicityElement_UML_MultiplicityElement_includesMultiplicity_M;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_is_result()
{
	return uML_MultiplicityElement_is_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_is_spec()
{
	return uML_MultiplicityElement_is_spec;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_isMultivalued_pre()
{
	return uML_MultiplicityElement_isMultivalued_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_isMultivalued_result()
{
	return uML_MultiplicityElement_isMultivalued_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_isMultivalued_spec()
{
	return uML_MultiplicityElement_isMultivalued_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_isMultivalued_()
{
	return uML_MultiplicityElement_isMultivalued_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_MultiplicityElement_isOrdered()
{
	return uML_MultiplicityElement_isOrdered;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_MultiplicityElement_isUnique()
{
	return uML_MultiplicityElement_isUnique;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_is_Integer_UnlimitedNatural()
{
	return uML_MultiplicityElement_is_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_lowerbound()
{
	return uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_lowerbound;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_upperbound()
{
	return uML_MultiplicityElement_is_Integer_UnlimitedNatural_UML_MultiplicityElement_is_upperbound;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_MultiplicityElement_lower()
{
	return uML_MultiplicityElement_lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_lower_result()
{
	return uML_MultiplicityElement_lower_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_lower_spec()
{
	return uML_MultiplicityElement_lower_spec;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_lowerBound_result()
{
	return uML_MultiplicityElement_lowerBound_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_lowerBound_spec()
{
	return uML_MultiplicityElement_lowerBound_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_lowerBound_()
{
	return uML_MultiplicityElement_lowerBound_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_MultiplicityElement_lowerValue()
{
	return uML_MultiplicityElement_lowerValue;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_lower_()
{
	return uML_MultiplicityElement_lower_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_lower_ge_0()
{
	return uML_MultiplicityElement_lower_ge_0;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_lower_is_integer()
{
	return uML_MultiplicityElement_lower_is_integer;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_setLower_Integer()
{
	return uML_MultiplicityElement_setLower_Integer;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_setLower_Integer_UML_MultiplicityElement_setLower_newLower()
{
	return uML_MultiplicityElement_setLower_Integer_UML_MultiplicityElement_setLower_newLower;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_setUpper_UnlimitedNatural()
{
	return uML_MultiplicityElement_setUpper_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_setUpper_UnlimitedNatural_UML_MultiplicityElement_setUpper_newUpper()
{
	return uML_MultiplicityElement_setUpper_UnlimitedNatural_UML_MultiplicityElement_setUpper_newUpper;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_MultiplicityElement_upper()
{
	return uML_MultiplicityElement_upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_upper_result()
{
	return uML_MultiplicityElement_upper_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_upper_spec()
{
	return uML_MultiplicityElement_upper_spec;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_MultiplicityElement_upperBound_result()
{
	return uML_MultiplicityElement_upperBound_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_upperBound_spec()
{
	return uML_MultiplicityElement_upperBound_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_upperBound_()
{
	return uML_MultiplicityElement_upperBound_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_MultiplicityElement_upperValue()
{
	return uML_MultiplicityElement_upperValue;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_MultiplicityElement_upper_()
{
	return uML_MultiplicityElement_upper_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_upper_ge_lower()
{
	return uML_MultiplicityElement_upper_ge_lower;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_upper_is_unlimitedNatural()
{
	return uML_MultiplicityElement_upper_is_unlimitedNatural;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_value_specification_constant()
{
	return uML_MultiplicityElement_value_specification_constant;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_MultiplicityElement_value_specification_no_side_effects()
{
	return uML_MultiplicityElement_value_specification_no_side_effects;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_NamedElement()
{
	return uML_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_allNamespaces_result()
{
	return uML_NamedElement_allNamespaces_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_allNamespaces_spec()
{
	return uML_NamedElement_allNamespaces_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_allNamespaces_()
{
	return uML_NamedElement_allNamespaces_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_allOwningPackages_result()
{
	return uML_NamedElement_allOwningPackages_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_allOwningPackages_spec()
{
	return uML_NamedElement_allOwningPackages_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_allOwningPackages_()
{
	return uML_NamedElement_allOwningPackages_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_NamedElement_clientDependency()
{
	return uML_NamedElement_clientDependency;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_clientDependency_result()
{
	return uML_NamedElement_clientDependency_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_clientDependency_spec()
{
	return uML_NamedElement_clientDependency_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_clientDependency_()
{
	return uML_NamedElement_clientDependency_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_createDependency_NamedElement()
{
	return uML_NamedElement_createDependency_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_createDependency_NamedElement_UML_NamedElement_createDependency_supplier()
{
	return uML_NamedElement_createDependency_NamedElement_UML_NamedElement_createDependency_supplier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_createDependency_NamedElement_return()
{
	return uML_NamedElement_createDependency_NamedElement_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_createUsage_NamedElement()
{
	return uML_NamedElement_createUsage_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_createUsage_NamedElement_UML_NamedElement_createUsage_supplier()
{
	return uML_NamedElement_createUsage_NamedElement_UML_NamedElement_createUsage_supplier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_createUsage_NamedElement_return()
{
	return uML_NamedElement_createUsage_NamedElement_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_getLabel_()
{
	return uML_NamedElement_getLabel_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_getLabel_Boolean()
{
	return uML_NamedElement_getLabel_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_getLabel_Boolean_UML_NamedElement_getLabel_localize()
{
	return uML_NamedElement_getLabel_Boolean_UML_NamedElement_getLabel_localize;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_getLabel_Boolean_return()
{
	return uML_NamedElement_getLabel_Boolean_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_getLabel__return()
{
	return uML_NamedElement_getLabel__return;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_has_no_qualified_name()
{
	return uML_NamedElement_has_no_qualified_name;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_has_qualified_name()
{
	return uML_NamedElement_has_qualified_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_isDistinguishableFrom_result()
{
	return uML_NamedElement_isDistinguishableFrom_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_isDistinguishableFrom_spec()
{
	return uML_NamedElement_isDistinguishableFrom_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_isDistinguishableFrom_NamedElement_Namespace()
{
	return uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_n()
{
	return uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_n;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_ns()
{
	return uML_NamedElement_isDistinguishableFrom_NamedElement_Namespace_UML_NamedElement_isDistinguishableFrom_ns;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_NamedElement_name()
{
	return uML_NamedElement_name;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_NamedElement_nameExpression()
{
	return uML_NamedElement_nameExpression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_NamedElement_namespace()
{
	return uML_NamedElement_namespace;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_namespace_result()
{
	return uML_NamedElement_namespace_result;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_namespace_()
{
	return uML_NamedElement_namespace_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_NamedElement_qualifiedName()
{
	return uML_NamedElement_qualifiedName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_qualifiedName_result()
{
	return uML_NamedElement_qualifiedName_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_qualifiedName_spec()
{
	return uML_NamedElement_qualifiedName_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_qualifiedName_()
{
	return uML_NamedElement_qualifiedName_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_NamedElement_separator_result()
{
	return uML_NamedElement_separator_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_separator_spec()
{
	return uML_NamedElement_separator_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_NamedElement_separator_()
{
	return uML_NamedElement_separator_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_NamedElement_visibility()
{
	return uML_NamedElement_visibility;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_NamedElement_visibility_needs_ownership()
{
	return uML_NamedElement_visibility_needs_ownership;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Namespace()
{
	return uML_Namespace;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_cannot_import_ownedMembers()
{
	return uML_Namespace_cannot_import_ownedMembers;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_cannot_import_self()
{
	return uML_Namespace_cannot_import_self;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_createElementImport_PackageableElement_VisibilityKind()
{
	return uML_Namespace_createElementImport_PackageableElement_VisibilityKind;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_element()
{
	return uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_element;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_visibility()
{
	return uML_Namespace_createElementImport_PackageableElement_VisibilityKind_UML_Namespace_createElementImport_visibility;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_createElementImport_PackageableElement_VisibilityKind_return()
{
	return uML_Namespace_createElementImport_PackageableElement_VisibilityKind_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_createPackageImport_Package_VisibilityKind()
{
	return uML_Namespace_createPackageImport_Package_VisibilityKind;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_package_()
{
	return uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_package_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_visibility()
{
	return uML_Namespace_createPackageImport_Package_VisibilityKind_UML_Namespace_createPackageImport_visibility;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_createPackageImport_Package_VisibilityKind_return()
{
	return uML_Namespace_createPackageImport_Package_VisibilityKind_return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Namespace_elementImport()
{
	return uML_Namespace_elementImport;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_excludeCollisions_result()
{
	return uML_Namespace_excludeCollisions_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_excludeCollisions_spec()
{
	return uML_Namespace_excludeCollisions_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_excludeCollisions_PackageableElement()
{
	return uML_Namespace_excludeCollisions_PackageableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps()
{
	return uML_Namespace_excludeCollisions_PackageableElement_UML_Namespace_excludeCollisions_imps;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_getImportedElements_()
{
	return uML_Namespace_getImportedElements_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_getImportedElements__return()
{
	return uML_Namespace_getImportedElements__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_getImportedPackages_()
{
	return uML_Namespace_getImportedPackages_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_getImportedPackages__return()
{
	return uML_Namespace_getImportedPackages__return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_getNamesOfMember_result()
{
	return uML_Namespace_getNamesOfMember_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_getNamesOfMember_spec()
{
	return uML_Namespace_getNamesOfMember_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_getNamesOfMember_NamedElement()
{
	return uML_Namespace_getNamesOfMember_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_getNamesOfMember_NamedElement_UML_Namespace_getNamesOfMember_element()
{
	return uML_Namespace_getNamesOfMember_NamedElement_UML_Namespace_getNamesOfMember_element;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_importMembers_result()
{
	return uML_Namespace_importMembers_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_importMembers_spec()
{
	return uML_Namespace_importMembers_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_importMembers_PackageableElement()
{
	return uML_Namespace_importMembers_PackageableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps()
{
	return uML_Namespace_importMembers_PackageableElement_UML_Namespace_importMembers_imps;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Namespace_importedMember()
{
	return uML_Namespace_importedMember;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_importedMember_result()
{
	return uML_Namespace_importedMember_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_importedMember_spec()
{
	return uML_Namespace_importedMember_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_importedMember_()
{
	return uML_Namespace_importedMember_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Namespace_member()
{
	return uML_Namespace_member;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_membersAreDistinguishable_result()
{
	return uML_Namespace_membersAreDistinguishable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_membersAreDistinguishable_spec()
{
	return uML_Namespace_membersAreDistinguishable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_membersAreDistinguishable_()
{
	return uML_Namespace_membersAreDistinguishable_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Namespace_members_distinguishable()
{
	return uML_Namespace_members_distinguishable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Namespace_ownedMember()
{
	return uML_Namespace_ownedMember;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Namespace_ownedMember_result()
{
	return uML_Namespace_ownedMember_result;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Namespace_ownedMember_()
{
	return uML_Namespace_ownedMember_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Namespace_ownedRule()
{
	return uML_Namespace_ownedRule;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Namespace_packageImport()
{
	return uML_Namespace_packageImport;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Node()
{
	return uML_Node;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Aggregation()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Aggregation;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1IsNavigable()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1IsNavigable;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Lower()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Name()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Node()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Node;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Upper()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end1Upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Aggregation()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Aggregation;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2IsNavigable()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2IsNavigable;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Lower()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Name()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Upper()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Node_createCommunicationPath_end2Upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return()
{
	return uML_Node_createCommunicationPath_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Node_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Node_getCommunicationPaths_()
{
	return uML_Node_getCommunicationPaths_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Node_getCommunicationPaths__return()
{
	return uML_Node_getCommunicationPaths__return;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Node_internal_structure()
{
	return uML_Node_internal_structure;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Node_nestedNode()
{
	return uML_Node_nestedNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ObjectFlow()
{
	return uML_ObjectFlow;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_compatible_types()
{
	return uML_ObjectFlow_compatible_types;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_input_and_output_parameter()
{
	return uML_ObjectFlow_input_and_output_parameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectFlow_isMulticast()
{
	return uML_ObjectFlow_isMulticast;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectFlow_isMultireceive()
{
	return uML_ObjectFlow_isMultireceive;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_is_multicast_or_is_multireceive()
{
	return uML_ObjectFlow_is_multicast_or_is_multireceive;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_no_executable_nodes()
{
	return uML_ObjectFlow_no_executable_nodes;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_same_upper_bounds()
{
	return uML_ObjectFlow_same_upper_bounds;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectFlow_selection()
{
	return uML_ObjectFlow_selection;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_selection_behavior()
{
	return uML_ObjectFlow_selection_behavior;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_target()
{
	return uML_ObjectFlow_target;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectFlow_transformation()
{
	return uML_ObjectFlow_transformation;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectFlow_transformation_behavior()
{
	return uML_ObjectFlow_transformation_behavior;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ObjectNode()
{
	return uML_ObjectNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectNode_inState()
{
	return uML_ObjectNode_inState;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectNode_input_output_parameter()
{
	return uML_ObjectNode_input_output_parameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectNode_isControlType()
{
	return uML_ObjectNode_isControlType;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectNode_object_flow_edges()
{
	return uML_ObjectNode_object_flow_edges;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectNode_ordering()
{
	return uML_ObjectNode_ordering;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectNode_selection()
{
	return uML_ObjectNode_selection;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ObjectNode_selection_behavior()
{
	return uML_ObjectNode_selection_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ObjectNode_upperBound()
{
	return uML_ObjectNode_upperBound;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_ObjectNodeOrderingKind()
{
	return uML_ObjectNodeOrderingKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ObjectNodeOrderingKind_FIFO()
{
	return uML_ObjectNodeOrderingKind_FIFO;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ObjectNodeOrderingKind_LIFO()
{
	return uML_ObjectNodeOrderingKind_LIFO;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ObjectNodeOrderingKind_ordered()
{
	return uML_ObjectNodeOrderingKind_ordered;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ObjectNodeOrderingKind_unordered()
{
	return uML_ObjectNodeOrderingKind_unordered;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Observation()
{
	return uML_Observation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_OccurrenceSpecification()
{
	return uML_OccurrenceSpecification;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OccurrenceSpecification_covered()
{
	return uML_OccurrenceSpecification_covered;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OccurrenceSpecification_getCovered_()
{
	return uML_OccurrenceSpecification_getCovered_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OccurrenceSpecification_getCovered__return()
{
	return uML_OccurrenceSpecification_getCovered__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OccurrenceSpecification_setCovered_Lifeline()
{
	return uML_OccurrenceSpecification_setCovered_Lifeline;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OccurrenceSpecification_setCovered_Lifeline_UML_OccurrenceSpecification_setCovered_value()
{
	return uML_OccurrenceSpecification_setCovered_Lifeline_UML_OccurrenceSpecification_setCovered_value;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OccurrenceSpecification_toAfter()
{
	return uML_OccurrenceSpecification_toAfter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OccurrenceSpecification_toBefore()
{
	return uML_OccurrenceSpecification_toBefore;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_OpaqueAction()
{
	return uML_OpaqueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueAction_body()
{
	return uML_OpaqueAction_body;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueAction_inputValue()
{
	return uML_OpaqueAction_inputValue;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueAction_language()
{
	return uML_OpaqueAction_language;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueAction_language_body_size()
{
	return uML_OpaqueAction_language_body_size;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueAction_outputValue()
{
	return uML_OpaqueAction_outputValue;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_OpaqueBehavior()
{
	return uML_OpaqueBehavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueBehavior_body()
{
	return uML_OpaqueBehavior_body;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueBehavior_language()
{
	return uML_OpaqueBehavior_language;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_OpaqueExpression()
{
	return uML_OpaqueExpression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueExpression_behavior()
{
	return uML_OpaqueExpression_behavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueExpression_body()
{
	return uML_OpaqueExpression_body;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OpaqueExpression_isIntegral_result()
{
	return uML_OpaqueExpression_isIntegral_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_isIntegral_spec()
{
	return uML_OpaqueExpression_isIntegral_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OpaqueExpression_isIntegral_()
{
	return uML_OpaqueExpression_isIntegral_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_isNonNegative_pre()
{
	return uML_OpaqueExpression_isNonNegative_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OpaqueExpression_isNonNegative_result()
{
	return uML_OpaqueExpression_isNonNegative_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_isNonNegative_spec()
{
	return uML_OpaqueExpression_isNonNegative_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OpaqueExpression_isNonNegative_()
{
	return uML_OpaqueExpression_isNonNegative_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_isPositive_pre()
{
	return uML_OpaqueExpression_isPositive_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OpaqueExpression_isPositive_result()
{
	return uML_OpaqueExpression_isPositive_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_isPositive_spec()
{
	return uML_OpaqueExpression_isPositive_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OpaqueExpression_isPositive_()
{
	return uML_OpaqueExpression_isPositive_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueExpression_language()
{
	return uML_OpaqueExpression_language;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_language_body_size()
{
	return uML_OpaqueExpression_language_body_size;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_one_return_result_parameter()
{
	return uML_OpaqueExpression_one_return_result_parameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_only_return_result_parameters()
{
	return uML_OpaqueExpression_only_return_result_parameters;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OpaqueExpression_result()
{
	return uML_OpaqueExpression_result;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OpaqueExpression_result_result()
{
	return uML_OpaqueExpression_result_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_result_spec()
{
	return uML_OpaqueExpression_result_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OpaqueExpression_result_()
{
	return uML_OpaqueExpression_result_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OpaqueExpression_stringValue_()
{
	return uML_OpaqueExpression_stringValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OpaqueExpression_stringValue__return()
{
	return uML_OpaqueExpression_stringValue__return;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_value_pre()
{
	return uML_OpaqueExpression_value_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_OpaqueExpression_value_result()
{
	return uML_OpaqueExpression_value_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OpaqueExpression_value_spec()
{
	return uML_OpaqueExpression_value_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_OpaqueExpression_value_()
{
	return uML_OpaqueExpression_value_;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Operation()
{
	return uML_Operation;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_at_most_one_return()
{
	return uML_Operation_at_most_one_return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_bodyCondition()
{
	return uML_Operation_bodyCondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_class()
{
	return uML_Operation_class;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_datatype()
{
	return uML_Operation_datatype;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_getReturnResult_()
{
	return uML_Operation_getReturnResult_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_getReturnResult__return()
{
	return uML_Operation_getReturnResult__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_interface()
{
	return uML_Operation_interface;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_isConsistentWith_pre()
{
	return uML_Operation_isConsistentWith_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_isConsistentWith_result()
{
	return uML_Operation_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_isConsistentWith_spec()
{
	return uML_Operation_isConsistentWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_isConsistentWith_RedefinableElement()
{
	return uML_Operation_isConsistentWith_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_isConsistentWith_RedefinableElement_UML_Operation_isConsistentWith_redefiningElement()
{
	return uML_Operation_isConsistentWith_RedefinableElement_UML_Operation_isConsistentWith_redefiningElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_isOrdered()
{
	return uML_Operation_isOrdered;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_isOrdered_result()
{
	return uML_Operation_isOrdered_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_isOrdered_spec()
{
	return uML_Operation_isOrdered_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_isOrdered_()
{
	return uML_Operation_isOrdered_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_isQuery()
{
	return uML_Operation_isQuery;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_isUnique()
{
	return uML_Operation_isUnique;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_isUnique_result()
{
	return uML_Operation_isUnique_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_isUnique_spec()
{
	return uML_Operation_isUnique_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_isUnique_()
{
	return uML_Operation_isUnique_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_lower()
{
	return uML_Operation_lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_lower_result()
{
	return uML_Operation_lower_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_lower_spec()
{
	return uML_Operation_lower_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_lower_()
{
	return uML_Operation_lower_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_only_body_for_query()
{
	return uML_Operation_only_body_for_query;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_ownedParameter()
{
	return uML_Operation_ownedParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_postcondition()
{
	return uML_Operation_postcondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_precondition()
{
	return uML_Operation_precondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_raisedException()
{
	return uML_Operation_raisedException;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_redefinedOperation()
{
	return uML_Operation_redefinedOperation;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_returnResult_result()
{
	return uML_Operation_returnResult_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_returnResult_spec()
{
	return uML_Operation_returnResult_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_returnResult_()
{
	return uML_Operation_returnResult_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_setIsOrdered_Boolean()
{
	return uML_Operation_setIsOrdered_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_setIsOrdered_Boolean_UML_Operation_setIsOrdered_newIsOrdered()
{
	return uML_Operation_setIsOrdered_Boolean_UML_Operation_setIsOrdered_newIsOrdered;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_setIsUnique_Boolean()
{
	return uML_Operation_setIsUnique_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_setIsUnique_Boolean_UML_Operation_setIsUnique_newIsUnique()
{
	return uML_Operation_setIsUnique_Boolean_UML_Operation_setIsUnique_newIsUnique;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_setLower_Integer()
{
	return uML_Operation_setLower_Integer;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_setLower_Integer_UML_Operation_setLower_newLower()
{
	return uML_Operation_setLower_Integer_UML_Operation_setLower_newLower;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_setType_Type()
{
	return uML_Operation_setType_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_setType_Type_UML_Operation_setType_newType()
{
	return uML_Operation_setType_Type_UML_Operation_setType_newType;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_setUpper_UnlimitedNatural()
{
	return uML_Operation_setUpper_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_setUpper_UnlimitedNatural_UML_Operation_setUpper_newUpper()
{
	return uML_Operation_setUpper_UnlimitedNatural_UML_Operation_setUpper_newUpper;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_templateParameter()
{
	return uML_Operation_templateParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_type()
{
	return uML_Operation_type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_type_result()
{
	return uML_Operation_type_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_type_spec()
{
	return uML_Operation_type_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_type_()
{
	return uML_Operation_type_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Operation_upper()
{
	return uML_Operation_upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Operation_upper_result()
{
	return uML_Operation_upper_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Operation_upper_spec()
{
	return uML_Operation_upper_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Operation_upper_()
{
	return uML_Operation_upper_;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_OperationTemplateParameter()
{
	return uML_OperationTemplateParameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OperationTemplateParameter_match_default_signature()
{
	return uML_OperationTemplateParameter_match_default_signature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_OperationTemplateParameter_parameteredElement()
{
	return uML_OperationTemplateParameter_parameteredElement;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_OutputPin()
{
	return uML_OutputPin;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_OutputPin_incoming_edges_structured_only()
{
	return uML_OutputPin_incoming_edges_structured_only;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Package()
{
	return uML_Package;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_URI()
{
	return uML_Package_URI;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_allApplicableStereotypes_result()
{
	return uML_Package_allApplicableStereotypes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_allApplicableStereotypes_spec()
{
	return uML_Package_allApplicableStereotypes_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_allApplicableStereotypes_()
{
	return uML_Package_allApplicableStereotypes_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_applyProfile_Profile()
{
	return uML_Package_applyProfile_Profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_applyProfile_Profile_UML_Package_applyProfile_profile()
{
	return uML_Package_applyProfile_Profile_UML_Package_applyProfile_profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_applyProfile_Profile_return()
{
	return uML_Package_applyProfile_Profile_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_containingProfile_result()
{
	return uML_Package_containingProfile_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_containingProfile_spec()
{
	return uML_Package_containingProfile_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_containingProfile_()
{
	return uML_Package_containingProfile_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_createOwnedClass_String_Boolean()
{
	return uML_Package_createOwnedClass_String_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_isAbstract()
{
	return uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_isAbstract;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_name()
{
	return uML_Package_createOwnedClass_String_Boolean_UML_Package_createOwnedClass_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedClass_String_Boolean_return()
{
	return uML_Package_createOwnedClass_String_Boolean_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_createOwnedEnumeration_String()
{
	return uML_Package_createOwnedEnumeration_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedEnumeration_String_UML_Package_createOwnedEnumeration_name()
{
	return uML_Package_createOwnedEnumeration_String_UML_Package_createOwnedEnumeration_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedEnumeration_String_return()
{
	return uML_Package_createOwnedEnumeration_String_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_createOwnedInterface_String()
{
	return uML_Package_createOwnedInterface_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedInterface_String_UML_Package_createOwnedInterface_name()
{
	return uML_Package_createOwnedInterface_String_UML_Package_createOwnedInterface_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedInterface_String_return()
{
	return uML_Package_createOwnedInterface_String_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_createOwnedPrimitiveType_String()
{
	return uML_Package_createOwnedPrimitiveType_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedPrimitiveType_String_UML_Package_createOwnedPrimitiveType_name()
{
	return uML_Package_createOwnedPrimitiveType_String_UML_Package_createOwnedPrimitiveType_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedPrimitiveType_String_return()
{
	return uML_Package_createOwnedPrimitiveType_String_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_createOwnedStereotype_String_Boolean()
{
	return uML_Package_createOwnedStereotype_String_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_isAbstract()
{
	return uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_isAbstract;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_name()
{
	return uML_Package_createOwnedStereotype_String_Boolean_UML_Package_createOwnedStereotype_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_createOwnedStereotype_String_Boolean_return()
{
	return uML_Package_createOwnedStereotype_String_Boolean_return;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_elements_public_or_private()
{
	return uML_Package_elements_public_or_private;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_getAllAppliedProfiles_()
{
	return uML_Package_getAllAppliedProfiles_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAllAppliedProfiles__return()
{
	return uML_Package_getAllAppliedProfiles__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_getAllProfileApplications_()
{
	return uML_Package_getAllProfileApplications_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAllProfileApplications__return()
{
	return uML_Package_getAllProfileApplications__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_getAppliedProfile_String()
{
	return uML_Package_getAppliedProfile_String;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_getAppliedProfile_String_Boolean()
{
	return uML_Package_getAppliedProfile_String_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_qualifiedName()
{
	return uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_qualifiedName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_recurse()
{
	return uML_Package_getAppliedProfile_String_Boolean_UML_Package_getAppliedProfile_recurse;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAppliedProfile_String_Boolean_return()
{
	return uML_Package_getAppliedProfile_String_Boolean_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAppliedProfile_String_UML_Package_getAppliedProfile_qualifiedName()
{
	return uML_Package_getAppliedProfile_String_UML_Package_getAppliedProfile_qualifiedName;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAppliedProfile_String_return()
{
	return uML_Package_getAppliedProfile_String_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_getAppliedProfiles_()
{
	return uML_Package_getAppliedProfiles_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getAppliedProfiles__return()
{
	return uML_Package_getAppliedProfiles__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_getProfileApplication_Profile()
{
	return uML_Package_getProfileApplication_Profile;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_getProfileApplication_Profile_Boolean()
{
	return uML_Package_getProfileApplication_Profile_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_profile()
{
	return uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_recurse()
{
	return uML_Package_getProfileApplication_Profile_Boolean_UML_Package_getProfileApplication_recurse;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getProfileApplication_Profile_Boolean_return()
{
	return uML_Package_getProfileApplication_Profile_Boolean_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getProfileApplication_Profile_UML_Package_getProfileApplication_profile()
{
	return uML_Package_getProfileApplication_Profile_UML_Package_getProfileApplication_profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_getProfileApplication_Profile_return()
{
	return uML_Package_getProfileApplication_Profile_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_isModelLibrary_()
{
	return uML_Package_isModelLibrary_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_isModelLibrary__return()
{
	return uML_Package_isModelLibrary__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_isProfileApplied_Profile()
{
	return uML_Package_isProfileApplied_Profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_isProfileApplied_Profile_UML_Package_isProfileApplied_profile()
{
	return uML_Package_isProfileApplied_Profile_UML_Package_isProfileApplied_profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_isProfileApplied_Profile_return()
{
	return uML_Package_isProfileApplied_Profile_return;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_makesVisible_pre()
{
	return uML_Package_makesVisible_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_makesVisible_result()
{
	return uML_Package_makesVisible_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_makesVisible_spec()
{
	return uML_Package_makesVisible_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_makesVisible_NamedElement()
{
	return uML_Package_makesVisible_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_makesVisible_NamedElement_UML_Package_makesVisible_el()
{
	return uML_Package_makesVisible_NamedElement_UML_Package_makesVisible_el;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_mustBeOwned_result()
{
	return uML_Package_mustBeOwned_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_mustBeOwned_spec()
{
	return uML_Package_mustBeOwned_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_mustBeOwned_()
{
	return uML_Package_mustBeOwned_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_nestedPackage()
{
	return uML_Package_nestedPackage;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_nestedPackage_result()
{
	return uML_Package_nestedPackage_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_nestedPackage_spec()
{
	return uML_Package_nestedPackage_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_nestedPackage_()
{
	return uML_Package_nestedPackage_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_nestingPackage()
{
	return uML_Package_nestingPackage;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_ownedStereotype()
{
	return uML_Package_ownedStereotype;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_ownedStereotype_result()
{
	return uML_Package_ownedStereotype_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_ownedStereotype_spec()
{
	return uML_Package_ownedStereotype_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_ownedStereotype_()
{
	return uML_Package_ownedStereotype_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_ownedType()
{
	return uML_Package_ownedType;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_ownedType_result()
{
	return uML_Package_ownedType_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_ownedType_spec()
{
	return uML_Package_ownedType_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_ownedType_()
{
	return uML_Package_ownedType_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_packageMerge()
{
	return uML_Package_packageMerge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_packagedElement()
{
	return uML_Package_packagedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Package_profileApplication()
{
	return uML_Package_profileApplication;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_unapplyProfile_Profile()
{
	return uML_Package_unapplyProfile_Profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_unapplyProfile_Profile_UML_Package_unapplyProfile_profile()
{
	return uML_Package_unapplyProfile_Profile_UML_Package_unapplyProfile_profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_unapplyProfile_Profile_return()
{
	return uML_Package_unapplyProfile_Profile_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Package_visibleMembers_result()
{
	return uML_Package_visibleMembers_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Package_visibleMembers_spec()
{
	return uML_Package_visibleMembers_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Package_visibleMembers_()
{
	return uML_Package_visibleMembers_;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_PackageImport()
{
	return uML_PackageImport;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_PackageImport_importedPackage()
{
	return uML_PackageImport_importedPackage;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_PackageImport_importingNamespace()
{
	return uML_PackageImport_importingNamespace;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_PackageImport_public_or_private()
{
	return uML_PackageImport_public_or_private;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_PackageImport_visibility()
{
	return uML_PackageImport_visibility;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_PackageMerge()
{
	return uML_PackageMerge;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_PackageMerge_mergedPackage()
{
	return uML_PackageMerge_mergedPackage;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_PackageMerge_receivingPackage()
{
	return uML_PackageMerge_receivingPackage;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_PackageableElement()
{
	return uML_PackageableElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_PackageableElement_namespace_needs_visibility()
{
	return uML_PackageableElement_namespace_needs_visibility;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_PackageableElement_visibility()
{
	return uML_PackageableElement_visibility;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Parameter()
{
	return uML_Parameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Parameter_connector_end()
{
	return uML_Parameter_connector_end;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_default()
{
	return uML_Parameter_default;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_default_result()
{
	return uML_Parameter_default_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Parameter_default_spec()
{
	return uML_Parameter_default_spec;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_defaultValue()
{
	return uML_Parameter_defaultValue;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_default_()
{
	return uML_Parameter_default_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_direction()
{
	return uML_Parameter_direction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_effect()
{
	return uML_Parameter_effect;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Parameter_in_and_out()
{
	return uML_Parameter_in_and_out;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_isException()
{
	return uML_Parameter_isException;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_isSetDefault_()
{
	return uML_Parameter_isSetDefault_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_isSetDefault__return()
{
	return uML_Parameter_isSetDefault__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_isStream()
{
	return uML_Parameter_isStream;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Parameter_not_exception()
{
	return uML_Parameter_not_exception;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Parameter_object_effect()
{
	return uML_Parameter_object_effect;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_operation()
{
	return uML_Parameter_operation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Parameter_parameterSet()
{
	return uML_Parameter_parameterSet;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Parameter_reentrant_behaviors()
{
	return uML_Parameter_reentrant_behaviors;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_setBooleanDefaultValue_Boolean()
{
	return uML_Parameter_setBooleanDefaultValue_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_setBooleanDefaultValue_Boolean_UML_Parameter_setBooleanDefaultValue_value()
{
	return uML_Parameter_setBooleanDefaultValue_Boolean_UML_Parameter_setBooleanDefaultValue_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_setDefault_String()
{
	return uML_Parameter_setDefault_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_setDefault_String_UML_Parameter_setDefault_newDefault()
{
	return uML_Parameter_setDefault_String_UML_Parameter_setDefault_newDefault;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_setIntegerDefaultValue_Integer()
{
	return uML_Parameter_setIntegerDefaultValue_Integer;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_setIntegerDefaultValue_Integer_UML_Parameter_setIntegerDefaultValue_value()
{
	return uML_Parameter_setIntegerDefaultValue_Integer_UML_Parameter_setIntegerDefaultValue_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_setNullDefaultValue_()
{
	return uML_Parameter_setNullDefaultValue_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_setRealDefaultValue_Real()
{
	return uML_Parameter_setRealDefaultValue_Real;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_setRealDefaultValue_Real_UML_Parameter_setRealDefaultValue_value()
{
	return uML_Parameter_setRealDefaultValue_Real_UML_Parameter_setRealDefaultValue_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_setStringDefaultValue_String()
{
	return uML_Parameter_setStringDefaultValue_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_setStringDefaultValue_String_UML_Parameter_setStringDefaultValue_value()
{
	return uML_Parameter_setStringDefaultValue_String_UML_Parameter_setStringDefaultValue_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural()
{
	return uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Parameter_setUnlimitedNaturalDefaultValue_value()
{
	return uML_Parameter_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Parameter_setUnlimitedNaturalDefaultValue_value;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Parameter_stream_and_exception()
{
	return uML_Parameter_stream_and_exception;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Parameter_unsetDefault_()
{
	return uML_Parameter_unsetDefault_;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_ParameterDirectionKind()
{
	return uML_ParameterDirectionKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterDirectionKind_in()
{
	return uML_ParameterDirectionKind_in;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterDirectionKind_inout()
{
	return uML_ParameterDirectionKind_inout;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterDirectionKind_out()
{
	return uML_ParameterDirectionKind_out;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterDirectionKind_return()
{
	return uML_ParameterDirectionKind_return;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_ParameterEffectKind()
{
	return uML_ParameterEffectKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterEffectKind_create()
{
	return uML_ParameterEffectKind_create;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterEffectKind_delete()
{
	return uML_ParameterEffectKind_delete;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterEffectKind_read()
{
	return uML_ParameterEffectKind_read;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_ParameterEffectKind_update()
{
	return uML_ParameterEffectKind_update;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ParameterSet()
{
	return uML_ParameterSet;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ParameterSet_condition()
{
	return uML_ParameterSet_condition;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ParameterSet_input()
{
	return uML_ParameterSet_input;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ParameterSet_parameter()
{
	return uML_ParameterSet_parameter;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ParameterSet_same_parameterized_entity()
{
	return uML_ParameterSet_same_parameterized_entity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ParameterSet_two_parameter_sets()
{
	return uML_ParameterSet_two_parameter_sets;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ParameterableElement()
{
	return uML_ParameterableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ParameterableElement_isCompatibleWith_result()
{
	return uML_ParameterableElement_isCompatibleWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ParameterableElement_isCompatibleWith_spec()
{
	return uML_ParameterableElement_isCompatibleWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ParameterableElement_isCompatibleWith_ParameterableElement()
{
	return uML_ParameterableElement_isCompatibleWith_ParameterableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ParameterableElement_isCompatibleWith_ParameterableElement_UML_ParameterableElement_isCompatibleWith_p()
{
	return uML_ParameterableElement_isCompatibleWith_ParameterableElement_UML_ParameterableElement_isCompatibleWith_p;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ParameterableElement_isTemplateParameter_result()
{
	return uML_ParameterableElement_isTemplateParameter_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ParameterableElement_isTemplateParameter_spec()
{
	return uML_ParameterableElement_isTemplateParameter_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ParameterableElement_isTemplateParameter_()
{
	return uML_ParameterableElement_isTemplateParameter_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ParameterableElement_owningTemplateParameter()
{
	return uML_ParameterableElement_owningTemplateParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ParameterableElement_templateParameter()
{
	return uML_ParameterableElement_templateParameter;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_PartDecomposition()
{
	return uML_PartDecomposition;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_PartDecomposition_assume()
{
	return uML_PartDecomposition_assume;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_PartDecomposition_commutativity_of_decomposition()
{
	return uML_PartDecomposition_commutativity_of_decomposition;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_PartDecomposition_parts_of_internal_structures()
{
	return uML_PartDecomposition_parts_of_internal_structures;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Pin()
{
	return uML_Pin;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pin_control_pins()
{
	return uML_Pin_control_pins;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Pin_isControl()
{
	return uML_Pin_isControl;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pin_not_unique()
{
	return uML_Pin_not_unique;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Port()
{
	return uML_Port;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Port_basicProvided_result()
{
	return uML_Port_basicProvided_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Port_basicProvided_spec()
{
	return uML_Port_basicProvided_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Port_basicProvided_()
{
	return uML_Port_basicProvided_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Port_basicRequired_result()
{
	return uML_Port_basicRequired_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Port_basicRequired_spec()
{
	return uML_Port_basicRequired_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Port_basicRequired_()
{
	return uML_Port_basicRequired_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Port_default_value()
{
	return uML_Port_default_value;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Port_encapsulated_owner()
{
	return uML_Port_encapsulated_owner;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Port_isBehavior()
{
	return uML_Port_isBehavior;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Port_isConjugated()
{
	return uML_Port_isConjugated;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Port_isService()
{
	return uML_Port_isService;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Port_port_aggregation()
{
	return uML_Port_port_aggregation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Port_protocol()
{
	return uML_Port_protocol;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Port_provided()
{
	return uML_Port_provided;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Port_provided_result()
{
	return uML_Port_provided_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Port_provided_spec()
{
	return uML_Port_provided_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Port_provided_()
{
	return uML_Port_provided_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Port_redefinedPort()
{
	return uML_Port_redefinedPort;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Port_required()
{
	return uML_Port_required;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Port_required_result()
{
	return uML_Port_required_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Port_required_spec()
{
	return uML_Port_required_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Port_required_()
{
	return uML_Port_required_;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_PrimitiveType()
{
	return uML_PrimitiveType;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Profile()
{
	return uML_Profile;
}
std::shared_ptr<uml::PrimitiveType> UMLPackageImpl::get_UML_Profile_EMap_EJavaObject_EJavaObject()
{
	return uML_Profile_EMap_EJavaObject_EJavaObject;
}
std::shared_ptr<uml::PrimitiveType> UMLPackageImpl::get_UML_Profile_EMap_EString_EString()
{
	return uML_Profile_EMap_EString_EString;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_create_Classifier()
{
	return uML_Profile_create_Classifier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_create_Classifier_UML_Profile_create_classifier()
{
	return uML_Profile_create_Classifier_UML_Profile_create_classifier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_create_Classifier_return()
{
	return uML_Profile_create_Classifier_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_define_()
{
	return uML_Profile_define_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_define__return()
{
	return uML_Profile_define__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_getDefinition_()
{
	return uML_Profile_getDefinition_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_getDefinition_NamedElement()
{
	return uML_Profile_getDefinition_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_getDefinition_NamedElement_UML_Profile_getDefinition_namedElement()
{
	return uML_Profile_getDefinition_NamedElement_UML_Profile_getDefinition_namedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_getDefinition_NamedElement_return()
{
	return uML_Profile_getDefinition_NamedElement_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_getDefinition__return()
{
	return uML_Profile_getDefinition__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_getOwnedExtensions_Boolean()
{
	return uML_Profile_getOwnedExtensions_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_getOwnedExtensions_Boolean_UML_Profile_getOwnedExtensions_requiredOnly()
{
	return uML_Profile_getOwnedExtensions_Boolean_UML_Profile_getOwnedExtensions_requiredOnly;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_getOwnedExtensions_Boolean_return()
{
	return uML_Profile_getOwnedExtensions_Boolean_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_getReferencedMetaclasses_()
{
	return uML_Profile_getReferencedMetaclasses_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_getReferencedMetaclasses__return()
{
	return uML_Profile_getReferencedMetaclasses__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_getReferencedMetamodels_()
{
	return uML_Profile_getReferencedMetamodels_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_getReferencedMetamodels__return()
{
	return uML_Profile_getReferencedMetamodels__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Profile_isDefined_()
{
	return uML_Profile_isDefined_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Profile_isDefined__return()
{
	return uML_Profile_isDefined__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Profile_metaclassReference()
{
	return uML_Profile_metaclassReference;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Profile_metaclass_reference_not_specialized()
{
	return uML_Profile_metaclass_reference_not_specialized;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Profile_metamodelReference()
{
	return uML_Profile_metamodelReference;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Profile_references_same_metamodel()
{
	return uML_Profile_references_same_metamodel;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ProfileApplication()
{
	return uML_ProfileApplication;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProfileApplication_appliedProfile()
{
	return uML_ProfileApplication_appliedProfile;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProfileApplication_applyingPackage()
{
	return uML_ProfileApplication_applyingPackage;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ProfileApplication_getAppliedDefinition_()
{
	return uML_ProfileApplication_getAppliedDefinition_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ProfileApplication_getAppliedDefinition_NamedElement()
{
	return uML_ProfileApplication_getAppliedDefinition_NamedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ProfileApplication_getAppliedDefinition_NamedElement_UML_ProfileApplication_getAppliedDefinition_namedElement()
{
	return uML_ProfileApplication_getAppliedDefinition_NamedElement_UML_ProfileApplication_getAppliedDefinition_namedElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ProfileApplication_getAppliedDefinition_NamedElement_return()
{
	return uML_ProfileApplication_getAppliedDefinition_NamedElement_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ProfileApplication_getAppliedDefinition__return()
{
	return uML_ProfileApplication_getAppliedDefinition__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProfileApplication_isStrict()
{
	return uML_ProfileApplication_isStrict;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Property()
{
	return uML_Property;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_aggregation()
{
	return uML_Property_aggregation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_association()
{
	return uML_Property_association;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_associationEnd()
{
	return uML_Property_associationEnd;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_binding_to_attribute()
{
	return uML_Property_binding_to_attribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_class()
{
	return uML_Property_class;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_datatype()
{
	return uML_Property_datatype;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_default()
{
	return uML_Property_default;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_defaultValue()
{
	return uML_Property_defaultValue;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_deployment_target()
{
	return uML_Property_deployment_target;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_derived_union_is_derived()
{
	return uML_Property_derived_union_is_derived;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_derived_union_is_read_only()
{
	return uML_Property_derived_union_is_read_only;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_getDefault_result()
{
	return uML_Property_getDefault_result;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_getDefault_()
{
	return uML_Property_getDefault_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_getOtherEnd_()
{
	return uML_Property_getOtherEnd_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_getOtherEnd__return()
{
	return uML_Property_getOtherEnd__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_interface()
{
	return uML_Property_interface;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isAttribute_result()
{
	return uML_Property_isAttribute_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_isAttribute_spec()
{
	return uML_Property_isAttribute_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_isAttribute_()
{
	return uML_Property_isAttribute_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isCompatibleWith_result()
{
	return uML_Property_isCompatibleWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_isCompatibleWith_spec()
{
	return uML_Property_isCompatibleWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_isCompatibleWith_ParameterableElement()
{
	return uML_Property_isCompatibleWith_ParameterableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isCompatibleWith_ParameterableElement_UML_Property_isCompatibleWith_p()
{
	return uML_Property_isCompatibleWith_ParameterableElement_UML_Property_isCompatibleWith_p;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_isComposite()
{
	return uML_Property_isComposite;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isComposite_result()
{
	return uML_Property_isComposite_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_isComposite_spec()
{
	return uML_Property_isComposite_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_isComposite_()
{
	return uML_Property_isComposite_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_isConsistentWith_pre()
{
	return uML_Property_isConsistentWith_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isConsistentWith_result()
{
	return uML_Property_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_isConsistentWith_spec()
{
	return uML_Property_isConsistentWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_isConsistentWith_RedefinableElement()
{
	return uML_Property_isConsistentWith_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isConsistentWith_RedefinableElement_UML_Property_isConsistentWith_redefiningElement()
{
	return uML_Property_isConsistentWith_RedefinableElement_UML_Property_isConsistentWith_redefiningElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_isDerived()
{
	return uML_Property_isDerived;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_isDerivedUnion()
{
	return uML_Property_isDerivedUnion;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_isID()
{
	return uML_Property_isID;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isNavigable_result()
{
	return uML_Property_isNavigable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_isNavigable_spec()
{
	return uML_Property_isNavigable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_isNavigable_()
{
	return uML_Property_isNavigable_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_isSetDefault_()
{
	return uML_Property_isSetDefault_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_isSetDefault__return()
{
	return uML_Property_isSetDefault__return;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_multiplicity_of_composite()
{
	return uML_Property_multiplicity_of_composite;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_opposite()
{
	return uML_Property_opposite;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_opposite_result()
{
	return uML_Property_opposite_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_opposite_spec()
{
	return uML_Property_opposite_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_opposite_()
{
	return uML_Property_opposite_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_owningAssociation()
{
	return uML_Property_owningAssociation;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_qualified_is_association_end()
{
	return uML_Property_qualified_is_association_end;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_qualifier()
{
	return uML_Property_qualifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_redefinedProperty()
{
	return uML_Property_redefinedProperty;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_redefined_property_inherited()
{
	return uML_Property_redefined_property_inherited;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setBooleanDefaultValue_Boolean()
{
	return uML_Property_setBooleanDefaultValue_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setBooleanDefaultValue_Boolean_UML_Property_setBooleanDefaultValue_value()
{
	return uML_Property_setBooleanDefaultValue_Boolean_UML_Property_setBooleanDefaultValue_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setDefault_String()
{
	return uML_Property_setDefault_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setDefault_String_UML_Property_setDefault_newDefault()
{
	return uML_Property_setDefault_String_UML_Property_setDefault_newDefault;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setIntegerDefaultValue_Integer()
{
	return uML_Property_setIntegerDefaultValue_Integer;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setIntegerDefaultValue_Integer_UML_Property_setIntegerDefaultValue_value()
{
	return uML_Property_setIntegerDefaultValue_Integer_UML_Property_setIntegerDefaultValue_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setIsComposite_Boolean()
{
	return uML_Property_setIsComposite_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setIsComposite_Boolean_UML_Property_setIsComposite_newIsComposite()
{
	return uML_Property_setIsComposite_Boolean_UML_Property_setIsComposite_newIsComposite;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setIsNavigable_Boolean()
{
	return uML_Property_setIsNavigable_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setIsNavigable_Boolean_UML_Property_setIsNavigable_isNavigable()
{
	return uML_Property_setIsNavigable_Boolean_UML_Property_setIsNavigable_isNavigable;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setNullDefaultValue_()
{
	return uML_Property_setNullDefaultValue_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setOpposite_Property()
{
	return uML_Property_setOpposite_Property;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setOpposite_Property_UML_Property_setOpposite_newOpposite()
{
	return uML_Property_setOpposite_Property_UML_Property_setOpposite_newOpposite;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setRealDefaultValue_Real()
{
	return uML_Property_setRealDefaultValue_Real;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setRealDefaultValue_Real_UML_Property_setRealDefaultValue_value()
{
	return uML_Property_setRealDefaultValue_Real_UML_Property_setRealDefaultValue_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setStringDefaultValue_String()
{
	return uML_Property_setStringDefaultValue_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setStringDefaultValue_String_UML_Property_setStringDefaultValue_value()
{
	return uML_Property_setStringDefaultValue_String_UML_Property_setStringDefaultValue_value;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural()
{
	return uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Property_setUnlimitedNaturalDefaultValue_value()
{
	return uML_Property_setUnlimitedNaturalDefaultValue_UnlimitedNatural_UML_Property_setUnlimitedNaturalDefaultValue_value;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Property_subsettedProperty()
{
	return uML_Property_subsettedProperty;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_subsetted_property_names()
{
	return uML_Property_subsetted_property_names;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Property_subsettingContext_result()
{
	return uML_Property_subsettingContext_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_subsettingContext_spec()
{
	return uML_Property_subsettingContext_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_subsettingContext_()
{
	return uML_Property_subsettingContext_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_subsetting_context_conforms()
{
	return uML_Property_subsetting_context_conforms;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_subsetting_rules()
{
	return uML_Property_subsetting_rules;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Property_type_of_opposite_end()
{
	return uML_Property_type_of_opposite_end;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Property_unsetDefault_()
{
	return uML_Property_unsetDefault_;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ProtocolConformance()
{
	return uML_ProtocolConformance;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProtocolConformance_generalMachine()
{
	return uML_ProtocolConformance_generalMachine;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProtocolConformance_specificMachine()
{
	return uML_ProtocolConformance_specificMachine;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ProtocolStateMachine()
{
	return uML_ProtocolStateMachine;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolStateMachine_classifier_context()
{
	return uML_ProtocolStateMachine_classifier_context;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProtocolStateMachine_conformance()
{
	return uML_ProtocolStateMachine_conformance;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolStateMachine_deep_or_shallow_history()
{
	return uML_ProtocolStateMachine_deep_or_shallow_history;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolStateMachine_entry_exit_do()
{
	return uML_ProtocolStateMachine_entry_exit_do;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolStateMachine_protocol_transitions()
{
	return uML_ProtocolStateMachine_protocol_transitions;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ProtocolTransition()
{
	return uML_ProtocolTransition;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolTransition_associated_actions()
{
	return uML_ProtocolTransition_associated_actions;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolTransition_belongs_to_psm()
{
	return uML_ProtocolTransition_belongs_to_psm;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProtocolTransition_postCondition()
{
	return uML_ProtocolTransition_postCondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProtocolTransition_preCondition()
{
	return uML_ProtocolTransition_preCondition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ProtocolTransition_referred()
{
	return uML_ProtocolTransition_referred;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ProtocolTransition_referred_result()
{
	return uML_ProtocolTransition_referred_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolTransition_referred_spec()
{
	return uML_ProtocolTransition_referred_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ProtocolTransition_referred_()
{
	return uML_ProtocolTransition_referred_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ProtocolTransition_refers_to_operation()
{
	return uML_ProtocolTransition_refers_to_operation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Pseudostate()
{
	return uML_Pseudostate;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_choice_vertex()
{
	return uML_Pseudostate_choice_vertex;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_fork_vertex()
{
	return uML_Pseudostate_fork_vertex;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_history_vertices()
{
	return uML_Pseudostate_history_vertices;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_initial_vertex()
{
	return uML_Pseudostate_initial_vertex;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_join_vertex()
{
	return uML_Pseudostate_join_vertex;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_junction_vertex()
{
	return uML_Pseudostate_junction_vertex;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Pseudostate_kind()
{
	return uML_Pseudostate_kind;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_outgoing_from_initial()
{
	return uML_Pseudostate_outgoing_from_initial;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Pseudostate_state()
{
	return uML_Pseudostate_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Pseudostate_stateMachine()
{
	return uML_Pseudostate_stateMachine;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_transitions_incoming()
{
	return uML_Pseudostate_transitions_incoming;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Pseudostate_transitions_outgoing()
{
	return uML_Pseudostate_transitions_outgoing;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_PseudostateKind()
{
	return uML_PseudostateKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_choice()
{
	return uML_PseudostateKind_choice;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_deepHistory()
{
	return uML_PseudostateKind_deepHistory;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_entryPoint()
{
	return uML_PseudostateKind_entryPoint;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_exitPoint()
{
	return uML_PseudostateKind_exitPoint;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_fork()
{
	return uML_PseudostateKind_fork;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_initial()
{
	return uML_PseudostateKind_initial;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_join()
{
	return uML_PseudostateKind_join;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_junction()
{
	return uML_PseudostateKind_junction;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_shallowHistory()
{
	return uML_PseudostateKind_shallowHistory;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_PseudostateKind_terminate()
{
	return uML_PseudostateKind_terminate;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_QualifierValue()
{
	return uML_QualifierValue;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_QualifierValue_multiplicity_of_qualifier()
{
	return uML_QualifierValue_multiplicity_of_qualifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_QualifierValue_qualifier()
{
	return uML_QualifierValue_qualifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_QualifierValue_qualifier_attribute()
{
	return uML_QualifierValue_qualifier_attribute;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_QualifierValue_type_of_qualifier()
{
	return uML_QualifierValue_type_of_qualifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_QualifierValue_value()
{
	return uML_QualifierValue_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_RaiseExceptionAction()
{
	return uML_RaiseExceptionAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RaiseExceptionAction_exception()
{
	return uML_RaiseExceptionAction_exception;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadExtentAction()
{
	return uML_ReadExtentAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadExtentAction_classifier()
{
	return uML_ReadExtentAction_classifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadExtentAction_multiplicity_of_result()
{
	return uML_ReadExtentAction_multiplicity_of_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadExtentAction_result()
{
	return uML_ReadExtentAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadExtentAction_type_is_classifier()
{
	return uML_ReadExtentAction_type_is_classifier;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction()
{
	return uML_ReadIsClassifiedObjectAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_boolean_result()
{
	return uML_ReadIsClassifiedObjectAction_boolean_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_classifier()
{
	return uML_ReadIsClassifiedObjectAction_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_isDirect()
{
	return uML_ReadIsClassifiedObjectAction_isDirect;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_multiplicity_of_input()
{
	return uML_ReadIsClassifiedObjectAction_multiplicity_of_input;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_multiplicity_of_output()
{
	return uML_ReadIsClassifiedObjectAction_multiplicity_of_output;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_no_type()
{
	return uML_ReadIsClassifiedObjectAction_no_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_object()
{
	return uML_ReadIsClassifiedObjectAction_object;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadIsClassifiedObjectAction_result()
{
	return uML_ReadIsClassifiedObjectAction_result;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadLinkAction()
{
	return uML_ReadLinkAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkAction_compatible_multiplicity()
{
	return uML_ReadLinkAction_compatible_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkAction_navigable_open_end()
{
	return uML_ReadLinkAction_navigable_open_end;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkAction_one_open_end()
{
	return uML_ReadLinkAction_one_open_end;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ReadLinkAction_openEnd_result()
{
	return uML_ReadLinkAction_openEnd_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkAction_openEnd_spec()
{
	return uML_ReadLinkAction_openEnd_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ReadLinkAction_openEnd_()
{
	return uML_ReadLinkAction_openEnd_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadLinkAction_result()
{
	return uML_ReadLinkAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkAction_type_and_ordering()
{
	return uML_ReadLinkAction_type_and_ordering;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkAction_visibility()
{
	return uML_ReadLinkAction_visibility;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadLinkObjectEndAction()
{
	return uML_ReadLinkObjectEndAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_association_of_association()
{
	return uML_ReadLinkObjectEndAction_association_of_association;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_end()
{
	return uML_ReadLinkObjectEndAction_end;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_ends_of_association()
{
	return uML_ReadLinkObjectEndAction_ends_of_association;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_multiplicity_of_object()
{
	return uML_ReadLinkObjectEndAction_multiplicity_of_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_multiplicity_of_result()
{
	return uML_ReadLinkObjectEndAction_multiplicity_of_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_object()
{
	return uML_ReadLinkObjectEndAction_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_property()
{
	return uML_ReadLinkObjectEndAction_property;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_result()
{
	return uML_ReadLinkObjectEndAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_type_of_object()
{
	return uML_ReadLinkObjectEndAction_type_of_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndAction_type_of_result()
{
	return uML_ReadLinkObjectEndAction_type_of_result;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction()
{
	return uML_ReadLinkObjectEndQualifierAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_association_of_association()
{
	return uML_ReadLinkObjectEndQualifierAction_association_of_association;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_ends_of_association()
{
	return uML_ReadLinkObjectEndQualifierAction_ends_of_association;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_multiplicity_of_object()
{
	return uML_ReadLinkObjectEndQualifierAction_multiplicity_of_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_multiplicity_of_qualifier()
{
	return uML_ReadLinkObjectEndQualifierAction_multiplicity_of_qualifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_multiplicity_of_result()
{
	return uML_ReadLinkObjectEndQualifierAction_multiplicity_of_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_object()
{
	return uML_ReadLinkObjectEndQualifierAction_object;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_qualifier()
{
	return uML_ReadLinkObjectEndQualifierAction_qualifier;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_qualifier_attribute()
{
	return uML_ReadLinkObjectEndQualifierAction_qualifier_attribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_result()
{
	return uML_ReadLinkObjectEndQualifierAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_same_type()
{
	return uML_ReadLinkObjectEndQualifierAction_same_type;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadLinkObjectEndQualifierAction_type_of_object()
{
	return uML_ReadLinkObjectEndQualifierAction_type_of_object;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadSelfAction()
{
	return uML_ReadSelfAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadSelfAction_contained()
{
	return uML_ReadSelfAction_contained;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadSelfAction_multiplicity()
{
	return uML_ReadSelfAction_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadSelfAction_not_static()
{
	return uML_ReadSelfAction_not_static;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadSelfAction_result()
{
	return uML_ReadSelfAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadSelfAction_type()
{
	return uML_ReadSelfAction_type;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadStructuralFeatureAction()
{
	return uML_ReadStructuralFeatureAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadStructuralFeatureAction_multiplicity()
{
	return uML_ReadStructuralFeatureAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadStructuralFeatureAction_result()
{
	return uML_ReadStructuralFeatureAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadStructuralFeatureAction_type_and_ordering()
{
	return uML_ReadStructuralFeatureAction_type_and_ordering;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReadVariableAction()
{
	return uML_ReadVariableAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadVariableAction_compatible_multiplicity()
{
	return uML_ReadVariableAction_compatible_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReadVariableAction_result()
{
	return uML_ReadVariableAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReadVariableAction_type_and_ordering()
{
	return uML_ReadVariableAction_type_and_ordering;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Realization()
{
	return uML_Realization;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Reception()
{
	return uML_Reception;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Reception_same_name_as_signal()
{
	return uML_Reception_same_name_as_signal;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Reception_same_structure_as_signal()
{
	return uML_Reception_same_structure_as_signal;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Reception_signal()
{
	return uML_Reception_signal;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReclassifyObjectAction()
{
	return uML_ReclassifyObjectAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReclassifyObjectAction_classifier_not_abstract()
{
	return uML_ReclassifyObjectAction_classifier_not_abstract;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReclassifyObjectAction_input_pin()
{
	return uML_ReclassifyObjectAction_input_pin;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReclassifyObjectAction_isReplaceAll()
{
	return uML_ReclassifyObjectAction_isReplaceAll;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReclassifyObjectAction_multiplicity()
{
	return uML_ReclassifyObjectAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReclassifyObjectAction_newClassifier()
{
	return uML_ReclassifyObjectAction_newClassifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReclassifyObjectAction_object()
{
	return uML_ReclassifyObjectAction_object;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReclassifyObjectAction_oldClassifier()
{
	return uML_ReclassifyObjectAction_oldClassifier;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_RedefinableElement()
{
	return uML_RedefinableElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableElement_isConsistentWith_pre()
{
	return uML_RedefinableElement_isConsistentWith_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_RedefinableElement_isConsistentWith_result()
{
	return uML_RedefinableElement_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableElement_isConsistentWith_spec()
{
	return uML_RedefinableElement_isConsistentWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_RedefinableElement_isConsistentWith_RedefinableElement()
{
	return uML_RedefinableElement_isConsistentWith_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_RedefinableElement_isConsistentWith_RedefinableElement_UML_RedefinableElement_isConsistentWith_redefiningElement()
{
	return uML_RedefinableElement_isConsistentWith_RedefinableElement_UML_RedefinableElement_isConsistentWith_redefiningElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RedefinableElement_isLeaf()
{
	return uML_RedefinableElement_isLeaf;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_RedefinableElement_isRedefinitionContextValid_result()
{
	return uML_RedefinableElement_isRedefinitionContextValid_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableElement_isRedefinitionContextValid_spec()
{
	return uML_RedefinableElement_isRedefinitionContextValid_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_RedefinableElement_isRedefinitionContextValid_RedefinableElement()
{
	return uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_UML_RedefinableElement_isRedefinitionContextValid_redefinedElement()
{
	return uML_RedefinableElement_isRedefinitionContextValid_RedefinableElement_UML_RedefinableElement_isRedefinitionContextValid_redefinedElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableElement_non_leaf_redefinition()
{
	return uML_RedefinableElement_non_leaf_redefinition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RedefinableElement_redefinedElement()
{
	return uML_RedefinableElement_redefinedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RedefinableElement_redefinitionContext()
{
	return uML_RedefinableElement_redefinitionContext;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableElement_redefinition_consistent()
{
	return uML_RedefinableElement_redefinition_consistent;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableElement_redefinition_context_valid()
{
	return uML_RedefinableElement_redefinition_context_valid;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_RedefinableTemplateSignature()
{
	return uML_RedefinableTemplateSignature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RedefinableTemplateSignature_classifier()
{
	return uML_RedefinableTemplateSignature_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RedefinableTemplateSignature_extendedSignature()
{
	return uML_RedefinableTemplateSignature_extendedSignature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RedefinableTemplateSignature_inheritedParameter()
{
	return uML_RedefinableTemplateSignature_inheritedParameter;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_RedefinableTemplateSignature_inheritedParameter_result()
{
	return uML_RedefinableTemplateSignature_inheritedParameter_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableTemplateSignature_inheritedParameter_spec()
{
	return uML_RedefinableTemplateSignature_inheritedParameter_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_RedefinableTemplateSignature_inheritedParameter_()
{
	return uML_RedefinableTemplateSignature_inheritedParameter_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableTemplateSignature_isConsistentWith_pre()
{
	return uML_RedefinableTemplateSignature_isConsistentWith_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_RedefinableTemplateSignature_isConsistentWith_result()
{
	return uML_RedefinableTemplateSignature_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableTemplateSignature_isConsistentWith_spec()
{
	return uML_RedefinableTemplateSignature_isConsistentWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement()
{
	return uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_UML_RedefinableTemplateSignature_isConsistentWith_redefiningElement()
{
	return uML_RedefinableTemplateSignature_isConsistentWith_RedefinableElement_UML_RedefinableTemplateSignature_isConsistentWith_redefiningElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RedefinableTemplateSignature_redefines_parents()
{
	return uML_RedefinableTemplateSignature_redefines_parents;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReduceAction()
{
	return uML_ReduceAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReduceAction_collection()
{
	return uML_ReduceAction_collection;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReduceAction_input_type_is_collection()
{
	return uML_ReduceAction_input_type_is_collection;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReduceAction_isOrdered()
{
	return uML_ReduceAction_isOrdered;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReduceAction_output_types_are_compatible()
{
	return uML_ReduceAction_output_types_are_compatible;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReduceAction_reducer()
{
	return uML_ReduceAction_reducer;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReduceAction_reducer_inputs_output()
{
	return uML_ReduceAction_reducer_inputs_output;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReduceAction_result()
{
	return uML_ReduceAction_result;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Region()
{
	return uML_Region;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Region_belongsToPSM_result()
{
	return uML_Region_belongsToPSM_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_belongsToPSM_spec()
{
	return uML_Region_belongsToPSM_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Region_belongsToPSM_()
{
	return uML_Region_belongsToPSM_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Region_containingStateMachine_result()
{
	return uML_Region_containingStateMachine_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_containingStateMachine_spec()
{
	return uML_Region_containingStateMachine_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Region_containingStateMachine_()
{
	return uML_Region_containingStateMachine_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_deep_history_vertex()
{
	return uML_Region_deep_history_vertex;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Region_extendedRegion()
{
	return uML_Region_extendedRegion;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_initial_vertex()
{
	return uML_Region_initial_vertex;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_isConsistentWith_pre()
{
	return uML_Region_isConsistentWith_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Region_isConsistentWith_result()
{
	return uML_Region_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_isConsistentWith_spec()
{
	return uML_Region_isConsistentWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Region_isConsistentWith_RedefinableElement()
{
	return uML_Region_isConsistentWith_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Region_isConsistentWith_RedefinableElement_UML_Region_isConsistentWith_redefiningElement()
{
	return uML_Region_isConsistentWith_RedefinableElement_UML_Region_isConsistentWith_redefiningElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Region_isRedefinitionContextValid_result()
{
	return uML_Region_isRedefinitionContextValid_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_isRedefinitionContextValid_spec()
{
	return uML_Region_isRedefinitionContextValid_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Region_isRedefinitionContextValid_RedefinableElement()
{
	return uML_Region_isRedefinitionContextValid_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Region_isRedefinitionContextValid_RedefinableElement_UML_Region_isRedefinitionContextValid_redefinedElement()
{
	return uML_Region_isRedefinitionContextValid_RedefinableElement_UML_Region_isRedefinitionContextValid_redefinedElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_owned()
{
	return uML_Region_owned;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Region_redefinitionContext()
{
	return uML_Region_redefinitionContext;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Region_redefinitionContext_result()
{
	return uML_Region_redefinitionContext_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_redefinitionContext_spec()
{
	return uML_Region_redefinitionContext_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Region_redefinitionContext_()
{
	return uML_Region_redefinitionContext_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Region_shallow_history_vertex()
{
	return uML_Region_shallow_history_vertex;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Region_state()
{
	return uML_Region_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Region_stateMachine()
{
	return uML_Region_stateMachine;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Region_subvertex()
{
	return uML_Region_subvertex;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Region_transition()
{
	return uML_Region_transition;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Relationship()
{
	return uML_Relationship;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Relationship_relatedElement()
{
	return uML_Relationship_relatedElement;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_RemoveStructuralFeatureValueAction()
{
	return uML_RemoveStructuralFeatureValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RemoveStructuralFeatureValueAction_isRemoveDuplicates()
{
	return uML_RemoveStructuralFeatureValueAction_isRemoveDuplicates;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RemoveStructuralFeatureValueAction_removeAt()
{
	return uML_RemoveStructuralFeatureValueAction_removeAt;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RemoveStructuralFeatureValueAction_removeAt_and_value()
{
	return uML_RemoveStructuralFeatureValueAction_removeAt_and_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_RemoveVariableValueAction()
{
	return uML_RemoveVariableValueAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RemoveVariableValueAction_isRemoveDuplicates()
{
	return uML_RemoveVariableValueAction_isRemoveDuplicates;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_RemoveVariableValueAction_removeAt()
{
	return uML_RemoveVariableValueAction_removeAt;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_RemoveVariableValueAction_removeAt_and_value()
{
	return uML_RemoveVariableValueAction_removeAt_and_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ReplyAction()
{
	return uML_ReplyAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReplyAction_event_on_reply_to_call_trigger()
{
	return uML_ReplyAction_event_on_reply_to_call_trigger;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ReplyAction_pins_match_parameter()
{
	return uML_ReplyAction_pins_match_parameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReplyAction_replyToCall()
{
	return uML_ReplyAction_replyToCall;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReplyAction_replyValue()
{
	return uML_ReplyAction_replyValue;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ReplyAction_returnInformation()
{
	return uML_ReplyAction_returnInformation;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_SendObjectAction()
{
	return uML_SendObjectAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_SendObjectAction_request()
{
	return uML_SendObjectAction_request;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_SendObjectAction_target()
{
	return uML_SendObjectAction_target;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_SendObjectAction_type_target_pin()
{
	return uML_SendObjectAction_type_target_pin;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_SendSignalAction()
{
	return uML_SendSignalAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_SendSignalAction_number_order()
{
	return uML_SendSignalAction_number_order;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_SendSignalAction_signal()
{
	return uML_SendSignalAction_signal;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_SendSignalAction_target()
{
	return uML_SendSignalAction_target;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_SendSignalAction_type_ordering_multiplicity()
{
	return uML_SendSignalAction_type_ordering_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_SendSignalAction_type_target_pin()
{
	return uML_SendSignalAction_type_target_pin;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_SequenceNode()
{
	return uML_SequenceNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_SequenceNode_executableNode()
{
	return uML_SequenceNode_executableNode;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Signal()
{
	return uML_Signal;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural()
{
	return uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_lower()
{
	return uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name()
{
	return uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type()
{
	return uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_upper()
{
	return uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_Signal_createOwnedAttribute_upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return()
{
	return uML_Signal_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Signal_ownedAttribute()
{
	return uML_Signal_ownedAttribute;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_SignalEvent()
{
	return uML_SignalEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_SignalEvent_signal()
{
	return uML_SignalEvent_signal;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Slot()
{
	return uML_Slot;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Slot_definingFeature()
{
	return uML_Slot_definingFeature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Slot_owningInstance()
{
	return uML_Slot_owningInstance;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Slot_value()
{
	return uML_Slot_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StartClassifierBehaviorAction()
{
	return uML_StartClassifierBehaviorAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartClassifierBehaviorAction_multiplicity()
{
	return uML_StartClassifierBehaviorAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StartClassifierBehaviorAction_object()
{
	return uML_StartClassifierBehaviorAction_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartClassifierBehaviorAction_type_has_classifier()
{
	return uML_StartClassifierBehaviorAction_type_has_classifier;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StartObjectBehaviorAction()
{
	return uML_StartObjectBehaviorAction;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StartObjectBehaviorAction_behavior_result()
{
	return uML_StartObjectBehaviorAction_behavior_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartObjectBehaviorAction_behavior_spec()
{
	return uML_StartObjectBehaviorAction_behavior_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StartObjectBehaviorAction_behavior_()
{
	return uML_StartObjectBehaviorAction_behavior_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StartObjectBehaviorAction_inputParameters_result()
{
	return uML_StartObjectBehaviorAction_inputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartObjectBehaviorAction_inputParameters_spec()
{
	return uML_StartObjectBehaviorAction_inputParameters_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StartObjectBehaviorAction_inputParameters_()
{
	return uML_StartObjectBehaviorAction_inputParameters_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartObjectBehaviorAction_multiplicity_of_object()
{
	return uML_StartObjectBehaviorAction_multiplicity_of_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartObjectBehaviorAction_no_onport()
{
	return uML_StartObjectBehaviorAction_no_onport;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StartObjectBehaviorAction_object()
{
	return uML_StartObjectBehaviorAction_object;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StartObjectBehaviorAction_outputParameters_result()
{
	return uML_StartObjectBehaviorAction_outputParameters_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartObjectBehaviorAction_outputParameters_spec()
{
	return uML_StartObjectBehaviorAction_outputParameters_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StartObjectBehaviorAction_outputParameters_()
{
	return uML_StartObjectBehaviorAction_outputParameters_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StartObjectBehaviorAction_type_of_object()
{
	return uML_StartObjectBehaviorAction_type_of_object;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_State()
{
	return uML_State;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_composite_states()
{
	return uML_State_composite_states;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_connection()
{
	return uML_State_connection;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_connectionPoint()
{
	return uML_State_connectionPoint;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_containingStateMachine_result()
{
	return uML_State_containingStateMachine_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_containingStateMachine_spec()
{
	return uML_State_containingStateMachine_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_containingStateMachine_()
{
	return uML_State_containingStateMachine_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_deferrableTrigger()
{
	return uML_State_deferrableTrigger;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_destinations_or_sources_of_transitions()
{
	return uML_State_destinations_or_sources_of_transitions;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_doActivity()
{
	return uML_State_doActivity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_entry()
{
	return uML_State_entry;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_entry_or_exit()
{
	return uML_State_entry_or_exit;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_exit()
{
	return uML_State_exit;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_isComposite()
{
	return uML_State_isComposite;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isComposite_result()
{
	return uML_State_isComposite_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_isComposite_spec()
{
	return uML_State_isComposite_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_isComposite_()
{
	return uML_State_isComposite_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_isConsistentWith_pre()
{
	return uML_State_isConsistentWith_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isConsistentWith_result()
{
	return uML_State_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_isConsistentWith_spec()
{
	return uML_State_isConsistentWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_isConsistentWith_RedefinableElement()
{
	return uML_State_isConsistentWith_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isConsistentWith_RedefinableElement_UML_State_isConsistentWith_redefiningElement()
{
	return uML_State_isConsistentWith_RedefinableElement_UML_State_isConsistentWith_redefiningElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_isOrthogonal()
{
	return uML_State_isOrthogonal;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isOrthogonal_result()
{
	return uML_State_isOrthogonal_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_isOrthogonal_spec()
{
	return uML_State_isOrthogonal_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_isOrthogonal_()
{
	return uML_State_isOrthogonal_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isRedefinitionContextValid_result()
{
	return uML_State_isRedefinitionContextValid_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_isRedefinitionContextValid_spec()
{
	return uML_State_isRedefinitionContextValid_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_isRedefinitionContextValid_RedefinableElement()
{
	return uML_State_isRedefinitionContextValid_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isRedefinitionContextValid_RedefinableElement_UML_State_isRedefinitionContextValid_redefinedElement()
{
	return uML_State_isRedefinitionContextValid_RedefinableElement_UML_State_isRedefinitionContextValid_redefinedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_isSimple()
{
	return uML_State_isSimple;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isSimple_result()
{
	return uML_State_isSimple_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_isSimple_spec()
{
	return uML_State_isSimple_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_isSimple_()
{
	return uML_State_isSimple_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_isSubmachineState()
{
	return uML_State_isSubmachineState;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_isSubmachineState_result()
{
	return uML_State_isSubmachineState_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_isSubmachineState_spec()
{
	return uML_State_isSubmachineState_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_isSubmachineState_()
{
	return uML_State_isSubmachineState_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_redefinedState()
{
	return uML_State_redefinedState;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_redefinitionContext()
{
	return uML_State_redefinitionContext;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_State_redefinitionContext_result()
{
	return uML_State_redefinitionContext_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_redefinitionContext_spec()
{
	return uML_State_redefinitionContext_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_State_redefinitionContext_()
{
	return uML_State_redefinitionContext_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_region()
{
	return uML_State_region;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_stateInvariant()
{
	return uML_State_stateInvariant;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_State_submachine()
{
	return uML_State_submachine;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_submachine_or_regions()
{
	return uML_State_submachine_or_regions;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_State_submachine_states()
{
	return uML_State_submachine_states;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StateInvariant()
{
	return uML_StateInvariant;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StateInvariant_covered()
{
	return uML_StateInvariant_covered;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StateInvariant_invariant()
{
	return uML_StateInvariant_invariant;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StateMachine()
{
	return uML_StateMachine;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_LCA_result()
{
	return uML_StateMachine_LCA_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_LCA_spec()
{
	return uML_StateMachine_LCA_spec;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_LCAState_result()
{
	return uML_StateMachine_LCAState_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_LCAState_spec()
{
	return uML_StateMachine_LCAState_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StateMachine_LCAState_Vertex_Vertex()
{
	return uML_StateMachine_LCAState_Vertex_Vertex;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v1()
{
	return uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v1;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v2()
{
	return uML_StateMachine_LCAState_Vertex_Vertex_UML_StateMachine_LCAState_v2;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StateMachine_LCA_Vertex_Vertex()
{
	return uML_StateMachine_LCA_Vertex_Vertex;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s1()
{
	return uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s1;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s2()
{
	return uML_StateMachine_LCA_Vertex_Vertex_UML_StateMachine_LCA_s2;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_ancestor_result()
{
	return uML_StateMachine_ancestor_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_ancestor_spec()
{
	return uML_StateMachine_ancestor_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StateMachine_ancestor_Vertex_Vertex()
{
	return uML_StateMachine_ancestor_Vertex_Vertex;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s1()
{
	return uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s1;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s2()
{
	return uML_StateMachine_ancestor_Vertex_Vertex_UML_StateMachine_ancestor_s2;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_classifier_context()
{
	return uML_StateMachine_classifier_context;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StateMachine_connectionPoint()
{
	return uML_StateMachine_connectionPoint;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_connection_points()
{
	return uML_StateMachine_connection_points;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_context_classifier()
{
	return uML_StateMachine_context_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StateMachine_extendedStateMachine()
{
	return uML_StateMachine_extendedStateMachine;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_isConsistentWith_result()
{
	return uML_StateMachine_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_isConsistentWith_spec()
{
	return uML_StateMachine_isConsistentWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StateMachine_isConsistentWith_RedefinableElement()
{
	return uML_StateMachine_isConsistentWith_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_isConsistentWith_RedefinableElement_UML_StateMachine_isConsistentWith_redefiningElement()
{
	return uML_StateMachine_isConsistentWith_RedefinableElement_UML_StateMachine_isConsistentWith_redefiningElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_isRedefinitionContextValid_result()
{
	return uML_StateMachine_isRedefinitionContextValid_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_isRedefinitionContextValid_spec()
{
	return uML_StateMachine_isRedefinitionContextValid_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StateMachine_isRedefinitionContextValid_RedefinableElement()
{
	return uML_StateMachine_isRedefinitionContextValid_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StateMachine_isRedefinitionContextValid_RedefinableElement_UML_StateMachine_isRedefinitionContextValid_redefinedElement()
{
	return uML_StateMachine_isRedefinitionContextValid_RedefinableElement_UML_StateMachine_isRedefinitionContextValid_redefinedElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StateMachine_method()
{
	return uML_StateMachine_method;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StateMachine_region()
{
	return uML_StateMachine_region;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StateMachine_submachineState()
{
	return uML_StateMachine_submachineState;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Stereotype()
{
	return uML_Stereotype;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_associationEndOwnership()
{
	return uML_Stereotype_associationEndOwnership;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_base_property_multiplicity_multiple_extension()
{
	return uML_Stereotype_base_property_multiplicity_multiple_extension;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_base_property_multiplicity_single_extension()
{
	return uML_Stereotype_base_property_multiplicity_single_extension;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_base_property_upper_bound()
{
	return uML_Stereotype_base_property_upper_bound;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_binaryAssociationsOnly()
{
	return uML_Stereotype_binaryAssociationsOnly;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_containingProfile_result()
{
	return uML_Stereotype_containingProfile_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_containingProfile_spec()
{
	return uML_Stereotype_containingProfile_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_containingProfile_()
{
	return uML_Stereotype_containingProfile_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_createExtension_Class_Boolean()
{
	return uML_Stereotype_createExtension_Class_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_isRequired()
{
	return uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_isRequired;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_metaclass()
{
	return uML_Stereotype_createExtension_Class_Boolean_UML_Stereotype_createExtension_metaclass;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createExtension_Class_Boolean_return()
{
	return uML_Stereotype_createExtension_Class_Boolean_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_createIcon_String()
{
	return uML_Stereotype_createIcon_String;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_createIcon_String_String()
{
	return uML_Stereotype_createIcon_String_String;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_content()
{
	return uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_content;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_format()
{
	return uML_Stereotype_createIcon_String_String_UML_Stereotype_createIcon_format;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createIcon_String_String_return()
{
	return uML_Stereotype_createIcon_String_String_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createIcon_String_UML_Stereotype_createIcon_location()
{
	return uML_Stereotype_createIcon_String_UML_Stereotype_createIcon_location;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_createIcon_String_return()
{
	return uML_Stereotype_createIcon_String_return;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_generalize()
{
	return uML_Stereotype_generalize;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_getAllExtendedMetaclasses_()
{
	return uML_Stereotype_getAllExtendedMetaclasses_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_getAllExtendedMetaclasses__return()
{
	return uML_Stereotype_getAllExtendedMetaclasses__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_getDefinition_()
{
	return uML_Stereotype_getDefinition_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_getDefinition__return()
{
	return uML_Stereotype_getDefinition__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_getExtendedMetaclasses_()
{
	return uML_Stereotype_getExtendedMetaclasses_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_getExtendedMetaclasses__return()
{
	return uML_Stereotype_getExtendedMetaclasses__return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_getKeyword_()
{
	return uML_Stereotype_getKeyword_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_getKeyword_Boolean()
{
	return uML_Stereotype_getKeyword_Boolean;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_getKeyword_Boolean_UML_Stereotype_getKeyword_localize()
{
	return uML_Stereotype_getKeyword_Boolean_UML_Stereotype_getKeyword_localize;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_getKeyword_Boolean_return()
{
	return uML_Stereotype_getKeyword_Boolean_return;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_getKeyword__return()
{
	return uML_Stereotype_getKeyword__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Stereotype_icon()
{
	return uML_Stereotype_icon;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_name_not_clash()
{
	return uML_Stereotype_name_not_clash;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Stereotype_profile()
{
	return uML_Stereotype_profile;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Stereotype_profile_result()
{
	return uML_Stereotype_profile_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Stereotype_profile_spec()
{
	return uML_Stereotype_profile_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Stereotype_profile_()
{
	return uML_Stereotype_profile_;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StringExpression()
{
	return uML_StringExpression;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StringExpression_operands()
{
	return uML_StringExpression_operands;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StringExpression_owningExpression()
{
	return uML_StringExpression_owningExpression;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StringExpression_stringValue_result()
{
	return uML_StringExpression_stringValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StringExpression_stringValue_spec()
{
	return uML_StringExpression_stringValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StringExpression_stringValue_()
{
	return uML_StringExpression_stringValue_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StringExpression_subExpression()
{
	return uML_StringExpression_subExpression;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StringExpression_subexpressions()
{
	return uML_StringExpression_subexpressions;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StructuralFeature()
{
	return uML_StructuralFeature;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuralFeature_isReadOnly()
{
	return uML_StructuralFeature_isReadOnly;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StructuralFeatureAction()
{
	return uML_StructuralFeatureAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuralFeatureAction_multiplicity()
{
	return uML_StructuralFeatureAction_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuralFeatureAction_not_static()
{
	return uML_StructuralFeatureAction_not_static;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuralFeatureAction_object()
{
	return uML_StructuralFeatureAction_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuralFeatureAction_object_type()
{
	return uML_StructuralFeatureAction_object_type;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuralFeatureAction_one_featuring_classifier()
{
	return uML_StructuralFeatureAction_one_featuring_classifier;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuralFeatureAction_structuralFeature()
{
	return uML_StructuralFeatureAction_structuralFeature;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuralFeatureAction_visibility()
{
	return uML_StructuralFeatureAction_visibility;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StructuredActivityNode()
{
	return uML_StructuredActivityNode;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredActivityNode_activity()
{
	return uML_StructuredActivityNode_activity;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredActivityNode_allActions_result()
{
	return uML_StructuredActivityNode_allActions_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_allActions_spec()
{
	return uML_StructuredActivityNode_allActions_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredActivityNode_allActions_()
{
	return uML_StructuredActivityNode_allActions_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredActivityNode_allOwnedNodes_result()
{
	return uML_StructuredActivityNode_allOwnedNodes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_allOwnedNodes_spec()
{
	return uML_StructuredActivityNode_allOwnedNodes_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredActivityNode_allOwnedNodes_()
{
	return uML_StructuredActivityNode_allOwnedNodes_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredActivityNode_containingActivity_result()
{
	return uML_StructuredActivityNode_containingActivity_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_containingActivity_spec()
{
	return uML_StructuredActivityNode_containingActivity_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredActivityNode_containingActivity_()
{
	return uML_StructuredActivityNode_containingActivity_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredActivityNode_edge()
{
	return uML_StructuredActivityNode_edge;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_edges()
{
	return uML_StructuredActivityNode_edges;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_input_pin_edges()
{
	return uML_StructuredActivityNode_input_pin_edges;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredActivityNode_mustIsolate()
{
	return uML_StructuredActivityNode_mustIsolate;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredActivityNode_node()
{
	return uML_StructuredActivityNode_node;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_output_pin_edges()
{
	return uML_StructuredActivityNode_output_pin_edges;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredActivityNode_sourceNodes_result()
{
	return uML_StructuredActivityNode_sourceNodes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_sourceNodes_spec()
{
	return uML_StructuredActivityNode_sourceNodes_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredActivityNode_sourceNodes_()
{
	return uML_StructuredActivityNode_sourceNodes_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredActivityNode_structuredNodeInput()
{
	return uML_StructuredActivityNode_structuredNodeInput;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredActivityNode_structuredNodeOutput()
{
	return uML_StructuredActivityNode_structuredNodeOutput;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredActivityNode_targetNodes_result()
{
	return uML_StructuredActivityNode_targetNodes_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredActivityNode_targetNodes_spec()
{
	return uML_StructuredActivityNode_targetNodes_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredActivityNode_targetNodes_()
{
	return uML_StructuredActivityNode_targetNodes_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredActivityNode_variable()
{
	return uML_StructuredActivityNode_variable;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_StructuredClassifier()
{
	return uML_StructuredClassifier;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredClassifier_allRoles_result()
{
	return uML_StructuredClassifier_allRoles_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredClassifier_allRoles_spec()
{
	return uML_StructuredClassifier_allRoles_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredClassifier_allRoles_()
{
	return uML_StructuredClassifier_allRoles_;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural()
{
	return uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_lower()
{
	return uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name()
{
	return uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type()
{
	return uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_upper()
{
	return uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_UML_StructuredClassifier_createOwnedAttribute_upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return()
{
	return uML_StructuredClassifier_createOwnedAttribute_String_Type_Integer_UnlimitedNatural_return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredClassifier_ownedAttribute()
{
	return uML_StructuredClassifier_ownedAttribute;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredClassifier_ownedConnector()
{
	return uML_StructuredClassifier_ownedConnector;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredClassifier_part()
{
	return uML_StructuredClassifier_part;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_StructuredClassifier_part_result()
{
	return uML_StructuredClassifier_part_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_StructuredClassifier_part_spec()
{
	return uML_StructuredClassifier_part_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_StructuredClassifier_part_()
{
	return uML_StructuredClassifier_part_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_StructuredClassifier_role()
{
	return uML_StructuredClassifier_role;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Substitution()
{
	return uML_Substitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Substitution_contract()
{
	return uML_Substitution_contract;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Substitution_substitutingClassifier()
{
	return uML_Substitution_substitutingClassifier;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TemplateBinding()
{
	return uML_TemplateBinding;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateBinding_boundElement()
{
	return uML_TemplateBinding_boundElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateBinding_one_parameter_substitution()
{
	return uML_TemplateBinding_one_parameter_substitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateBinding_parameterSubstitution()
{
	return uML_TemplateBinding_parameterSubstitution;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateBinding_parameter_substitution_formal()
{
	return uML_TemplateBinding_parameter_substitution_formal;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateBinding_signature()
{
	return uML_TemplateBinding_signature;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TemplateParameter()
{
	return uML_TemplateParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameter_default()
{
	return uML_TemplateParameter_default;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateParameter_must_be_compatible()
{
	return uML_TemplateParameter_must_be_compatible;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameter_ownedDefault()
{
	return uML_TemplateParameter_ownedDefault;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameter_ownedParameteredElement()
{
	return uML_TemplateParameter_ownedParameteredElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameter_parameteredElement()
{
	return uML_TemplateParameter_parameteredElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameter_signature()
{
	return uML_TemplateParameter_signature;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TemplateParameterSubstitution()
{
	return uML_TemplateParameterSubstitution;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameterSubstitution_actual()
{
	return uML_TemplateParameterSubstitution_actual;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameterSubstitution_formal()
{
	return uML_TemplateParameterSubstitution_formal;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateParameterSubstitution_must_be_compatible()
{
	return uML_TemplateParameterSubstitution_must_be_compatible;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameterSubstitution_ownedActual()
{
	return uML_TemplateParameterSubstitution_ownedActual;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateParameterSubstitution_templateBinding()
{
	return uML_TemplateParameterSubstitution_templateBinding;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TemplateSignature()
{
	return uML_TemplateSignature;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateSignature_own_elements()
{
	return uML_TemplateSignature_own_elements;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateSignature_ownedParameter()
{
	return uML_TemplateSignature_ownedParameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateSignature_parameter()
{
	return uML_TemplateSignature_parameter;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateSignature_template()
{
	return uML_TemplateSignature_template;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateSignature_unique_parameters()
{
	return uML_TemplateSignature_unique_parameters;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TemplateableElement()
{
	return uML_TemplateableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_TemplateableElement_isTemplate_result()
{
	return uML_TemplateableElement_isTemplate_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateableElement_isTemplate_spec()
{
	return uML_TemplateableElement_isTemplate_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_TemplateableElement_isTemplate_()
{
	return uML_TemplateableElement_isTemplate_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateableElement_ownedTemplateSignature()
{
	return uML_TemplateableElement_ownedTemplateSignature;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_TemplateableElement_parameterableElements_result()
{
	return uML_TemplateableElement_parameterableElements_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TemplateableElement_parameterableElements_spec()
{
	return uML_TemplateableElement_parameterableElements_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_TemplateableElement_parameterableElements_()
{
	return uML_TemplateableElement_parameterableElements_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TemplateableElement_templateBinding()
{
	return uML_TemplateableElement_templateBinding;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TestIdentityAction()
{
	return uML_TestIdentityAction;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TestIdentityAction_first()
{
	return uML_TestIdentityAction_first;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TestIdentityAction_multiplicity()
{
	return uML_TestIdentityAction_multiplicity;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TestIdentityAction_no_type()
{
	return uML_TestIdentityAction_no_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TestIdentityAction_result()
{
	return uML_TestIdentityAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TestIdentityAction_result_is_boolean()
{
	return uML_TestIdentityAction_result_is_boolean;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TestIdentityAction_second()
{
	return uML_TestIdentityAction_second;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TimeConstraint()
{
	return uML_TimeConstraint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeConstraint_firstEvent()
{
	return uML_TimeConstraint_firstEvent;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TimeConstraint_has_one_constrainedElement()
{
	return uML_TimeConstraint_has_one_constrainedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeConstraint_specification()
{
	return uML_TimeConstraint_specification;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TimeEvent()
{
	return uML_TimeEvent;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeEvent_isRelative()
{
	return uML_TimeEvent_isRelative;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeEvent_when()
{
	return uML_TimeEvent_when;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TimeEvent_when_non_negative()
{
	return uML_TimeEvent_when_non_negative;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TimeExpression()
{
	return uML_TimeExpression;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeExpression_expr()
{
	return uML_TimeExpression_expr;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_TimeExpression_no_expr_requires_observation()
{
	return uML_TimeExpression_no_expr_requires_observation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeExpression_observation()
{
	return uML_TimeExpression_observation;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_TimeExpression_stringValue_()
{
	return uML_TimeExpression_stringValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_TimeExpression_stringValue__return()
{
	return uML_TimeExpression_stringValue__return;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TimeInterval()
{
	return uML_TimeInterval;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeInterval_max()
{
	return uML_TimeInterval_max;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeInterval_min()
{
	return uML_TimeInterval_min;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TimeObservation()
{
	return uML_TimeObservation;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeObservation_event()
{
	return uML_TimeObservation_event;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TimeObservation_firstEvent()
{
	return uML_TimeObservation_firstEvent;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Transition()
{
	return uML_Transition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_container()
{
	return uML_Transition_container;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Transition_containingStateMachine_result()
{
	return uML_Transition_containingStateMachine_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_containingStateMachine_spec()
{
	return uML_Transition_containingStateMachine_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Transition_containingStateMachine_()
{
	return uML_Transition_containingStateMachine_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_effect()
{
	return uML_Transition_effect;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_fork_segment_guards()
{
	return uML_Transition_fork_segment_guards;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_fork_segment_state()
{
	return uML_Transition_fork_segment_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_guard()
{
	return uML_Transition_guard;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_initial_transition()
{
	return uML_Transition_initial_transition;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_isConsistentWith_pre()
{
	return uML_Transition_isConsistentWith_pre;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Transition_isConsistentWith_result()
{
	return uML_Transition_isConsistentWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_isConsistentWith_spec()
{
	return uML_Transition_isConsistentWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Transition_isConsistentWith_RedefinableElement()
{
	return uML_Transition_isConsistentWith_RedefinableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Transition_isConsistentWith_RedefinableElement_UML_Transition_isConsistentWith_redefiningElement()
{
	return uML_Transition_isConsistentWith_RedefinableElement_UML_Transition_isConsistentWith_redefiningElement;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_join_segment_guards()
{
	return uML_Transition_join_segment_guards;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_join_segment_state()
{
	return uML_Transition_join_segment_state;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_kind()
{
	return uML_Transition_kind;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_outgoing_pseudostates()
{
	return uML_Transition_outgoing_pseudostates;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_redefinedTransition()
{
	return uML_Transition_redefinedTransition;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_redefinitionContext()
{
	return uML_Transition_redefinitionContext;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Transition_redefinitionContext_result()
{
	return uML_Transition_redefinitionContext_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_redefinitionContext_spec()
{
	return uML_Transition_redefinitionContext_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Transition_redefinitionContext_()
{
	return uML_Transition_redefinitionContext_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_source()
{
	return uML_Transition_source;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_state_is_external()
{
	return uML_Transition_state_is_external;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_state_is_internal()
{
	return uML_Transition_state_is_internal;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Transition_state_is_local()
{
	return uML_Transition_state_is_local;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_target()
{
	return uML_Transition_target;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Transition_trigger()
{
	return uML_Transition_trigger;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_TransitionKind()
{
	return uML_TransitionKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_TransitionKind_external()
{
	return uML_TransitionKind_external;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_TransitionKind_internal()
{
	return uML_TransitionKind_internal;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_TransitionKind_local()
{
	return uML_TransitionKind_local;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Trigger()
{
	return uML_Trigger;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Trigger_event()
{
	return uML_Trigger_event;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Trigger_port()
{
	return uML_Trigger_port;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Trigger_trigger_with_ports()
{
	return uML_Trigger_trigger_with_ports;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Type()
{
	return uML_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_conformsTo_result()
{
	return uML_Type_conformsTo_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Type_conformsTo_spec()
{
	return uML_Type_conformsTo_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Type_conformsTo_Type()
{
	return uML_Type_conformsTo_Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_conformsTo_Type_UML_Type_conformsTo_other()
{
	return uML_Type_conformsTo_Type_UML_Type_conformsTo_other;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Aggregation()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Aggregation;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1IsNavigable()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1IsNavigable;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Lower()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Name()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Type()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Type;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Upper()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end1Upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Aggregation()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Aggregation;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2IsNavigable()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2IsNavigable;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Lower()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Lower;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Name()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Name;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Upper()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_UML_Type_createAssociation_end2Upper;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return()
{
	return uML_Type_createAssociation_Boolean_AggregationKind_String_Integer_UnlimitedNatural_Type_Boolean_AggregationKind_String_Integer_UnlimitedNatural_return;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Type_getAssociations_()
{
	return uML_Type_getAssociations_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Type_getAssociations__return()
{
	return uML_Type_getAssociations__return;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Type_package()
{
	return uML_Type_package;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_TypedElement()
{
	return uML_TypedElement;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_TypedElement_type()
{
	return uML_TypedElement_type;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_UnmarshallAction()
{
	return uML_UnmarshallAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UnmarshallAction_multiplicity_of_object()
{
	return uML_UnmarshallAction_multiplicity_of_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UnmarshallAction_number_of_result()
{
	return uML_UnmarshallAction_number_of_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_UnmarshallAction_object()
{
	return uML_UnmarshallAction_object;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UnmarshallAction_object_type()
{
	return uML_UnmarshallAction_object_type;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_UnmarshallAction_result()
{
	return uML_UnmarshallAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UnmarshallAction_structural_feature()
{
	return uML_UnmarshallAction_structural_feature;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UnmarshallAction_type_ordering_and_multiplicity()
{
	return uML_UnmarshallAction_type_ordering_and_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_UnmarshallAction_unmarshallType()
{
	return uML_UnmarshallAction_unmarshallType;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Usage()
{
	return uML_Usage;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_UseCase()
{
	return uML_UseCase;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_UseCase_allIncludedUseCases_result()
{
	return uML_UseCase_allIncludedUseCases_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UseCase_allIncludedUseCases_spec()
{
	return uML_UseCase_allIncludedUseCases_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_UseCase_allIncludedUseCases_()
{
	return uML_UseCase_allIncludedUseCases_;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UseCase_binary_associations()
{
	return uML_UseCase_binary_associations;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UseCase_cannot_include_self()
{
	return uML_UseCase_cannot_include_self;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_UseCase_extend()
{
	return uML_UseCase_extend;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_UseCase_extensionPoint()
{
	return uML_UseCase_extensionPoint;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_UseCase_include()
{
	return uML_UseCase_include;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UseCase_must_have_name()
{
	return uML_UseCase_must_have_name;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_UseCase_no_association_to_use_case()
{
	return uML_UseCase_no_association_to_use_case;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_UseCase_subject()
{
	return uML_UseCase_subject;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ValuePin()
{
	return uML_ValuePin;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValuePin_compatible_type()
{
	return uML_ValuePin_compatible_type;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValuePin_no_incoming_edges()
{
	return uML_ValuePin_no_incoming_edges;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ValuePin_value()
{
	return uML_ValuePin_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ValueSpecification()
{
	return uML_ValueSpecification;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_booleanValue_result()
{
	return uML_ValueSpecification_booleanValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_booleanValue_spec()
{
	return uML_ValueSpecification_booleanValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_booleanValue_()
{
	return uML_ValueSpecification_booleanValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_integerValue_result()
{
	return uML_ValueSpecification_integerValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_integerValue_spec()
{
	return uML_ValueSpecification_integerValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_integerValue_()
{
	return uML_ValueSpecification_integerValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_isCompatibleWith_result()
{
	return uML_ValueSpecification_isCompatibleWith_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_isCompatibleWith_spec()
{
	return uML_ValueSpecification_isCompatibleWith_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_isCompatibleWith_ParameterableElement()
{
	return uML_ValueSpecification_isCompatibleWith_ParameterableElement;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_isCompatibleWith_ParameterableElement_UML_ValueSpecification_isCompatibleWith_p()
{
	return uML_ValueSpecification_isCompatibleWith_ParameterableElement_UML_ValueSpecification_isCompatibleWith_p;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_isComputable_result()
{
	return uML_ValueSpecification_isComputable_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_isComputable_spec()
{
	return uML_ValueSpecification_isComputable_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_isComputable_()
{
	return uML_ValueSpecification_isComputable_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_isNull_result()
{
	return uML_ValueSpecification_isNull_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_isNull_spec()
{
	return uML_ValueSpecification_isNull_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_isNull_()
{
	return uML_ValueSpecification_isNull_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_realValue_result()
{
	return uML_ValueSpecification_realValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_realValue_spec()
{
	return uML_ValueSpecification_realValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_realValue_()
{
	return uML_ValueSpecification_realValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_stringValue_result()
{
	return uML_ValueSpecification_stringValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_stringValue_spec()
{
	return uML_ValueSpecification_stringValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_stringValue_()
{
	return uML_ValueSpecification_stringValue_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_ValueSpecification_unlimitedValue_result()
{
	return uML_ValueSpecification_unlimitedValue_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecification_unlimitedValue_spec()
{
	return uML_ValueSpecification_unlimitedValue_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_ValueSpecification_unlimitedValue_()
{
	return uML_ValueSpecification_unlimitedValue_;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_ValueSpecificationAction()
{
	return uML_ValueSpecificationAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecificationAction_compatible_type()
{
	return uML_ValueSpecificationAction_compatible_type;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_ValueSpecificationAction_multiplicity()
{
	return uML_ValueSpecificationAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ValueSpecificationAction_result()
{
	return uML_ValueSpecificationAction_result;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_ValueSpecificationAction_value()
{
	return uML_ValueSpecificationAction_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Variable()
{
	return uML_Variable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Variable_activityScope()
{
	return uML_Variable_activityScope;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Variable_isAccessibleBy_result()
{
	return uML_Variable_isAccessibleBy_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Variable_isAccessibleBy_spec()
{
	return uML_Variable_isAccessibleBy_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Variable_isAccessibleBy_Action()
{
	return uML_Variable_isAccessibleBy_Action;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Variable_isAccessibleBy_Action_UML_Variable_isAccessibleBy_a()
{
	return uML_Variable_isAccessibleBy_Action_UML_Variable_isAccessibleBy_a;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Variable_scope()
{
	return uML_Variable_scope;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_VariableAction()
{
	return uML_VariableAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_VariableAction_scope_of_variable()
{
	return uML_VariableAction_scope_of_variable;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_VariableAction_variable()
{
	return uML_VariableAction_variable;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_Vertex()
{
	return uML_Vertex;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Vertex_container()
{
	return uML_Vertex_container;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Vertex_containingStateMachine_result()
{
	return uML_Vertex_containingStateMachine_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Vertex_containingStateMachine_spec()
{
	return uML_Vertex_containingStateMachine_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Vertex_containingStateMachine_()
{
	return uML_Vertex_containingStateMachine_;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Vertex_incoming()
{
	return uML_Vertex_incoming;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Vertex_incoming_result()
{
	return uML_Vertex_incoming_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Vertex_incoming_spec()
{
	return uML_Vertex_incoming_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Vertex_incoming_()
{
	return uML_Vertex_incoming_;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Vertex_isContainedInRegion_result()
{
	return uML_Vertex_isContainedInRegion_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Vertex_isContainedInRegion_spec()
{
	return uML_Vertex_isContainedInRegion_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Vertex_isContainedInRegion_Region()
{
	return uML_Vertex_isContainedInRegion_Region;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Vertex_isContainedInRegion_Region_UML_Vertex_isContainedInRegion_r()
{
	return uML_Vertex_isContainedInRegion_Region_UML_Vertex_isContainedInRegion_r;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Vertex_isContainedInState_result()
{
	return uML_Vertex_isContainedInState_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Vertex_isContainedInState_spec()
{
	return uML_Vertex_isContainedInState_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Vertex_isContainedInState_State()
{
	return uML_Vertex_isContainedInState_State;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Vertex_isContainedInState_State_UML_Vertex_isContainedInState_s()
{
	return uML_Vertex_isContainedInState_State_UML_Vertex_isContainedInState_s;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_Vertex_outgoing()
{
	return uML_Vertex_outgoing;
}
std::shared_ptr<uml::Parameter> UMLPackageImpl::get_UML_Vertex_outgoing_result()
{
	return uML_Vertex_outgoing_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_Vertex_outgoing_spec()
{
	return uML_Vertex_outgoing_spec;
}
std::shared_ptr<uml::Operation> UMLPackageImpl::get_UML_Vertex_outgoing_()
{
	return uML_Vertex_outgoing_;
}
std::shared_ptr<uml::Enumeration> UMLPackageImpl::get_UML_VisibilityKind()
{
	return uML_VisibilityKind;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_VisibilityKind_package()
{
	return uML_VisibilityKind_package;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_VisibilityKind_private()
{
	return uML_VisibilityKind_private;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_VisibilityKind_protected()
{
	return uML_VisibilityKind_protected;
}
std::shared_ptr<uml::EnumerationLiteral> UMLPackageImpl::get_UML_VisibilityKind_public()
{
	return uML_VisibilityKind_public;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_WriteLinkAction()
{
	return uML_WriteLinkAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_WriteLinkAction_allow_access()
{
	return uML_WriteLinkAction_allow_access;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_WriteStructuralFeatureAction()
{
	return uML_WriteStructuralFeatureAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_WriteStructuralFeatureAction_multiplicity_of_result()
{
	return uML_WriteStructuralFeatureAction_multiplicity_of_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_WriteStructuralFeatureAction_multiplicity_of_value()
{
	return uML_WriteStructuralFeatureAction_multiplicity_of_value;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_WriteStructuralFeatureAction_result()
{
	return uML_WriteStructuralFeatureAction_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_WriteStructuralFeatureAction_type_of_result()
{
	return uML_WriteStructuralFeatureAction_type_of_result;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_WriteStructuralFeatureAction_type_of_value()
{
	return uML_WriteStructuralFeatureAction_type_of_value;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_WriteStructuralFeatureAction_value()
{
	return uML_WriteStructuralFeatureAction_value;
}
std::shared_ptr<uml::Class> UMLPackageImpl::get_UML_WriteVariableAction()
{
	return uML_WriteVariableAction;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_WriteVariableAction_multiplicity()
{
	return uML_WriteVariableAction_multiplicity;
}
std::shared_ptr<uml::Property> UMLPackageImpl::get_UML_WriteVariableAction_value()
{
	return uML_WriteVariableAction_value;
}
std::shared_ptr<uml::Constraint> UMLPackageImpl::get_UML_WriteVariableAction_value_type()
{
	return uML_WriteVariableAction_value_type;
}


