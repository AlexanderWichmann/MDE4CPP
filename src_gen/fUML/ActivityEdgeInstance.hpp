//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_ACTIVITYEDGEINSTANCE_HPP
#define FUML_ACTIVITYEDGEINSTANCE_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class ActivityEdge;
}

namespace fUML 
{
	class ActivityNodeActivation;
}

namespace fUML 
{
	class ActivityNodeActivationGroup;
}

namespace fUML 
{
	class Offer;
}

namespace fUML 
{
	class Token;
}

// base class includes

// enum includes

#include "EObject.hpp"

//*********************************
namespace fUML 
{
	/*!
	 */
	class ActivityEdgeInstance : virtual public ecore::EObject 
	{
		public:
 			ActivityEdgeInstance(const ActivityEdgeInstance &) {}
			ActivityEdgeInstance& operator=(ActivityEdgeInstance const&) = delete;
	
		protected:
			ActivityEdgeInstance(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~ActivityEdgeInstance() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void sendOffer(std::vector<fUML::Token * > *  tokens)  = 0;
			
			/*!
			 */ 
			virtual int countOfferedValue()  = 0;
			
			/*!
			 */ 
			virtual std::vector<fUML::Token * > *  takeOfferedTokens()  = 0;
			
			/*!
			 */ 
			virtual std::vector<fUML::Token * > *  takeOfferedTokens(int maxCount)  = 0;
			
			/*!
			 */ 
			virtual std::vector<fUML::Token * > *  getOfferedTokens()  = 0;
			
			/*!
			 */ 
			virtual bool hasOffer()  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual uml::ActivityEdge *  getEdge() const = 0;
			
			/*!
			 */
			virtual void setEdge(uml::ActivityEdge *  _edge) = 0;
			
			/*!
			 */
			virtual fUML::ActivityNodeActivation *  getSource() const = 0;
			
			/*!
			 */
			virtual void setSource(fUML::ActivityNodeActivation *  _source) = 0;
			
			/*!
			 */
			virtual fUML::ActivityNodeActivation *  getTarget() const = 0;
			
			/*!
			 */
			virtual void setTarget(fUML::ActivityNodeActivation *  _target) = 0;
			
			/*!
			 */
			virtual std::vector<fUML::Offer * > *  getOffers() const = 0;
			
			/*!
			 */
			virtual fUML::ActivityNodeActivationGroup *  getGroup() const = 0;
			
			/*!
			 */
			virtual void setGroup(fUML::ActivityNodeActivationGroup *  _group) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			uml::ActivityEdge *  m_edge =  nullptr ;
			/*!
			 */
			fUML::ActivityNodeActivation *  m_source =  nullptr ;
			/*!
			 */
			fUML::ActivityNodeActivation *  m_target =  nullptr ;
			/*!
			 */
			std::vector<fUML::Offer * > *  m_offers =  nullptr ;
			/*!
			 */
			fUML::ActivityNodeActivationGroup *  m_group =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			 
	};

}
#endif /* end of include guard: FUML_ACTIVITYEDGEINSTANCE_HPP */

