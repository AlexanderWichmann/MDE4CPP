/*-------------------------------------------------
*
* Tasks created by ecore4CPP Generator 
*
*-------------------------------------------------
*/

apply plugin: 'cpp'

description 'C++ project of model fUML.ecore, generated by Ecore4CPP'

File appendDebugSuffix(File binaryFile) {
	int extensionSeparatorIndex = binaryFile.path.lastIndexOf('.')
	return new File(binaryFile.path.substring(0, extensionSeparatorIndex) + "d" + binaryFile.path.substring(extensionSeparatorIndex))
}

task deliverFUML(dependsOn: ['deliverFUMLHeaders','deliverFUMLDebugSharedLibrary', 'deliverFUMLReleaseSharedLibrary']) {
	description 'deliver fUML header, debug and release libraries to application folder (%MDE4CPP_HOME%/application)'
}

task deliverFUMLHeaders(type: Copy) {
	description 'deliver fUML header to %MDE4CPP_HOME%/application/include/fUML'
	from "."
	into System.getenv('MDE4CPP_HOME')+"/application/include/fUML"
	include "**/*.hpp"
	exclude "build", ".gradle"
}

task deliverFUMLDebugSharedLibrary(type: Copy) {
	description 'deliver fUML debug libary to %MDE4CPP_HOME%/application/bin'
	from "build/libs/fUML/shared/debug"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "fUMLd.dll"
}

task deliverFUMLReleaseSharedLibrary(type: Copy) {
	description 'deliver fUML release libary to %MDE4CPP_HOME%/application/bin'
	from "build/libs/fUML/shared/release"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "fUML.dll"
}

model {
    toolChains {
    	 gcc(Gcc) {
    	 	"g++"
    	 }
    }
	
    buildTypes {
        debug 
        release
    }
	repositories {
        libs(PrebuiltLibraries) {
			[ "ecore","ecore","uml","uml", "PluginFramework" ].each {
				delegate."$it" {
					def libraryName = "${name}"
					headers.srcDir System.getenv('MDE4CPP_HOME')+"/application/include/${libraryName}"
					binaries.withType(SharedLibraryBinary) {
						if(buildType == buildTypes.debug) {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}d.dll")
						} else {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}.dll")						
						}
					}
				}	
			}         
		}
	}

    components {
        fUML(NativeLibrarySpec)
        {
        	sources {
                cpp {
                    source {
                        srcDirs "."  
						include "impl/AcceptEventActionActivationImpl.cpp"
						include "impl/AcceptEventActionEventAccepterImpl.cpp"
						include "impl/ActionActivationImpl.cpp"
						include "impl/ActivityEdgeInstanceImpl.cpp"
						include "impl/ActivityExecutionImpl.cpp"
						include "impl/ActivityFinalNodeActivationImpl.cpp"
						include "impl/ActivityNodeActivationImpl.cpp"
						include "impl/ActivityNodeActivationGroupImpl.cpp"
						include "impl/ActivityParameterNodeActivationImpl.cpp"
						include "impl/AddStructuralFeatureValueActionActivationImpl.cpp"
						include "impl/BooleanValueImpl.cpp"
						include "impl/CallActionActivationImpl.cpp"
						include "impl/CallBehaviorActionActivationImpl.cpp"
						include "impl/CallOperationActionActivationImpl.cpp"
						include "impl/CentralBufferNodeActivationImpl.cpp"
						include "impl/ChoiceStrategyImpl.cpp"
						include "impl/ClassifierBehaviorExecutionImpl.cpp"
						include "impl/ClassifierBehaviorExecutionActivityImpl.cpp"
						include "impl/ClassifierBehaviorExecutionActivity_OwnedBehaviorActivity1Impl.cpp"
						include "impl/ClauseActivationImpl.cpp"
						include "impl/ClearAssociationActionActivationImpl.cpp"
						include "impl/ClearStructuralFeatureActionActivationImpl.cpp"
						include "impl/CompoundValueImpl.cpp"
						include "impl/ConditionalNodeActivationImpl.cpp"
						include "impl/ControlNodeActivationImpl.cpp"
						include "impl/ControlTokenImpl.cpp"
						include "impl/CreateLinkActionActivationImpl.cpp"
						include "impl/CreateObjectActionActivationImpl.cpp"
						include "impl/DataStoreNodeActivationImpl.cpp"
						include "impl/DataValueImpl.cpp"
						include "impl/DecisionNodeActivationImpl.cpp"
						include "impl/DestroyLinkActionActivationImpl.cpp"
						include "impl/DestroyObjectActionActivationImpl.cpp"
						include "impl/DispatchStrategyImpl.cpp"
						include "impl/EnumerationValueImpl.cpp"
						include "impl/EvaluationImpl.cpp"
						include "impl/EventAccepterImpl.cpp"
						include "impl/EventDispatchLoopImpl.cpp"
						include "impl/ExecutionImpl.cpp"
						include "impl/ExecutionFactoryImpl.cpp"
						include "impl/ExecutionFactoryL1Impl.cpp"
						include "impl/ExecutionFactoryL2Impl.cpp"
						include "impl/ExecutionFactoryL3Impl.cpp"
						include "impl/ExecutorImpl.cpp"
						include "impl/ExpansionActivationGroupImpl.cpp"
						include "impl/ExpansionNodeActivationImpl.cpp"
						include "impl/ExpansionRegionActivationImpl.cpp"
						include "impl/ExtensionalValueImpl.cpp"
						include "impl/ExtensionalValueListImpl.cpp"
						include "impl/FIFOGetNextEventStrategyImpl.cpp"
						include "impl/FeatureValueImpl.cpp"
						include "impl/FirstChoiceStrategyImpl.cpp"
						include "impl/FlowFinalNodeActivationImpl.cpp"
						include "impl/ForkNodeActivationImpl.cpp"
						include "impl/ForkedTokenImpl.cpp"
						include "impl/GetNextEventStrategyImpl.cpp"
						include "impl/InitialNodeActivationImpl.cpp"
						include "impl/InputPinActivationImpl.cpp"
						include "impl/InstanceValueEvaluationImpl.cpp"
						include "impl/IntegerValueImpl.cpp"
						include "impl/InvocationActionActivationImpl.cpp"
						include "impl/JoinNodeActivationImpl.cpp"
						include "impl/LinkImpl.cpp"
						include "impl/LinkActionActivationImpl.cpp"
						include "impl/LiteralBooleanEvaluationImpl.cpp"
						include "impl/LiteralEvaluationImpl.cpp"
						include "impl/LiteralIntegerEvaluationImpl.cpp"
						include "impl/LiteralNullEvaluationImpl.cpp"
						include "impl/LiteralRealEvaluationImpl.cpp"
						include "impl/LiteralStringEvaluationImpl.cpp"
						include "impl/LiteralUnlimitedNaturalEvaluationImpl.cpp"
						include "impl/LocusImpl.cpp"
						include "impl/LoopNodeActivationImpl.cpp"
						include "impl/MergeNodeActivationImpl.cpp"
						include "impl/ObjectImpl.cpp"
						include "impl/ObjectActivationImpl.cpp"
						include "impl/ObjectNodeActivationImpl.cpp"
						include "impl/ObjectTokenImpl.cpp"
						include "impl/OfferImpl.cpp"
						include "impl/OpaqueBehaviorExecutionImpl.cpp"
						include "impl/OutputPinActivationImpl.cpp"
						include "impl/ParameterValueImpl.cpp"
						include "impl/PinActivationImpl.cpp"
						include "impl/PrimitiveValueImpl.cpp"
						include "impl/ReadExtentActionActivationImpl.cpp"
						include "impl/ReadIsClassifiedObjectActionActivationImpl.cpp"
						include "impl/ReadLinkActionActivationImpl.cpp"
						include "impl/ReadSelfActionActivationImpl.cpp"
						include "impl/ReadStructuralFeatureActionActivationImpl.cpp"
						include "impl/RealValueImpl.cpp"
						include "impl/ReclassifyObjectActionActivationImpl.cpp"
						include "impl/RedefinitionBasedDispatchStrategyImpl.cpp"
						include "impl/ReduceActionActivationImpl.cpp"
						include "impl/ReferenceImpl.cpp"
						include "impl/RemoveStructuralFeatureValueActivationImpl.cpp"
						include "impl/SemanticStrategyImpl.cpp"
						include "impl/SemanticVisitorImpl.cpp"
						include "impl/SendSignalActionActivationImpl.cpp"
						include "impl/SignalInstanceImpl.cpp"
						include "impl/StartClassifierBehaviorActionActivationImpl.cpp"
						include "impl/StartObjectBehaviorActionActivationImpl.cpp"
						include "impl/StringValueImpl.cpp"
						include "impl/StructuralFeatureActionActivationImpl.cpp"
						include "impl/StructuredActivityNodeActivationImpl.cpp"
						include "impl/StructuredValueImpl.cpp"
						include "impl/TestIdentityActionActivationImpl.cpp"
						include "impl/TokenImpl.cpp"
						include "impl/TokenSetImpl.cpp"
						include "impl/UnlimitedNaturalValueImpl.cpp"
						include "impl/ValueImpl.cpp"
						include "impl/ValueSpecificActionActivationImpl.cpp"
						include "impl/ValuesImpl.cpp"
						include "impl/WriteLinkActionActivationImpl.cpp"
						include "impl/WriteStructuralFeatureActionActivationImpl.cpp"
						include	"impl/FUMLFactoryImpl.cpp"
						include	"FUMLFactory.cpp"
						include	"impl/FUMLPackageImpl.cpp"
						include	"FUMLPackage.cpp"
						include	"impl/FUMLPluginImpl.cpp"
						include	"FUMLPlugin.cpp"
                    }
					exportedHeaders {
                        srcDirs ".", "../", System.getenv('MDE4CPP_HOME')+"/application/include", System.getenv('MDE4CPP_HOME')+"/application/include/abstractDataTypes"
                        include "**/*.hpp"
                    }
					lib library: "ecore"
					lib library: "ecore"
					lib library: "uml"
					lib library: "uml"
					lib library: "PluginFramework"
                }
            }

			binaries.withType(StaticLibraryBinarySpec) {
				buildable = false
			}
        }
		
		withType(NativeComponentSpec) {
			binaries.withType(NativeBinarySpec) {
				if(buildType == buildTypes.debug) {
					if (it instanceof SharedLibraryBinarySpec) {
						sharedLibraryFile = appendDebugSuffix(sharedLibraryFile)
						sharedLibraryLinkFile = appendDebugSuffix(sharedLibraryLinkFile)
					} else if (it instanceof StaticLibraryBinarySpec) {
						staticLibraryFile = appendDebugSuffix(staticLibraryFile)
					} else {
						throw new GradleException("Unknown native library binary")
					}
				}
			}
        }
    }
    
    binaries {
        all {
			linker.args '-fopenmp'
        	cppCompiler.args '-std=c++1y','-Wall', '-Wno-overloaded-virtual', '-Wdeprecated-declarations', '-pipe', '-fmax-errors=5', '-fopenmp'
			if (buildType == buildTypes.debug) {
				cppCompiler.args '-g'
			}
			else {
				cppCompiler.args '-O3', '-DNDEBUG'
			}
        }
    }
}

build.finalizedBy(deliverFUML)
