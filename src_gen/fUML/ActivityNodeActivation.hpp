//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_ACTIVITYNODEACTIVATION_HPP
#define FUML_ACTIVITYNODEACTIVATION_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace fUML 
{
	class ActivityEdgeInstance;
}

namespace fUML 
{
	class ActivityExecution;
}

namespace uml 
{
	class ActivityNode;
}

namespace fUML 
{
	class ActivityNodeActivation;
}

namespace fUML 
{
	class ActivityNodeActivationGroup;
}

namespace fUML 
{
	class Locus;
}

namespace fUML 
{
	class Object;
}

namespace fUML 
{
	class SemanticVisitor;
}

namespace fUML 
{
	class Token;
}

// base class includes
#include "SemanticVisitor.hpp"

// enum includes


//*********************************
namespace fUML 
{
	/*!
	 */
	class ActivityNodeActivation:virtual public SemanticVisitor	{
		public:
 			ActivityNodeActivation(const ActivityNodeActivation &) {}
			ActivityNodeActivation& operator=(ActivityNodeActivation const&) = delete;
	
		protected:
			ActivityNodeActivation(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~ActivityNodeActivation() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void run()  = 0;
			
			/*!
			 */ 
			virtual void recieveOffer()  = 0;
			
			/*!
			 */ 
			virtual std::vector<fUML::Token * > *  takeOfferedTokens()  = 0;
			
			/*!
			 */ 
			virtual void fire(std::vector<fUML::Token * > *  incomingTokens)  = 0;
			
			/*!
			 */ 
			virtual void sendOffers(std::vector<fUML::Token * > *  tokens)  = 0;
			
			/*!
			 */ 
			virtual void terminate()  = 0;
			
			/*!
			 */ 
			virtual bool isReady()  = 0;
			
			/*!
			 */ 
			virtual bool getRunning()  = 0;
			
			/*!
			 */ 
			virtual void addOutgoingEdge(fUML::ActivityEdgeInstance *  edge)  = 0;
			
			/*!
			 */ 
			virtual void addIncomingEdge(fUML::ActivityEdgeInstance *  edge)  = 0;
			
			/*!
			 */ 
			virtual void createNodeActivations()  = 0;
			
			/*!
			 */ 
			virtual void createEdgeInstances()  = 0;
			
			/*!
			 */ 
			virtual bool isSourceFor(fUML::ActivityEdgeInstance *  edgeInstances)  = 0;
			
			/*!
			 */ 
			virtual fUML::ActivityExecution *  getActivityExecution()  = 0;
			
			/*!
			 */ 
			virtual fUML::Object *  getExecutionContext()  = 0;
			
			/*!
			 */ 
			virtual fUML::Locus *  getExecutionLocus()  = 0;
			
			/*!
			 */ 
			virtual fUML::ActivityNodeActivation *  getNodeActivation(uml::ActivityNode *  node)  = 0;
			
			/*!
			 */ 
			virtual void addToken(fUML::Token *  token)  = 0;
			
			/*!
			 */ 
			virtual int removeToken(fUML::Token *  token)  = 0;
			
			/*!
			 */ 
			virtual void addTokens(std::vector<fUML::Token * > *  tokens)  = 0;
			
			/*!
			 */ 
			virtual std::vector<fUML::Token * > *  takeTokens()  = 0;
			
			/*!
			 */ 
			virtual void clearTokens()  = 0;
			
			/*!
			 */ 
			virtual std::vector<fUML::Token * > *  getTokens()  = 0;
			
			/*!
			 */ 
			virtual void suspend()  = 0;
			
			/*!
			 */ 
			virtual void resume()  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual bool isRunning() const = 0;
			
			/*!
			 */ 
			virtual void setRunning (bool _running)= 0; 
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::vector<fUML::ActivityEdgeInstance * > *  getOutgoingEdges() const = 0;
			
			/*!
			 */
			virtual std::vector<fUML::ActivityEdgeInstance * > *  getIncomingEdges() const = 0;
			
			/*!
			 */
			virtual std::vector<fUML::Token * > *  getHeldTokens() const = 0;
			
			/*!
			 */
			virtual fUML::ActivityNodeActivationGroup *  getGroup() const = 0;
			
			/*!
			 */
			virtual void setGroup(fUML::ActivityNodeActivationGroup *  _group) = 0;
			
			/*!
			 */
			virtual uml::ActivityNode *  getNode() const = 0;
			
			/*!
			 */
			virtual void setNode(uml::ActivityNode *  _node) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			 */ 
			bool m_running ;
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			std::vector<fUML::ActivityEdgeInstance * > *  m_outgoingEdges =  nullptr ;
			/*!
			 */
			std::vector<fUML::ActivityEdgeInstance * > *  m_incomingEdges =  nullptr ;
			/*!
			 */
			std::vector<fUML::Token * > *  m_heldTokens =  nullptr ;
			/*!
			 */
			fUML::ActivityNodeActivationGroup *  m_group =  nullptr ;
			/*!
			 */
			uml::ActivityNode *  m_node =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			 
	};

}
#endif /* end of include guard: FUML_ACTIVITYNODEACTIVATION_HPP */

