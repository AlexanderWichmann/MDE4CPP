//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_ACTIVITYNODEACTIVATION_HPP
#define FUML_ACTIVITYNODEACTIVATION_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#define ACTIVITY_DEBUG_ON

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

#include <string>
#include <map>
#include <vector>
#include "SubsetUnion.hpp"
#include "boost/shared_ptr.hpp"
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace fUML 
{
	class ActivityEdgeInstance;
}

namespace fUML 
{
	class ActivityExecution;
}

namespace uml 
{
	class ActivityNode;
}

namespace fUML 
{
	class ActivityNodeActivation;
}

namespace fUML 
{
	class ActivityNodeActivationGroup;
}

namespace fUML 
{
	class Locus;
}

namespace fUML 
{
	class Object;
}

namespace fUML 
{
	class SemanticVisitor;
}

namespace fUML 
{
	class Token;
}

// base class includes
#include "SemanticVisitor.hpp"

// enum includes


//*********************************
namespace fUML 
{
	/*!
	 */
	class ActivityNodeActivation:virtual public SemanticVisitor	{
		public:
 			ActivityNodeActivation(const ActivityNodeActivation &) {}
			ActivityNodeActivation& operator=(ActivityNodeActivation const&) = delete;
	
		protected:
			ActivityNodeActivation(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~ActivityNodeActivation() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void run()  = 0;
			
			/*!
			 */ 
			virtual void recieveOffer()  = 0;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<fUML::Token> > takeOfferedTokens()  = 0;
			
			/*!
			 */ 
			virtual void fire(std::shared_ptr<Bag<fUML::Token> >  incomingTokens)  = 0;
			
			/*!
			 */ 
			virtual void sendOffers(std::shared_ptr<Bag<fUML::Token> >  tokens)  = 0;
			
			/*!
			 */ 
			virtual void terminate()  = 0;
			
			/*!
			 */ 
			virtual bool isReady()  = 0;
			
			/*!
			 */ 
			virtual bool getRunning()  = 0;
			
			/*!
			 */ 
			virtual void addOutgoingEdge(std::shared_ptr<fUML::ActivityEdgeInstance>  edge)  = 0;
			
			/*!
			 */ 
			virtual void addIncomingEdge(std::shared_ptr<fUML::ActivityEdgeInstance>  edge)  = 0;
			
			/*!
			 */ 
			virtual void createNodeActivations()  = 0;
			
			/*!
			 */ 
			virtual void createEdgeInstances()  = 0;
			
			/*!
			 */ 
			virtual bool isSourceFor(std::shared_ptr<fUML::ActivityEdgeInstance>  edgeInstances)  = 0;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::ActivityExecution> getActivityExecution()  = 0;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Object> getExecutionContext()  = 0;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Locus> getExecutionLocus()  = 0;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::ActivityNodeActivation> getNodeActivation(std::shared_ptr<uml::ActivityNode>  node)  = 0;
			
			/*!
			 */ 
			virtual void addToken(std::shared_ptr<fUML::Token>  token)  = 0;
			
			/*!
			 */ 
			virtual int removeToken(std::shared_ptr<fUML::Token>  token)  = 0;
			
			/*!
			 */ 
			virtual void addTokens(std::shared_ptr<Bag<fUML::Token> >  tokens)  = 0;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<fUML::Token> > takeTokens()  = 0;
			
			/*!
			 */ 
			virtual void clearTokens()  = 0;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<fUML::Token> > getTokens()  = 0;
			
			/*!
			 */ 
			virtual void suspend()  = 0;
			
			/*!
			 */ 
			virtual void resume()  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual bool isRunning() const = 0;
			
			/*!
			 */ 
			virtual void setRunning (bool _running)= 0; 
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr< Bag<fUML::ActivityEdgeInstance> > getOutgoingEdges() const = 0;
			
			/*!
			 */
			virtual std::shared_ptr< Bag<fUML::ActivityEdgeInstance> > getIncomingEdges() const = 0;
			
			/*!
			 */
			virtual std::shared_ptr< Bag<fUML::Token> > getHeldTokens() const = 0;
			
			/*!
			 */
			virtual std::shared_ptr<fUML::ActivityNodeActivationGroup > getGroup() const = 0;
			
			/*!
			 */
			virtual void setGroup(std::shared_ptr<fUML::ActivityNodeActivationGroup> _group_group) = 0;
			/*!
			 */
			virtual std::shared_ptr<uml::ActivityNode > getNode() const = 0;
			
			/*!
			 */
			virtual void setNode(std::shared_ptr<uml::ActivityNode> _node_node) = 0;
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			 */ 
			bool m_running ;
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			std::shared_ptr< Bag<fUML::ActivityEdgeInstance> > m_outgoingEdges;
			/*!
			 */
			std::shared_ptr< Bag<fUML::ActivityEdgeInstance> > m_incomingEdges;
			/*!
			 */
			std::shared_ptr< Bag<fUML::Token> > m_heldTokens;
			/*!
			 */
			std::shared_ptr<fUML::ActivityNodeActivationGroup > m_group;
			/*!
			 */
			std::shared_ptr<uml::ActivityNode > m_node;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			 
	};

}
#endif /* end of include guard: FUML_ACTIVITYNODEACTIVATION_HPP */

