//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_FEATUREVALUE_HPP
#define FUML_FEATUREVALUE_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace fUML 
{
	class FeatureValue;
}

namespace uml 
{
	class StructuralFeature;
}

namespace fUML 
{
	class Value;
}

// base class includes

// enum includes

#include "EObject.hpp"

//*********************************
namespace fUML 
{
	/*!
	 */
	class FeatureValue : virtual public ecore::EObject 
	{
		public:
 			FeatureValue(const FeatureValue &) {}
			FeatureValue& operator=(FeatureValue const&) = delete;
	
		protected:
			FeatureValue(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~FeatureValue() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual bool hasEqualValues(fUML::FeatureValue *  other)  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual int getPosition() const = 0;
			
			/*!
			 */ 
			virtual void setPosition (int _position)= 0; 
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::vector<fUML::Value * > *  getValues() const = 0;
			
			/*!
			 */
			virtual uml::StructuralFeature *  getFeature() const = 0;
			
			/*!
			 */
			virtual void setFeature(uml::StructuralFeature *  _feature) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			/*!
			 */ 
			int m_position =  0;
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			std::vector<fUML::Value * > *  m_values =  nullptr ;
			/*!
			 */
			uml::StructuralFeature *  m_feature =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			 
	};

}
#endif /* end of include guard: FUML_FEATUREVALUE_HPP */

