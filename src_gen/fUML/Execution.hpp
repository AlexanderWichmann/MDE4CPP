//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_EXECUTION_HPP
#define FUML_EXECUTION_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class Behavior;
}

namespace uml 
{
	class Classifier;
}

namespace fUML 
{
	class FeatureValue;
}

namespace fUML 
{
	class Locus;
}

namespace fUML 
{
	class Object;
}

namespace fUML 
{
	class ObjectActivation;
}

namespace uml 
{
	class Parameter;
}

namespace fUML 
{
	class ParameterValue;
}

namespace fUML 
{
	class Value;
}

// base class includes
#include "Object.hpp"

// enum includes


//*********************************
namespace fUML 
{
	/*!
	 */
	class Execution:virtual public Object	{
		public:
 			Execution(const Execution &) {}
			Execution& operator=(Execution const&) = delete;
	
		protected:
			Execution(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~Execution() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void execute()  = 0;
			
			/*!
			 */ 
			virtual void terminate()  = 0;
			
			/*!
			 */ 
			virtual void setParameterValue(fUML::ParameterValue *  parameterValue)  = 0;
			
			/*!
			 */ 
			virtual fUML::ParameterValue *  getParameterValue(uml::Parameter *  parameter)  = 0;
			
			/*!
			 */ 
			virtual std::vector<fUML::ParameterValue * > *  getOutputParameterValues()  = 0;
			
			/*!
			 */ 
			virtual uml::Behavior *  getBehavior()  = 0;
			
			/*!
			 */ 
			virtual fUML::Value *  new_()  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual fUML::Object *  getContext() const = 0;
			
			/*!
			 */
			virtual void setContext(fUML::Object *  _context) = 0;
			
			/*!
			 */
			virtual std::vector<fUML::ParameterValue * > *  getParameterValues() const = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			fUML::Object *  m_context =  nullptr ;
			/*!
			 */
			std::vector<fUML::ParameterValue * > *  m_parameterValues =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			 
	};

}
#endif /* end of include guard: FUML_EXECUTION_HPP */

