//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_EXECUTOR_HPP
#define FUML_EXECUTOR_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#include <string>
#include <map>
#include <vector>
#include "boost/any.hpp"

//*********************************
// generated Includes

//Forward Declaration for used types
namespace uml 
{
	class Behavior;
}

namespace uml 
{
	class Class;
}

namespace fUML 
{
	class Locus;
}

namespace fUML 
{
	class Object;
}

namespace fUML 
{
	class ParameterValue;
}

namespace fUML 
{
	class Reference;
}

namespace fUML 
{
	class Value;
}

namespace uml 
{
	class ValueSpecification;
}

// base class includes

// enum includes

#include "EObject.hpp"

//*********************************
namespace fUML 
{
	/*!
	 */
	class Executor : virtual public ecore::EObject 
	{
		public:
 			Executor(const Executor &) {}
			Executor& operator=(Executor const&) = delete;
	
		protected:
			Executor(){}

		public:
			virtual ecore::EObject* copy() const = 0;

			//destructor
			virtual ~Executor() {}

			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual fUML::Value *  evaluate(uml::ValueSpecification *  specification)  = 0;
			
			/*!
			 */ 
			virtual fUML::Reference *  start(uml::Class *  type,std::vector<fUML::ParameterValue * > *  inputs)  = 0;
			
			/*!
			 */ 
			virtual std::vector<fUML::ParameterValue * > *  execute(uml::Behavior *  behavior,fUML::Object *  context,std::vector<fUML::ParameterValue * > *  inputs)  = 0;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual fUML::Locus *  getLocus() const = 0;
			
			/*!
			 */
			virtual void setLocus(fUML::Locus *  _locus) = 0;
			
			

		protected:
			//*********************************
			// Attribute Members
			//*********************************
			
			
			//*********************************
			// Reference Members
			//*********************************
			/*!
			 */
			fUML::Locus *  m_locus =  nullptr ;
			

		public:
			//*********************************
			// Union Getter
			//*********************************
			 
	};

}
#endif /* end of include guard: FUML_EXECUTOR_HPP */

