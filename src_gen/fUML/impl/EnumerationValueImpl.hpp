//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_ENUMERATIONVALUEENUMERATIONVALUEIMPL_HPP
#define FUML_ENUMERATIONVALUEENUMERATIONVALUEIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../EnumerationValue.hpp"

#include "impl/ValueImpl.hpp"

#include "SubsetUnion.hpp"

#include "UmlFactory.hpp"
#include "FUMLFactory.hpp"
#include "InstanceValue.hpp"
#include "InstanceSpecification.hpp"
#include "EnumerationValue.hpp"
#include "EnumerationLiteral.hpp"
#include "Enumeration.hpp"


//*********************************
namespace fUML 
{
	class EnumerationValueImpl :virtual public ValueImpl, virtual public EnumerationValue 
	{
		public: 
			EnumerationValueImpl(const EnumerationValueImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			EnumerationValueImpl& operator=(EnumerationValueImpl const&) = delete;

		protected:
			friend class FUMLFactoryImpl;
			EnumerationValueImpl();

		public:
			//destructor
			virtual ~EnumerationValueImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual std::shared_ptr<uml::ValueSpecification> 
			 specify()  ;
			
			/*!
			 */ 
			virtual bool
			 equals(std::shared_ptr<fUML::Value>  otherValue)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Value> 
			 new_()  ;
			
			/*!
			 */ 
			virtual std::string
			 toString()  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<uml::Classifier> >
			 getTypes()  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<uml::EnumerationLiteral > getLiteral() const ;
			
			/*!
			 */
			virtual void setLiteral(std::shared_ptr<uml::EnumerationLiteral> _literal_literal) ;
			/*!
			 */
			virtual std::shared_ptr<uml::Enumeration > getType() const ;
			
			/*!
			 */
			virtual void setType(std::shared_ptr<uml::Enumeration> _type_type) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: FUML_ENUMERATIONVALUEENUMERATIONVALUEIMPL_HPP */

