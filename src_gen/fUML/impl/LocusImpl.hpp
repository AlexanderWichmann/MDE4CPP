//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_LOCUSLOCUSIMPL_HPP
#define FUML_LOCUSLOCUSIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../Locus.hpp"


#include "impl/EObjectImpl.hpp"

#include "Classifier.hpp"
#include "Behavior.hpp"
#include "Class.hpp"
#include "FUMLFactory.hpp"
#include "ExecutionFactory.hpp"
#include "ExtensionalValue.hpp"
#include "Executor.hpp"
#include "Object.hpp"
#include "Execution.hpp"



//*********************************
namespace fUML 
{
	class LocusImpl :virtual public ecore::EObjectImpl,
virtual public Locus 
	{
		public: 
			LocusImpl(const LocusImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			LocusImpl& operator=(LocusImpl const&) = delete;

		protected:
			friend class FUMLFactoryImpl;
			LocusImpl();

		public:
			//destructor
			virtual ~LocusImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual bool conforms(std::shared_ptr<uml::Classifier>  type,std::shared_ptr<uml::Classifier>  classifier)  ;
			
			/*!
			 */ 
			virtual void assignExecutor(std::shared_ptr<fUML::Executor>  executor)  ;
			
			/*!
			 */ 
			virtual void assignFactory(std::shared_ptr<fUML::ExecutionFactory>  factory)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<std::vector<std::shared_ptr<fUML::ExtensionalValue>>> retrieveExtent(std::shared_ptr<uml::Classifier>  classifier)  ;
			
			/*!
			 */ 
			virtual void add(std::shared_ptr<fUML::ExtensionalValue>  value)  ;
			
			/*!
			 */ 
			virtual void remove(std::shared_ptr<fUML::ExtensionalValue>  value)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Object>  instantiate(std::shared_ptr<uml::Class>  type)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<fUML::Executor> getExecutor() const ;
			
			/*!
			 */
			virtual void setExecutor(std::shared_ptr<fUML::Executor> _executor) ;
			/*!
			 */
			virtual std::shared_ptr<fUML::ExecutionFactory> getFactory() const ;
			
			/*!
			 */
			virtual void setFactory(std::shared_ptr<fUML::ExecutionFactory> _factory) ;
			/*!
			 */
			virtual std::shared_ptr<std::vector<std::shared_ptr<fUML::ExtensionalValue>>> getExtensionalValues() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: FUML_LOCUSLOCUSIMPL_HPP */

