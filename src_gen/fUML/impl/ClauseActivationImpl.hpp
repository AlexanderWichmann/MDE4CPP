//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_CLAUSEACTIVATIONCLAUSEACTIVATIONIMPL_HPP
#define FUML_CLAUSEACTIVATIONCLAUSEACTIVATIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../ClauseActivation.hpp"


#include "impl/EObjectImpl.hpp"


//*********************************
namespace fUML 
{
	class ClauseActivationImpl :virtual public ecore::EObjectImpl,
virtual public ClauseActivation
	{
		public: 
			ClauseActivationImpl(const ClauseActivationImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			ClauseActivationImpl& operator=(ClauseActivationImpl const&) = delete;

		protected:
			friend class FUMLFactoryImpl;
			ClauseActivationImpl();

		public:
			//destructor
			virtual ~ClauseActivationImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void recieveControl()  ;
			
			/*!
			 */ 
			virtual bool isReady()  ;
			
			/*!
			 */ 
			virtual void runTest()  ;
			
			/*!
			 */ 
			virtual void selectBody()  ;
			
			/*!
			 */ 
			virtual fUML::BooleanValue *  getDecision()  ;
			
			/*!
			 */ 
			virtual std::vector<fUML::ClauseActivation * > *  getPredecessors()  ;
			
			/*!
			 */ 
			virtual std::vector<fUML::ClauseActivation * > *  getSuccessors()  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual uml::Clause *  getClause() const ;
			
			/*!
			 */
			virtual void setClause(uml::Clause *  _clause) ;
			
			/*!
			 */
			virtual fUML::ConditionalNodeActivation *  getConditionalNodeActivation() const ;
			
			/*!
			 */
			virtual void setConditionalNodeActivation(fUML::ConditionalNodeActivation *  _conditionalNodeActivation) ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual ecore::EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: FUML_CLAUSEACTIVATIONCLAUSEACTIVATIONIMPL_HPP */

