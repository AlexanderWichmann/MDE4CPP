//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_DESTROYOBJECTACTIONACTIVATIONDESTROYOBJECTACTIONACTIVATIONIMPL_HPP
#define FUML_DESTROYOBJECTACTIONACTIVATIONDESTROYOBJECTACTIONACTIVATIONIMPL_HPP

//*********************************
// generated Includes

//Model includes
#include "../DestroyObjectActionActivation.hpp"

#include "fUML/impl/ActionActivationImpl.hpp"

//*********************************
namespace fUML 
{
	class DestroyObjectActionActivationImpl :virtual public ActionActivationImpl, virtual public DestroyObjectActionActivation 
	{
		public: 
			DestroyObjectActionActivationImpl(const DestroyObjectActionActivationImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			DestroyObjectActionActivationImpl& operator=(DestroyObjectActionActivationImpl const&) = delete;
			virtual std::shared_ptr<DestroyObjectActionActivation> getThisDestroyObjectActionActivationPtr();

		protected:
			friend class FUMLFactoryImpl;
			DestroyObjectActionActivationImpl();

			//Additional constructors for the containments back reference
			DestroyObjectActionActivationImpl(std::weak_ptr<fUML::ActivityNodeActivationGroup > par_group);




		public:
			//destructor
			virtual ~DestroyObjectActionActivationImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void destroyObject(std::shared_ptr<fUML::Value>  value,bool isDestroyLinks,bool isDestroyOwnedObjects)  ;
			
			/*!
			 */ 
			virtual bool objectIsComposite(std::shared_ptr<fUML::Reference>  reference,std::shared_ptr<fUML::Link>  link)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<Union<fUML::PinActivation>> getPinActivation() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual void eSet(int featureID, boost::any newValue) ;

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: FUML_DESTROYOBJECTACTIONACTIVATIONDESTROYOBJECTACTIONACTIVATIONIMPL_HPP */
