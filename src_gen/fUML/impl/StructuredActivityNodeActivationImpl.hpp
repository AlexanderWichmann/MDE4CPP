//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_STRUCTUREDACTIVITYNODEACTIVATIONSTRUCTUREDACTIVITYNODEACTIVATIONIMPL_HPP
#define FUML_STRUCTUREDACTIVITYNODEACTIVATIONSTRUCTUREDACTIVITYNODEACTIVATIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../StructuredActivityNodeActivation.hpp"

#include "impl/ActionActivationImpl.hpp"

#include "FUMLFactory.hpp"
#include "StructuredActivityNode.hpp"
#include "Action.hpp"
#include "ActivityNode.hpp"
#include "InputPin.hpp"
#include "OutputPin.hpp"

//*********************************
namespace fUML 
{
	class StructuredActivityNodeActivationImpl :virtual public ActionActivationImpl, virtual public StructuredActivityNodeActivation
	{
		public: 
			StructuredActivityNodeActivationImpl(const StructuredActivityNodeActivationImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			StructuredActivityNodeActivationImpl& operator=(StructuredActivityNodeActivationImpl const&) = delete;

		protected:
			friend class FUMLFactoryImpl;
			StructuredActivityNodeActivationImpl();

		public:
			//destructor
			virtual ~StructuredActivityNodeActivationImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void doStructuredActivity()  ;
			
			/*!
			 */ 
			virtual std::vector<uml::ActivityNode * > *  makeActivityNodeList(std::vector<uml::ExecutableNode * > *  nodes)  ;
			
			/*!
			 */ 
			virtual std::vector<fUML::Value * > *  getPinValues(uml::OutputPin *  pin)  ;
			
			/*!
			 */ 
			virtual void putPinValues(uml::OutputPin *  pin,std::vector<fUML::Value * > *  values)  ;
			
			/*!
			 */ 
			virtual void doAction()  ;
			
			/*!
			 */ 
			virtual void terminate()  ;
			
			/*!
			 */ 
			virtual fUML::ActivityNodeActivation *  getNodeActivation(uml::ActivityNode *  node)  ;
			
			/*!
			 */ 
			virtual void createNodeActivations()  ;
			
			/*!
			 */ 
			virtual void createEdgeInstances()  ;
			
			/*!
			 */ 
			virtual void terminateAll()  ;
			
			/*!
			 */ 
			virtual bool isSourceFor(fUML::ActivityEdgeInstance *  edgeInstance)  ;
			
			/*!
			 */ 
			virtual bool isSuspended()  ;
			
			/*!
			 */ 
			virtual std::vector<fUML::Token * > *  completeAction()  ;
			
			/*!
			 */ 
			virtual void resume()  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual fUML::ActivityNodeActivationGroup *  getActivationGroup() const ;
			
			/*!
			 */
			virtual void setActivationGroup(fUML::ActivityNodeActivationGroup *  _activationGroup) ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual ecore::EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: FUML_STRUCTUREDACTIVITYNODEACTIVATIONSTRUCTUREDACTIVITYNODEACTIVATIONIMPL_HPP */

