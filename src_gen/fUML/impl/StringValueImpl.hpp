//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_STRINGVALUESTRINGVALUEIMPL_HPP
#define FUML_STRINGVALUESTRINGVALUEIMPL_HPP

//*********************************
// generated Includes

//Model includes
#include "../StringValue.hpp"

#include "fUML/impl/PrimitiveValueImpl.hpp"

//*********************************
namespace fUML 
{
	class StringValueImpl :virtual public PrimitiveValueImpl, virtual public StringValue 
	{
		public: 
			StringValueImpl(const StringValueImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			StringValueImpl& operator=(StringValueImpl const&) = delete;
			virtual std::shared_ptr<StringValue> getThisStringValuePtr();

		protected:
			friend class FUMLFactoryImpl;
			StringValueImpl();



		public:
			//destructor
			virtual ~StringValueImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual bool equals(std::shared_ptr<fUML::Value>  otherValue)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<uml::ValueSpecification> specify()  ;
			
			/*!
			 */ 
			virtual std::string toString()  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual std::string getValue() const ;
			
			/*!
			 */ 
			virtual void setValue (std::string _value); 
			
			
			
			//*********************************
			// Reference
			//*********************************
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual void eSet(int featureID, boost::any newValue) ;

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: FUML_STRINGVALUESTRINGVALUEIMPL_HPP */
