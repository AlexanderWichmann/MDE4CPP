//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_EXECUTIONFACTORYEXECUTIONFACTORYIMPL_HPP
#define FUML_EXECUTIONFACTORYEXECUTIONFACTORYIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

//*********************************
// generated Includes

//Model includes
#include "../ExecutionFactory.hpp"


#include "ecore/impl/EObjectImpl.hpp"

#include "fuml/fUMLPackage.hpp"
#include "uml/OpaqueBehavior.hpp"
#include "fuml/OpaqueBehaviorExecution.hpp"
#include "fuml/Value.hpp"
#include "fuml/Evaluation.hpp"
#include "uml/Element.hpp"
#include "uml/ValueSpecification.hpp"


//*********************************
namespace fUML 
{
	class ExecutionFactoryImpl :virtual public ecore::EObjectImpl,
virtual public ExecutionFactory 
	{
		public: 
			ExecutionFactoryImpl(const ExecutionFactoryImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			ExecutionFactoryImpl& operator=(ExecutionFactoryImpl const&) = delete;

		protected:
			friend class FUMLFactoryImpl;
			ExecutionFactoryImpl();

			//Additional constructors for the containments back reference
			ExecutionFactoryImpl(std::weak_ptr<fUML::Locus > par_locus);




		public:
			//destructor
			virtual ~ExecutionFactoryImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void addBuiltInType(std::shared_ptr<uml::PrimitiveType>  type)  ;
			
			/*!
			 */ 
			virtual void addPrimitiveBehaviorPrototype(std::shared_ptr<fUML::OpaqueBehaviorExecution>  execution)  ;
			
			/*!
			 */ 
			virtual void assignStrategy(std::shared_ptr<fUML::SemanticStrategy>  strategy)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Evaluation> createEvaluation(std::shared_ptr<uml::ValueSpecification>  specification)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Execution> createExecution(std::shared_ptr<uml::Behavior>  behavior,std::shared_ptr<fUML::Object>  context)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<uml::PrimitiveType> getBuiltInType(std::string name)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::SemanticStrategy> getStrategy(std::string name)  ;
			
			/*!
			 */ 
			virtual int getStrategyIndex(std::string name)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::OpaqueBehaviorExecution> instantiateOpaqueBehaviorExecution(std::shared_ptr<uml::OpaqueBehavior>  behavior)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::SemanticVisitor> instantiateVisitor(std::shared_ptr<uml::Element>  element)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr< Bag<uml::PrimitiveType> > getBuiltInTypes() const ;
			
			/*!
			 */
			virtual std::weak_ptr<fUML::Locus > getLocus() const ;
			
			/*!
			 */
			virtual void setLocus(std::shared_ptr<fUML::Locus> _locus_locus) ;
			/*!
			 */
			virtual std::shared_ptr< Bag<fUML::OpaqueBehaviorExecution> > getPrimitiveBehaviorPrototypes() const ;
			
			/*!
			 */
			virtual std::shared_ptr< Bag<fUML::SemanticStrategy> > getStrategies() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual void eSet(int featureID, boost::any newValue) ;

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: FUML_EXECUTIONFACTORYEXECUTIONFACTORYIMPL_HPP */

