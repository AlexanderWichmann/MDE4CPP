//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUMLFACTORYIMPL_HPP
#define FUMLFACTORYIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) /**/
#else
    #define ACT_DEBUG(a) a
#endif

#include "impl/EFactoryImpl.hpp"

#include "AcceptEventActionActivationImpl.hpp"
#include "AcceptEventActionEventAccepterImpl.hpp"
#include "ActionActivationImpl.hpp"
#include "ActivityEdgeInstanceImpl.hpp"
#include "ActivityExecutionImpl.hpp"
#include "ActivityFinalNodeActivationImpl.hpp"
#include "ActivityNodeActivationImpl.hpp"
#include "ActivityNodeActivationGroupImpl.hpp"
#include "ActivityParameterNodeActivationImpl.hpp"
#include "AddStructuralFeatureValueActionActivationImpl.hpp"
#include "BooleanValueImpl.hpp"
#include "CallActionActivationImpl.hpp"
#include "CallBehaviorActionActivationImpl.hpp"
#include "CallOperationActionActivationImpl.hpp"
#include "CentralBufferNodeActivationImpl.hpp"
#include "ChoiceStrategyImpl.hpp"
#include "ClassifierBehaviorExecutionImpl.hpp"
#include "ClassifierBehaviorExecutionActivityImpl.hpp"
#include "ClassifierBehaviorExecutionActivity_OwnedBehaviorActivity1Impl.hpp"
#include "ClauseActivationImpl.hpp"
#include "ClearAssociationActionActivationImpl.hpp"
#include "ClearStructuralFeatureActionActivationImpl.hpp"
#include "CompoundValueImpl.hpp"
#include "ConditionalNodeActivationImpl.hpp"
#include "ControlNodeActivationImpl.hpp"
#include "ControlTokenImpl.hpp"
#include "CreateLinkActionActivationImpl.hpp"
#include "CreateObjectActionActivationImpl.hpp"
#include "DataStoreNodeActivationImpl.hpp"
#include "DataValueImpl.hpp"
#include "DecisionNodeActivationImpl.hpp"
#include "DestroyLinkActionActivationImpl.hpp"
#include "DestroyObjectActionActivationImpl.hpp"
#include "DispatchStrategyImpl.hpp"
#include "EnumerationValueImpl.hpp"
#include "EvaluationImpl.hpp"
#include "EventAccepterImpl.hpp"
#include "EventDispatchLoopImpl.hpp"
#include "ExecutionImpl.hpp"
#include "ExecutionFactoryImpl.hpp"
#include "ExecutionFactoryL1Impl.hpp"
#include "ExecutionFactoryL2Impl.hpp"
#include "ExecutionFactoryL3Impl.hpp"
#include "ExecutorImpl.hpp"
#include "ExpansionActivationGroupImpl.hpp"
#include "ExpansionNodeActivationImpl.hpp"
#include "ExpansionRegionActivationImpl.hpp"
#include "ExtensionalValueImpl.hpp"
#include "ExtensionalValueListImpl.hpp"
#include "FIFOGetNextEventStrategyImpl.hpp"
#include "FeatureValueImpl.hpp"
#include "FirstChoiceStrategyImpl.hpp"
#include "FlowFinalNodeActivationImpl.hpp"
#include "ForkNodeActivationImpl.hpp"
#include "ForkedTokenImpl.hpp"
#include "GetNextEventStrategyImpl.hpp"
#include "InitialNodeActivationImpl.hpp"
#include "InputPinActivationImpl.hpp"
#include "InstanceValueEvaluationImpl.hpp"
#include "IntegerValueImpl.hpp"
#include "InvocationActionActivationImpl.hpp"
#include "JoinNodeActivationImpl.hpp"
#include "LinkImpl.hpp"
#include "LinkActionActivationImpl.hpp"
#include "LiteralBooleanEvaluationImpl.hpp"
#include "LiteralEvaluationImpl.hpp"
#include "LiteralIntegerEvaluationImpl.hpp"
#include "LiteralNullEvaluationImpl.hpp"
#include "LiteralRealEvaluationImpl.hpp"
#include "LiteralStringEvaluationImpl.hpp"
#include "LiteralUnlimitedNaturalEvaluationImpl.hpp"
#include "LocusImpl.hpp"
#include "LoopNodeActivationImpl.hpp"
#include "MergeNodeActivationImpl.hpp"
#include "ObjectImpl.hpp"
#include "ObjectActivationImpl.hpp"
#include "ObjectNodeActivationImpl.hpp"
#include "ObjectTokenImpl.hpp"
#include "OfferImpl.hpp"
#include "OpaqueBehaviorExecutionImpl.hpp"
#include "OutputPinActivationImpl.hpp"
#include "ParameterValueImpl.hpp"
#include "PinActivationImpl.hpp"
#include "PrimitiveValueImpl.hpp"
#include "ReadExtentActionActivationImpl.hpp"
#include "ReadIsClassifiedObjectActionActivationImpl.hpp"
#include "ReadLinkActionActivationImpl.hpp"
#include "ReadSelfActionActivationImpl.hpp"
#include "ReadStructuralFeatureActionActivationImpl.hpp"
#include "RealValueImpl.hpp"
#include "ReclassifyObjectActionActivationImpl.hpp"
#include "RedefinitionBasedDispatchStrategyImpl.hpp"
#include "ReduceActionActivationImpl.hpp"
#include "ReferenceImpl.hpp"
#include "RemoveStructuralFeatureValueActivationImpl.hpp"
#include "SemanticStrategyImpl.hpp"
#include "SemanticVisitorImpl.hpp"
#include "SendSignalActionActivationImpl.hpp"
#include "SignalInstanceImpl.hpp"
#include "StartClassifierBehaviorActionActivationImpl.hpp"
#include "StartObjectBehaviorActionActivationImpl.hpp"
#include "StringValueImpl.hpp"
#include "StructuralFeatureActionActivationImpl.hpp"
#include "StructuredActivityNodeActivationImpl.hpp"
#include "StructuredValueImpl.hpp"
#include "TestIdentityActionActivationImpl.hpp"
#include "TokenImpl.hpp"
#include "TokenSetImpl.hpp"
#include "UnlimitedNaturalValueImpl.hpp"
#include "ValueImpl.hpp"
#include "ValueSpecificActionActivationImpl.hpp"
#include "ValuesImpl.hpp"
#include "WriteLinkActionActivationImpl.hpp"
#include "WriteStructuralFeatureActionActivationImpl.hpp"

#include "FUMLFactory.hpp"

namespace fUML 
{
	class FUMLFactoryImpl : virtual public ecore::EFactoryImpl , virtual public FUMLFactory 
	{
		private:    
			FUMLFactoryImpl(FUMLFactoryImpl const&) = delete;
			FUMLFactoryImpl& operator=(FUMLFactoryImpl const&) = delete;

		protected:
			friend class FUMLFactory;
			// Constructor
			FUMLFactoryImpl();

		public:
			virtual ~FUMLFactoryImpl();
			virtual std::shared_ptr<ecore::EObject> create(ecore::EClass* _class) const;
			virtual std::shared_ptr<ecore::EObject> create(std::string _className) const;

			//Creator functions
			virtual Locus* createLocus() const ;
			virtual Executor* createExecutor() const ;
			virtual ExecutionFactoryL1* createExecutionFactoryL1() const ;
			virtual FirstChoiceStrategy* createFirstChoiceStrategy() const ;
			virtual ExecutionFactoryL2* createExecutionFactoryL2() const ;
			virtual ExecutionFactoryL3* createExecutionFactoryL3() const ;
			virtual Reference* createReference() const ;
			virtual FeatureValue* createFeatureValue() const ;
			virtual UnlimitedNaturalValue* createUnlimitedNaturalValue() const ;
			virtual StringValue* createStringValue() const ;
			virtual IntegerValue* createIntegerValue() const ;
			virtual RealValue* createRealValue() const ;
			virtual BooleanValue* createBooleanValue() const ;
			virtual ExtensionalValueList* createExtensionalValueList() const ;
			virtual InstanceValueEvaluation* createInstanceValueEvaluation() const ;
			virtual LiteralBooleanEvaluation* createLiteralBooleanEvaluation() const ;
			virtual LiteralIntegerEvaluation* createLiteralIntegerEvaluation() const ;
			virtual LiteralNullEvaluation* createLiteralNullEvaluation() const ;
			virtual LiteralStringEvaluation* createLiteralStringEvaluation() const ;
			virtual LiteralRealEvaluation* createLiteralRealEvaluation() const ;
			virtual LiteralUnlimitedNaturalEvaluation* createLiteralUnlimitedNaturalEvaluation() const ;
			virtual Link* createLink() const ;
			virtual EnumerationValue* createEnumerationValue() const ;
			virtual DataValue* createDataValue() const ;
			virtual DispatchStrategy* createDispatchStrategy() const ;
			virtual RedefinitionBasedDispatchStrategy* createRedefinitionBasedDispatchStrategy() const ;
			virtual Object* createObject() const ;
			virtual ParameterValue* createParameterValue() const ;
			virtual ClassifierBehaviorExecutionActivity* createClassifierBehaviorExecutionActivity() const ;
			virtual ClassifierBehaviorExecutionActivity_OwnedBehaviorActivity1* createClassifierBehaviorExecutionActivity_OwnedBehaviorActivity1() const ;
			virtual EventDispatchLoop* createEventDispatchLoop() const ;
			virtual SignalInstance* createSignalInstance() const ;
			virtual ClassifierBehaviorExecution* createClassifierBehaviorExecution() const ;
			virtual ObjectActivation* createObjectActivation() const ;
			virtual FIFOGetNextEventStrategy* createFIFOGetNextEventStrategy() const ;
			virtual ActivityNodeActivationGroup* createActivityNodeActivationGroup() const ;
			virtual ActivityEdgeInstance* createActivityEdgeInstance() const ;
			virtual Offer* createOffer() const ;
			virtual ObjectToken* createObjectToken() const ;
			virtual ForkedToken* createForkedToken() const ;
			virtual ControlToken* createControlToken() const ;
			virtual ActivityExecution* createActivityExecution() const ;
			virtual ActivityParameterNodeActivation* createActivityParameterNodeActivation() const ;
			virtual MergeNodeActivation* createMergeNodeActivation() const ;
			virtual JoinNodeActivation* createJoinNodeActivation() const ;
			virtual ForkNodeActivation* createForkNodeActivation() const ;
			virtual InitialNodeActivation* createInitialNodeActivation() const ;
			virtual DecisionNodeActivation* createDecisionNodeActivation() const ;
			virtual ActivityFinalNodeActivation* createActivityFinalNodeActivation() const ;
			virtual FlowFinalNodeActivation* createFlowFinalNodeActivation() const ;
			virtual Values* createValues() const ;
			virtual ClauseActivation* createClauseActivation() const ;
			virtual StructuredActivityNodeActivation* createStructuredActivityNodeActivation() const ;
			virtual LoopNodeActivation* createLoopNodeActivation() const ;
			virtual ConditionalNodeActivation* createConditionalNodeActivation() const ;
			virtual TokenSet* createTokenSet() const ;
			virtual ExpansionActivationGroup* createExpansionActivationGroup() const ;
			virtual ExpansionRegionActivation* createExpansionRegionActivation() const ;
			virtual ExpansionNodeActivation* createExpansionNodeActivation() const ;
			virtual SendSignalActionActivation* createSendSignalActionActivation() const ;
			virtual CallBehaviorActionActivation* createCallBehaviorActionActivation() const ;
			virtual CallOperationActionActivation* createCallOperationActionActivation() const ;
			virtual InputPinActivation* createInputPinActivation() const ;
			virtual OutputPinActivation* createOutputPinActivation() const ;
			virtual ValueSpecificActionActivation* createValueSpecificActionActivation() const ;
			virtual TestIdentityActionActivation* createTestIdentityActionActivation() const ;
			virtual ReadSelfActionActivation* createReadSelfActionActivation() const ;
			virtual DestroyObjectActionActivation* createDestroyObjectActionActivation() const ;
			virtual CreateObjectActionActivation* createCreateObjectActionActivation() const ;
			virtual ClearAssociationActionActivation* createClearAssociationActionActivation() const ;
			virtual ReadLinkActionActivation* createReadLinkActionActivation() const ;
			virtual DestroyLinkActionActivation* createDestroyLinkActionActivation() const ;
			virtual CreateLinkActionActivation* createCreateLinkActionActivation() const ;
			virtual ReadStructuralFeatureActionActivation* createReadStructuralFeatureActionActivation() const ;
			virtual ClearStructuralFeatureActionActivation* createClearStructuralFeatureActionActivation() const ;
			virtual RemoveStructuralFeatureValueActivation* createRemoveStructuralFeatureValueActivation() const ;
			virtual AddStructuralFeatureValueActionActivation* createAddStructuralFeatureValueActionActivation() const ;
			virtual StartClassifierBehaviorActionActivation* createStartClassifierBehaviorActionActivation() const ;
			virtual ReduceActionActivation* createReduceActionActivation() const ;
			virtual ReadIsClassifiedObjectActionActivation* createReadIsClassifiedObjectActionActivation() const ;
			virtual ReclassifyObjectActionActivation* createReclassifyObjectActionActivation() const ;
			virtual ReadExtentActionActivation* createReadExtentActionActivation() const ;
			virtual AcceptEventActionActivation* createAcceptEventActionActivation() const ;
			virtual StartObjectBehaviorActionActivation* createStartObjectBehaviorActionActivation() const ;
			virtual AcceptEventActionEventAccepter* createAcceptEventActionEventAccepter() const ;
			virtual CentralBufferNodeActivation* createCentralBufferNodeActivation() const ;
			virtual DataStoreNodeActivation* createDataStoreNodeActivation() const ;
			

			//Package
			virtual std::shared_ptr<FUMLPackage> getFUMLPackage() const;

		private:
			static FUMLFactory * create();
			std::map<std::string,std::function<ecore::EObject*()>> m_creatorMap;

			virtual void init() {}

	};
}
#endif /* end of include guard: FUMLFACTORYIMPL_HPP */

