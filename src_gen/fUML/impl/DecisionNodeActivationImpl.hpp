//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_DECISIONNODEACTIVATIONDECISIONNODEACTIVATIONIMPL_HPP
#define FUML_DECISIONNODEACTIVATIONDECISIONNODEACTIVATIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../DecisionNodeActivation.hpp"

#include "impl/ControlNodeActivationImpl.hpp"

#include "DecisionNode.hpp"
#include "Behavior.hpp"
#include "Parameter.hpp"
#include "ParameterDirectionKind.hpp"
#include "UmlFactory.hpp"
#include "FUMLFactory.hpp"
#include "ParameterValue.hpp"
#include "Token.hpp"
#include "ObjectFlow.hpp"
#include "ActivityEdge.hpp"
#include "ValueSpecification.hpp"
#include "ObjectToken.hpp"

//*********************************
namespace fUML 
{
	class DecisionNodeActivationImpl :virtual public ControlNodeActivationImpl, virtual public DecisionNodeActivation
	{
		public: 
			DecisionNodeActivationImpl(const DecisionNodeActivationImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			DecisionNodeActivationImpl& operator=(DecisionNodeActivationImpl const&) = delete;

		protected:
			friend class FUMLFactoryImpl;
			DecisionNodeActivationImpl();

		public:
			//destructor
			virtual ~DecisionNodeActivationImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual std::vector<fUML::Value * > *  getDecisionValues(std::vector<fUML::Token * > *  incomingTokens)  ;
			
			/*!
			 */ 
			virtual fUML::Value *  executeDecisionInputBehavior(fUML::Value *  inputValue,fUML::Value *  decisionInputValue)  ;
			
			/*!
			 */ 
			virtual fUML::Value *  getDecisionInputFlowValue()  ;
			
			/*!
			 */ 
			virtual fUML::ActivityEdgeInstance *  getDecisionInputFlowInstance()  ;
			
			/*!
			 */ 
			virtual bool test(uml::ValueSpecification *  gaurd,fUML::Value *  value)  ;
			
			/*!
			 */ 
			virtual std::vector<fUML::Token * > *  removeJoinedControlTokens(std::vector<fUML::Token * > *  incomingTokens)  ;
			
			/*!
			 */ 
			virtual bool hasObjectFlowInput()  ;
			
			/*!
			 */ 
			virtual std::vector<fUML::Token * > *  takeOfferedTokens()  ;
			
			/*!
			 */ 
			virtual void fire(std::vector<fUML::Token * > *  incomingTokens)  ;
			
			/*!
			 */ 
			virtual void terminate()  ;
			
			/*!
			 */ 
			virtual bool isReady()  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual fUML::Execution *  getDecisionInputExecution() const ;
			
			/*!
			 */
			virtual void setDecisionInputExecution(fUML::Execution *  _decisionInputExecution) ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual ecore::EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: FUML_DECISIONNODEACTIVATIONDECISIONNODEACTIVATIONIMPL_HPP */

