//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_ACTIVITYNODEACTIVATIONGROUPACTIVITYNODEACTIVATIONGROUPIMPL_HPP
#define FUML_ACTIVITYNODEACTIVATIONGROUPACTIVITYNODEACTIVATIONGROUPIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../ActivityNodeActivationGroup.hpp"


#include "impl/EObjectImpl.hpp"

#include "ActivityNode.hpp"
#include "ActivityNodeActivation.hpp"
#include "ActivityNodeActivationGroup.hpp"
#include "ActivityParameterNodeActivation.hpp"
#include "ControlNodeActivation.hpp"

#include "ActivityEdgeInstance.hpp"
#include "InputPin.hpp"
#include "Class.hpp"
#include "ActivityEdge.hpp"
#include "ActivityParameterNodeActivation.hpp"
#include "FUMLFactory.hpp"

//*********************************
namespace fUML 
{
	class ActivityNodeActivationGroupImpl :virtual public ecore::EObjectImpl,
virtual public ActivityNodeActivationGroup
	{
		public: 
			ActivityNodeActivationGroupImpl(const ActivityNodeActivationGroupImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			ActivityNodeActivationGroupImpl& operator=(ActivityNodeActivationGroupImpl const&) = delete;

		protected:
			friend class FUMLFactoryImpl;
			ActivityNodeActivationGroupImpl();

		public:
			//destructor
			virtual ~ActivityNodeActivationGroupImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void run(std::vector<fUML::ActivityNodeActivation * > *  activations)  ;
			
			/*!
			 */ 
			virtual bool checkIncomingEdges(std::vector<fUML::ActivityEdgeInstance * > *  incomingEdges,std::vector<fUML::ActivityNodeActivation * > *  activations)  ;
			
			/*!
			 */ 
			virtual void activate(std::vector<uml::ActivityNode * > *  nodes,std::vector<uml::ActivityEdge * > *  edges)  ;
			
			/*!
			 */ 
			virtual void runNodes(std::vector<uml::ActivityNode * > *  nodes)  ;
			
			/*!
			 */ 
			virtual void terminateAll()  ;
			
			/*!
			 */ 
			virtual void createNodeActivations(std::vector<uml::ActivityNode * > *  nodes)  ;
			
			/*!
			 */ 
			virtual fUML::ActivityNodeActivation *  createNodeActivation(uml::ActivityNode *  node)  ;
			
			/*!
			 */ 
			virtual void addNodeActivation(fUML::ActivityNodeActivation *  activation)  ;
			
			/*!
			 */ 
			virtual fUML::ActivityNodeActivation *  getNodeActivation(uml::ActivityNode *  node)  ;
			
			/*!
			 */ 
			virtual void createEdgeInstance(std::vector<uml::ActivityEdge * > *  edges)  ;
			
			/*!
			 */ 
			virtual void addEdgeInstance(fUML::ActivityEdgeInstance *  instance)  ;
			
			/*!
			 */ 
			virtual fUML::ActivityExecution *  retrieveActivityExecution()  ;
			
			/*!
			 */ 
			virtual std::vector<fUML::ActivityParameterNodeActivation * > *  getOutputParameterNodeActivations()  ;
			
			/*!
			 */ 
			virtual void resume(fUML::ActivityNodeActivation *  activation)  ;
			
			/*!
			 */ 
			virtual void suspend(fUML::ActivityNodeActivation *  activation)  ;
			
			/*!
			 */ 
			virtual bool isSuspended()  ;
			
			/*!
			 */ 
			virtual bool hasSourceFor(fUML::ActivityEdgeInstance *  edgeInstance)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::vector<fUML::ActivityEdgeInstance * > *  getEdgeInstances() const ;
			
			/*!
			 */
			virtual std::vector<fUML::ActivityNodeActivation * > *  getNodeActivations() const ;
			
			/*!
			 */
			virtual fUML::ActivityExecution *  getActivityExecution() const ;
			
			/*!
			 */
			virtual void setActivityExecution(fUML::ActivityExecution *  _activityExecution) ;
			
			/*!
			 */
			virtual fUML::StructuredActivityNodeActivation *  getContainingNodeActivation() const ;
			
			/*!
			 */
			virtual void setContainingNodeActivation(fUML::StructuredActivityNodeActivation *  _containingNodeActivation) ;
			
			/*!
			 */
			virtual std::vector<fUML::ActivityNodeActivation * > *  getSuspendedActivations() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual ecore::EClass* eStaticClass() const;
	};
}
#endif /* end of include guard: FUML_ACTIVITYNODEACTIVATIONGROUPACTIVITYNODEACTIVATIONGROUPIMPL_HPP */

