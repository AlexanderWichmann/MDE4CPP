//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_ACTIVITYNODEACTIVATIONGROUPACTIVITYNODEACTIVATIONGROUPIMPL_HPP
#define FUML_ACTIVITYNODEACTIVATIONGROUPACTIVITYNODEACTIVATIONGROUPIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../ActivityNodeActivationGroup.hpp"


#include "impl/EObjectImpl.hpp"

#include "ActivityNode.hpp"
#include "ActivityNodeActivation.hpp"
#include "ActivityNodeActivationGroup.hpp"
#include "ActivityParameterNodeActivation.hpp"
#include "ControlNodeActivation.hpp"

#include "ActivityEdgeInstance.hpp"
#include "InputPin.hpp"
#include "Class.hpp"
#include "ActivityEdge.hpp"
#include "ActivityParameterNodeActivation.hpp"
#include "FUMLFactory.hpp"


//*********************************
namespace fUML 
{
	class ActivityNodeActivationGroupImpl :virtual public ecore::EObjectImpl,
virtual public ActivityNodeActivationGroup 
	{
		public: 
			ActivityNodeActivationGroupImpl(const ActivityNodeActivationGroupImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			ActivityNodeActivationGroupImpl& operator=(ActivityNodeActivationGroupImpl const&) = delete;

		protected:
			friend class FUMLFactoryImpl;
			ActivityNodeActivationGroupImpl();

		public:
			//destructor
			virtual ~ActivityNodeActivationGroupImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void run(std::shared_ptr<std::vector<std::shared_ptr<fUML::ActivityNodeActivation>>>  activations)  ;
			
			/*!
			 */ 
			virtual bool checkIncomingEdges(std::shared_ptr<std::vector<std::shared_ptr<fUML::ActivityEdgeInstance>>>  incomingEdges,std::shared_ptr<std::vector<std::shared_ptr<fUML::ActivityNodeActivation>>>  activations)  ;
			
			/*!
			 */ 
			virtual void activate(std::shared_ptr<std::vector<std::shared_ptr<uml::ActivityNode>>>  nodes,std::shared_ptr<std::vector<std::shared_ptr<uml::ActivityEdge>>>  edges)  ;
			
			/*!
			 */ 
			virtual void runNodes(std::shared_ptr<std::vector<std::shared_ptr<uml::ActivityNode>>>  nodes)  ;
			
			/*!
			 */ 
			virtual void terminateAll()  ;
			
			/*!
			 */ 
			virtual void createNodeActivations(std::shared_ptr<std::vector<std::shared_ptr<uml::ActivityNode>>>  nodes)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::ActivityNodeActivation>  createNodeActivation(std::shared_ptr<uml::ActivityNode>  node)  ;
			
			/*!
			 */ 
			virtual void addNodeActivation(std::shared_ptr<fUML::ActivityNodeActivation>  activation)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::ActivityNodeActivation>  getNodeActivation(std::shared_ptr<uml::ActivityNode>  node)  ;
			
			/*!
			 */ 
			virtual void createEdgeInstance(std::shared_ptr<std::vector<std::shared_ptr<uml::ActivityEdge>>>  edges)  ;
			
			/*!
			 */ 
			virtual void addEdgeInstance(std::shared_ptr<fUML::ActivityEdgeInstance>  instance)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::ActivityExecution>  retrieveActivityExecution()  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<std::vector<std::shared_ptr<fUML::ActivityParameterNodeActivation>>> getOutputParameterNodeActivations()  ;
			
			/*!
			 */ 
			virtual void resume(std::shared_ptr<fUML::ActivityNodeActivation>  activation)  ;
			
			/*!
			 */ 
			virtual void suspend(std::shared_ptr<fUML::ActivityNodeActivation>  activation)  ;
			
			/*!
			 */ 
			virtual bool isSuspended()  ;
			
			/*!
			 */ 
			virtual bool hasSourceFor(std::shared_ptr<fUML::ActivityEdgeInstance>  edgeInstance)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<std::vector<std::shared_ptr<fUML::ActivityEdgeInstance>>> getEdgeInstances() const ;
			
			/*!
			 */
			virtual std::shared_ptr<std::vector<std::shared_ptr<fUML::ActivityNodeActivation>>> getNodeActivations() const ;
			
			/*!
			 */
			virtual std::shared_ptr<fUML::ActivityExecution> getActivityExecution() const ;
			
			/*!
			 */
			virtual void setActivityExecution(std::shared_ptr<fUML::ActivityExecution> _activityExecution) ;
			/*!
			 */
			virtual std::shared_ptr<fUML::StructuredActivityNodeActivation> getContainingNodeActivation() const ;
			
			/*!
			 */
			virtual void setContainingNodeActivation(std::shared_ptr<fUML::StructuredActivityNodeActivation> _containingNodeActivation) ;
			/*!
			 */
			virtual std::shared_ptr<std::vector<std::shared_ptr<fUML::ActivityNodeActivation>>> getSuspendedActivations() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: FUML_ACTIVITYNODEACTIVATIONGROUPACTIVITYNODEACTIVATIONGROUPIMPL_HPP */

