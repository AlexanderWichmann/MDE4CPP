//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_FORKEDTOKENFORKEDTOKENIMPL_HPP
#define FUML_FORKEDTOKENFORKEDTOKENIMPL_HPP

//*********************************
// generated Includes

//Model includes
#include "../ForkedToken.hpp"

#include "fUML/impl/TokenImpl.hpp"

//*********************************
namespace fUML 
{
	class ForkedTokenImpl :virtual public TokenImpl, virtual public ForkedToken 
	{
		public: 
			ForkedTokenImpl(const ForkedTokenImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			ForkedTokenImpl& operator=(ForkedTokenImpl const&) = delete;
			virtual std::shared_ptr<ForkedToken> getThisForkedTokenPtr();

		protected:
			friend class FUMLFactoryImpl;
			ForkedTokenImpl();



		public:
			//destructor
			virtual ~ForkedTokenImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual bool equals(std::shared_ptr<fUML::Token>  otherToken)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Value> getValue()  const  ;
			
			/*!
			 */ 
			virtual bool isControl()  ;
			
			/*!
			 */ 
			virtual void withdraw()  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual bool isBaseTokenIsWithdrawn() const ;
			
			/*!
			 */ 
			virtual void setBaseTokenIsWithdrawn (bool _baseTokenIsWithdrawn); 
			
			/*!
			 */ 
			virtual int getRemainingOffersCount() const ;
			
			/*!
			 */ 
			virtual void setRemainingOffersCount (int _remainingOffersCount); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<fUML::Token > getBaseToken() const ;
			
			/*!
			 */
			virtual void setBaseToken(std::shared_ptr<fUML::Token> _baseToken_baseToken) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual void eSet(int featureID, boost::any newValue) ;

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: FUML_FORKEDTOKENFORKEDTOKENIMPL_HPP */
