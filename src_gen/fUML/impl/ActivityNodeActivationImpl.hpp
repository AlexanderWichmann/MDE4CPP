//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_ACTIVITYNODEACTIVATIONACTIVITYNODEACTIVATIONIMPL_HPP
#define FUML_ACTIVITYNODEACTIVATIONACTIVITYNODEACTIVATIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

//*********************************
// generated Includes

//Model includes
#include "../ActivityNodeActivation.hpp"

#include "fUML/impl/SemanticVisitorImpl.hpp"

#include "uml/ActivityNode.hpp"

#include "uml/Class.hpp"
#include "fuml/ActivityNodeActivation.hpp"

#include "ecore/EClass.hpp"


//*********************************
namespace fUML 
{
	class ActivityNodeActivationImpl :virtual public SemanticVisitorImpl, virtual public ActivityNodeActivation 
	{
		public: 
			ActivityNodeActivationImpl(const ActivityNodeActivationImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			ActivityNodeActivationImpl& operator=(ActivityNodeActivationImpl const&) = delete;

		protected:
			friend class FUMLFactoryImpl;
			ActivityNodeActivationImpl();



		public:
			//destructor
			virtual ~ActivityNodeActivationImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void addIncomingEdge(std::shared_ptr<fUML::ActivityEdgeInstance>  edge)  ;
			
			/*!
			 */ 
			virtual void addOutgoingEdge(std::shared_ptr<fUML::ActivityEdgeInstance>  edge)  ;
			
			/*!
			 */ 
			virtual void addToken(std::shared_ptr<fUML::Token>  token)  ;
			
			/*!
			 */ 
			virtual void addTokens(std::shared_ptr<Bag<fUML::Token> >  tokens)  ;
			
			/*!
			 */ 
			virtual void clearTokens()  ;
			
			/*!
			 */ 
			virtual void createEdgeInstances()  ;
			
			/*!
			 */ 
			virtual void createNodeActivations()  ;
			
			/*!
			 */ 
			virtual void fire(std::shared_ptr<Bag<fUML::Token> >  incomingTokens)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::ActivityExecution> getActivityExecution()  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Object> getExecutionContext()  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Locus> getExecutionLocus()  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::ActivityNodeActivation> getNodeActivation(std::shared_ptr<uml::ActivityNode>  node)  ;
			
			/*!
			 */ 
			virtual bool getRunning()  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<fUML::Token> > getTokens()  ;
			
			/*!
			 */ 
			virtual bool isReady()  ;
			
			/*!
			 */ 
			virtual bool isSourceFor(std::shared_ptr<fUML::ActivityEdgeInstance>  edgeInstances)  ;
			
			/*!
			 */ 
			virtual void recieveOffer()  ;
			
			/*!
			 */ 
			virtual int removeToken(std::shared_ptr<fUML::Token>  token)  ;
			
			/*!
			 */ 
			virtual void resume()  ;
			
			/*!
			 */ 
			virtual void run()  ;
			
			/*!
			 */ 
			virtual void sendOffers(std::shared_ptr<Bag<fUML::Token> >  tokens)  ;
			
			/*!
			 */ 
			virtual void suspend()  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<fUML::Token> > takeOfferedTokens()  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<fUML::Token> > takeTokens()  ;
			
			/*!
			 */ 
			virtual void terminate()  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual bool isRunning() const ;
			
			/*!
			 */ 
			virtual void setRunning (bool _running); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<fUML::ActivityNodeActivationGroup > getGroup() const ;
			
			/*!
			 */
			virtual void setGroup(std::shared_ptr<fUML::ActivityNodeActivationGroup> _group_group) ;
			/*!
			 */
			virtual std::shared_ptr< Bag<fUML::Token> > getHeldTokens() const ;
			
			/*!
			 */
			virtual std::shared_ptr< Bag<fUML::ActivityEdgeInstance> > getIncomingEdges() const ;
			
			/*!
			 */
			virtual std::shared_ptr<uml::ActivityNode > getNode() const ;
			
			/*!
			 */
			virtual void setNode(std::shared_ptr<uml::ActivityNode> _node_node) ;
			/*!
			 */
			virtual std::shared_ptr< Bag<fUML::ActivityEdgeInstance> > getOutgoingEdges() const ;
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual void eSet(int featureID, boost::any newValue) ;

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: FUML_ACTIVITYNODEACTIVATIONACTIVITYNODEACTIVATIONIMPL_HPP */

