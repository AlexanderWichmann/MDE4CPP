//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_ACTIONACTIVATIONACTIONACTIVATIONIMPL_HPP
#define FUML_ACTIONACTIVATIONACTIONACTIVATIONIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

//*********************************
// generated Includes

//Model includes
#include "../ActionActivation.hpp"

#include "fUML/impl/ActivityNodeActivationImpl.hpp"

#include <iterator>
#include "fUML/ActivityExecution.hpp"
#include "fUML/ActivityNodeActivation.hpp"
#include "fUML/ControlToken.hpp"
#include "fUML/Executor.hpp"
#include "fUML/FeatureValue.hpp"
#include "fUML/ForkNodeActivation.hpp"
#include "fUML/FUMLFactory.hpp"
#include "fUML/Link.hpp"
#include "fUML/Locus.hpp"
#include "fUML/ObjectToken.hpp"
#include "fUML/PinActivation.hpp"
#include "uml/Action.hpp"
#include "uml/ActivityNode.hpp"
#include "uml/Behavior.hpp"
#include "uml/DataStoreNode.hpp"
#include "uml/LiteralBoolean.hpp"
#include "uml/InputPin.hpp"
#include "uml/OutputPin.hpp"
#include "uml/UmlFactory.hpp"


//*********************************
namespace fUML 
{
	class ActionActivationImpl :virtual public ActivityNodeActivationImpl, virtual public ActionActivation 
	{
		public: 
			ActionActivationImpl(const ActionActivationImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			ActionActivationImpl& operator=(ActionActivationImpl const&) = delete;

		protected:
			friend class FUMLFactoryImpl;
			ActionActivationImpl();



		public:
			//destructor
			virtual ~ActionActivationImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void addOutgoingEdge(std::shared_ptr<fUML::ActivityEdgeInstance>  edge)  ;
			
			/*!
			 */ 
			virtual void addPinActivation(std::shared_ptr<fUML::PinActivation>  pinActivation)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<fUML::Token> > completeAction()  ;
			
			/*!
			 */ 
			virtual void createNodeActivations()  ;
			
			/*!
			 */ 
			virtual void doAction()  ;
			
			/*!
			 */ 
			virtual void fire(std::shared_ptr<Bag<fUML::Token> >  incomingTokens)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<fUML::Value> > getTokens(std::shared_ptr<uml::InputPin>  pin)  ;
			
			/*!
			 */ 
			virtual bool isFirng()  ;
			
			/*!
			 */ 
			virtual bool isReady()  ;
			
			/*!
			 */ 
			virtual bool isSourceFor(std::shared_ptr<fUML::ActivityEdgeInstance>  edgeInstance)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::BooleanValue> makeBooleanValue(bool value)  ;
			
			/*!
			 */ 
			virtual void putToken(std::shared_ptr<uml::OutputPin>  pin,std::shared_ptr<fUML::Value>  value)  ;
			
			/*!
			 */ 
			virtual void putTokens(std::shared_ptr<uml::OutputPin>  pin,std::shared_ptr<Bag<fUML::Value> >  values)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::PinActivation> retrievePinActivation(std::shared_ptr<uml::Pin>  pin)  ;
			
			/*!
			 */ 
			virtual void run()  ;
			
			/*!
			 */ 
			virtual void sendOffers()  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<fUML::Token> > takeOfferedTokens()  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<Bag<fUML::Value> > takeTokens(std::shared_ptr<uml::InputPin>  pin)  ;
			
			/*!
			 */ 
			virtual void terminate()  ;
			
			/*!
			 */ 
			virtual bool valueParticipatesInLink(std::shared_ptr<fUML::Value>  value,std::shared_ptr<fUML::Link>  link)  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual bool isFiring() const ;
			
			/*!
			 */ 
			virtual void setFiring (bool _firing); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<Subset<fUML::InputPinActivation, fUML::PinActivation > > getInputPinActivation() const ;
			
			/*!
			 */
			virtual std::shared_ptr<Subset<fUML::OutputPinActivation, fUML::PinActivation > > getOutputPinActivation() const ;
			
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<Union<fUML::PinActivation> > getPinActivation() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual void eSet(int featureID, boost::any newValue) ;

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: FUML_ACTIONACTIVATIONACTIONACTIVATIONIMPL_HPP */

