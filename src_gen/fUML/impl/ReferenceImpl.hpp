//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef FUML_REFERENCEREFERENCEIMPL_HPP
#define FUML_REFERENCEREFERENCEIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

//*********************************
// generated Includes

//Model includes
#include "../Reference.hpp"

#include "impl/StructuredValueImpl.hpp"

#include <Classifier.hpp>
    #include "FUMLFactory.hpp"
    #include "Class.hpp"


//*********************************
namespace fUML 
{
	class ReferenceImpl :virtual public StructuredValueImpl, virtual public Reference 
	{
		public: 
			ReferenceImpl(const ReferenceImpl & obj);
			virtual ecore::EObject *  copy() const;

		private:    
			ReferenceImpl& operator=(ReferenceImpl const&) = delete;

		protected:
			friend class FUMLFactoryImpl;
			ReferenceImpl();

		public:
			//destructor
			virtual ~ReferenceImpl();
			
			//*********************************
			// Operations
			//*********************************
			/*!
			 */ 
			virtual void startBehavior(std::shared_ptr<uml::Class>  classifier,std::shared_ptr<std::vector<std::shared_ptr<fUML::ParameterValue>>>  inputs)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Execution>  dispatch(std::shared_ptr<uml::Operation>  operation)  ;
			
			/*!
			 */ 
			virtual void send(std::shared_ptr<fUML::SignalInstance>  signalInstance)  ;
			
			/*!
			 */ 
			virtual void destroy()  ;
			
			/*!
			 */ 
			virtual bool equals(std::shared_ptr<fUML::Value>  otherValue)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::Value>  new_()  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<std::vector<std::shared_ptr<uml::Classifier>>> getTypes()  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<fUML::FeatureValue>  retrieveFeatureValue(std::shared_ptr<uml::StructuralFeature>  feature)  ;
			
			/*!
			 */ 
			virtual void assignFeatureValue(std::shared_ptr<uml::StructuralFeature>  feature,std::shared_ptr<std::vector<std::shared_ptr<fUML::Value>>>  values,int position)  ;
			
			/*!
			 */ 
			virtual std::shared_ptr<std::vector<std::shared_ptr<fUML::FeatureValue>>> retrieveFeatureValues()  ;
			
			/*!
			 */ 
			virtual std::string toString()  ;
			
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<fUML::Object> getReferent() const ;
			
			/*!
			 */
			virtual void setReferent(std::shared_ptr<fUML::Object> _referent) ;
							
			
			//*********************************
			// Union Getter
			//*********************************
			 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			
			virtual boost::any eGet(int featureID, bool resolve, bool coreType) const ;
			
		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
	};
}
#endif /* end of include guard: FUML_REFERENCEREFERENCEIMPL_HPP */

