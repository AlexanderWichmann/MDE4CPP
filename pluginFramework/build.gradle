apply plugin: 'cpp'

description 'Plugin Framework'

File appendDebugSuffix(File binaryFile) {
  int extensionSeparatorIndex = binaryFile.path.lastIndexOf('.')
  return new File(binaryFile.path.substring(0, extensionSeparatorIndex) + "d" + binaryFile.path.substring(extensionSeparatorIndex))
}

task deliverPluginFrameworkHeaders(type: Copy) {
	description 'deliver PluginFramework header to %MDE4CPP_HOME%/application/include/PluginFramework'
	from "./src"
	into System.getenv('MDE4CPP_HOME')+"/application/include/PluginFramework"
	include "**/*.hpp"
	exclude "build", ".gradle"
}

task deliverPluginFrameworkDebugSharedLibrary(type: Copy) {
	description 'deliver PluginFramework debug libary to %MDE4CPP_HOME%/application/bin'
	from "build/libs/PluginFramework/shared/debug"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "PluginFrameworkd.dll"
}

task deliverPluginFrameworkReleaseSharedLibrary(type: Copy) {
	description 'deliver PluginFramework release libary to %MDE4CPP_HOME%/application/bin'
	from "build/libs/PluginFramework/shared/release"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "PluginFramework.dll"
}


model {
    toolChains {
    	 gcc(Gcc) {
    	 	"g++"
    	 }
    }
	
    buildTypes {
        debug 
        release
    }
	
	repositories {
        libs(PrebuiltLibraries) {
			['ecore', 'types', 'uml', 'fuml' ].each {
				delegate."$it" {
					def libraryName = "${name}"
					headers.srcDir System.getenv('MDE4CPP_HOME')+"/application/include/${libraryName}"
					binaries.withType(SharedLibraryBinary) {
						if(buildType == buildTypes.debug) {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}d.dll")
						} else {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}.dll")						
						}
					}
				}	
			}         
		}
	}

    components {
        PluginFramework(NativeLibrarySpec)
        {
        	sources {
                cpp {
                    source {
                        srcDirs "src" 
						include	"PluginFramework.cpp"
                    }
					exportedHeaders {
                        srcDirs ".", System.getenv('MDE4CPP_HOME')+"/application/include"
                        include "**/*.hpp"
                    }
					lib library: "ecore"
					lib library: "types"
					lib library: "uml"
					lib library: "fuml"
                }
            }

			binaries.withType(StaticLibraryBinarySpec) {
				buildable = false
			}
        }
		
		withType(NativeComponentSpec) {
			binaries.withType(NativeBinarySpec) {
				if(buildType == buildTypes.debug) {
					if (it instanceof SharedLibraryBinarySpec) {
						sharedLibraryFile = appendDebugSuffix(sharedLibraryFile)
						sharedLibraryLinkFile = appendDebugSuffix(sharedLibraryLinkFile)
					} else if (it instanceof StaticLibraryBinarySpec) {
						staticLibraryFile = appendDebugSuffix(staticLibraryFile)
					} else {
						throw new GradleException("Unknown native library binary")
					}
				}
			}
        }
    }
	    
    binaries {
	
        all {
        	cppCompiler.args '-std=c++11','-Wall', '-Wno-overloaded-virtual', '-pipe'
			if (buildType == buildTypes.debug) {
				cppCompiler.args '-g'
				
			}
			else {
				cppCompiler.args '-O3', '-DNDEBUG'
			}
        }
    }
}

tasks.withType(LinkSharedLibrary) { compileTask -> deliverPluginFrameworkHeaders.mustRunAfter compileTask }
tasks.withType(LinkSharedLibrary) { compileTask -> deliverPluginFrameworkDebugSharedLibrary.mustRunAfter compileTask }
tasks.withType(LinkSharedLibrary) { compileTask -> deliverPluginFrameworkReleaseSharedLibrary.mustRunAfter compileTask }

task compilePluginFramework(dependsOn: ['build', 'deliverPluginFrameworkHeaders', 'deliverPluginFrameworkDebugSharedLibrary', 'deliverPluginFrameworkReleaseSharedLibrary']){
	group 'PluginFramework'
	description 'compile PluginFramework in debug and release'
}
task compilePluginFrameworkDebug(dependsOn: ['PluginFrameworkDebugSharedLibrary', 'deliverPluginFrameworkHeaders', 'deliverPluginFrameworkDebugSharedLibrary']) {
	group 'PluginFramework'
	description 'compile PluginFramework in debug'
}
task compilePluginFrameworkRelease(dependsOn: ['PluginFrameworkReleaseSharedLibrary', 'deliverPluginFrameworkHeaders', 'deliverPluginFrameworkReleaseSharedLibrary']) {
	group 'PluginFramework'
	description 'compile PluginFramework in release'
}