[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateFactoryImplementationSource('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]

[template public generateFactoryImplSource(anEPackage : EPackage) {className : String = anEPackage.name.toUpperFirst().concat('FactoryImpl');}]
[file (anEPackage.name.concat('/impl/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[className/].hpp"
#include "[anEPackage.name.toUpperFirst().concat('Package')/].hpp"

[if (not(anEPackage.name = 'ecore'))]
#include "EClass.hpp"
[/if]

[if(anEPackage.name = 'uml')]
#include "impl/ElementImpl.hpp"
[/if]
[comment namespace /]
using namespace [anEPackage.name/];

//*********************************
// Constructor / Destructor
//*********************************

[className/]::[className/]()
{
	[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) ? (aClass.abstract=false)]
	m_idMap.insert(std::pair<std::string,unsigned int>("[aClass.generateTypeClass()/]", [anEPackage.name.toUpperFirst()/]Package::[aClass.name.toUpperCase()/]));
	[/for]
	[comment]	[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) ? (aClass.abstract=false)]
	//m_creatorMap.insert(std::pair<std::string,std::function<ecore::EObject*()>>("[aClass.generateTypeClass()/]",[ '[' /]this[ ']' /](){return this->create[aClass.name/]();}));
	[/for][/comment]
}

[className/]::~[className/]()
{
}

[anEPackage.name.toUpperFirst().concat('Factory')/]* [className/]::create()
{
	return new [className/]();
}

//*********************************
// creators
//*********************************

std::shared_ptr<ecore::EObject> [className/]::create(const unsigned int classID,  std::shared_ptr<ecore::EObject> container /*= nullptr*/, const unsigned int referenceID/* = -1*/) const
{
	switch(classID)
	{
	[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) ? (aClass.abstract=false)]
	[let ref:OrderedSet(EReference) = aClass.getAllContainers()]
	[if(ref->size() = 0)]
		//[aClass.name/] is not contained in any other element
	    case [anEPackage.name.toUpperFirst()/]Package::[aClass.name.toUpperCase()/]: return std::shared_ptr<[aClass.name/]>(this->create[aClass.name/]());
		[else]
		case [anEPackage.name.toUpperFirst()/]Package::[aClass.name.toUpperCase()/]:
		{
			[if(ref->size()>1)]
			switch(referenceID)
			{
				[for(aReference:EReference | ref)]
				//[aClass.name/] has [aReference.name/] as a containment
				case  [anEPackage.name.toUpperFirst()/]Package::[aReference.memberNameUpper()/]: 
				{
					auto castedContainer = std::dynamic_pointer_cast<[aReference.generateReferenceType(false)/]>(container);
					return this->create[aClass.name/]_in_[aReference.name.toUpperFirst()/](castedContainer);
				}
				[/for]
				default:
					std::cerr << __PRETTY_FUNCTION__ << "ERROR: Reference type not found." << std::endl;
		}
		[else]
			auto castedContainer = std::dynamic_pointer_cast<[ref->first().generateReferenceType(false)/]>(container);
			assert(castedContainer);
			return std::shared_ptr<[aClass.name/]>(this->create[aClass.name/]_in_[ref->first().name.toUpperFirst()/](castedContainer));
		[/if]
		}
	[/if]
	[/let]
	[/for]

	default:
	   	    std::cerr << __PRETTY_FUNCTION__ << " ID " << classID <<" not found" << std::endl;
	}
	return nullptr;
}

[comment]std::shared_ptr<[needNamespace(anEPackage, 'EObject')/]> [className/]::create([needNamespace(anEPackage, 'EClass*')/] _class) const
{
	if(_class->isAbstract())
    {
    	return nullptr;
   	}

	std::string _className = _class->eClass()->getName();
	return create(_className);
}[/comment]

std::shared_ptr<[needNamespace(anEPackage, 'EObject')/]> [className/]::create([needNamespace(anEPackage, 'EClass*')/] _class, std::shared_ptr<EObject> _container /* = nullptr*/) const
{
	if(_class->isAbstract())
    {
    	return nullptr;
   	}

	std::string _className = _class->eClass()->getName();
	return create(_className, _container);
}

[comment]std::shared_ptr<[needNamespace(anEPackage, 'EObject')/]> [className/]::create(std::string _className) const
{
	auto iter = m_creatorMap.find(_className);
	
	std::shared_ptr<[needNamespace(anEPackage, 'EObject')/]> _createdObject;
	if(iter != m_creatorMap.end())
    {
		//get the ID
        unsigned int id =iter->second;
		return getCreatorFunction(id, owner);
    }

    return nullptr;
}[/comment]

std::shared_ptr<[needNamespace(anEPackage, 'EObject')/]> [className/]::create(std::string _className, std::shared_ptr<EObject> _container/* = nullptr*/, const unsigned int referenceID) const
{
	auto iter = m_idMap.find(_className);
	
	std::shared_ptr<[needNamespace(anEPackage, 'EObject')/]> _createdObject;
	if(iter != m_idMap.end())
    {
		//get the ID
        unsigned int id =iter->second;
		return create(id, _container, referenceID);
    }

    return nullptr;
}


[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name)) ? (aClass.abstract=false)]
[comment][aClass.generateTypeClass()/]* [className/]::create[aClass.name/] () const
{
	return new [aClass.name.toUpperFirst()/]Impl();
}[/comment]


[let ref:OrderedSet(EReference) = aClass.getAllContainers()]
[for(aReference:EReference | ref)]
std::shared_ptr<[aClass.generateTypeClass()/]> [className/]::create[aClass.name/]_in_[aReference.name.toUpperFirst()/]([aReference.generateReferenceType(true)/] par_[aReference.name/]) const
{
	[if(ref->select(eType = aReference.eType)->size()>1)]
	std::shared_ptr<[aClass.name.toUpperFirst()/]> element(new [aClass.name.toUpperFirst()/]Impl(par_[aReference.name/], [anEPackage.name.toUpperFirst()/]Package::[aReference.memberNameUpper()/]));
	[else]
	std::shared_ptr<[aClass.name.toUpperFirst()/]> element(new [aClass.name.toUpperFirst()/]Impl(par_[aReference.name/]));
	[/if]
	[if(not aReference.eOpposite.name.oclIsUndefined())]
	[let r:EReference = findLowerSubset(aReference.eType.oclAsType(EClass), aClass, aReference.eOpposite)]
	[if(aReference.isBackReference())]
	if(auto wp = par_[aReference.name/].lock())
	{
	[else]
	if(nullptr != par_[aReference.name/])
	{
	[/if]
	[if(r.upperBound <> 1)]
    		[if(aReference.isBackReference())]wp[else]par_[aReference.name/][/if]->get[r.name.toUpperFirst()/]()->push_back(element);
	[else]
			[if(aReference.isBackReference())]wp[else]par_[aReference.name/][/if]->set[r.name.toUpperFirst()/](element);
	[/if]
	}
	[/let]
	[/if]    
	return element;
}
[/for]
[/let]
[/for]

[for (aClass : EClass | anEPackage.eAllContents(EClass)->asOrderedSet()->select(getAllContainers()->isEmpty())->sortedBy(name)) ? (aClass.abstract=false)]
//Class without container
std::shared_ptr<[aClass.generateTypeClass()/]> [className/]::create[aClass.name/]() const
{
	return std::shared_ptr<[aClass.generateTypeClass()/]>(new [aClass.name.toUpperFirst()/]Impl());
}
[/for]

std::shared_ptr<[anEPackage.name.toUpperFirst().concat('Package')/]> [className/]::get[anEPackage.name.toUpperFirst().concat('Package')/]() const
{
	return [anEPackage.name.toUpperFirst().concat('Package')/]::eInstance();
}
[/file]
[/template]