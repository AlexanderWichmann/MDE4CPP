[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateAttribute('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateClass /]
[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]

[query public hasSetter(aAttribute : EAttribute) : Boolean = aAttribute.changeable and (aAttribute.upperBound = 1)/]
[query public hasGetter(aAttribute : EAttribute) : EBoolean = not hasKey('getterbody') /]

[***###########################################################################################
 * Section for model and class implementation of an Attribute
 */]

[template public generateAttributeAccessorsDecl(aAttribute : EAttribute, impl : Boolean)]
[aAttribute.generateAttributeGetterDecleration(impl)/]
[aAttribute.generateAttributeSetterDecleration(impl)/]
[/template]

[template public generateAttributeProtectedMember(aAttribute : EAttribute)]
[aAttribute.generateDokumentation()/] 
[if (not(aAttribute.upperBound = 1))]
[aAttribute.generateAttributeType()/] m_[aAttribute.name/]; [else]
[aAttribute.generateAttributeType()/] m_[aAttribute.name/] [if (aAttribute.defaultValueLiteral->notEmpty())]= [if (aAttribute.eType.oclIsTypeOf(EEnum))][aAttribute.eType.name/]::[aAttribute.defaultValueLiteral.toUpperCase()/] [else] [aAttribute.defaultValueLiteral/][/if][/if];
[/if]
[/template]

[template public generateAttributeInit(aAttribute : EAttribute) ? (not(aAttribute.upperBound = 1))]
m_[aAttribute.name/].reset(new Bag<[aAttribute.eGenericType.generateCppType()/]>());
[/template]

[template public generateAttributeGetterDecleration(aAttribute : EAttribute, impl : Boolean) ? (hasGetter())]
[aAttribute.generateDokumentation()/] 
virtual [if (aAttribute.eType.oclIsKindOf(EDataType))]
[aAttribute.generateAttributeType()/] [else]
std::shared_ptr<[aAttribute.generateAttributeType()/]> [/if]
 [aAttribute.GetterName()/]() const [abstractSufix(impl)/];

[/template]

[template public generateAttributeSetterDecleration(aAttribute : EAttribute, impl : Boolean) ? ((hasSetter() or(impl and hasImplSetterOnly())) )]
[aAttribute.generateDokumentation()/] 
virtual void [aAttribute.SetterName()/] ([aAttribute.generateAttributeType()/] _[aAttribute.name/])[abstractSufix(impl)/]; 


[/template]

[***
 * Section for the Attribute cpp implementation
*/]
[template public generateAttributeGetterImplementationCpp(aAttribute : EAttribute)? (hasGetter())]
[aAttribute.generateAttributeType()/] [aAttribute.eContainingClass.name.toUpperFirst()/]Impl::[aAttribute.GetterName()/]() const 
{
	return m_[aAttribute.name/];
}
[/template]

[template public generateAttributeSetterImplementationCpp(aAttribute : EAttribute, impl : Boolean) ? (( hasSetter() or(impl and hasImplSetterOnly())) )]
void [aAttribute.eContainingClass.name.toUpperFirst()/]Impl::[aAttribute.SetterName()/]([aAttribute.generateAttributeType()/] _[aAttribute.name/])
{
	m_[aAttribute.name/] = _[aAttribute.name/];
} 
[/template]

[***###########################################################################################
 * Section for creating the Attribute elements in the metamodel package
*/]

[template public generateAttributeInitialization(anEAttribute : EAttribute)]
[anEAttribute.getClassMemberName()/] = [anEAttribute.packageGetter()/];
[anEAttribute.getClassMemberName()/]->setName("[anEAttribute.name/]");
[anEAttribute.getClassMemberName()/]->setEType([anEAttribute.eType.oclAsType(EDataType).packageGetter(anEAttribute)/]);
[anEAttribute.getClassMemberName()/]->setLowerBound([anEAttribute.lowerBound/]);
[anEAttribute.getClassMemberName()/]->setUpperBound([anEAttribute.upperBound/]);
[anEAttribute.getClassMemberName()/]->setTransient([anEAttribute.transient.toString()/]);
[anEAttribute.getClassMemberName()/]->setVolatile([anEAttribute.volatile.toString()/]);
[anEAttribute.getClassMemberName()/]->setChangeable([anEAttribute.changeable.toString()/]);
[anEAttribute.getClassMemberName()/]->setUnsettable([anEAttribute.unsettable.toString()/]);
[anEAttribute.getClassMemberName()/]->setUnique([anEAttribute.unique.toString()/]);
[anEAttribute.getClassMemberName()/]->setDerived([anEAttribute.derived.toString()/]);
[anEAttribute.getClassMemberName()/]->setOrdered([anEAttribute.ordered.toString()/]);
[anEAttribute.getClassMemberName()/]->setID([anEAttribute.iD.toString()/]);
{
	std::string defaultValue = "[anEAttribute.defaultValueLiteral/]";
	if (!defaultValue.empty())
	{
	   [anEAttribute.getClassMemberName()/]->setDefaultValueLiteral(defaultValue);
	}
}

[/template]

[template public generateStaticAttributeID(aAttribute : EAttribute)]
static const int [aAttribute.getStaticAttributeIDName()/] = [aAttribute.eContainingClass.getClassifierID()/][aAttribute.getFeatureID()/];

[/template]

[template public generateAttributeGetter(aAttribute : EAttribute,impl : Boolean) ]
virtual std::shared_ptr<[metamodelaTypedElementString(aAttribute)/]> get[aAttribute.getMemberNameUpperFirst()/]() const [abstractSufix(impl)/];

[/template]

[template public generateAttributeGetterImpl(anEAttribute : EAttribute)]
std::shared_ptr<[metamodelaTypedElementString(anEAttribute)/]> [anEAttribute.eContainingClass.ePackage.name.toUpperFirst()/]PackageImpl::get[anEAttribute.getMemberNameUpperFirst()/]() const
{
	return [anEAttribute.getClassMemberName()/];
}

[/template]

[template public generateAttributeCreation(anEAttribute : EAttribute)]
[anEAttribute.getClassMemberName()/] = factory->createEAttribute_in_EContainingClass([anEAttribute.eContainingClass.getClassMemberName()/], [anEAttribute.getStaticAttributeIDName()/]);

[/template]