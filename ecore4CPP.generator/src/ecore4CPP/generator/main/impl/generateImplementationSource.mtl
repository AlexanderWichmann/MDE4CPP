[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateImplementationSource('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateAttribute/]
[import ecore4CPP::generator::main::generateOperation/]
[import ecore4CPP::generator::main::generateReference/]
[import ecore4CPP::generator::main::generateStructuralFeatureSetGet /]
[import ecore4CPP::generator::main::generateType/]
[import ecore4CPP::generator::main::generateUnion /]
[import ecore4CPP::generator::main::helper /]

[template public generateImplementationSource(aClass : EClass) { className : String = aClass.name.toUpperFirst().concat('Impl'); }]
[file (aClass.ePackage.name.concat('/impl/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[className.concat('.hpp')/]"
#include <iostream>
#include <cassert>
#include "EAnnotation.hpp"
#include "EClass.hpp"
#include "[aClass.ePackage.name.concat('PackageImpl')/].hpp"
[if (aClass.hasKey('includes'))]
[aClass.valueKey('includes')/]
[/if]

[comment namespace /]
using namespace [aClass.ePackage.name/];

//*********************************
// Constructor / Destructor
//*********************************
[className/]::[className/]()
{
	//*********************************
	// Attribute Members
	//*********************************
	[for (aAttribute : EAttribute | aClass.eAttributes->asOrderedSet()->sortedBy(name)) separator ('\n')]
	[aAttribute.generateAttributeInit()/][/for]

	//*********************************
	// Reference Members
	//*********************************
	[comment]References must be initialized in this order:
	1st Unions
	2nd Subset Unions
	3rd Subsets that should be unions
	4th all the rest.
	[/comment]
	//Unions
	[for (aReference : EReference | aClass.eReferences->select(aReference : EReference | aReference.isUnion() and not(aReference.hasSubset()))->asOrderedSet()->sortedBy(name)) separator ('\n')]
	[aReference.generateReferenceInit()/][/for]

	//Subset Unions
	[for (aReference : EReference | aClass.eReferences->select(aReference : EReference | not(aReference.isSubsetUnion() or aReference.isUnion()) and aReference.isSubsetUnion())->asOrderedSet()->sortedBy(name)) separator ('\n')]
	[aReference.generateReferenceInit()/][/for]

	//Subsets that should be Unions
	[for (aReference : EReference | aClass.eReferences->select(aReference : EReference | aReference.subsetIsUnion())->asOrderedSet()->sortedBy(name)) separator ('\n')]
	[aReference.generateReferenceInit()/][/for]

	//The rest
	[for (aReference : EReference | aClass.eReferences->select(aReference : EReference | (aReference.hasSubset() and not(aReference.subsetIsUnion())) or not(aReference.isUnion()))->asOrderedSet()->sortedBy(name)) separator ('\n')]
	[aReference.generateReferenceInit()/][/for]

}

[className/]::~[className/]()
{
#ifdef SHOW_DELETION
	std::cout << "-------------------------------------------------------------------------------------------------\r\ndelete [aClass.name.toUpperFirst()/] "<< this << "\r\n------------------------------------------------------------------------ " << std::endl;
#endif
	[aClass.eReferences.generateProtectedReferenceDeleter()/]
}

[comment]Don't forget to call the class contructor before initializing the unions and subsets![/comment]
[className/]::[className/](const [className/] & obj):[className/]()
{
	//create copy of all Attributes
	[for (att : EAttribute | aClass.eAllAttributes->asOrderedSet()->sortedBy(name))]
	m_[att.name/] = obj.[att.GetterName()/]();
	[/for]

	[comment]//copy references with no containment
	
	[for (ref : EReference | aClass.eAllReferences->select(containment = false)->asOrderedSet()->sortedBy(name))]
	[if (ref.hasSetter() or ref.upperBound = 1)]
	m_[ref.name/]  = obj.[ref.GetterName()/]();
	[else]
	[ref.generateReferenceType()/] _[ref.name/] = obj.[ref.GetterName()/]();
	m_[ref.name/].reset(new [ref.generateReferenceType(false)/](*(obj.[ref.GetterName()/]().get())));// this->[ref.GetterName()/]()->insert(this->[ref.GetterName()/]()->end(), _[ref.name/]->begin(), _[ref.name/]->end());
	[/if]

	[/for]

	//clone containt lists
	[for (ref : EReference | aClass.eAllReferences->select(containment = true)->asOrderedSet()->sortedBy(name))][/comment]
    
	[comment]References must be copied in this order:
	1st Unions
	2nd Subset Unions
	3rd all the rest.
	[/comment]
	//Create unions
	[for (ref : EReference | (aClass.eAllReferences->select(aReference : EReference | aReference.isUnion() and not(aReference.hasSubset())))->asOrderedSet()->sortedBy(name))]
	[if (ref.hasSetter() or ref.upperBound = 1)]
	m_[ref.name/]  = obj.[ref.GetterName()/]();
	[else]
	[ref.generateReferenceType()/] _[ref.name/] = obj.[ref.GetterName()/]();
	m_[ref.name/].reset(new [ref.generateReferenceType(false)/](*(obj.[ref.GetterName()/]().get())));// this->[ref.GetterName()/]()->insert(this->[ref.GetterName()/]()->end(), _[ref.name/]->begin(), _[ref.name/]->end());
	[/if]
	[/for]

	//Create the SubsetUnions
	[for (ref : EReference | (aClass.eAllReferences->select(aReference : EReference | aReference.isSubsetUnion()))->asOrderedSet()->sortedBy(name))]
	[if (ref.hasSetter() or ref.upperBound = 1)]
	m_[ref.name/]  = obj.[ref.GetterName()/]();
	[else]
	[ref.generateReferenceType()/] _[ref.name/] = obj.[ref.GetterName()/]();
	m_[ref.name/].reset(new [ref.generateReferenceType(false)/](*(obj.[ref.GetterName()/]().get())));// this->[ref.GetterName()/]()->insert(this->[ref.GetterName()/]()->end(), _[ref.name/]->begin(), _[ref.name/]->end());
	[/if]
	[/for]

	//Clone the subset that should be unions too
	[for (ref : EReference | (aClass.eAllReferences->select(aReference : EReference | not(aReference.isSubsetUnion() or aReference.isUnion()) and aReference.subsetIsUnion()))->asOrderedSet()->sortedBy(name))]
	[if (ref.hasSetter() or ref.upperBound = 1)]
	m_[ref.name/]  = obj.[ref.GetterName()/]();
	[else]
	[ref.generateReferenceType()/] _[ref.name/] = obj.[ref.GetterName()/]();
	m_[ref.name/].reset(new [ref.generateReferenceType(false)/](*(obj.[ref.GetterName()/]().get())));// this->[ref.GetterName()/]()->insert(this->[ref.GetterName()/]()->end(), _[ref.name/]->begin(), _[ref.name/]->end());
	[/if]
	[/for]

	//Clone the rest
	[for (ref : EReference | (aClass.eAllReferences->select(aReference : EReference | (aReference.hasSubset() and not(aReference.subsetIsUnion())) or not(aReference.isUnion())))->asOrderedSet()->sortedBy(name))]
	[if (ref.hasSetter() or ref.upperBound = 1)]
	if(obj.[ref.GetterName()/]()!=nullptr)
	{
		[if(ref.upperBound=1)]
		m_[ref.name/].reset(dynamic_cast<[ref.eType.generateType()/]*>(obj.[ref.GetterName()/]()->copy()));
		[else]
		m_[ref.name/].reset(dynamic_cast<Bag<[ref.eType.generateType()/]>* >(obj.[ref.GetterName()/]()->copy()));
		[/if]
	}
	[else]
	std::shared_ptr<Bag<[ref.eType.generateType()/]>> _[ref.name/]List = obj.[ref.GetterName()/]();
	for(std::shared_ptr<[ref.eType.generateType()/]> _[ref.name/] : *_[ref.name/]List)
	{
		this->[ref.GetterName()/]()->add(std::shared_ptr<[ref.eType.generateType()/]>(dynamic_cast<[ref.eType.generateType()/]*>(_[ref.name/]->copy())));
	}
	[/if]
	[/for]
}

ecore::EObject *  [className/]::copy() const
{
	return new [className/](*this);
}

std::shared_ptr<[needNamespace(aClass.ePackage, 'EClass')/]> [className/]::eStaticClass() const
{
	return [aClass.ePackage.name.concat('PackageImpl').toUpperFirst()/]::eInstance()->get[aClass.name.toUpperFirst()/]();
}

//*********************************
// Attribute Setter Gettter
//*********************************
[for (aAttribute : EAttribute | aClass.eAttributes->asOrderedSet()->sortedBy(name)) separator ('\n')]
[aAttribute.generateAttributeSetterImplementationCpp(true)/]

[aAttribute.generateAttributeGetterImplementationCpp()/]
[/for]

//*********************************
// Operations
//*********************************
[for (aOperation : EOperation | aClass.eOperations->asOrderedSet()->sortedBy(name)) separator ('\n')]
[aOperation.generateOperationImplementation()/]
[/for]

//*********************************
// References
//*********************************
[for (aReference : EReference | aClass.eReferences->asOrderedSet()->sortedBy(name)) separator ('\n')]
[aReference.generateReferenceCpp()/]
[/for]

//*********************************
// Union Getter
//*********************************
[aClass.generateUnionGetterCpp()/]

//*********************************
// Structural Feature Getter/Setter
//*********************************
[aClass.generateeGetImpl()/]
[/file]
[/template]