[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateBuildFile('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::helper /]

[query public metaModelLibraries(anEPackage : EPackage) : Set(EPackage) = OrderedSet{anEPackage.eAllContents().eClass().ePackage,anEPackage.eAllContents(EClass).eAllSuperTypes.ePackage,anEPackage.eAllContents(EStructuralFeature).eType.ePackage,anEPackage.eAllContents(EParameter).eType.ePackage}->flatten()->sortedBy(name) /]

[template public generateBuildFile(aPackage : EPackage) { packageName : String = aPackage.name; }]
[comment	generate CMakeLists.txt for model libary/]
[file (packageName.concat('/').concat('CMakeLists.txt'), false, 'UTF-8')]
#############################################################################
#																			#
#		 			CMakeList created by ecore4CPP Generator				# 
#																			#
#############################################################################

# C++ project of model [packageName/].ecore, generated by Ecore4CPP

CMAKE_MINIMUM_REQUIRED(VERSION 3.9)

if(UNIX AND NOT APPLE)
    # for Linux, BSD, Solaris, Minix
SET(CMAKE_C_COMPILER "gcc")
SET(CMAKE_CXX_COMPILER "g++")
else()
   SET(CMAKE_C_COMPILER "gcc.exe")
   SET(CMAKE_CXX_COMPILER "g++.exe")
endif()

PROJECT([packageName/])

IF(NOT CMAKE_BUILD_TYPE) 
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF(NOT CMAKE_BUILD_TYPE)
SET(CMAKE_DEBUG_POSTFIX d)

SET(CMAKE_CXX_STANDARD 14)
SET(GCC_COVERAGE_LINK_FLAGS "-fopenmp")
SET(CMAKE_CXX_FLAGS "-std=c++11 -Wall -Wno-overloaded-virtual -Wdeprecated-declarations -fopenmp -fmax-errors=5")
SET(CMAKE_CXX_FLAGS_DEBUG " -Og -ggdb -DACTIVITY_DEBUG_ON")
[if (packageName='uml')]
SET(CMAKE_CXX_FLAGS_RELEASE " -O1 -DNDEBUG")
[else]
SET(CMAKE_CXX_FLAGS_RELEASE " -O3 -DNDEBUG")
[/if]

string(REPLACE "\\" "/" MDE4CPP_HOME $ENV{MDE4CPP_HOME})

SET(SOURCE_FILES
	impl/[packageName.toUpperFirst()/]FactoryImpl.cpp
	[packageName.toUpperFirst()/]Factory.cpp
	impl/[packageName.toUpperFirst()/]PackageImpl.cpp
	[packageName.toUpperFirst()/]Package.cpp
	impl/[packageName.toUpperFirst()/]PluginImpl.cpp
	[packageName.toUpperFirst()/]Plugin.cpp
[for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
	impl/[aClass.name.toUpperFirst()/]Impl.cpp
[/for]
[if (packageName='uml')]
	${MDE4CPP_HOME}/application/include/util/util.cpp
	${MDE4CPP_HOME}/application/include/util/registry.cpp
	${MDE4CPP_HOME}/application/include/util/stereotypestorage.cpp
[/if]
	#${MDE4CPP_HOME}/application/include/util/ProfileCallCount.cpp
)

INCLUDE_DIRECTORIES(
	.
	../
	${MDE4CPP_HOME}/application/include
	${MDE4CPP_HOME}/application/include/abstractDataTypes
if(NOT UNIX)
	${MDE4CPP_HOME}/application/include/PluginFramework
endif()
[if (packageName='uml')]
	${MDE4CPP_HOME}/application/include/util
[/if]
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
	${MDE4CPP_HOME}/application/include/[pack.name/]
[/for]
)

IF(NOT UNIX)
	IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
		FIND_LIBRARY(PLUGINFRAMEWORK_DEBUG PluginFrameworkd ${MDE4CPP_HOME}/application/lib)
	ELSE()
		FIND_LIBRARY(PLUGINFRAMEWORK_RELEASE PluginFramework ${MDE4CPP_HOME}/application/lib)
	ENDIF()
ENDIF()

IF(UNIX AND NOT APPLE)
    # for Linux, BSD, Solaris, Minix
	IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
		FIND_LIBRARY([pack.name.toUpperCase()/]_DEBUG [pack.name/]d.so ${MDE4CPP_HOME}/application/bin)
[/for]
	ELSE()
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
		FIND_LIBRARY([pack.name.toUpperCase()/]_RELEASE [pack.name/].so ${MDE4CPP_HOME}/application/bin)
[/for]
	ENDIF()
ELSE()
	IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
		FIND_LIBRARY([pack.name.toUpperCase()/]_DEBUG [pack.name/]d ${MDE4CPP_HOME}/application/lib)
[/for]
	ELSE()
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
		FIND_LIBRARY([pack.name.toUpperCase()/]_RELEASE [pack.name/] ${MDE4CPP_HOME}/application/lib)
[/for]
	ENDIF()
ENDIF()

ADD_LIBRARY(${PROJECT_NAME} SHARED ${SOURCE_FILES})

IF(CMAKE_BUILD_TYPE STREQUAL "Debug")
	IF(NOT UNIX)
		TARGET_LINK_LIBRARIES(${PROJECT_NAME} 
			debug ${PLUGINFRAMEWORK_DEBUG}
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
			debug ${[pack.name.toUpperCase()/]_DEBUG}
[/for]
	)
	ELSE()
		TARGET_LINK_LIBRARIES(${PROJECT_NAME} 
			#debug ${PLUGINFRAMEWORK_DEBUG}
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
			debug ${[pack.name.toUpperCase()/]_DEBUG}
[/for]
		)
	ENDIF()
ELSE()
	IF(NOT UNIX) 
		TARGET_LINK_LIBRARIES(${PROJECT_NAME}
			optimized ${PLUGINFRAMEWORK_RELEASE}
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
			optimized ${[pack.name.toUpperCase()/]_RELEASE}
[/for]
	)
	ELSE()
		TARGET_LINK_LIBRARIES(${PROJECT_NAME}
			#optimized ${PLUGINFRAMEWORK_RELEASE}
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
			optimized ${[pack.name.toUpperCase()/]_RELEASE}
[/for]
		)
	ENDIF()
ENDIF()

SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES PREFIX "")

#-----------------------------------------------------
# DELIVERING binaries and header to ${MDE4CPP_HOME}
#-----------------------------------------------------

INSTALL(TARGETS ${PROJECT_NAME}
	RUNTIME DESTINATION ${MDE4CPP_HOME}/application/bin
    LIBRARY DESTINATION ${MDE4CPP_HOME}/application/bin
    ARCHIVE DESTINATION ${MDE4CPP_HOME}/application/lib
)

INSTALL(DIRECTORY . DESTINATION ${MDE4CPP_HOME}/application/include/${PROJECT_NAME}
	FILES_MATCHING PATTERN "*.hpp"
	PATTERN ".cmake" EXCLUDE
)
[/file]

[file ('../build.gradle', false, 'UTF-8')]
apply plugin: 'base' 

description 'Build tasks for project: [packageName/]'

task build[packageName.toUpperFirst()/](dependsOn: ['['/]'generate[packageName.toUpperFirst()/]', 'compile[packageName.toUpperFirst()/]'[if(aPackage.prepareApplication())], 'compileApplicationFor[packageName/]'[/if][']'/]) {
	group '[packageName/]'
	description 'build [packageName/]'
}

[if(aPackage.prepareApplication())]
task compileApplicationFor[packageName/](dependsOn: ['['/]'compileApplicationFor[packageName/]Debug', 'compileApplicationFor[packageName/]Release'[']'/]) {
	group '[packageName/]'
	description 'compile [packageName/]'
}
[generateCompileTask('ApplicationFor'.concat(packageName), 'Debug', 'application')/]
[generateCompileTask('ApplicationFor'.concat(packageName), 'Release', 'application')/]

[/if]

task compile[packageName.toUpperFirst()/](dependsOn: ['['/]'compile[packageName.toUpperFirst()/]Debug', 'compile[packageName.toUpperFirst()/]Release'[']'/]) {
	group '[packageName/]'
	description 'compile [packageName/]'
}
[generateCompileTask(packageName, 'Debug', 'src_gen/'.concat(packageName))/]
[generateCompileTask(packageName, 'Release', 'src_gen/'.concat(packageName))/]

task generate[packageName.toUpperFirst()/](type: JavaExec) {
	group '[packageName/]'
	description 'generate C++ code of [packageName/].ecore model'
	main = "-jar"
	workingDir "./model"
	args System.getenv('MDE4CPP_HOME') + "/application/generator/ecore4CPP.jar", "[packageName/].ecore", "../src_gen"
	inputs.files file(System.getenv('MDE4CPP_HOME') + "/application/generator/ecore4CPP.jar"), file("model/[packageName/].ecore")
	outputs.dir file("src_gen")
	
	doFirst {
		if (System.getenv('MDE4CPP_HOME') == null) {
			throw new GradleException('System environment variable "MDE4CPP_HOME" is not defined')
		}
		if (!file(System.getenv('MDE4CPP_HOME') + "/application/generator/ecore4CPP.jar").exists()) {
			throw new GradleException('ecore4CPP.jar is missing in folder ' + file(System.getenv('MDE4CPP_HOME') + '/application/generator') + '. Please run task createEcore4CPP!')
		}
	}
}

compile[packageName.toUpperFirst()/].mustRunAfter generate[packageName.toUpperFirst()/]
compile[packageName.toUpperFirst()/]Debug.mustRunAfter generate[packageName.toUpperFirst()/]
compile[packageName.toUpperFirst()/]Release.mustRunAfter generate[packageName.toUpperFirst()/]

[if(aPackage.prepareApplication())] 
compileApplicationFor[packageName/].mustRunAfter compile[packageName.toUpperFirst()/]
compileApplicationFor[packageName/]Debug.mustRunAfter compile[packageName.toUpperFirst()/]Debug
compileApplicationFor[packageName/]Release.mustRunAfter compile[packageName.toUpperFirst()/]Release
[/if]

clean.doFirst {
	def cmakeFolder = file('./src_gen/[packageName/]/.cmake/')
	if(cmakeFolder.exists()) {
    	delete cmakeFolder.absolutePath
   		println "deleting folder " + cmakeFolder.absolutePath
	}
[if(aPackage.prepareApplication())] 
	cmakeFolder = file('./application/.cmake/')
	if(cmakeFolder.exists()) {
    	delete cmakeFolder.absolutePath
   		println "deleting folder " + cmakeFolder.absolutePath
	}
[/if]
}
[/file]
[/template]

[template private generateCompileTask(packageName : String, buildType : String, subfolder : String)]
task compile[packageName.toUpperFirst()/][buildType/] {
	description 'compile [packageName/] in [buildType/]'

	def folder = new File(file('./[subfolder/]/.cmake/[buildType/]').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir '[subfolder/]/.cmake/[buildType/]'
			if (System.properties['['/]'os.name'[']'/].toLowerCase().contains('windows')) {
			   commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=[buildType/] ' + file("./[subfolder/]").absolutePath
			} else {
			   commandLine 'cmake -G "Unix Makefiles" -D CMAKE_BUILD_TYPE=[buildType/] ' + file("./[subfolder/]").absolutePath
			}
		}
		exec {
			workingDir '[subfolder/]/.cmake/[buildType/]'
			if (make_parallel_jobs)
			{			
				if (System.properties['['/]'os.name'[']'/].toLowerCase().contains('windows')) {
				   commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
				} else {
				   commandLine 'make install -j' + make_parallel_jobs
				}
				
			}
			else
			{
				if (System.properties['['/]'os.name'[']'/].toLowerCase().contains('windows')) {
					commandLine 'cmd', '/c', 'mingw32-make install' 
				} else {
					commandLine 'make install' 
				}
			}
		}
	}
}
compile[packageName.toUpperFirst()/][buildType/].onlyIf {
	(project.hasProperty("[buildType.toUpperCase()/]") && !(project.getProperty("[buildType.toUpperCase()/]") == '0'))[if(buildType.size()>0)] || (project.hasProperty("[buildType.at(1)/]") && !(project.getProperty("[buildType.at(1)/]") == '0'))[/if] || (!project.hasProperty("RELEASE") && !project.hasProperty("R") && !project.hasProperty("DEBUG") && !project.hasProperty("D"))
}
[/template]
