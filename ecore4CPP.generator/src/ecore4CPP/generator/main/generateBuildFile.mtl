[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateBuildFile('http://www.eclipse.org/emf/2002/Ecore')]

[query public metaModelLibraries(anEPackage : EPackage) : Set(EPackage) = OrderedSet{anEPackage.eAllContents().eClass().ePackage,anEPackage.eAllContents(EClass).eAllSuperTypes.ePackage,anEPackage.eAllContents(EStructuralFeature).eType.ePackage,anEPackage.eAllContents(EParameter).eType.ePackage}->flatten()->sortedBy(name) /]

[template public generateBuildFile(aPackage : EPackage) { packageName : String = aPackage.name; }]
[file (packageName.concat('/').concat('CMakeLists.txt'), false, 'UTF-8')]
#############################################################################
#																			#
#		 			CMakeList created by ecore4CPP Generator				# 
#																			#
#############################################################################

# C++ project of model [packageName/].ecore, generated by Ecore4CPP

CMAKE_MINIMUM_REQUIRED(VERSION 3.9)

SET(CMAKE_C_COMPILER "gcc.exe")
SET(CMAKE_CXX_COMPILER "g++.exe")

PROJECT([packageName/])

IF(NOT CMAKE_BUILD_TYPE) 
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF(NOT CMAKE_BUILD_TYPE)
SET(CMAKE_DEBUG_POSTFIX d)

SET(CMAKE_CXX_STANDARD 14)
SET(GCC_COVERAGE_LINK_FLAGS "-fopenmp")
SET(CMAKE_CXX_FLAGS "-std=c++11 -Wall -Wno-overloaded-virtual -Wdeprecated-declarations -fopenmp -fmax-errors=5")
SET(CMAKE_CXX_FLAGS_DEBUG " -Og")
[if (packageName='uml')]
SET(CMAKE_CXX_FLAGS_RELEASE " -O1 -DNDEBUG")
[else]
SET(CMAKE_CXX_FLAGS_RELEASE " -O3 -DNDEBUG")
[/if]

string(REPLACE "\\" "/" MDE4CPP_HOME $ENV{MDE4CPP_HOME})

SET(SOURCE_FILES
	impl/[packageName.toUpperFirst()/]FactoryImpl.cpp
	[packageName.toUpperFirst()/]Factory.cpp
	impl/[packageName.toUpperFirst()/]PackageImpl.cpp
	[packageName.toUpperFirst()/]Package.cpp
	impl/[packageName.toUpperFirst()/]PluginImpl.cpp
	[packageName.toUpperFirst()/]Plugin.cpp
[for (aClass : EClass | aPackage.eAllContents(EClass)->asOrderedSet()->sortedBy(name))]
	impl/[aClass.name.toUpperFirst()/]Impl.cpp
[/for]
[if (packageName='uml')]
	${MDE4CPP_HOME}/application/include/util/util.cpp
	${MDE4CPP_HOME}/application/include/util/registry.cpp
	${MDE4CPP_HOME}/application/include/util/stereotypestorage.cpp
[/if]
)

INCLUDE_DIRECTORIES(
	.
[if (packageName='uml')]
	../
[/if]
	${MDE4CPP_HOME}/application/include
	${MDE4CPP_HOME}/application/include/abstractDataTypes
	${MDE4CPP_HOME}/application/include/PluginFramework
[if (packageName='uml')]
	${MDE4CPP_HOME}/application/include/util
[/if]
[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
	${MDE4CPP_HOME}/application/include/[pack.name/]
[/for]
)

FIND_LIBRARY(PLUGINFRAMEWORK_DEBUG PluginFrameworkd ${MDE4CPP_HOME}/application/lib)
SET(DEBUG_LIBRARIES ${PLUGINFRAMEWORK_DEBUG})
FIND_LIBRARY(PLUGINFRAMEWORK_RELEASE PluginFramework ${MDE4CPP_HOME}/application/lib)
SET(RELEASE_LIBRARIES ${PLUGINFRAMEWORK_RELEASE})

[for (pack : EPackage | aPackage.metaModelLibraries()) ? (not(pack.name = packageName))]
FIND_LIBRARY([pack.name.toUpperCase()/]_DEBUG [pack.name/]d ${MDE4CPP_HOME}/application/lib)
SET(DEBUG_LIBRARIES ${DEBUG_LIBRARIES} ${[pack.name.toUpperCase()/]_DEBUG})
FIND_LIBRARY([pack.name.toUpperCase()/]_RELEASE [pack.name/] ${MDE4CPP_HOME}/application/lib)
SET(RELEASE_LIBRARIES ${RELEASE_LIBRARIES} ${[pack.name.toUpperCase()/]_RELEASE})
[/for]

ADD_LIBRARY(${PROJECT_NAME} SHARED ${SOURCE_FILES})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} debug ${DEBUG_LIBRARIES})
TARGET_LINK_LIBRARIES(${PROJECT_NAME} optimized ${RELEASE_LIBRARIES})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES PREFIX "")

#-----------------------------------------------------
# DELIVERING binaries and header to ${MDE4CPP_HOME}
#-----------------------------------------------------

INSTALL(TARGETS ${PROJECT_NAME}
	RUNTIME DESTINATION ${MDE4CPP_HOME}/application/bin
    LIBRARY DESTINATION ${MDE4CPP_HOME}/application/bin
    ARCHIVE DESTINATION ${MDE4CPP_HOME}/application/lib
)

INSTALL(DIRECTORY . DESTINATION ${MDE4CPP_HOME}/application/include/${PROJECT_NAME}
	FILES_MATCHING PATTERN "*.hpp"
	PATTERN ".cmake" EXCLUDE
)
[/file]

[file ('../build.gradle', false, 'UTF-8')]
apply plugin: 'base' 

description 'Build tasks for project: [packageName/]'

task build[packageName.toUpperFirst()/](dependsOn: ['['/]'model:generate[packageName.toUpperFirst()/]', 'compile[packageName.toUpperFirst()/]'[']'/]) {
	group '[packageName/]'
	description 'build [packageName/] in debug and release'
}
task build[packageName.toUpperFirst()/]Debug(dependsOn: ['['/]'model:generate[packageName.toUpperFirst()/]', 'compile[packageName.toUpperFirst()/]Debug'[']'/]) {
	group '[packageName/]'
	description 'build [packageName/] in debug'
}
task build[packageName.toUpperFirst()/]Release(dependsOn: ['['/]'model:generate[packageName.toUpperFirst()/]', 'compile[packageName.toUpperFirst()/]Release'[']'/]) {
	group '[packageName/]'
	description 'build [packageName/] in release'
}

task compile[packageName.toUpperFirst()/](dependsOn: ['['/]'compile[packageName.toUpperFirst()/]Debug', 'compile[packageName.toUpperFirst()/]Release'[']'/]) {
	group '[packageName/]'
	description 'compile [packageName/] in debug and release'
}

[generateCompileTask(packageName, 'Debug')/]

[generateCompileTask(packageName, 'Release')/]

compile[packageName.toUpperFirst()/].mustRunAfter tasks.getByPath('model:generate[packageName.toUpperFirst()/]')
compile[packageName.toUpperFirst()/]Debug.mustRunAfter tasks.getByPath('model:generate[packageName.toUpperFirst()/]')
compile[packageName.toUpperFirst()/]Release.mustRunAfter tasks.getByPath('model:generate[packageName.toUpperFirst()/]')

clean.doFirst {
	def cmakeFolder = file('./src_gen/[packageName/]/.cmake/')
	if(cmakeFolder.exists()) {
    	delete cmakeFolder.absolutePath
   		println "deleting folder " + cmakeFolder.absolutePath
	}
}
[/file]

[file ('../settings.gradle', false, 'UTF-8')]
include 'model'
[/file]
[/template]

[template private generateCompileTask(packageName : String, buildType : String)]
task compile[packageName.toUpperFirst()/][buildType/] {
	group '[packageName/]'
	description 'compile [packageName/] in [buildType/]'

	def folder = new File(file('./src_gen/[packageName/]/.cmake/[buildType/]').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'src_gen/[packageName/]/.cmake/[buildType/]'
			commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=[buildType/] ' + file("./src_gen/[packageName/]").absolutePath
		}
		exec {
			workingDir 'src_gen/[packageName/]/.cmake/[buildType/]'
			if (make_parallel_jobs)
			{			
				commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
			}
			else
			{
				commandLine 'cmd', '/c', 'mingw32-make install' 
			}
		}
	}
}
[/template]
