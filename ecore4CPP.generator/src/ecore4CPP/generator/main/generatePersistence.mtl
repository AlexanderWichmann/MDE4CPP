[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generatePersistence('http://www.eclipse.org/emf/2002/Ecore')]

[import ecore4CPP::generator::main::generateClass /]
[import ecore4CPP::generator::main::generateType /]
[import ecore4CPP::generator::main::helper /]


[template public generatePersistenceNSPath(path : EBoolean)]
[if(path)]persistence/interface[else]persistence::interface[/if]
[/template]

[template public generatePersistenceForwardDeclarations(aClass : EClass)]
#include <map>

namespace persistence
{
	namespace interface
	{
		class XLoadHandler; // used for Persistence
		class XSaveHandler; // used for Persistence
	}
}

namespace [aClass.ePackage.name/]
{
	class [aClass.ePackage.name.toUpperFirst()/]Factory;
}
[/template]

[template public generatePersistenceInclude(aClass : EClass) ]
#include "[generatePersistenceNSPath(true)/]/XLoadHandler.hpp" // used for Persistence
#include "[generatePersistenceNSPath(true)/]/XSaveHandler.hpp" // used for Persistence
#include "[aClass.ePackage.name/]/[aClass.ePackage.name.toUpperFirst()/]Factory.hpp"
#include "[aClass.ePackage.name/]/[aClass.ePackage.name.toUpperFirst()/]Package.hpp"
#include <exception> // used in Persistence
[/template]

[template public generatePersistenceDecl(aClass : EClass, impl : Boolean) ]
[generatePersistenceLoadDecl(aClass, impl)/]
[generatePersistenceResolveReferenceDecl(aClass, impl)/]
[generatePersistenceSaveDecl(aClass, impl)/]
[/template]

[template public generatePersistenceLoadDecl(aClass: EClass, impl : EBoolean)]
virtual void load(std::shared_ptr<[generatePersistenceNSPath(false)/]::XLoadHandler> loadHandler) [abstractSufix(impl)/];
[if (impl)]
virtual void loadAttributes(std::shared_ptr<[generatePersistenceNSPath(false)/]::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
virtual void loadNonContainmentReferences(std::shared_ptr<[generatePersistenceNSPath(false)/]::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
virtual bool loadContainmentReference(std::string nodeName, std::shared_ptr<[generatePersistenceNSPath(false)/]::XLoadHandler> loadHandler, std::shared_ptr<[aClass.ePackage.name/]::[aClass.ePackage.name.toUpperFirst()/]Factory> factory);
[/if]
[/template]
[template public generatePersistenceResolveReferenceDecl(aClass: EClass, impl : EBoolean)]
virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<[needNamespace(aClass.ePackage, 'EObject')/]> > references) [abstractSufix(impl)/];
[/template]
[template public generatePersistenceSaveDecl(aClass: EClass, impl : EBoolean)]
virtual void save(std::shared_ptr<[generatePersistenceNSPath(false)/]::XSaveHandler> saveHandler) const [abstractSufix(impl)/];
[/template]


[template public generatePersistenceImpl(aClass : EClass) ]
[generatePersistenceLoadImpl(aClass)/]

[generatePersistenceResolveReferenceImpl(aClass)/]

[generatePersistenceSaveImpl(aClass)/]
[/template]

[template public generatePersistenceLoadImpl(aClass: EClass)]
void [aClass.name.concat('Impl')/]::load(std::shared_ptr<[generatePersistenceNSPath(false)/]::XLoadHandler> loadHandler)
{
	std::map<std::string, std::string> attr_list = loadHandler->getAttributeList();
	loadAttributes(loadHandler, attr_list);
	loadNonContainmentReferences(loadHandler, attr_list);

	//
	// Create new objects (from references (containment == true))
	//
	// get [aClass.ePackage.name.toUpperFirst()/]Factory
	std::shared_ptr<[aClass.ePackage.name/]::[aClass.ePackage.name.toUpperFirst()/]Factory> factory = [aClass.ePackage.name/]::[aClass.ePackage.name.toUpperFirst()/]Factory::eInstance();
	int numNodes = loadHandler->getNumOfChildNodes();
[comment]
		std::cout << loadHandler->getLevel() << "<" << metaClass->getName() << " ";
	
		std::shared_ptr<[needNamespace(aClass.ePackage, 'ENamedElement')/]> _[aClass.name/] = std::dynamic_pointer_cast<[needNamespace(aClass.ePackage, 'ENamedElement')/]>(loadHandler->getCurrentObject());
		if(_[aClass.name/])
		{
			std::cout << "name='"<< _[aClass.name/]->getName() << "'";
		}
		std::cout << ">" << std::endl;
		std::cout << loadHandler->getLevel() << "-NumNodes: " << numNodes << std::endl;
[/comment]
	for(int ii = 0; ii < numNodes; ii++)
	{
		loadContainmentReference(loadHandler->getNextNodeName(), loadHandler, factory);
	}
}		

void [aClass.name.concat('Impl')/]::loadAttributes(std::shared_ptr<[generatePersistenceNSPath(false)/]::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
	
	[for (aAttribute : EAttribute | aClass.eAttributes->select(eAtt: EAttribute|(eAtt.transient = false))->asOrderedSet()->sortedBy(name)) separator ('\n')]
	  [if (aAttribute.eType.oclIsKindOf(EDataType) and not(aAttribute.eType.name = 'EJavaClass'))]
	[comment]
	// Attributes that are from type EJavaClass (void*) has not to export to xml. 
	[/comment]
		[if (not(aAttribute.upperBound = 1))]
		//loadHandler->addAttribute( "[aAttribute.name/]", this->[aAttribute.GetterName()/]() ); // upperBound != 1 so [aAttribute.GetterName()/]() is a list/bag/union
		// TODO needs an implementation to set list of strings to this attribute
		std::cout << "| ERROR    | " << __PRETTY_FUNCTION__ << " needs an implementation to set list of strings to this attribute." << std::endl; 
		[else]
		iter = attr_list.find("[aAttribute.name/]");
		if ( iter != attr_list.end() )
		{
		  [if (generateType(aAttribute.eType) = 'bool')]
			// this attribute is a 'bool'
			bool value;
			std::istringstream(iter->second) >> std::boolalpha >> value;
		  [elseif ((generateType(aAttribute.eType) = 'int'))]
			// this attribute is a 'int'
			int value;
			std::istringstream ( iter->second ) >> value;
		  [elseif ((generateType(aAttribute.eType) = 'long'))]
			// this attribute is a 'long'
			long value;
			std::istringstream ( iter->second ) >> value;
		  [elseif ((generateType(aAttribute.eType) = 'float'))]
			// this attribute is a 'float'
			float value;
			std::istringstream ( iter->second ) >> value;
		  [elseif ((generateType(aAttribute.eType) = 'double'))]
			// this attribute is a 'double'
			double value;
			std::istringstream ( iter->second ) >> value;
		  [elseif ((generateType(aAttribute.eType) = 'char'))]
			// this attribute is a 'char'
			char value;
			std::istringstream ( iter->second ) >> value;
		  [elseif ((generateType(aAttribute.eType) = 'std::string'))]
			// this attribute is a 'std::string'
			std::string value;
			value = iter->second;
		  [else]
			// TODO this attribute has a non handle type
			std::cout << "| ERROR    | " << __PRETTY_FUNCTION__ << " handle type of '[aAttribute.name/]'" << " [aAttribute.eType/]" << std::endl; 
			 [aAttribute.generateAttributeType()/] value;
		  [/if]
			this->[aAttribute.SetterName()/](value);
		}
		[/if]
	  [/if]
	[/for]

[if (aClass.eAttributes->size() <> aClass.eAllAttributes->size())]
	[if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))]
		ecore::EObjectImpl::loadAttributes(loadHandler, attr_list);
	[else]
		[for (sClass : EClass | aClass.eSuperTypes->asOrderedSet()->sortedBy(name))]
		[ClassWithNamespace(aClass,sClass)/]Impl::loadAttributes(loadHandler, attr_list);
		[/for]
	[/if]
[/if]
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
}

//
// Set References (containment == false)
//
void [aClass.name.concat('Impl')/]::loadNonContainmentReferences(std::shared_ptr<[generatePersistenceNSPath(false)/]::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list)
{
	try
	{
		std::map<std::string, std::string>::const_iterator iter;
		std::shared_ptr<[needNamespace(aClass.ePackage, 'EClass')/]> metaClass = this->eClass(); // get MetaClass
	[for (aReference : EReference | aClass.eReferences->select(eRef: EReference|(eRef.containment = false) and (eRef.transient = false) and (eRef.changeable = true))->asOrderedSet()->sortedBy(name)) separator ('\n')]
		iter = attr_list.find("[aReference.name/]");
		if ( iter != attr_list.end() )
		{
			// add unresolvedReference to loadHandler's list
			loadHandler->addUnresolvedReference(iter->second, loadHandler->getCurrentObject(), metaClass->getEStructuralFeature("[aReference.name/]")); // TODO use getEStructuralFeature() with id, for faster access to EStructuralFeature
		}
	[/for]

	[if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))]
		ecore::EObjectImpl::loadNonContainmentReferences(loadHandler, attr_list);
	[elseif (aClass.eSuperTypes->size() = 1)]
		[ClassWithNamespace(aClass, aClass.eSuperTypes->first())/]Impl::loadNonContainmentReferences(loadHandler, attr_list);
	[else]
		[for (sClass : EClass | aClass.eSuperTypes->asOrderedSet()->sortedBy(name))]
		[ClassWithNamespace(aClass,sClass)/]Impl::loadNonContainmentReferences(loadHandler, attr_list);
		[/for]
	[/if]
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
}
	
bool [aClass.name.concat('Impl')/]::loadContainmentReference(std::string nodeName, std::shared_ptr<[generatePersistenceNSPath(false)/]::XLoadHandler> loadHandler, std::shared_ptr<[aClass.ePackage.name/]::[aClass.ePackage.name.toUpperFirst()/]Factory> factory)
{
	try
	{
		
[comment]
			std::cout << loadHandler->getLevel() << "-Child: "<< nodeName << " " << ii+1 << "/" << numNodes << std::endl;
[/comment]
[for (aReference : EReference | aClass.eReferences->select(eRef: EReference|(eRef.containment = true) and (eRef.transient = false))->asOrderedSet()->sortedBy(name)) separator ('\n')]
		if ( nodeName.compare("[aReference.name/]") == 0 )
		{
  			std::string typeName = loadHandler->getCurrentXSITypeName();
			if (typeName.empty())
			{
	[let aEClass : EClass = aReference.eType.oclAsType(EClass)]
		[let ref:OrderedSet(EReference) = aEClass.getAllContainers()]
			[if (not aReference.hasAbstractType())]
				typeName = "[aEClass.name/]";
			[else]
				std::cout << "| WARNING    | type if an eClassifiers node it empty" << std::endl;
				return true; // no type name given and reference type is abstract
			[/if]		
			}
			[if (ref->size() = 1)]
			std::shared_ptr<[aReference.eType.generateType()/]> [aReference.name/] = std::dynamic_pointer_cast<[aReference.eType.generateType()/]>([if (aEClass.ePackage = aClass.ePackage)]factory[else][aEClass.ePackage.name/]::[aEClass.ePackage.name.toUpperFirst()/]Factory::eInstance()[/if]->create(typeName, loadHandler->getCurrentObject(), [aReference.metamodelPackageNameForEstructuralFeture(aClass)/]::[ref->first().getStaticAttributeIDName()/])) ;
			[elseif( ref->size() > 1)]
			// TODO here are multiple containers of same object. Check this!
			std::cout << "| ERROR    | " << __PRETTY_FUNCTION__ << " '[aReference.name/]' has more then one back-reference Object." << std::endl;
			std::shared_ptr<[aReference.eType.generateType()/]> [aReference.name/];
			[for(aBackReference : EReference | ref->sortedBy(name)->first()->asSet())]
				[aReference.name/] = std::dynamic_pointer_cast<[aReference.eType.generateType()/]>([if (aEClass.ePackage = aClass.ePackage)]factory[else][aEClass.ePackage.name/]::[aEClass.ePackage.name.toUpperFirst()/]Factory::eInstance()[/if]->create(typeName, loadHandler->getCurrentObject(), [aReference.metamodelPackageNameForEstructuralFeture(aClass)/]::[aBackReference.getStaticAttributeIDName()/])) ;
			[/for]
			[else]
			std::shared_ptr<[aReference.eType.generateType()/]> [aReference.name/] = std::dynamic_pointer_cast<[aReference.eType.generateType()/]>([if (aEClass.ePackage = aClass.ePackage)]factory[else][aEClass.ePackage.name/]::[aEClass.ePackage.name.toUpperFirst()/]Factory::eInstance()[/if]->create(typeName));
			[/if]
			if ([aReference.name/] != nullptr)
			{
			[if(ref->size() = 0)]
				[if (aReference.upperBound = 1)]
				this->[aReference.SetterName()/]([aReference.name/]);
				[else]
				[aReference.generateReferenceType()/] list_[aReference.name/] = this->[aReference.GetterName()/]();
				list_[aReference.name/]->push_back([aReference.name/]);
				[/if]
			[/if]
				loadHandler->handleChild([aReference.name/]);
			}
			return true;
		[/let]
	[/let]
		}
[/for]

	[if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))]
		return ecore::EObjectImpl::loadContainmentReference(nodeName, loadHandler, ecore::EcoreFactory::eInstance());
	[elseif (aClass.eSuperTypes->size() = 1)]
		return [ClassWithNamespace(aClass, aClass.eSuperTypes->first())/]Impl::loadContainmentReference(nodeName, loadHandler, [if (aClass.eSuperTypes->first().ePackage = aClass.ePackage)]factory[else][aClass.eSuperTypes->first().ePackage.name/]::[aClass.eSuperTypes->first().ePackage.name.toUpperFirst()/]Factory::eInstance()[/if]);
	[else]
		bool result = false;
		[let eClasses : OrderedSet(EClass) = aClass.eSuperTypes->asOrderedSet()->sortedBy(name)]		
		[for (sClass : EClass | eClasses)]
		result = [ClassWithNamespace(aClass,sClass)/]Impl::loadContainmentReference(nodeName, loadHandler, [if (sClass.ePackage = aClass.ePackage)]factory[else][sClass.ePackage.name/]::[sClass.ePackage.name.toUpperFirst()/]Factory::eInstance()[/if]);
		[if (sClass <> eClasses->last())]
		if (result)
		{
			return result;
		}
		[/if]
		[/for]
		return result;
		[/let]
	[/if]
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " <<  "Exception occurred" << std::endl;
	}
	return false;
}
[/template]

[template public generatePersistenceResolveReferenceImpl(aClass: EClass)]
void [aClass.name.concat('Impl')/]::resolveReferences(const int featureID, std::list<std::shared_ptr<[needNamespace(aClass.ePackage, 'EObject')/]> > references)
{
	switch(featureID)
	{
	[for (aReference : EReference | aClass.eReferences->select(eRef: EReference|(eRef.containment = false) and (eRef.transient = false) and (eRef.changeable = true))->asOrderedSet()->sortedBy(name)) separator ('\n')]
		case [aReference.metamodelPackageNameForEstructuralFeture(aClass)/]::[aReference.getStaticAttributeIDName()/]:
		{
		[if (aReference.upperBound = 1)]
			if (references.size() == 1)
			{
				// Cast object to correct type
				std::shared_ptr<[aReference.eGenericType.generateCppType()/]> _[aReference.name/] = std::dynamic_pointer_cast<[aReference.eGenericType.generateCppType()/]>( references.front() );

				// Add object by calling eSet() 
				eSet(featureID, _[aReference.name/]);
			}
			
		[else]
			std::shared_ptr< Bag<[aReference.eGenericType.generateCppType()/]> > _[aReference.name/] = [aReference.GetterName()/]();
			while ( references.size() > 0 )
			{
				std::shared_ptr<[aReference.eGenericType.generateCppType()/]> _r = std::dynamic_pointer_cast<[aReference.eGenericType.generateCppType()/]>( references.front() );
				assert(_r);
				if (_r != nullptr){
					_[aReference.name/]->push_back(_r);
					references.pop_front();
				}				
			}
		[/if]
			return;
		}
	[/for]
	}
[if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))]
	ecore::EObjectImpl::resolveReferences(featureID, references);
[else]
	[for (sClass : EClass | aClass.eSuperTypes->asOrderedSet()->sortedBy(name))]
	[ClassWithNamespace(aClass,sClass)/]Impl::resolveReferences(featureID, references);
	[/for]
[/if]
}
[/template]

[template public generatePersistenceSaveImpl(aClass: EClass)]
void [aClass.name.concat('Impl')/]::save(std::shared_ptr<[generatePersistenceNSPath(false)/]::XSaveHandler> saveHandler) const
{
	try
	{
		// get EcorePackage
		std::shared_ptr<[aClass.ePackage.name/]::[aClass.ePackage.name.toUpperFirst()/]Package> package = [aClass.ePackage.name/]::[aClass.ePackage.name.toUpperFirst()/]Package::eInstance();	
		
		// get MetaClass
		std::shared_ptr<[needNamespace(aClass.ePackage, 'EClass')/]> metaClass = this->eClass();
		
		//
		// Add attributes
		//
[for (aAttribute : EAttribute | aClass.eAttributes->select(eAtt: EAttribute|(eAtt.transient = false))->asOrderedSet()->sortedBy(name)) separator ('\n')]
  [if (aAttribute.eType.oclIsKindOf(EDataType) and not(aAttribute.eType.name = 'EJavaClass'))]
[comment]
// Attributes that are from type EJavaClass (void*) has not to export to xml. 
[/comment]
		if ( this->eIsSet(package->get[aAttribute.getMemberNameUpperFirst()/]()) )
		{
			saveHandler->addAttribute( "[aAttribute.name/]", this->[aAttribute.GetterName()/]() );
		}
  [else]
		// TODO '[aAttribute.eType/]' Attribute's eType is a EJavaClass or its eClass is not typeof EDataType
  [/if]
[/for]

		//
		// Add references
		//
[for (aReference : EReference | aClass.eReferences->select(eRef: EReference|(eRef.containment = false) and (eRef.transient = false) and (eRef.changeable = true))->asOrderedSet()->sortedBy(name))]
	[if (aReference.upperBound = 1)]
		saveHandler->addReference("[aReference.name/]", this->[aReference.GetterName()/]()[if (aReference.isBackReference())].lock()[/if]);
	[else]
		std::shared_ptr<Bag<[aReference.eType.generateType()/]>> list_[aReference.name/] = this->[aReference.GetterName()/]();
		for ([aReference.generateReferenceTypeBag()/] object : *list_[aReference.name/])
		{ 
			saveHandler->addReferences("[aReference.name/]", object);
		}
	[/if]
[/for]

		//
		// Add new tags (from references)
		//

[for (aReference : EReference | aClass.eReferences->select(eRef: EReference|(eRef.containment = true) and (eRef.transient = false))->asOrderedSet()->sortedBy(name)) separator ('\n')]
		// Save '[aReference.name/]'
	[if (aReference.upperBound = 1)]
		[aReference.generateReferenceType()/] [aReference.name/] = this->[aReference.GetterName()/]();
		if ( [aReference.name/] != nullptr) 
		{
			std::shared_ptr<[needNamespace(aClass.ePackage, 'EStructuralFeature')/]> esf = metaClass->getEStructuralFeature( "[aReference.name/]" ); // TODO use id instead of string to return ESF

	[else]
		[aReference.generateReferenceType()/] list_[aReference.name/] = this->[aReference.GetterName()/]();
		if ( list_[aReference.name/]->size() != 0) 
		{
			std::shared_ptr<[needNamespace(aClass.ePackage, 'EStructuralFeature')/]> esf = metaClass->getEStructuralFeature( "[aReference.name/]" ); // TODO use id instead of string to return ESF
	
			for ( std::shared_ptr<[aReference.eType.generateType()/]> [aReference.name/] : *list_[aReference.name/] ) 
			{
	[/if]
				// 1. Create and add Node-Element to model-tree
				saveHandler->createAndAddElement( "[aReference.name/]" );
	
				if([aReference.name/]->eClass() != esf->getEType())
				{
					// 1.x Set Attribute "xsi:type" to the specific Class-Type
					saveHandler->addAttribute( "xsi:type", saveHandler->extractType([aReference.name/]) );
				}
	
				// 2. Recursive call of save()
				[aReference.name/]->save( saveHandler );
				
				// 3. Tell saveHandler for stepping to previous level
				saveHandler->release(); 
	[if (aReference.upperBound = 1)]
		}
	[else]
			}
		}
	[/if]
[/for]
[if (aClass.eSuperTypes->isEmpty() and not (aClass.name ='EObject'))]
		ecore::EObjectImpl::save(saveHandler);
[else]
	[for (sClass : EClass | aClass.eSuperTypes->asOrderedSet()->sortedBy(name))]
		[ClassWithNamespace(aClass,sClass)/]Impl::save(saveHandler);
	[/for]
[/if]
	}
	catch (std::exception& e)
	{
		std::cout << "| ERROR    | " << e.what() << std::endl;
	}
	catch (...) 
	{
		std::cout << "| ERROR    | " << "Exception occurred" << std::endl;
	}
}
[/template]

