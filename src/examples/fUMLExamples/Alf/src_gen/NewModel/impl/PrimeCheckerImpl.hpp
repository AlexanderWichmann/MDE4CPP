//********************************************************************
//*    	
//* Warning: This file was generated by MDE4CPP Generator
//*
//********************************************************************

#ifndef NEWMODEL_PRIMECHECKER_PRIMECHECKERIMPL_HPP
#define NEWMODEL_PRIMECHECKER_PRIMECHECKERIMPL_HPP

#ifdef NDEBUG
  #define DEBUG_MESSAGE(a) /**/
#else
  #define DEBUG_MESSAGE(a) a
#endif
#include <iostream>

//*********************************
// generated Includes

//Model includes
#include "../PrimeChecker.hpp"
#include <functional>

#include "impl/ClassImpl.hpp"
#include "Property.hpp"
#include "boost/any.hpp"

//*********************************
namespace NewModel
{
	class PrimeCheckerImpl : virtual public uml::ClassImpl, virtual public PrimeChecker
	{
		private:    
			PrimeCheckerImpl(PrimeCheckerImpl const&) = delete;
			PrimeCheckerImpl& operator=(PrimeCheckerImpl const&) = delete;

		protected:
			friend class NewModelFactoryImpl;
			//constructor
			PrimeCheckerImpl();

		public:
			//destructor
			virtual ~PrimeCheckerImpl();

			//*********************************
			// Operations
			//*********************************
			virtual bool divides(  ) ;
			virtual void next(  ) ;
			virtual void printIsPrime(  ) ;
			virtual void printNotPrime(  ) ;
			virtual bool isOdd(  ) ;
			virtual bool isNotFinished(  ) ;
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			virtual int getNumber() const ;
			virtual void setNumber (int _number); 
			virtual int getDivider() const ;
			virtual void setDivider (int _divider); 
			

		protected:
			virtual uml::Class * getMetaClass() const;

		public:
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************
			virtual boost::any get(uml::Property * _property) const ;
			virtual void set(uml::Property *  _property,boost::any value) ;
			virtual void unset(uml::Property *  _property) ;
		
		private:
			std::map<std::string,std::function<boost::any()>> m_getterMap;
			std::map<std::string,std::function<void(boost::any)>> m_setterMap;
			std::map<std::string,std::function<void()>> m_unsetterMap;
	};
}
#endif /* end of include guard: NEWMODEL_PRIMECHECKER_PRIMECHECKERIMPL_HPP */
