apply plugin: 'base' 

description 'Build tasks for project: PrimitivetypesReflection'

task buildPrimitivetypesReflection(dependsOn: ['generatePrimitivetypesReflection', 'compilePrimitivetypesReflection']) {
	group 'PrimitivetypesReflection'
	description 'build PrimitivetypesReflection'
}

task compilePrimitivetypesReflection(dependsOn: ['compilePrimitivetypesReflectionDebug', 'compilePrimitivetypesReflectionRelease']) {
	group 'PrimitivetypesReflection'
	description 'compile PrimitivetypesReflection'
}
task compilePrimitivetypesReflectionDebug {
	description 'compile PrimitivetypesReflection in Debug'

	def folder = new File(file('./src_gen/PrimitivetypesReflection/.cmake/Debug').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'src_gen/PrimitivetypesReflection/.cmake/Debug'
			commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Debug ' + file("./src_gen/PrimitivetypesReflection").absolutePath
		}
		exec {
			workingDir 'src_gen/PrimitivetypesReflection/.cmake/Debug'
			if (make_parallel_jobs)
			{			
				commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
			}
			else
			{
				commandLine 'cmd', '/c', 'mingw32-make install' 
			}
		}
	}
}
compilePrimitivetypesReflectionDebug.onlyIf {
	(project.hasProperty("DEBUG") && !(project.getProperty("DEBUG") == '0')) || (project.hasProperty("D") && !(project.getProperty("D") == '0')) || (!project.hasProperty("RELEASE") && !project.hasProperty("R") && !project.hasProperty("DEBUG") && !project.hasProperty("D"))
}
task compilePrimitivetypesReflectionRelease {
	description 'compile PrimitivetypesReflection in Release'

	def folder = new File(file('./src_gen/PrimitivetypesReflection/.cmake/Release').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'src_gen/PrimitivetypesReflection/.cmake/Release'
			commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Release ' + file("./src_gen/PrimitivetypesReflection").absolutePath
		}
		exec {
			workingDir 'src_gen/PrimitivetypesReflection/.cmake/Release'
			if (make_parallel_jobs)
			{			
				commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
			}
			else
			{
				commandLine 'cmd', '/c', 'mingw32-make install' 
			}
		}
	}
}
compilePrimitivetypesReflectionRelease.onlyIf {
	(project.hasProperty("RELEASE") && !(project.getProperty("RELEASE") == '0')) || (project.hasProperty("R") && !(project.getProperty("R") == '0')) || (!project.hasProperty("RELEASE") && !project.hasProperty("R") && !project.hasProperty("DEBUG") && !project.hasProperty("D"))
}

task generatePrimitivetypesReflection(type: JavaExec) {
	group 'PrimitivetypesReflection'
	description 'generate C++ code of PrimitivetypesReflection.uml model'
	main = "-jar"
	workingDir "./model"
	args System.getenv('MDE4CPP_HOME') + "/application/generator/UML4CPP.jar", "PrimitivetypesReflection.uml", "../src_gen"
	inputs.files file(System.getenv('MDE4CPP_HOME') + "/application/generator/UML4CPP.jar"), file("model/PrimitivetypesReflection.uml")
	outputs.dir file("src_gen")

	doFirst {
		if (System.getenv('MDE4CPP_HOME') == null) {
			throw new GradleException('System environment variable "MDE4CPP_HOME" is not defined')
		}
		if (!file(System.getenv('MDE4CPP_HOME') + "/application/generator/UML4CPP.jar").exists()) {
			throw new GradleException('UML4CPP.jar is missing in folder ' + file(System.getenv('MDE4CPP_HOME') + '/application/generator') + '. Please run task createUML4CPP!')
		}
	}
}

compilePrimitivetypesReflection.mustRunAfter generatePrimitivetypesReflection
compilePrimitivetypesReflectionDebug.mustRunAfter generatePrimitivetypesReflection
compilePrimitivetypesReflectionRelease.mustRunAfter generatePrimitivetypesReflection


clean.doFirst {
	def cmakeFolder = file('./src_gen/PrimitivetypesReflection/.cmake/')
	if(cmakeFolder.exists()) {
    	delete cmakeFolder.absolutePath
   		println "deleting folder " + cmakeFolder.absolutePath
	}
}
