plugins {
	id "tui.sse.mde4cpp.mde4cpp-compile-plugin" version "0.1"
}
apply plugin: 'base' 

description 'Build tasks for project: PrimitivetypesReflection'

task buildPrimitivetypesReflection(dependsOn: ['generatePrimitivetypesReflection', 'compilePrimitivetypesReflection']) {
	group 'PrimitivetypesReflection'
	description 'build PrimitivetypesReflection'
}

task compilePrimitivetypesReflection(type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group 'PrimitivetypesReflection'
	description 'compile PrimitivetypesReflection'

	pathToCMakeList = file("./src_gen/PrimitivetypesReflection")
}

task generatePrimitivetypesReflection(type: JavaExec) {
	group 'PrimitivetypesReflection'
	description 'generate C++ code of PrimitivetypesReflection.uml model'
	main = "-jar"
	workingDir "./model"
	args System.getenv('MDE4CPP_HOME') + "/application/generator/UML4CPP.jar", "PrimitivetypesReflection.uml", "../src_gen"
	inputs.files file(System.getenv('MDE4CPP_HOME') + "/application/generator/UML4CPP.jar"), file("model/PrimitivetypesReflection.uml")
	outputs.dir file("src_gen")

	doFirst {
		if (System.getenv('MDE4CPP_HOME') == null) {
			throw new GradleException('System environment variable "MDE4CPP_HOME" is not defined')
		}
		if (!file(System.getenv('MDE4CPP_HOME') + "/application/generator/UML4CPP.jar").exists()) {
			throw new GradleException('UML4CPP.jar is missing in folder ' + file(System.getenv('MDE4CPP_HOME') + '/application/generator') + '. Please run task createUML4CPP!')
		}
	}
}

compilePrimitivetypesReflection.mustRunAfter generatePrimitivetypesReflection

clean.doFirst {
	def cmakeFolder = file('./src_gen/PrimitivetypesReflection/.cmake/')
	if(cmakeFolder.exists()) {
    	delete cmakeFolder.absolutePath
   		println "deleting folder " + cmakeFolder.absolutePath
	}
}
