[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateFUMLPluginImplementationSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::generateType /]
[import UML4CPP::generator::main::helper /]

[template public generateFUMLPluginImplSource(aPackage : Package) { packageName : String = aPackage.name.toUpperFirst().concat('ExecPluginImpl'); }]
[file (aPackage.getPackageName().concat('Exec/impl/').concat(packageName).concat('.cpp'), false, 'UTF-8')]
#include "[packageName/].hpp"
[if (not aPackage.ownedMember->filter(Activity)->isEmpty())]
[let act : Activity = aPackage.ownedElement->filter(Activity)->asOrderedSet()->first() ]
#include "[act.name.toUpperFirst()/]Execution.hpp"[/let][/if]

using namespace [aPackage.name/];

//*********************************
// Constructor / Destructor
//*********************************
[packageName/]::[packageName/]()
{
}

[packageName/]::~[packageName/]()
{
}

std::shared_ptr<fUML::ActivityExecution> [packageName/]::getMainActivityExecution()
{
[if (not aPackage.ownedMember->filter(Activity)->isEmpty())]
[let act : Activity = aPackage.ownedElement->filter(Activity)->asOrderedSet()->first() ]
	std::shared_ptr<[act.name.toUpperFirst()/]Execution> exec(new [act.name.toUpperFirst()/]Execution());
	return [aPackage.name.toUpperFirst()/]Factory::eInstance();
[/let][else]
	return nullptr;[/if]

}

std::string [packageName/]::eNAME()
{
	return "[aPackage.name/]Exec";
}

std::string [packageName/]::eNS_URI()
{
	return "[aPackage.URI/]";
}

std::string [packageName/]::eNS_PREFIX()
{
	return "[if(not (aPackage.namespace.oclIsUndefined()))][aPackage.namespace.name/][/if]";
}
[/file]
[/template]
