[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateMainExecution('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helper /]

[import fUML4CPP::generator::main::generateOpaqueBehaviorExecution /]
[import UML4CPP::generator::main::generateType /]
[import fUML4CPP::generator::main::parameterHelper /]

[template public generateMain(aPackage : Package)]
[file (aPackage.getPackageName().concat('Exec/').concat('main.cpp'), false, 'UTF-8')]
#include <iostream>
#include <memory>
#include <vector>
#include <omp.h>

[generateMainIncludes()/]
[if (not aPackage.ownedMember->filter(Activity)->isEmpty())]
[let act : Activity = aPackage.ownedElement->filter(Activity)->asOrderedSet()->first()]
[generateActivityRelatedIncludes(act, aPackage)/]
[/let]
[else]
//No main activity found (place one activity as child of the module to set it as a main activity).
[/if]

using namespace [aPackage.getPackageName()/];

int main()
{	

	//OMP parallelization.
	omp_set_num_threads(omp_get_num_procs());

	[generateLocusInitialization()/]

	[if (not aPackage.ownedMember->filter(Activity)->isEmpty())]
    //Executor will execute the first Activity
	[let act : Activity = aPackage.ownedElement->filter(Activity)->asOrderedSet()->first()]
	[act.generateParameterInstances(aPackage)/]
	[act.generateStartActivityExecution(aPackage)/]   
	[/let]

	if(nullptr == resultPList)
	{
        std::cerr << "resultPList is null" << std::endl;
        return EXIT_FAILURE;
	}
    if(resultPList->empty())
    {
        DEBUG_MESSAGE(std::cout << "The activity did not return any parameter." << std::endl;)
    }
    else{
        DEBUG_MESSAGE(std::cout << resultPList->size() << std::endl;)
        for(unsigned int parIndex=0; parIndex< resultPList->size(); parIndex++)
{
            DEBUG_MESSAGE(std::cout << "Parameter " << parIndex <<" name: "<<resultPList->at(parIndex)->getParameter()->getName() << std::endl;)
            if(resultPList->at(parIndex)->getValues()->empty())
            {
                DEBUG_MESSAGE(std::cout<<"\tThe parameter is empty.";)
            }
            else
            {
                DEBUG_MESSAGE(std::cout << "\tsize: " << resultPList->at(parIndex)->getValues()->size() << std::endl;)
                DEBUG_MESSAGE(std::cout << "\tvalue of the first element: " << resultPList->at(parIndex)->getValues()->front()->toString() << std::endl;)
            }
        }
    }
	[else]
	//Info: no main activity found! Place one activity as a child of the Model element to mark it as a main activity.
	[/if]
    return EXIT_SUCCESS;
}
[/file]
[/template]

[template public generateMainIncludes(aPackage : Package)]
#include "FUMLFactory.hpp"
#include "Locus.hpp"
#include "Executor.hpp"
#include "Parameter.hpp"
#include "ExecutionFactoryL3.hpp"
#include "FirstChoiceStrategy.hpp"
#include "DispatchStrategy.hpp"
#include "FunctionBehavior.hpp"
#include "Activity.hpp"
#include "SubsetUnion.hpp"
#include "UmlFactory.hpp"
#include "Operation.hpp"
#include "Interface.hpp"
#include "PrimitiveType.hpp"

#include "ParameterValue.hpp"

//include Model package
#include "[aPackage.getPackageName().toUpperFirst().concat('Package')/].hpp"

[for (anotherPackage : Package | aPackage.getOpaqueBehaviors().getNearestPackage()->asSet())]
#include "[anotherPackage.getPackageName().toUpperFirst().concat('Package')/].hpp" 
[/for] 
[for (pack : Package | aPackage.getCallOperationActions().operation.ownedParameter.type.getNearestPackage()->asSet())]
[if ((pack.name='UML') or (pack.name='Ecore'))]
#include "[pack.getPackageName()/]/[pack.name.concat('Package').toUpperFirst()/].hpp"
[elseif (not (pack.name='StandardProfile'))]
#include "[pack.name.concat('Package').toUpperFirst()/].hpp"
[/if]
[/for]

[if (aPackage.getOpaqueBehaviors()->size()>0)]
//OpaqueBehaviourExecutions
[aPackage.getOpaqueBehaviors().generateInclude()/]
[/if]

[if (aPackage.getCallOperationActions()->size()>0)]
//OpaqueBehaviourExecutions
[for (aCOA : CallOperationAction | aPackage.getCallOperationActions())]
[if (not aCOA.hasCOAAMethod())][aCOA.generateInclude()/][/if]
[/for]
[/if]
[/template]

[template public generateActivityRelatedIncludes(anActivity : Activity, aPackage : Package)]
[if (anActivity.ownedParameter->asSet()->parametersArePointers())]
#include "Reference.hpp"
#include "[aPackage.getPackageName()/]Factory.hpp"
[/if]

[for ( par : Parameter | anActivity->asOrderedSet()->first().ownedParameter)]
[par.generateParameterInclude()/]
[/for]

[/template]

[template public generateLocusInitialization(aPackage : Package)]
DEBUG_MESSAGE(std::cout<<"Main function is executing"<<std::endl;)
std::shared_ptr<fUML::FUMLFactory> fumlFac(fUML::FUMLFactory::eInstance());
std::shared_ptr<fUML::Locus> locus(fumlFac->createLocus());

std::shared_ptr<fUML::Executor> executor(fumlFac->createExecutor());
executor->setLocus(locus);

std::shared_ptr<fUML::ExecutionFactoryL3> factory(fumlFac->createExecutionFactoryL3_in_Locus(locus));
//factory->setLocus(locus);
//locus->setFactory(factory);

locus->setExecutor(executor);

locus->getFactory()->assignStrategy(std::shared_ptr<fUML::FirstChoiceStrategy>(fumlFac->createFirstChoiceStrategy()));
locus->getFactory()->assignStrategy(std::shared_ptr<fUML::DispatchStrategy>(fumlFac->createDispatchStrategy()));
[/template]

[template public generateParameterInstances(anActivity : Activity, aPackage : Package)]
[for (par : Parameter | anActivity.ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in)))]
[if(par.supportedTypes())]
[par.generateCppType()/] [par.name.toLowerFirst()/] = [par.default/];
[else]
[par.generateCppType()/] [par.name.toLowerFirst()/]([aPackage.getPackageName()/]::[aPackage.getPackageName()/]Factory::eInstance()->create[par.type.name.toUpperFirst()/]());
[/if]

[/for]
[/template]

[template public generateStartActivityExecution(anActivity : Activity, aPackage : Package)]
[if (aPackage.getOpaqueBehaviors()->size() > 0)]
[aPackage.getOpaqueBehaviors().generateOpaqueBehaviorCreation()/]
[/if]

[if (aPackage.getCallOperationActions()->size() > 0)]
[aPackage.getCallOperationActions().generateCallOperationActionCreation()/]
[/if]

std::shared_ptr<Bag<fUML::ParameterValue> > pList(new Bag<fUML::ParameterValue>());
[for (par : Parameter | anActivity.ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in)))]
//INput parameter [par.name/] 
std::shared_ptr<fUML::ParameterValue> [par.name/]P(fumlFac->createParameterValue());
[par.name/]P->setParameter([par.packageGetter()/]);
[par.generateOutputParameter()/]
[if(par.supportedTypes())]
[par.name/]Value->setValue([par.name.toLowerFirst()/]);
[else]
[par.name/]UmlLinker->setLocus(locus);
[par.name/]Value->setReferent([par.name/]UmlLinker);
[/if]
[par.name/]P->getValues()->push_back([par.name/]Value);
pList->push_back([par.name/]P);

[/for] 
std::shared_ptr<Bag<fUML::ParameterValue> > resultPList = locus->getExecutor()->execute([anActivity.packageGetter()/], nullptr, pList);

[if (aPackage.getCallOperationActions()->size() > 0)]
[aPackage.getCallOperationActions().generateCallOperationActionClearing()/]
[/if]

[/template]

