[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateActivityExecutionSource('http://www.eclipse.org/uml2/5.0.0/UML')]
 
[import fUML4CPP::generator::main::generateOpaqueBehaviorExecution /]
[import fUML4CPP::generator::main::parameterHelper /]
[import UML4CPP::generator::main::generateType /]
[import UML4CPP::generator::main::helper /]

[template public generateActivityExecutionSource(aActivity : Activity)
{aPackage:Package = aActivity.ancestors()->filter(Package)->first(); 
className : String = aActivity.name.concat('Execution');
}]
[file (aPackage.getPackageName().concat('Exec/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[className/].hpp"

#include <iostream>
#include <cassert>
#include <vector>

#include "fUML/ParameterValue.hpp"
#include "fUML/ActivityParameterNodeActivation.hpp"
#include "fUML/ActivityNodeActivationGroup.hpp"
#include "fUML/Token.hpp"
#include "fUML/ObjectToken.hpp"
#include "fUML/Value.hpp"

#include "uml/Activity.hpp"
#include "uml/Classifier.hpp"

#include "DispatchStrategy.hpp"
#include "Executor.hpp"
#include "ExecutionFactoryL3.hpp"
#include "FirstChoiceStrategy.hpp"
#include "FunctionBehavior.hpp"
#include "FUMLFactory.hpp"
#include "Locus.hpp"
[if (aActivity.ownedParameter->asSet()->parametersArePointers())]
#include "Reference.hpp"
#include "[aPackage.getPackageName()/]Factory.hpp"
[/if]

//include Model package
[for (pack : Package | aPackage->asOrderedSet()->sortedBy(name))]
#include "[pack.getPackageName().toUpperFirst().concat('Package')/].hpp"
[/for]

[aPackage.getOpaqueBehaviors().generateInclude()/]

using namespace [aPackage.name/];

[className/]::[className/]()
{
}

[className/]::~[className/]()
{
}

[className/]::[className/](const [className/] &obj):
	ActivityExecutionImpl(obj)
{
}

void [className/]::terminate()
{
    this->getActivationGroup()->terminateAll();
}

ecore::EObject* [className/]::copy() const
{
    return new [className/](*this);
}

void [className/]::execute()
{
	// Execute the activity for this execution by creating an activity node activation group and activating all the activity nodes in the activity.
	// When this is complete, copy the values on the tokens offered by output parameter nodes to the corresponding output parameters.
	uml::Activity* activity = dynamic_cast<uml::Activity*>(this->getTypes()->front());
	assert(activity != nullptr);	

	DEBUG_MESSAGE(std::cout << "[ '[' /]execute[ ']' /] Activity " << activity->getName() << "..." << std::endl;)
	
	if(this->getContext() != nullptr){
		DEBUG_MESSAGE(std::cout << "[ '[' /]execute[ ']' /] context = " << this->getContext()->objectId() << std::endl;)
	}

	this->setActivationGroup(fUML::FUMLFactory::eInstance()->createActivityNodeActivationGroup());
	this->getActivationGroup()->setActivityExecution(this);
	this->getActivationGroup()->activate(activity->getNode(), activity->getEdge());

	DEBUG_MESSAGE(std::cout << "[ '[' /]execute[ ']' /] Getting output parameter node activations..." << std::endl;)

	std::vector<fUML::ActivityParameterNodeActivation * > * outputActivations =
	this->getActivationGroup()->getOutputParameterNodeActivations();

    assert(outputActivations != nullptr);

	DEBUG_MESSAGE(std::cout << "[ '[' /]execute[ ']' /] There are " << outputActivations->size() << " output parameter node activations." << std::endl;)
	
    for (unsigned int i = 0; i < outputActivations->size(); i++) 
	{
 		fUML::ActivityParameterNodeActivation * outputActivation = outputActivations->at(i);
 		fUML::ParameterValue * parameterValue = fUML::FUMLFactory::eInstance()->createParameterValue();
 		parameterValue->setParameter((dynamic_cast<uml::ActivityParameterNode*>(outputActivation->getNode()))->getParameter());
 		std::vector<fUML::Token * > * tokens = outputActivation->getTokens();
 		for (unsigned int j = 0; j < tokens->size(); j++) 
		{
            fUML::Token * token = tokens->at(j);
            fUML::Value * value = dynamic_cast<fUML::ObjectToken *>(token)->getValue();
 			if (nullptr != value) {
                parameterValue->getValues()->push_back(value);
 			}
 		}
 	this->setParameterValue(parameterValue);
	}

	DEBUG_MESSAGE(std::cout << "[ '[' /]execute[ ']' /] Activity " << activity->getName() << " completed." << std::endl;)
}

[let op : Operation = aActivity.specification.oclAsType(Operation)]
[op.generateCppType()/] [className/]::execute([for (sParameter : Parameter | op.ownedParameter->select(p :Parameter | not (p.direction = ParameterDirectionKind::return))) separator (',')]
[sParameter.type.generateCppType()/] [sParameter.name/][/for])
{
	DEBUG_MESSAGE(std::cout << "Activity [aActivity.name/] is executing" << std::endl;)
    fUML::FUMLFactory * fumlFac = fUML::FUMLFactory::eInstance();
    fUML::Locus  * locus = fumlFac->createLocus();

    fUML::Executor * executor = fumlFac->createExecutor();
    executor->setLocus(locus);

    fUML::ExecutionFactoryL3 * factory = fumlFac->createExecutionFactoryL3();
    factory->setLocus(locus);

    locus->setFactory(factory);
    locus->setExecutor(executor);

    locus->getFactory()->assignStrategy(fumlFac->createFirstChoiceStrategy());
	locus->getFactory()->assignStrategy(fumlFac->createDispatchStrategy());

    [aPackage.getOpaqueBehaviors().generateOpaqueBehaviorCreation()/]


    std::vector<fUML::ParameterValue *> * pList = new std::vector<fUML::ParameterValue *>();

	[for (par : Parameter | aActivity.ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in)))]
    
    //INput parameter [par.name/] 
	
    fUML::ParameterValue * [par.name/]P = fumlFac->createParameterValue();
    [par.name/]P->setParameter([par.packageGetter()/]);
    
	[if(par.supportedTypes())]
	fUML::[par.type.name/]Value * [par.name/]Value = fUML::FUMLFactory::eInstance()->create[par.type.name/]Value();
    [par.name/]Value->setValue([par.default/]);
	[else]
	fUML::Reference * [par.name/]Value = fUML::FUMLFactory::eInstance()->createReference();
	[par.type.namespace.name/]::[par.type.name/]Execution * [par.name/]UmlLinker = new [par.type.namespace.name/]::[par.type.name/]Execution();
	//[par.name/]UmlLinker = new [par.type.name/]Execution([par.name/]);
	[par.name/]UmlLinker->setLocus(locus);
	[par.name/]UmlLinker->setUmlValue([par.name/]);
	[par.name/]Value->setReferent([par.name/]UmlLinker);
	[/if]
    [par.name/]P->getValues()->push_back([par.name/]Value);
    pList->push_back([par.name/]P);
	[/for]

    std::vector<fUML::ParameterValue *> * resultPList = locus->getExecutor()->execute([aActivity.packageGetter()/],nullptr,pList);

	// TODO set result parameter (pointers not to set?)
	[if (op.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->notEmpty())]
	//The activity has a return parameter
	assert(resultPList->front());
	[let p:Parameter = op.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->first()]
	[if(p.supportedTypes())]
 	fUML::[p.type.name/]Value* ret = dynamic_cast<fUML::[p.type.name/]Value*>(resultPList->front()->getValues()->front());
    assert(ret != nullptr);
    return ret->getValue();
	[else]
	//TODO: Implement return value for reference objects
	[/if]
	[/let]
	[/if]
}
[/let]

[/file]
[/template]
