[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateCallOperationActionExecutionSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fUML4CPP::generator::main::parameterHelper /]
[import UML4CPP::generator::main::generateType /]
[import UML4CPP::generator::main::helper /]

[query public supportedTypes(type : Type) : Boolean = (type.name = 'Integer') or (type.name = 'Boolean') /]

[template public generateCallOperationActionExecutionSource(anCallOperationAction : CallOperationAction, aPackage :Package){ className : String = anCallOperationAction.name.toUpperFirst().concat('Execution'); }]
[file (aPackage.getPackageName().concat('Exec/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[aPackage.getPackageName()/]Exec/[className/].hpp"

[defineDebugMacro()/]

#include <cassert>
#include <iostream>
#include <memory>

#include "abstractDataTypes/SubsetUnion.hpp"
#include "fUML/ParameterValue.hpp"

[if (not (operation.method->asOrderedSet()->first().oclIsUndefined()))]
[if (aPackage.allOwnedElements()->filter(CallOperationAction)->select(operation.method.name->asOrderedSet()->first() = anCallOperationAction.name)->size()>0)]
[let cOpSet : CallOperationAction = aPackage.allOwnedElements()->filter(CallOperationAction)->select(operation.method.name->asOrderedSet()->first() = anCallOperationAction.name)->asOrderedSet()->first()]
[if (not cOpSet.oclIsUndefined())]
#include "[cOpSet.target.type.getNearestPackage().name/]/[cOpSet.operation.owner.oclAsType(Class).name/].hpp"
#include "[aPackage.getPackageName()/]/Exec/[cOpSet.operation.owner.oclAsType(Class).name/]Execution.hpp"
[/if]
[/let]
[/if][/if]

[if (anCallOperationAction.operation.ownedParameter->asSet()->parametersArePointers())]
#include "fUML/Reference.hpp"
[else]
// [anCallOperationAction.operation.class.name.toUpperFirst()/] <- Class name
// [anCallOperationAction.operation.name/] <- Operation name
[if (anCallOperationAction.operation.method->size() = 0)]
// no method set
[else]
// [anCallOperationAction.operation.method.name/] <- Method name
[/if]
// [anCallOperationAction.operation.ownedParameter->first().type.name/] is not a pointer
[/if]
[for (type : Type | anCallOperationAction.operation.ownedParameter.type->asOrderedSet()->sortedBy(name))]
[type.generateTypeInclude(aPackage)/]
[/for]

#include "[anCallOperationAction.target.type.getNearestPackage().name/]/[anCallOperationAction.target.type.name/].hpp"
#include "[aPackage.getPackageName()/]Exec/[anCallOperationAction.target.type.name/]Execution.hpp"
 
using namespace [aPackage.name/];

[className/]::[className/]()
{
}

[className/]::~[className/]()
{
}


[className/]::[className/](const [className/] &obj):
	OpaqueBehaviorExecutionImpl(obj)
{
}

std::shared_ptr<ecore::EObject> [className/]::copy() const
{
	std::shared_ptr<ecore::EObject> element(new [className/](*this));
	return element;
}

void [className/]::doBody(std::shared_ptr<Bag<fUML::ParameterValue> > inputParameters, std::shared_ptr<Bag<fUML::ParameterValue> > outputParameters)
{
    DEBUG_MESSAGE(std::cout<<"Printing from [className/]" << std::endl;)
    DEBUG_MESSAGE(std::cout<<"__________________________" << std::endl;)

	[for ( par : Parameter | anCallOperationAction.operation.ownedParameter->asOrderedSet()->sortedBy(name))]
   	[par.generateCppType()/] [par.name/][if (par.direction = ParameterDirectionKind::out)](new [if (par.upper > 1)]Bag<[/if][par.type.generateCppType(true)/][if (par.upper > 1)]>[/if]())[/if];
	[/for]

	[for ( par : Parameter | anCallOperationAction.operation.ownedParameter->asOrderedSet()->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in))->sortedBy(name))]
    [par.generateInputParameter(anCallOperationAction.operation.ownedParameter->asOrderedSet()->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in))->sortedBy(name)->indexOf(par)-1)/]
	[if (not par.type.supportedTypes())]
	[par.name/] = std::dynamic_pointer_cast<[par.type.name/]Execution>([par.name/]Value->getReferent())->getUmlValue[if(not (par.upper = 1))]s[/if]();
	assert([par.name/] != nullptr);
	[else]
	[par.name/] = [par.name/]Value->getValue();
	[/if]
	[/for]

	std::shared_ptr<[anCallOperationAction.target.type.namespace.ns()/]::[anCallOperationAction.target.type.name/]> target = std::dynamic_pointer_cast<[anCallOperationAction.target.type.name/]Execution>(this->getContext())->getUmlValue();
    assert(target != nullptr);

    //call assigned operation
	[for (par : Parameter | anCallOperationAction.operation.ownedParameter->select(p :Parameter | p.direction = ParameterDirectionKind::return)->asOrderedSet())] [par.name/] = [/for]  target->[anCallOperationAction.operation.name/]([for (par : Parameter | anCallOperationAction.operation.ownedParameter->select(param : Parameter | not (param.direction = ParameterDirectionKind::return))) separator (',')] [par.name/][/for]);
	
	[if(anCallOperationAction.target.name.toLower().contains('self_'))]
		//Target pin name starts with self_
		//Attribute name: [anCallOperationAction.target.name.substitute('self_', '')/]
	[elseif(anCallOperationAction.target.name.size() = 0)]
		//Target pin name is empty
	[/if]
	
	//set out/result parameter
	[for ( par : Parameter | anCallOperationAction.operation.ownedParameter->asOrderedSet()->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_out) or (direction = ParameterDirectionKind::return))->sortedBy(name))]
    [par.generateOutputParameter()/]
	[if (not par.type.supportedTypes())]
	[par.name/]UmlLinker->setUmlValue[if(not (par.upper = 1))]s[/if]([par.name/]);
    [par.name/]UmlLinker->setLocus(this->getLocus());
    [par.name/]Value->setReferent([par.name/]UmlLinker);
	[else]
 	[par.name/]Value->setValue([par.name/]);
	[/if]
    outputParameters->at([anCallOperationAction.operation.ownedParameter->asOrderedSet()->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_out) or (direction = ParameterDirectionKind::return))->sortedBy(name)->indexOf(par)-1/])->getValues()->push_back([par.name/]Value);
	[/for]
	
	//set InOut parameters
	[for ( par : Parameter | anCallOperationAction.operation.ownedParameter->asOrderedSet()->select(direction = ParameterDirectionKind::inout)->sortedBy(name))]
    [if (par.direction <> ParameterDirectionKind::inout)]
	[par.generateOutputParameter()/]
	[/if]
	[if (not par.type.supportedTypes())]
	//Pointer type
	[par.name/]UmlLinker->setUmlValue[if(not (par.upper = 1))]s[/if]([par.name/]);
    [par.name/]UmlLinker->setLocus(this->getLocus());
    [par.name/]Value->setReferent([par.name/]UmlLinker);
	[else]
	//Simple type
 	[par.name/]Value->setValue([par.name/]);
	[/if]
    //outputParameters->append(inputParameters->value([anCallOperationAction.operation.ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in))->sortedBy(name)->indexOf(par)-1/]));
	[/for]
}
[/file]
[/template]