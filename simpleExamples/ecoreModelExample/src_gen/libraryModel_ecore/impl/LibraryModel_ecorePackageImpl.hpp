//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef LIBRARYMODEL_ECOREPACKAGEIMPL_HPP
#define LIBRARYMODEL_ECOREPACKAGEIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

//#include "util/ProfileCallCount.hpp"

#include <cassert>

#include "AuthorImpl.hpp"
#include "BookImpl.hpp"
#include "LibraryModelImpl.hpp"
#include "NamedElementImpl.hpp"
#include "PictureImpl.hpp"

#include "LibraryModel_ecorePackage.hpp"
#include "LibraryModel_ecorePackage.hpp"
#include "EcorePackage.hpp"
#include "impl/EPackageImpl.hpp"

namespace libraryModel_ecore
{
	class LibraryModel_ecorePackageImpl : public ecore::EPackageImpl ,virtual public LibraryModel_ecorePackage
	{
		private:    
			LibraryModel_ecorePackageImpl(LibraryModel_ecorePackageImpl const&) = delete;
			LibraryModel_ecorePackageImpl& operator=(LibraryModel_ecorePackageImpl const&) = delete;

		protected:
			LibraryModel_ecorePackageImpl();

		public:
			virtual ~LibraryModel_ecorePackageImpl();

			// Begin Class Author
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getAuthor() const ;
			
			
			
			// End Class Author

			// Begin Class Book
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getBook() const ;
			
			virtual std::shared_ptr<ecore::EReference> getBook_Authors() const ;
			virtual std::shared_ptr<ecore::EReference> getBook_Library() const ;
			virtual std::shared_ptr<ecore::EReference> getBook_Pictures() const ;
			
			
			// End Class Book

			// Begin Class LibraryModel
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getLibraryModel() const ;
			
			virtual std::shared_ptr<ecore::EReference> getLibraryModel_Authors() const ;
			virtual std::shared_ptr<ecore::EReference> getLibraryModel_Book() const ;
			
			
			// End Class LibraryModel

			// Begin Class NamedElement
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getNamedElement() const ;
			virtual std::shared_ptr<ecore::EAttribute> getNamedElement_Name() const ;
			
			
			
			// End Class NamedElement

			// Begin Class Picture
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getPicture() const ;
			virtual std::shared_ptr<ecore::EAttribute> getPicture_PageNumber() const ;
			
			virtual std::shared_ptr<ecore::EReference> getPicture_Book() const ;
			
			
			// End Class Picture

			

		private:
			std::shared_ptr<ecore::EClass> authorEClass = nullptr;
			std::shared_ptr<ecore::EClass> bookEClass = nullptr;
			std::shared_ptr<ecore::EClass> libraryModelEClass = nullptr;
			std::shared_ptr<ecore::EClass> namedElementEClass = nullptr;
			std::shared_ptr<ecore::EClass> pictureEClass = nullptr;
			
			

			friend class LibraryModel_ecorePackage;

			static bool isInited;
			static LibraryModel_ecorePackage* create();
			bool isInitialized = false;
 			bool isCreated = false;

			virtual void init();

		public:
			void initializePackageContents();
			void createPackageContents();
	};
}
#endif /* end of include guard: LIBRARYMODEL_ECOREPACKAGEIMPL_HPP */

