apply plugin: 'base' 

description 'Build tasks for project: ecoreSimpleExampleModel'

task buildEcoreSimpleExampleModel(dependsOn: ['generateEcoreSimpleExampleModel', 'compileEcoreSimpleExampleModel']) {
	group 'ecoreSimpleExampleModel'
	description 'build ecoreSimpleExampleModel in debug and release'
}
task buildEcoreSimpleExampleModelDebug(dependsOn: ['generateEcoreSimpleExampleModel', 'compileEcoreSimpleExampleModelDebug']) {
	group 'ecoreSimpleExampleModel'
	description 'build ecoreSimpleExampleModel in debug'
}
task buildEcoreSimpleExampleModelRelease(dependsOn: ['generateEcoreSimpleExampleModel', 'compileEcoreSimpleExampleModelRelease']) {
	group 'ecoreSimpleExampleModel'
	description 'build ecoreSimpleExampleModel in release'
}

task compileEcoreSimpleExampleModel(dependsOn: ['compileEcoreSimpleExampleModelDebug', 'compileEcoreSimpleExampleModelRelease']) {
	group 'ecoreSimpleExampleModel'
	description 'compile ecoreSimpleExampleModel in debug and release'
}
task compileEcoreSimpleExampleModelDebug {
	group 'ecoreSimpleExampleModel'
	description 'compile ecoreSimpleExampleModel in Debug'

	def folder = new File(file('./src_gen/ecoreSimpleExampleModel/.cmake/Debug').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'src_gen/ecoreSimpleExampleModel/.cmake/Debug'
			if (System.properties['os.name'].toLowerCase().contains('windows')) {
			   commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Debug ' + file("./src_gen/ecoreSimpleExampleModel").absolutePath
			} else {
			   commandLine 'cmake -G "Unix Makefiles" -D CMAKE_BUILD_TYPE=Debug ' + file("./src_gen/ecoreSimpleExampleModel").absolutePath
			}
		}
		exec {
			workingDir 'src_gen/ecoreSimpleExampleModel/.cmake/Debug'
			if (make_parallel_jobs)
			{			
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
				   commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
				} else {
				   commandLine 'make install -j' + make_parallel_jobs
				}
				
			}
			else
			{
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
					commandLine 'cmd', '/c', 'mingw32-make install' 
				} else {
					commandLine 'make install' 
				}
			}
		}
	}
}
task compileEcoreSimpleExampleModelRelease {
	group 'ecoreSimpleExampleModel'
	description 'compile ecoreSimpleExampleModel in Release'

	def folder = new File(file('./src_gen/ecoreSimpleExampleModel/.cmake/Release').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'src_gen/ecoreSimpleExampleModel/.cmake/Release'
			if (System.properties['os.name'].toLowerCase().contains('windows')) {
			   commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Release ' + file("./src_gen/ecoreSimpleExampleModel").absolutePath
			} else {
			   commandLine 'cmake -G "Unix Makefiles" -D CMAKE_BUILD_TYPE=Release ' + file("./src_gen/ecoreSimpleExampleModel").absolutePath
			}
		}
		exec {
			workingDir 'src_gen/ecoreSimpleExampleModel/.cmake/Release'
			if (make_parallel_jobs)
			{			
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
				   commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
				} else {
				   commandLine 'make install -j' + make_parallel_jobs
				}
				
			}
			else
			{
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
					commandLine 'cmd', '/c', 'mingw32-make install' 
				} else {
					commandLine 'make install' 
				}
			}
		}
	}
}

task generateEcoreSimpleExampleModel(type: JavaExec) {
	group 'ecoreSimpleExampleModel'
	description 'generate C++ code of ecoreSimpleExampleModel.ecore model'
	main = "-jar"
	workingDir "./model"
	args System.getenv('MDE4CPP_HOME') + "/application/generator/ecore4CPP.jar", "ecoreSimpleExampleModel.ecore", "../src_gen"
	inputs.files file(System.getenv('MDE4CPP_HOME') + "/application/generator/ecore4CPP.jar"), file("model/ecoreSimpleExampleModel.ecore")
	outputs.dir file("src_gen")
	
	doFirst {
		if (System.getenv('MDE4CPP_HOME') == null) {
			throw new GradleException('System environment variable "MDE4CPP_HOME" is not defined')
		}
		if (!file(System.getenv('MDE4CPP_HOME') + "/application/generator/ecore4CPP.jar").exists()) {
			throw new GradleException('ecore4CPP.jar is missing in folder ' + file(System.getenv('MDE4CPP_HOME') + '/application/generator') + '. Please run task createEcore4CPP!')
		}
	}
}

compileEcoreSimpleExampleModel.mustRunAfter generateEcoreSimpleExampleModel
compileEcoreSimpleExampleModelDebug.mustRunAfter generateEcoreSimpleExampleModel
compileEcoreSimpleExampleModelRelease.mustRunAfter generateEcoreSimpleExampleModel

clean.doFirst {
	def cmakeFolder = file('./src_gen/ecoreSimpleExampleModel/.cmake/')
	if(cmakeFolder.exists()) {
    	delete cmakeFolder.absolutePath
   		println "deleting folder " + cmakeFolder.absolutePath
	}
}
