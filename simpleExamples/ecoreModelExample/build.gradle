apply plugin: 'base' 

description 'Build tasks for project: libraryModel_ecore'

task buildLibraryModel_ecore(dependsOn: ['generateLibraryModel_ecore', 'compileLibraryModel_ecore']) {
	group 'libraryModel_ecore'
	description 'build libraryModel_ecore in debug and release'
}
task buildLibraryModel_ecoreDebug(dependsOn: ['generateLibraryModel_ecore', 'compileLibraryModel_ecoreDebug']) {
	group 'libraryModel_ecore'
	description 'build libraryModel_ecore in debug'
}
task buildLibraryModel_ecoreRelease(dependsOn: ['generateLibraryModel_ecore', 'compileLibraryModel_ecoreRelease']) {
	group 'libraryModel_ecore'
	description 'build libraryModel_ecore in release'
}

task compileLibraryModel_ecore(dependsOn: ['compileLibraryModel_ecoreDebug', 'compileLibraryModel_ecoreRelease']) {
	group 'libraryModel_ecore'
	description 'compile libraryModel_ecore in debug and release'
}
task compileLibraryModel_ecoreDebug {
	group 'libraryModel_ecore'
	description 'compile libraryModel_ecore in Debug'

	def folder = new File(file('./src_gen/libraryModel_ecore/.cmake/Debug').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'src_gen/libraryModel_ecore/.cmake/Debug'
			if (System.properties['os.name'].toLowerCase().contains('windows')) {
			   commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Debug ' + file("./src_gen/libraryModel_ecore").absolutePath
			} else {
			   commandLine 'cmake -G "Unix Makefiles" -D CMAKE_BUILD_TYPE=Debug ' + file("./src_gen/libraryModel_ecore").absolutePath
			}
		}
		exec {
			workingDir 'src_gen/libraryModel_ecore/.cmake/Debug'
			if (make_parallel_jobs)
			{			
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
				   commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
				} else {
				   commandLine 'make install -j' + make_parallel_jobs
				}
				
			}
			else
			{
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
					commandLine 'cmd', '/c', 'mingw32-make install' 
				} else {
					commandLine 'make install' 
				}
			}
		}
	}
}
task compileLibraryModel_ecoreRelease {
	group 'libraryModel_ecore'
	description 'compile libraryModel_ecore in Release'

	def folder = new File(file('./src_gen/libraryModel_ecore/.cmake/Release').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'src_gen/libraryModel_ecore/.cmake/Release'
			if (System.properties['os.name'].toLowerCase().contains('windows')) {
			   commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Release ' + file("./src_gen/libraryModel_ecore").absolutePath
			} else {
			   commandLine 'cmake -G "Unix Makefiles" -D CMAKE_BUILD_TYPE=Release ' + file("./src_gen/libraryModel_ecore").absolutePath
			}
		}
		exec {
			workingDir 'src_gen/libraryModel_ecore/.cmake/Release'
			if (make_parallel_jobs)
			{			
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
				   commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
				} else {
				   commandLine 'make install -j' + make_parallel_jobs
				}
				
			}
			else
			{
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
					commandLine 'cmd', '/c', 'mingw32-make install' 
				} else {
					commandLine 'make install' 
				}
			}
		}
	}
}

task generateLibraryModel_ecore(type: JavaExec) {
	group 'libraryModel_ecore'
	description 'generate C++ code of libraryModel_ecore.ecore model'
	main = "-jar"
	workingDir "./model"
	args System.getenv('MDE4CPP_HOME') + "/application/generator/ecore4CPP.jar", "libraryModel_ecore.ecore", "../src_gen"
	inputs.files file(System.getenv('MDE4CPP_HOME') + "/application/generator/ecore4CPP.jar"), file("model/libraryModel_ecore.ecore")
	outputs.dir file("src_gen")
	
	doFirst {
		if (System.getenv('MDE4CPP_HOME') == null) {
			throw new GradleException('System environment variable "MDE4CPP_HOME" is not defined')
		}
		if (!file(System.getenv('MDE4CPP_HOME') + "/application/generator/ecore4CPP.jar").exists()) {
			throw new GradleException('ecore4CPP.jar is missing in folder ' + file(System.getenv('MDE4CPP_HOME') + '/application/generator') + '. Please run task createEcore4CPP!')
		}
	}
}

compileLibraryModel_ecore.mustRunAfter generateLibraryModel_ecore
compileLibraryModel_ecoreDebug.mustRunAfter generateLibraryModel_ecore
compileLibraryModel_ecoreRelease.mustRunAfter generateLibraryModel_ecore

clean.doFirst {
	def cmakeFolder = file('./src_gen/libraryModel_ecore/.cmake/')
	if(cmakeFolder.exists()) {
    	delete cmakeFolder.absolutePath
   		println "deleting folder " + cmakeFolder.absolutePath
	}
}
