plugins {
	id "tui.sse.mde4cpp.mde4cpp-compile-plugin" version "0.3"
	id "tui.sse.mde4cpp.mde4cpp-generate-plugin" version "0.2"
}
apply plugin: 'base' 

description 'Build tasks for project: LibraryModel_uml'

task buildLibraryModel_uml(dependsOn: ['generateLibraryModel_uml', 'compileLibraryModel_uml', 'compileApplicationForLibraryModel_uml']) {
	group 'LibraryModel_uml'
	description 'build LibraryModel_uml'
}

task compileApplicationForLibraryModel_uml(type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group 'LibraryModel_uml'
	description 'compile ApplicationForLibraryModel_uml'

	projectFolder = file("./application")
}

task compileLibraryModel_uml(type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group 'LibraryModel_uml'
	description 'compile LibraryModel_uml'

	projectFolder = file("./src_gen/LibraryModel_uml")
}

task generateLibraryModel_uml(type: tui.sse.mde4cpp.MDE4CPPGenerate) {
	group 'LibraryModel_uml'
	description 'generate C++ code of LibraryModel_uml.uml model'

	modelFilePath = file("./model/LibraryModel_uml.uml")
	structureOnly = true
}

compileLibraryModel_uml.mustRunAfter generateLibraryModel_uml
compileApplicationForLibraryModel_uml.mustRunAfter compileLibraryModel_uml

clean.doFirst {
	def cmakeFolder = file('./src_gen/LibraryModel_uml/.cmake/')
	if(cmakeFolder.exists()) {
    	delete cmakeFolder.absolutePath
   		println "deleting folder " + cmakeFolder.absolutePath
	}
	cmakeFolder = file('./application/.cmake/')
	if(cmakeFolder.exists()) {
    	delete cmakeFolder.absolutePath
   		println "deleting folder " + cmakeFolder.absolutePath
	}
}
