description 'Example collection'

task buildSimpleExamples(dependsOn: ['compileEcoreExample', 'compileUMLExample', 'ecoreModelExample:buildLibraryModel_ecore', 'UMLModelExample:buildLibraryModel_uml']) {
	group 'Examples'
	description 'build all simple example applications'	
}

task compileEcoreExample(dependsOn: ['compileEcoreExampleDebug', 'compileEcoreExampleRelease']) {
	group 'Examples'
	description 'compile Ecore example'
}
task compileEcoreExampleDebug {
	description 'compile Ecore example in Debug'

	def folder = new File(file('./ecoreExample/.cmake/Debug').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'ecoreExample/.cmake/Debug'
			if (System.properties['os.name'].toLowerCase().contains('windows')) {
				commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Debug ' + file("./ecoreExample").absolutePath
			} else {
				commandLine '/bin/sh', '-c', 'cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug ' + file("./ecoreExample").absolutePath
			}
		}
		exec {
			workingDir 'ecoreExample/.cmake/Debug'
			if (make_parallel_jobs)
			{
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
					commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
				} else {
					commandLine '/bin/sh', '-c', 'make install -j' + make_parallel_jobs
				}
			}
			else
			{
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
					commandLine 'cmd', '/c', 'mingw32-make install' 
				} else {
					commandLine '/bin/sh', '-c', 'make install' 
				}
			}
		}
	}
	
	dependsOn getRootProject().getTasksByName('buildEcore', true)
	dependsOn getRootProject().getTasksByName('buildTypes', true)
}
compileEcoreExampleDebug.onlyIf {
	(project.hasProperty("DEBUG") && !(project.getProperty("DEBUG") == '0')) || (project.hasProperty("D") && !(project.getProperty("D") == '0')) || (!project.hasProperty("RELEASE") && !project.hasProperty("R") && !project.hasProperty("DEBUG") && !project.hasProperty("D"))
}

task compileEcoreExampleRelease {
	description 'compile Ecore example in Release'

	def folder = new File(file('./ecoreExample/.cmake/Release').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'ecoreExample/.cmake/Release'
			if (System.properties['os.name'].toLowerCase().contains('windows')) {
				commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release ' + file("./ecoreExample").absolutePath
			} else {
				commandLine '/bin/sh', '-c', 'cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ' + file("./ecoreExample").absolutePath
			}
		}
		exec {
			workingDir 'ecoreExample/.cmake/Release'
			if (make_parallel_jobs)
			{
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
					commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
				} else {
					commandLine '/bin/sh', '-c', 'make install -j' + make_parallel_jobs
				}
			}
			else
			{
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
					commandLine 'cmd', '/c', 'mingw32-make install' 
				} else {
					commandLine '/bin/sh', '-c', 'make install' 
				}
			}
		}
	}
	
	dependsOn getRootProject().getTasksByName('buildEcore', true)
	dependsOn getRootProject().getTasksByName('buildTypes', true)
}
compileEcoreExampleRelease.onlyIf {
	(project.hasProperty("RELEASE") && !(project.getProperty("RELEASE") == '0')) || (project.hasProperty("R") && !(project.getProperty("R") == '0')) || (!project.hasProperty("RELEASE") && !project.hasProperty("R") && !project.hasProperty("DEBUG") && !project.hasProperty("D"))
}

task compileUMLExample(dependsOn: ['compileUMLExampleDebug', 'compileUMLExampleRelease']) {
	group 'Examples'
	description 'compile UML example'
}
task compileUMLExampleDebug {
	description 'compile UML example in Debug'

	def folder = new File(file('./UMLExample/.cmake/Debug').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'UMLExample/.cmake/Debug'
			if (System.properties['os.name'].toLowerCase().contains('windows')) {
				commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Debug ' + file("./UMLExample").absolutePath
			} else {
				commandLine '/bin/sh', '-c', 'cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Debug ' + file("./UMLExample").absolutePath
			}
		}
		exec {
			workingDir 'UMLExample/.cmake/Debug'
			if (make_parallel_jobs)
			{
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
					commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
				} else {
					commandLine '/bin/sh', '-c', 'make install -j' + make_parallel_jobs
				}
			}
			else
			{
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
					commandLine 'cmd', '/c', 'mingw32-make install' 
				} else {
					commandLine '/bin/sh', '-c', 'make install' 
				}
			}
		}
	}
	
	dependsOn getRootProject().getTasksByName('buildEcore', true)
	dependsOn getRootProject().getTasksByName('buildTypes', true)
	dependsOn getRootProject().getTasksByName('buildUml', true)
	dependsOn getRootProject().getTasksByName('buildUmlReflection', true)
}
compileUMLExampleDebug.onlyIf {
	(project.hasProperty("DEBUG") && !(project.getProperty("DEBUG") == '0')) || (project.hasProperty("D") && !(project.getProperty("D") == '0')) || (!project.hasProperty("RELEASE") && !project.hasProperty("R") && !project.hasProperty("DEBUG") && !project.hasProperty("D"))
}

task compileUMLExampleRelease {
	description 'compile UML example in Release'

	def folder = new File(file('./UMLExample/.cmake/Release').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'UMLExample/.cmake/Release'
			if (System.properties['os.name'].toLowerCase().contains('windows')) {
				commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -DCMAKE_BUILD_TYPE=Release ' + file("./UMLExample").absolutePath
			} else {
				commandLine '/bin/sh', '-c', 'cmake -G "Unix Makefiles" -DCMAKE_BUILD_TYPE=Release ' + file("./UMLExample").absolutePath
			}
		}
		exec {
			workingDir 'UMLExample/.cmake/Release'
			if (make_parallel_jobs)
			{
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
					commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
				} else {
					commandLine '/bin/sh', '-c', 'make install -j' + make_parallel_jobs
				}
			}
			else
			{
				if (System.properties['os.name'].toLowerCase().contains('windows')) {
					commandLine 'cmd', '/c', 'mingw32-make install' 
				} else {
					commandLine '/bin/sh', '-c', 'make install' 
				}
			}
		}
	}
	
	dependsOn getRootProject().getTasksByName('buildEcore', true)
	dependsOn getRootProject().getTasksByName('buildTypes', true)
	dependsOn getRootProject().getTasksByName('buildUml', true)
	dependsOn getRootProject().getTasksByName('buildUmlReflection', true)
}
compileUMLExampleRelease.onlyIf {
	(project.hasProperty("RELEASE") && !(project.getProperty("RELEASE") == '0')) || (project.hasProperty("R") && !(project.getProperty("R") == '0')) || (!project.hasProperty("RELEASE") && !project.hasProperty("R") && !project.hasProperty("DEBUG") && !project.hasProperty("D"))
}