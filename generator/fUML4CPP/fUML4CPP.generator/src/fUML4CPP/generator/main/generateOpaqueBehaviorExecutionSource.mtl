[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateOpaqueBehaviorExecutionSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fUML4CPP::generator::main::parameterHelper /]
[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[query private getActivity(anAction : Action) : Activity = if (anAction.activity.oclIsUndefined()) then anAction.inStructuredNode.getActivity() else anAction.activity endif /]
[query private getOwnerOrTargetType(aCOA : CallOperationAction) : Type = if (aCOA.target.isSelfAttribute() or aCOA.target.isSelf()) then aCOA.getActivity().owner.oclAsType(Type) else aCOA.target.type endif /]
[query public hasGenerateOwnerVariable(aElement : Element) : Boolean = aElement.valueKey('generateOwnerVariable') = 'true'/]
[query private getSelf(action : Action) : Classifier = action.getActivity().owner.oclAsType(Classifier)/]
[query private getSelfAttribute(pin : Pin, action : Action) : Property = action.getSelf().attribute->select(pin.name = 'self.'.concat(name))->asOrderedSet()->first()/]
[query private isSelf(pin : Pin) : Boolean = pin.name = 'self'/]
[query private isSelfAttribute(pin : Pin) : Boolean = pin.name.startsWith('self.')/]
[query private getPinType(pin : Pin, action : Action) : Type = if (pin.isSelf()) then action.getSelf() else (if pin.isSelfAttribute() then pin.getSelfAttribute(action).type else pin.type endif) endif /]

[template public generateOpaqueBehaviorExecutionSource(anOpaqueBehavior : OpaqueBehavior, aPackage :Package)]
[anOpaqueBehavior.generateOpaqueBehaviorExecSource(aPackage)/]
[/template]

[template public generateOpaqueBehaviorExecutionSource(aCallOperationAction : CallOperationAction, aPackage :Package)]
[aCallOperationAction.generateOpaqueBehaviorExecSource(aPackage)/]
[/template]

[template public generateOpaqueBehaviorExecSource(aNamedElement : NamedElement, aPackage :Package) {
	behaviorName : String = aNamedElement.generateOpaqueBehaviorExecutionName(); 
}]

[file (aPackage.getPackageName().concat('Exec/').concat(behaviorName).concat('.cpp'), false, 'UTF-8')]
#include "[aPackage.getPackageName()/]Exec/[behaviorName/].hpp"

[defineDebugMacro()/]

#include <cassert>
#include <iostream>
#include <memory>

#include "abstractDataTypes/SubsetUnion.hpp" 
#include "fUML/FUMLFactory.hpp"
#include "fUML/Semantics/CommonBehavior/ParameterValue.hpp"
#include "uml/Behavior.hpp"

[aNamedElement.generateIncludes(aPackage)/]

[if (aNamedElement.hasGenerateOwnerVariable())]
#include "[aNamedElement.owner.oclAsType(Classifier).getNearestPackage().myNamespaceName()/]/[aNamedElement.owner.oclAsType(Classifier).name.toUpperFirst()/].hpp"
#include "[aPackage.getPackageName()/]Exec/[aNamedElement.owner.oclAsType(Classifier).name.toUpperFirst()/]Object.hpp"
[/if]

using namespace [aPackage.name/];

[behaviorName/]::[behaviorName/]()
{
}

[behaviorName/]::~[behaviorName/]()
{
}

[behaviorName/]::[behaviorName/](const [behaviorName/] &obj)
:OpaqueBehaviorExecutionImpl(obj)
{
}

std::shared_ptr<ecore::EObject> [behaviorName/]::copy() const
{
	std::shared_ptr<[behaviorName/]> element(new [behaviorName/](*this));
	element->setThisExecutionPtr(element);
	return element;
}

void [behaviorName/]::doBody(std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue> > inputParameters, std::shared_ptr<Bag<fUML::Semantics::CommonBehavior::ParameterValue> > outputParameters)
{
    DEBUG_MESSAGE(std::cout << "Printing from "<< this->getBehavior()->getName() << std::endl;)
    DEBUG_MESSAGE(std::cout << "__________________________" << std::endl;)

	[aNamedElement.generateBody(aPackage)/]

	DEBUG_MESSAGE(std::cout<< "^^^^^ [behaviorName/] ends ^^^^^" << std::endl;)
}

void [behaviorName/]::setThisExecutionPtr(std::weak_ptr<[behaviorName/]> thisExecutionPtr)
{
	setThisOpaqueBehaviorExecutionPtr(thisExecutionPtr);
}
[/file]
[/template]

[template private generateIncludes(aNamedElement : NamedElement, aPackage : Package) ? (aNamedElement.oclIsKindOf(OpaqueBehavior))]
[let anOpaqueBehavior : OpaqueBehavior = aNamedElement.oclAsType(OpaqueBehavior)]
[if (anOpaqueBehavior.language->includes(keyInclude()))]
[let index : Integer = anOpaqueBehavior.language->indexOf(keyInclude())]
[if (0 < index and index <= anOpaqueBehavior._body->size())]
//Included from function behavior "[anOpaqueBehavior.name/]"
[anOpaqueBehavior._body->at(index)/]
[/if][/let][/if]

#include "fUML/Semantics/StructuredClassifiers/Reference.hpp"
[for (type : Type | anOpaqueBehavior.ownedParameter.type->asOrderedSet())]
[type.generateTypeInclude(aPackage)/]
[/for]
[/let]
[/template]

[template private generateIncludes(aNamedElement : NamedElement, aPackage : Package) ? (aNamedElement.oclIsKindOf(CallOperationAction))]
[let aCallOperationAction : CallOperationAction = aNamedElement.oclAsType(CallOperationAction)]
[if (aCallOperationAction.target.name.startsWith('self'))]
[if (aCallOperationAction.target.name.startsWith('self.'))]
#include "[aCallOperationAction.target.type.getNearestPackage().myNamespaceName()/]/[aCallOperationAction.target.type.name/].hpp"
[/if]
#include "[aCallOperationAction.getActivity().owner.oclAsType(Classifier).getNearestPackage().myNamespaceName()/]/[aCallOperationAction.getActivity().owner.oclAsType(Classifier).name.toUpperFirst()/].hpp"
#include "[aPackage.getPackageName()/]Exec/[aCallOperationAction.getActivity().owner.oclAsType(Classifier).name.toUpperFirst()/]Object.hpp"
[else]
#include "[aCallOperationAction.target.type.getNearestPackage().myNamespaceName()/]/[aCallOperationAction.target.type.name.toUpperFirst()/].hpp"
#include "[aPackage.getPackageName()/]Exec/[aCallOperationAction.target.type.name.toUpperFirst()/]Object.hpp"
[/if]

#include "fUML/Semantics/StructuredClassifiers/Reference.hpp"
[for (type : Type | aCallOperationAction.input.type->asOrderedSet())]
[type.generateTypeInclude(aPackage)/]
[/for]
[for (type : Type | aCallOperationAction.output.type->asOrderedSet())]
[type.generateTypeInclude(aPackage)/]
[/for]
[/let]
[/template]

[template private generateBody(aNamedElement : NamedElement, aPackage : Package) ? (aNamedElement.oclIsKindOf(OpaqueBehavior))]
[let anOpaqueBehavior : OpaqueBehavior = aNamedElement.oclAsType(OpaqueBehavior)]
[anOpaqueBehavior.ownedParameter->asSet()->generateIncomingParameters()/]

//Body of the Opaquebehavior
//Start ---------------------------
[if (anOpaqueBehavior.hasGenerateOwnerVariable())]
std::shared_ptr<[anOpaqueBehavior.owner.oclAsType(Classifier).namespace.myNamespaceName()/]::[anOpaqueBehavior.owner.oclAsType(Classifier).name.toUpperFirst()/]> owner = std::dynamic_pointer_cast<[anOpaqueBehavior.owner.oclAsType(Classifier).name.toUpperFirst()/]Object>(this->getContext())->getUmlValue();
[/if]

[if (anOpaqueBehavior.language->includes(keyCPP()))]
[let index : Integer = anOpaqueBehavior.language->asOrderedSet()->indexOf(keyCPP())]
[if (0 < index and index <= anOpaqueBehavior._body->size())]
[anOpaqueBehavior._body->asOrderedSet()->at(index)/]
[/if][/let]
[else]
std::cout << __PRETTY_FUNCTION__ << std::endl;
throw "UnsupportedOperationException";
[/if]
		
[anOpaqueBehavior.ownedParameter->asSet()->generateOutgoingParameters()/]
[/let]
[/template]

[template private generateBody(aNamedElement : NamedElement, aPackage : Package) ? (aNamedElement.oclIsKindOf(CallOperationAction))]
[let aCallOperationAction : CallOperationAction = aNamedElement.oclAsType(CallOperationAction)]
[let type : Classifier = aCallOperationAction.getOwnerOrTargetType()]
std::shared_ptr<[type.namespace.myNamespaceName()/]::[type.name.toUpperFirst()/]> context = std::dynamic_pointer_cast<[type.name.toUpperFirst()/]Object>(this->getContext())->getUmlValue();
if (context == nullptr)
{
	std::cerr << "context of CallOperationAction '[aCallOperationAction.name/]'is not set" << std::endl;
    return;
}
[let targetPin : Pin = aCallOperationAction.target]
std::shared_ptr<[targetPin.getPinType(aCallOperationAction).namespace.myNamespaceName()/]::[targetPin.getPinType(aCallOperationAction).name.toUpperFirst()/]> target = context[if (targetPin.isSelfAttribute())]->[targetPin.getSelfAttribute(aCallOperationAction).getterName()/]()[/if];
[/let]
[/let]
if (target == nullptr)
{
	std::cerr << "target of CallOperationAction '[aCallOperationAction.name/]'is null" << std::endl;
	throw "target is null";
}

[for (pin : InputPin | aCallOperationAction.argument)]
[if (not (pin.isSelf() or pin.isSelfAttribute()))]
	[pin.generateIncomingPin(aCallOperationAction.argument->sortedBy(name)->indexOf(pin)-1)/]
[else]
	[pin.generateCppType(false)/] [pin.name.replaceFirst('self.', '')/] = [pin.generateArgumentGetter(aCallOperationAction)/]
[/if]
[/for]

//Calling the associated operation.
[let retPar : Set(Parameter) = aCallOperationAction.operation.ownedParameter->select(p :Parameter | (p.direction = ParameterDirectionKind::return))->asSet()]
[if(not retPar->isEmpty())][if (not retPar->asOrderedSet()->first().oclIsInvalid())][retPar.generateCppType(false)/] [retPar.name/] = [/if][/if]target->[aCallOperationAction.operation.name/]([for (par : Parameter | aCallOperationAction.operation.ownedParameter->select(param : Parameter | not (param.direction = ParameterDirectionKind::return))) separator (',')] [par.name/][/for]);
[/let]	

[aCallOperationAction.operation.ownedParameter->asSet()->generateOutgoingParameters()/]
[/let]
[/template]

[template private generateIncomingPin(aPin : InputPin, index : Integer)]
[aPin.generateCppType(false)/] [aPin.name/][if (aPin.upper <> 1)](new Bag<[aPin.type.generateCppType(true)/]>())[/if];
[aPin.generateInputParameter(index)/]
[if (aPin.upper = 1)]
	[if (not aPin.type.supportedTypes())]
	std::shared_ptr<fUML::Semantics::StructuredClassifiers::Reference> [aPin.name/]Value = std::dynamic_pointer_cast<fUML::Semantics::StructuredClassifiers::Reference>([aPin.name/]ValueList->front());
	[aPin.name/] = std::dynamic_pointer_cast<[aPin.type.name/]Object>([aPin.name/]Value->getReferent())->getUmlValue();
	if([aPin.name/] == nullptr)
	{
		DEBUG_MESSAGE(std::cout << "received instance of type [aPin.type.generateCppType(true)/] is null" << std::endl;);
	}
	[else]
	std::shared_ptr<fUML::Semantics::SimpleClassifiers::[aPin.type.name.toUpperFirst()/]Value> [aPin.name/]Value = std::dynamic_pointer_cast<fUML::Semantics::SimpleClassifiers::[aPin.type.name.toUpperFirst()/]Value>([aPin.name/]ValueList->front());
	[aPin.name/] = [aPin.name/]Value->getValue();
	[/if]
[else]
Bag<fUML::Semantics::Values::Value>::iterator [aPin.name.toLowerFirst()/]Iter = [aPin.name.toLowerFirst()/]ValueList->begin();
Bag<fUML::Semantics::Values::Value>::iterator [aPin.name.toLowerFirst()/]End = [aPin.name.toLowerFirst()/]ValueList->end();
while ([aPin.name.toLowerFirst()/]Iter != [aPin.name.toLowerFirst()/]End)
{
	[if (not aPin.type.supportedTypes())]
	std::shared_ptr<fUML::Semantics::StructuredClassifiers::Reference> [aPin.name/]Value = std::dynamic_pointer_cast<fUML::Semantics::StructuredClassifiers::Reference>(*[aPin.name.toLowerFirst()/]Iter);
	[aPin.type.generateCppType(false)/] [aPin.name/]Temp = std::dynamic_pointer_cast<[aPin.type.name/]Object>([aPin.name/]Value->getReferent())->getUmlValue();
	if([aPin.name/]Temp == nullptr)
	{
		DEBUG_MESSAGE(std::cout << "received instance of type [aPin.type.generateCppType(true)/] is null" << std::endl;);
	}
	else
	{
		[aPin.name/]->push_back([aPin.name/]Temp);
	}
	[else]
	std::cerr << __PRETTY_FUNCTION__ << ": generation of supported types with upper > 0 is missing" << std::endl;
	throw "ERROR" << std::endl;
	[/if]

	[aPin.name.toLowerFirst()/]Iter++;
}
[/if]
[/template]

[template private generateIncomingParameters(aParameterList : Set(Parameter))]
[for ( par : Parameter | aParameterList)]
[par.generateCppType(false)/] [par.name/][if (par.upper <> 1)](new Bag<[par.type.generateCppType(true)/]>())[/if];
[/for]

[for ( par : Parameter | aParameterList->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in))->sortedBy(name))]
[par.generateInputParameter(aParameterList->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in))->sortedBy(name)->indexOf(par)-1)/]
[if (par.upper = 1)]
	[if (not par.type.supportedTypes())]
	std::shared_ptr<fUML::Semantics::StructuredClassifiers::Reference> [par.name/]Value = std::dynamic_pointer_cast<fUML::Semantics::StructuredClassifiers::Reference>([par.name/]ValueList->front());
	[par.name/] = std::dynamic_pointer_cast<[par.type.name/]Object>([par.name/]Value->getReferent())->getUmlValue();
	if([par.name/] == nullptr)
	{
		DEBUG_MESSAGE(std::cout << "received instance of type [par.type.generateCppType(true)/] is null" << std::endl;);
	}
	[else]
	std::shared_ptr<fUML::Semantics::SimpleClassifiers::[par.type.name.toUpperFirst()/]Value> [par.name/]Value = std::dynamic_pointer_cast<fUML::Semantics::SimpleClassifiers::[par.type.name.toUpperFirst()/]Value>([par.name/]ValueList->front());
	[par.name/] = [par.name/]Value->getValue();
	[/if]
[else]
Bag<fUML::Semantics::Values::Value>::iterator [par.name.toLowerFirst()/]Iter = [par.name.toLowerFirst()/]ValueList->begin();
Bag<fUML::Semantics::Values::Value>::iterator [par.name.toLowerFirst()/]End = [par.name.toLowerFirst()/]ValueList->end();
while ([par.name.toLowerFirst()/]Iter != [par.name.toLowerFirst()/]End)
{
	[if (not par.type.supportedTypes())]
	std::shared_ptr<fUML::Semantics::StructuredClassifiers::Reference> [par.name/]Value = std::dynamic_pointer_cast<fUML::Semantics::StructuredClassifiers::Reference>(*[par.name.toLowerFirst()/]Iter);
	[par.type.generateCppType(false)/] [par.name/]Temp = std::dynamic_pointer_cast<[par.type.name/]Object>([par.name/]Value->getReferent())->getUmlValue();
	if([par.name/]Temp == nullptr)
	{
		DEBUG_MESSAGE(std::cout << "received instance of type [par.type.generateCppType(true)/] is null" << std::endl;);
	}
	else
	{
		[par.name/]->push_back([par.name/]Temp);
	}
	[else]
	std::cerr << __PRETTY_FUNCTION__ << ": generation of supported types with upper > 0 is missing" << std::endl;
	throw "ERROR" << std::endl;
	[/if]

	[par.name.toLowerFirst()/]Iter++;
}
[/if]
[/for]
[/template]

[template private generateOutgoingParameters(aParameterList : Set(Parameter))]
//set return / out parameters
[for ( par : Parameter | aParameterList->select((direction = ParameterDirectionKind::_out) or (direction = ParameterDirectionKind::return))->sortedBy(name))]
[if (par.upper = 1)]
[par.generateValue(aParameterList, par.name)/]
[else]
Bag<[par.type.generateCppType(true)/]>::iterator [par.name.toLowerFirst()/]Iter = [par.name.toLowerFirst()/]->begin();
Bag<[par.type.generateCppType(true)/]>::iterator [par.name.toLowerFirst()/]End = [par.name.toLowerFirst()/]->end();
while ([par.name.toLowerFirst()/]Iter != [par.name.toLowerFirst()/]End)
{
	[par.type.generateCppType(false)/] [par.name.toLowerFirst()/]Temp = *[par.name.toLowerFirst()/]Iter;
	[par.generateValue(aParameterList, par.name.concat('Temp'))/]
	[par.name.toLowerFirst()/]Iter++;
}
[/if]
[/for]

//set InOut parameters
[for ( par : Parameter | aParameterList->asOrderedSet()->select(direction = ParameterDirectionKind::inout)->sortedBy(name))]
[if (par.direction <> ParameterDirectionKind::inout or not par.type.supportedTypes())]
[par.generateOutputParameter()/]
[/if]
[if (not par.type.supportedTypes())]
//Pointer type
[par.name/]UmlLinker->setUmlValue[if(not (par.upper = 1))]s[/if]([par.name/]);
[par.name/]UmlLinker->setLocus(this->getLocus());
[par.name/]Value->setReferent([par.name/]UmlLinker);
[else]
//Simple type
[par.name/]Value->setValue([par.name/]);
[/if]
//outputParameters->push_back(inputParameters->at([aParameterList->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in))->sortedBy(name)->indexOf(par)-1/]));
[/for]
[/template]

[template private generateValue(aParameter : Parameter, aParameterList : Set(Parameter), variableName : String)]
[aParameter.generateOutputParameter()/]
[if (not aParameter.type.supportedTypes())]
[aParameter.name/]UmlLinker->setUmlValue([variableName/]);
[aParameter.name/]UmlLinker->setLocus(this->getLocus());
[aParameter.name/]Value->setReferent([aParameter.name/]UmlLinker);
[else]
[aParameter.name/]Value->setValue([aParameter.name/]);
[/if]
outputParameters->at([aParameterList->select((direction = ParameterDirectionKind::_out) or (direction = ParameterDirectionKind::return))->sortedBy(name)->indexOf(aParameter)-1/])->getValues()->push_back([aParameter.name/]Value);
[/template]

[template private generateArgumentGetter(pin : Pin, action : Action) ? (pin.name = 'self')]
context;
[/template]

[template private generateArgumentGetter(pin : Pin, action : Action) ? (pin.name.contains('self.'))]
context->[pin.getSelfAttribute(action).getterName()/]();
[/template]

[template private generateArgumentGetter(pin : Pin, action : Action) ? (not (pin.name.contains('self') and pin.type.supportedTypes()))]
std::dynamic_pointer_cast<[pin.type.name/]Object>([pin.name/]Value->getReferent())->getUmlValue[if(not (pin.upper = 1))]s[/if]();
assert([pin.name/] != nullptr);
[/template]

[template private generateArgumentGetter(pin : Pin, action : Action) ? (not pin.name.contains('self') and pin.type.supportedTypes())]
[pin.name/]Value->getValue();
[/template]