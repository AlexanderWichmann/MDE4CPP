[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateBehaviorExecutionSource('http://www.eclipse.org/uml2/5.0.0/UML')]

[import fUML4CPP::generator::main::parameterHelper /]
[import UML4CPP::generator::main::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]


[query public hasGenerateOwnerVariable(aElement : Element) : Boolean = aElement.valueKey('generateOwnerVariable') = 'true'/]
[template public generateBehaviorExecutionSource(anOpaqueBehavior : OpaqueBehavior, aPackage :Package){ className : String = anOpaqueBehavior.name.toUpperFirst().concat('Execution'); }]

[file (aPackage.getPackageName().concat('Exec/').concat(className).concat('.cpp'), false, 'UTF-8')]
#include "[aPackage.getPackageName()/]Exec/[className/].hpp"

[defineDebugMacro()/]

#include <cassert>
#include <iostream>
#include <memory>

#include "abstractDataTypes/SubsetUnion.hpp" 
#include "fUML/FUMLFactory.hpp"
#include "fUML/ParameterValue.hpp"
#include "uml/Behavior.hpp"

[if (anOpaqueBehavior.language->includes('INCLUDE'))]
[let index : Integer = anOpaqueBehavior.language->asOrderedSet()->indexOf('INCLUDE')]
[if (0 < index and index <= anOpaqueBehavior._body->size())]
//Included from function behavior "[anOpaqueBehavior.name/]"
[anOpaqueBehavior._body->asOrderedSet()->at(index)/]
[/if][/let][/if]

[if (aPackage.allOwnedElements()->filter(CallOperationAction)->select(operation.method->asSet()->size() > 0)->select(operation.method.name->asOrderedSet()->first() = anOpaqueBehavior.name)->size()>0)]
[let cOpSet : CallOperationAction = aPackage.allOwnedElements()->filter(CallOperationAction)->select(operation.method->notEmpty())->select(operation.method.name->asOrderedSet()->first() = anOpaqueBehavior.name)->asOrderedSet()->first()]
[if (not cOpSet.oclIsUndefined())]
[if (cOpSet.target.name.startsWith('self'))]
[if (cOpSet.target.name.startsWith('self.'))]
#include "[cOpSet.target.type.getNearestPackage().myNamespaceName()/]/[cOpSet.target.type.name/].hpp"
[/if]
#include "[cOpSet.activity.owner.oclAsType(Classifier).getNearestPackage().myNamespaceName()/]/[cOpSet.activity.owner.oclAsType(Classifier).name.toUpperFirst()/].hpp"
#include "[aPackage.getPackageName()/]Exec/[cOpSet.activity.owner.oclAsType(Classifier).name.toUpperFirst()/]Object.hpp"
[else]
#include "[cOpSet.target.type.getNearestPackage().myNamespaceName()/]/[cOpSet.target.type.name.toUpperFirst()/].hpp"
#include "[aPackage.getPackageName()/]Exec/[cOpSet.target.type.name.toUpperFirst()/]Object.hpp"
[/if]
[/if]
[/let]
[/if]

[if (anOpaqueBehavior.hasGenerateOwnerVariable())]
#include "[anOpaqueBehavior.owner.oclAsType(Classifier).getNearestPackage().myNamespaceName()/]/[anOpaqueBehavior.owner.oclAsType(Classifier).name.toUpperFirst()/].hpp"
#include "[aPackage.getPackageName()/]Exec/[anOpaqueBehavior.owner.oclAsType(Classifier).name.toUpperFirst()/]Object.hpp"
[/if]


[if (anOpaqueBehavior.ownedParameter->asSet()->parametersArePointers())]
#include "fUML/Reference.hpp"
[/if]
[for (type : Type | anOpaqueBehavior.ownedParameter.type->asOrderedSet())]
[type.generateTypeInclude(aPackage)/]
[/for]

using namespace [aPackage.name/];

[className/]::[className/]()
{
}

[className/]::~[className/]()
{
}

[className/]::[className/](const [className/] &obj)
:OpaqueBehaviorExecutionImpl(obj)
{
}

std::shared_ptr<ecore::EObject> [className/]::copy() const
{
	std::shared_ptr<[className/]> element(new [className/](*this));
	element->setThisExecutionPtr(element);
	return element;
}

void [className/]::doBody(std::shared_ptr<Bag<fUML::ParameterValue> > inputParameters, std::shared_ptr<Bag<fUML::ParameterValue> > outputParameters)
{
    DEBUG_MESSAGE(std::cout << "Printing from "<< this->getBehavior()->getName() << std::endl;)
    DEBUG_MESSAGE(std::cout << "__________________________" << std::endl;)

	[for ( par : Parameter | anOpaqueBehavior.ownedParameter)]
   	[par.generateCppType(false)/] [par.name/][if (par.direction = ParameterDirectionKind::out and not (par.type.isPrimitive() or par.type.oclIsKindOf(Enumeration)))](new [if (par.upper <> 1)]Bag<[/if][par.type.generateCppType(true)/][if (par.upper <> 1)]>[/if]())[/if];
	[/for]

	[for ( par : Parameter | anOpaqueBehavior.ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in))->sortedBy(name))]
    [par.generateInputParameter(anOpaqueBehavior.ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in))->sortedBy(name)->indexOf(par)-1)/]

	[if (not par.type.supportedTypes())]
	[par.name/] = std::dynamic_pointer_cast<[par.type.name/]Object>([par.name/]Value->getReferent())->getUmlValue[if(not (par.upper = 1))]s[/if]();
	if([par.name/] != nullptr)
	{
		DEBUG_MESSAGE(std::cout << "received instance of type [par.type.generateCppType(true)/] is null" << std::endl;);
	}
	[else]
	[par.name/] = [par.name/]Value->getValue();
	[/if]
	[/for]

	[if (aPackage.allOwnedElements()->filter(CallOperationAction)->select(operation.method->asSet()->size() > 0)->select(operation.method.name->asOrderedSet()->first() = anOpaqueBehavior.name)->size()>0)]
	[comment]if it is a Call Operation Action[/comment]
	//Call Operation action target
	[for (cOpSet : CallOperationAction | aPackage.allOwnedElements()->filter(CallOperationAction)->select(operation.method->notEmpty())->select(operation.method.name->asOrderedSet()->first() = anOpaqueBehavior.name)->asOrderedSet()->first())]
[if (cOpSet.target.name.startsWith('self'))]
	std::shared_ptr<[cOpSet.activity.owner.oclAsType(Classifier).namespace.myNamespaceName()/]::[cOpSet.activity.owner.oclAsType(Classifier).name.toUpperFirst()/]> target = std::dynamic_pointer_cast<[cOpSet.activity.owner.oclAsType(Classifier).name.toUpperFirst()/]Object>(this->getContext())->getUmlValue();
[else]
	std::shared_ptr<[cOpSet.target.type.namespace.myNamespaceName()/]::[cOpSet.target.type.name.toUpperFirst()/]> target = std::dynamic_pointer_cast<[cOpSet.target.type.name.toUpperFirst()/]Object>(this->getContext())->getUmlValue();
[/if]
    assert(target != nullptr);
	[/for]
	[/if]

    //Body of the Opaquebehavior
    //Start ---------------------------
	[if(not aPackage.allOwnedElements()->filter(CallOperationAction)->select(operation.method->size() > 0)->select(operation.method.name->asOrderedSet()->first() = anOpaqueBehavior.name)->isEmpty())]
	[for (cOpSet : CallOperationAction | aPackage.allOwnedElements()->filter(CallOperationAction)->select(operation.method->notEmpty())->select(operation.method.name->asOrderedSet()->first() = anOpaqueBehavior.name)->asOrderedSet()->first())]
	
	//Calling the associated operation.
[if (target.name.startsWith('self.'))]
	std::shared_ptr<[cOpSet.target.type.namespace.myNamespaceName()/]::[cOpSet.target.type.name.toUpperFirst()/]> subtarget = std::dynamic_pointer_cast<[cOpSet.target.type.namespace.myNamespaceName()/]::[cOpSet.target.type.name.toUpperFirst()/]>(target->get[target.name.substitute('self.', '').toUpperFirst()/]());
    assert(subtarget != nullptr);
[/if]
[if (target.name.startsWith('self.'))]
	if (target != nullptr && subtarget != nullptr)
	{
[/if]
	[let retPar : Set(Parameter) = anOpaqueBehavior.ownedParameter->select(p :Parameter | (p.direction = ParameterDirectionKind::return))->asSet()]
	[if(not retPar->isEmpty())][if (not retPar->asOrderedSet()->first().oclIsInvalid())]		[retPar.name/] = [/if][/if][/let]  [if (target.name.startsWith('self.'))]subtarget[else]target[/if]->[cOpSet.operation.name/]([for (sParameter : Parameter | anOpaqueBehavior.ownedParameter->select(p :Parameter | not (p.direction = ParameterDirectionKind::return))) separator (',')][sParameter.name/][/for]);
[if (cOpSet.target.name.startsWith('self.'))]
	}
	else
	{
		std::cerr << "attribute [cOpSet.target.name/] is not set" << std::endl;
	}
[/if]
	[/for]
	[else]
		[if (anOpaqueBehavior.getAppliedStereotype('BehaviorProfile::setBehavior').oclIsUndefined() and anOpaqueBehavior.getAppliedStereotype('BehaviorProfile::getBehavior').oclIsUndefined())]
		//Function Behaviour from a Call Behavior Action [anOpaqueBehavior.hasGenerateOwnerVariable()/]
		[if (anOpaqueBehavior.hasGenerateOwnerVariable())]
			std::shared_ptr<[anOpaqueBehavior.owner.oclAsType(Classifier).namespace.myNamespaceName()/]::[anOpaqueBehavior.owner.oclAsType(Classifier).name.toUpperFirst()/]> owner = std::dynamic_pointer_cast<[anOpaqueBehavior.owner.oclAsType(Classifier).name.toUpperFirst()/]Object>(this->getContext())->getUmlValue();
		[/if]

   		[if (anOpaqueBehavior.language->includes('CPP'))]
		[let index : Integer = anOpaqueBehavior.language->asOrderedSet()->indexOf('CPP') ]
		[if (0 < index and index <= anOpaqueBehavior._body->size())]
		[anOpaqueBehavior._body->asOrderedSet()->at(index)/]
		[/if][/let]
		[else]
			std::cout << __PRETTY_FUNCTION__ << std::endl;
			throw "UnsupportedOperationException";
		[/if]
		[elseif (not anOpaqueBehavior.getAppliedStereotype('BehaviorProfile::getBehavior').oclIsUndefined())]
		// getBehavior generated
[if (anOpaqueBehavior.getValue(anOpaqueBehavior.getAppliedStereotype('BehaviorProfile::getBehavior'), 'property').oclIsKindOf(Property))]
		[anOpaqueBehavior.outputParameters()->select(direction = ParameterDirectionKind::return)->first().name/] = [anOpaqueBehavior.inputParameters()->first().name/]->get[anOpaqueBehavior.getValue(anOpaqueBehavior.getAppliedStereotype('BehaviorProfile::getBehavior'), 'property').oclAsType(Property).name.toUpperFirst()/]();
[/if]
		[else]
		// setBehavior generated - TODO
		[/if]
	[/if]
    //End -----------------------------

	//set return / out parameters
	[for ( par : Parameter | anOpaqueBehavior.ownedParameter->select((direction = ParameterDirectionKind::_out) or (direction = ParameterDirectionKind::return))->sortedBy(name))]
    [par.generateOutputParameter()/]
	[if (not par.type.supportedTypes())]
	[par.name/]UmlLinker->setUmlValue[if(not (par.upper = 1))]s[/if]([par.name/]);
    [par.name/]UmlLinker->setLocus(this->getLocus());
    [par.name/]Value->setReferent([par.name/]UmlLinker);
	[else]
 	[par.name/]Value->setValue([par.name/]);
	[/if]
    outputParameters->at([anOpaqueBehavior.ownedParameter->select((direction = ParameterDirectionKind::_out) or (direction = ParameterDirectionKind::return))->sortedBy(name)->indexOf(par)-1/])->getValues()->push_back([par.name/]Value);
	[/for]

	//set InOut parameters
	[for ( par : Parameter | anOpaqueBehavior.ownedParameter->asOrderedSet()->select(direction = ParameterDirectionKind::inout)->sortedBy(name))]
	[if (par.direction <> ParameterDirectionKind::inout or not par.type.supportedTypes())]
	[par.generateOutputParameter()/]
	[/if]
	[if (not par.type.supportedTypes())]
	//Pointer type
	[par.name/]UmlLinker->setUmlValue[if(not (par.upper = 1))]s[/if]([par.name/]);
    [par.name/]UmlLinker->setLocus(this->getLocus());
    [par.name/]Value->setReferent([par.name/]UmlLinker);
	[else]
	//Simple type
 	[par.name/]Value->setValue([par.name/]);
	[/if]
    //outputParameters->push_back(inputParameters->at([anOpaqueBehavior.ownedParameter->select((direction = ParameterDirectionKind::inout) or (direction = ParameterDirectionKind::_in))->sortedBy(name)->indexOf(par)-1/]));
	[/for]
	DEBUG_MESSAGE(std::cout<< "^^^^^ FB [anOpaqueBehavior.name/] ends its execution ^^^^^" << std::endl;)
}

void [className/]::setThisExecutionPtr(std::weak_ptr<[className/]> thisExecutionPtr)
{
	setThisOpaqueBehaviorExecutionPtr(thisExecutionPtr);
}
[/file]
[/template]