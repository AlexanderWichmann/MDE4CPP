[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateActivityNode('http://www.eclipse.org/uml2/5.0.0/UML')]


[import UML4CPP::generator::main::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[template public generateActivityNodeCreation(anActivityNode : ActivityNode)]
[memberName(anActivityNode)/] = factory->create[anActivityNode.eClass().name/]_in_Activity([anActivityNode.owner.oclAsType(NamedElement).memberName()/]);
[memberName(anActivityNode)/]->setName("[anActivityNode.name/]");
[anActivityNode.generateActivityNodeSpecial()/]
[/template]

[template public generateActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(CallBehaviorAction) )]
//CallBehaviorAction [anActivityNode.name /]
[memberName(anActivityNode)/]->setBehavior([anActivityNode.oclAsType(CallBehaviorAction).behavior.oclAsType(NamedElement).memberName()/]);
[memberName(anActivityNode)/]->setIsSynchronous(true); //imposed by the fUML specification
[anActivityNode.oclAsType(CallBehaviorAction).input->sortedBy(name).generatePin()/]
[anActivityNode.oclAsType(CallBehaviorAction).output->sortedBy(name).generatePin()/]
[/template]

[template public generateActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(CallOperationAction) )]
//CallOperationAction [anActivityNode.name /]
[anActivityNode.oclAsType(CallOperationAction).input->sortedBy(name).generatePin()/]
[anActivityNode.oclAsType(CallOperationAction).output->sortedBy(name).generatePin()/]
[if (anActivityNode.getNearestPackage() = anActivityNode.oclAsType(CallOperationAction).operation.getNearestPackage())]
[anActivityNode.oclAsType(CallOperationAction).operation.generateOperation()/]
[/if]

[/template]

[template public generatePin(pin : Pin)]
//Pin owner type: [pin.owner.eClass().name/]
[if (pin.owner.oclIsKindOf(CallOperationAction))]
[if (pin.oclIsKindOf(InputPin)) and pin.owner.oclAsType(CallOperationAction).target = pin]
[memberName(pin)/] = factory->create[pin.eClass().name/]_in_CallOperationAction([pin.owner.oclAsType(NamedElement).memberName()/]);
[elseif (pin.oclIsKindOf(InputPin))]
[memberName(pin)/] = factory->create[pin.eClass().name/]_in_InvocationAction([pin.owner.oclAsType(NamedElement).memberName()/]);
[else]
[memberName(pin)/] = factory->create[pin.eClass().name/]_in_CallAction([pin.owner.oclAsType(NamedElement).memberName()/]);
[/if]
[elseif (pin.owner.oclIsKindOf(CallBehaviorAction))]
[if (pin.oclIsKindOf(InputPin))]
[memberName(pin)/] = factory->create[pin.eClass().name/]_in_InvocationAction([pin.owner.oclAsType(NamedElement).memberName()/]);
[else]
[memberName(pin)/] = factory->create[pin.eClass().name/]_in_CallAction([pin.owner.oclAsType(NamedElement).memberName()/]);
[/if]
[else]
//TODO: check containment type!
[memberName(pin)/] = factory->create[pin.eClass().name/]_in_Owner([pin.owner.oclAsType(NamedElement).memberName()/]);
[/if]
[memberName(pin)/]->setName("[pin.name/]");

[/template]

[template public generateOperation(operation : Operation)]
[memberName(operation)/] = factory->createOperation_in_Class([operation.owner.oclAsType(NamedElement).memberName()/]); //TODO: check if used 
[memberName(operation)/]->setName("[operation.name/]");

[/template]

[template public initializeActivityNode(anActivityNode : ActivityNode)]
[anActivityNode.initializeActivityNodeSpecial(anActivityNode)/]

[/template]

[template public initializeActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(ActivityParameterNode))]
[memberName(anActivityNode)/]->setParameter([memberName(anActivityNode.oclAsType(ActivityParameterNode).parameter)/]);

[/template]
 
[template public initializeActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(CallBehaviorAction))]
[memberName(anActivityNode)/]->setBehavior([anActivityNode.oclAsType(CallBehaviorAction).behavior.generatePackageGetterCall()/]);
[anActivityNode.oclAsType(CallBehaviorAction).input.initializePin()/]
[anActivityNode.oclAsType(CallBehaviorAction).output.initializePin()/]

[/template]

[template public initializeActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(CallOperationAction))]
[memberName(anActivityNode)/]->setOperation([anActivityNode.oclAsType(CallOperationAction).operation.generatePackageGetterCall()/]);
[anActivityNode.oclAsType(CallOperationAction).input.initializePin()/]
[anActivityNode.oclAsType(CallOperationAction).output.initializePin()/]

[/template]

[template public initializeActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(DecisionNode))]
[if (not anActivityNode.oclAsType(DecisionNode).decisionInput.oclIsUndefined())]
[memberName(anActivityNode)/]->setDecisionInput([memberName(anActivityNode.oclAsType(DecisionNode).decisionInput)/]);
[/if]

[/template]

[query public isTargetPin(pin : Pin) : Boolean = if (pin.owner.oclIsKindOf(CallOperationAction)) then pin.owner.oclAsType(CallOperationAction).target = pin else false endif/]

[template public initializePin(pin : Pin)]
[if (pin.oclIsKindOf(InputPin) and pin.isTargetPin())]
[memberName(pin.owner.oclAsType(NamedElement))/]->getInput()->push_back([memberName(pin)/]);
[/if]
[/template]