[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module helper('http://www.eclipse.org/uml2/5.0.0/UML','http://www.eclipse.org/emf/2002/Ecore')]

[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::keywords /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::validation::validateModel /]


[**
 * Generate a qualified name 
 * Chain 
*/]

[query public memberName(anElement : NamedElement) : String = anElement.myQualifiedName().sanitize().substituteAll('.', '_').toLowerFirst()/]
[query public memberNameUpper(anElement : NamedElement) : String = memberName().toUpperCase() /]

[query public classNumberName(aEClass : Class) : String = aEClass.name.toUpperCase() /]

[query public packageGetter(anElement1 : NamedElement, anElement2 : NamedElement) : String = if (anElement1.oclIsUndefined()) then 'nullptr' else anElement1.packageGetterHelper(anElement2) endif /]
[query private packageGetterHelper(anElement1 : NamedElement, anElement2 : NamedElement) : String = if (anElement1.getNearestPackage().oclIsUndefined()) then anElement1.handlePackageGetterError(anElement2.myName()) else needMetaModelPackageGetter(anElement1, anElement2).concat('get_').concat(anElement1.myQualifiedName().substituteAll('::','_').substituteAll('.','_')).concat('()') endif /]


[query public packageGetter(anElement1 : NamedElement) : String = if oclIsUndefined() then 'nullptr' else MetaModelPackageGetter(anElement1).concat('get_').concat(anElement1.myQualifiedName().sanitize()).concat('()') endif /]
[query public MetaModelPackageGetter(anElement1 : Element) : String = anElement1.getNearestPackage().name.concat('::').concat(anElement1.getNearestPackage().name.toUpperFirst()).concat('Package').concat('::eInstance()->') /]

[query public needMetaModelPackageGetter(anElement1 : Element, anElement2 : Element ) : String = if(anElement1.getNearestPackage() = anElement2.getNearestPackage() ) then '' else  anElement1.getNearestPackage().name.concat('::').concat(anElement1.getNearestPackage().name.toUpperFirst()).concat('Package').concat('::eInstance()->')  endif /]

[query public getClassList(aClass : Classifier) : OrderedSet(ecore::EClass) = OrderedSet(ecore::EClass){aClass.eClass().eAllSuperTypes , aClass.eClass()} /]

[query public metamodelClassTypeString(aClass : Classifier,aBaseName : String) : String = if aClass.ancestors()->filter(Package)->first().name = aClass.eClass().ePackage.name then aBaseName else aClass.eClass().ePackage.name.concat('::').concat(aBaseName) endif /]

[query public metamodelClassTypeString(anElement : Element) : String = if anElement.getNearestPackage().name = anElement.eClass().ePackage.name then anElement.eClass().name else anElement.eClass().ePackage.name.concat('::').concat(anElement.eClass().name) endif /]

[query public ClassWithNamespace(aClass : Class, base : Class) : String = if aClass.namespace.myNamespaceName() = base.namespace.myNamespaceName() or aClass.getNearestPackage().ignoreNamespace() then base.name.toUpperFirst() else base.namespace.myNamespaceName().concat('::').concat(base.name.toUpperFirst()) endif /]
[query public InterfaceWithNamespace(anInterface : Interface, base : Classifier) : String = if anInterface.namespace.myNamespaceName() = base.namespace.myNamespaceName() or anInterface.getNearestPackage().ignoreNamespace() then base.name.toUpperFirst() else base.namespace.myNamespaceName().concat('::').concat(base.name.toUpperFirst()) endif /]
 
[query public creatorFunction(aType : Type) : String =  metaModelFactory(aType).concat('create').concat(aType.name.toUpperFirst()).concat('()')/]
[query public metaModelFactory(aType : Type) : String = aType.getNearestPackage().name.concat('::').concat(aType.getNearestPackage().name).concat('Factory::eInstance()->')/]



[**
 * helper for container based creation
*/]


[template private handlePackageGetterError(failureElement : NamedElement, name : String)]
nullptr['cannot terminate package of element '.concat(failureElement.toString()).concat(' used by ').concat(name).registerError()/]
[/template]