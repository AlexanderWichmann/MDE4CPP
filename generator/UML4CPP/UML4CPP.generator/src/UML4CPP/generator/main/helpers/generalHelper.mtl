[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for name check and qualified name generation
 * 
 */]
[module generalHelper('http://www.eclipse.org/uml2/5.0.0/UML','http://www.eclipse.org/emf/2002/Ecore')]

[import UML4CPP::generator::main::helpers::keywords /]

[**
 *  query to generate c++ abstract suffix
*/]
[query public abstractSuffix(impl : Boolean) : String = if impl then '' else ' = 0' endif/]

[** 
 * queries to read out values of source gen annotation 
*/]
[query private hasSourceGen(aElement : Element) : Boolean = eAnnotations->select(source = keySourceGen())->notEmpty()/]
[query private getSourceGen(aElement : Element) : EAnnotation = eAnnotations->select(source = keySourceGen())->first()/]
[query private hasKey(aElement : Element, aKey:String) : Boolean = if aElement.hasSourceGen() then aElement.getSourceGen().details->select(key = aKey)->notEmpty() else false endif /]
[query public valueKey(aElement : Element, aKey:String) : String = if (hasKey(aKey)) then aElement.getSourceGen().details->select(key = aKey)->first().value else '' endif/]

[**
 * queries to check values of codeGen annotation keys
*/]
[query public ignoreNamespace(anElement : Element) : Boolean = anElement.getNearestPackage().valueKey(keyIgnoreNamespace()) = '1' /] [** check, if namespace should be igored./]
[query public isSingleton(anElement : Element) : Boolean = anElement.valueKey(keySingleton()) = '1' /]	[** check, if a singleton construct should be generated /]
