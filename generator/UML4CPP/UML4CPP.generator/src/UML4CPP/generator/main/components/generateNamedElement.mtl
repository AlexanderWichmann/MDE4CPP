[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of UML Element NamedElement artefacts
 * 
 */]
[module generateNamedElement('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]

[**
 * generate getter function declaration for meta model element
*/]
[template public generatePackageMemberGetter(anElement : NamedElement,impl : Boolean)]
virtual std::shared_ptr<[anElement.getMetaClassName()/]> [anElement.generatePackageGetterCall(anElement)/][abstractSuffix(impl)/];

[/template]


[**
 * generate getter function implementation for meta model element
*/]
[template public generatePackageMemberGetterImpl(anElement : NamedElement)]
std::shared_ptr<[anElement.getMetaClassName()/]> [anElement.getNearestPackage().name.toUpperFirst()/]PackageImpl::[anElement.generatePackageGetterCall(anElement)/]
{
	return [anElement.memberName()/];
}

[/template]

[**
 * generate member declaration for meta model element
*/]
[template public generatePackageMember(anElement : NamedElement)]
std::shared_ptr<[anElement.getMetaClassName()/]> [anElement.memberName()/] = nullptr;

[/template]