[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 ****************************************************************************************************************************************************************
 * 
 * module for generation of UML Element ActivityNode artefacts and Pin Artefacts
 * 
 */]
[module generateActivityNode('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::components::generateType /]
[import UML4CPP::generator::main::helpers::generalHelper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
[import UML4CPP::generator::main::validation::validateModel /]

[**
 * generate creation of meta model instance for an ActivtiyNode or derived element
 * 
 * this includes:
 * - creation of ActivityNode or derived element
 * - creation of derived element specific artefacts by calling template generateActivityNodeSpecial
*/]
[template public generateActivityNodeCreation(anActivityNode : ActivityNode)]
//ActivityNode [anActivityNode.name /] ([anActivityNode.eClass().name/])
[anActivityNode.memberName()/] = factory->create[anActivityNode.eClass().name/]_in_Activity([anActivityNode.owner.oclAsType(NamedElement).memberName()/]);
[anActivityNode.generateActivityNodeSpecial()/]

[/template]

[**
 * generate creation of meta model instances used by Action
 * 
 * this includes:
 * - creation of Input pins
 * - creation of Output pins
*/]
[template private generateActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(Action) and not oclIsKindOf(AddStructuralFeatureValueAction) and not oclIsKindOf(CreateObjectAction))]
[anActivityNode.oclAsType(Action).input->sortedBy(name).generatePin()/]
[anActivityNode.oclAsType(Action).output->sortedBy(name).generatePin()/]
[if (anActivityNode.oclIsKindOf(ReadSelfAction))]
	[anActivityNode.oclAsType(ReadSelfAction).generateReadSelfActionCommands()/]
[/if]
[if (anActivityNode.oclIsKindOf(DestroyObjectAction))]
	[anActivityNode.oclAsType(DestroyObjectAction).generateDestroyObjectActionCommands()/]
[/if]
[/template]

[**
 * generate elements for AddStructuralFeatureValueAction
*/]
[template private generateActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(AddStructuralFeatureValueAction))]
[let action : AddStructuralFeatureValueAction = self.oclAsType(AddStructuralFeatureValueAction)]
	[action.object.memberName()/] = factory->create[action.object.eClass().name/]_in_StructuralFeatureAction([action.object.owner.oclAsType(NamedElement).memberName()/]);
	[action.memberName()/]->getInput()->push_back([action.object.memberName()/]); // subset/union in not implemented for upper=1
	[action.value.memberName()/] = factory->create[action.value.eClass().name/]_in_WriteStructuralFeatureAction([action.value.owner.oclAsType(NamedElement).memberName()/]);
	[action.memberName()/]->getInput()->push_back([action.value.memberName()/]); // subset/union in not implemented for upper=1
	[action.result.memberName()/] = factory->create[action.result.eClass().name/]_in_WriteStructuralFeatureAction([action.result.owner.oclAsType(NamedElement).memberName()/]);
	[action.memberName()/]->getOutput()->push_back([action.result.memberName()/]); // subset/union in not implemented for upper=1
[if (not action.insertAt.oclIsUndefined())]
	[action.insertAt.memberName()/] = factory->create[action.insertAt.eClass().name/]_in_AddStructuralFeatureValueAction([action.insertAt.owner.oclAsType(NamedElement).memberName()/]);
	[action.memberName()/]->getInput()->push_back([action.insertAt.memberName()/]); // subset/union in not implemented for upper=1
[/if]
[/let]
[/template]

[**
 * generate elements for CreateObjectAction
*/]
[template private generateActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(CreateObjectAction))]
[let action : CreateObjectAction = self.oclAsType(CreateObjectAction)]
	[action.result.memberName()/] = factory->create[action.result.eClass().name/]_in_CreateObjectAction([action.result.owner.oclAsType(NamedElement).memberName()/]);
	[action.memberName()/]->getOutput()->push_back([action.result.memberName()/]); // subset/union in not implemented for upper=1
[/let]
[/template]

[**
 * generate creation of meta model instance for input and output pins
*/]
[template private generatePin(pin : Pin)]
//Pin owner type: [pin.owner.eClass().name/]
[if (pin.owner.oclIsKindOf(CallOperationAction))]
	[if (pin.oclIsKindOf(InputPin)) and pin.owner.oclAsType(CallOperationAction).target = pin]
	[pin.memberName()/] = factory->create[pin.eClass().name/]_in_CallOperationAction([pin.owner.oclAsType(NamedElement).memberName()/]);
	[elseif (pin.oclIsKindOf(InputPin))]
	[pin.memberName()/] = factory->create[pin.eClass().name/]_in_InvocationAction([pin.owner.oclAsType(NamedElement).memberName()/]);
		[else]
	[pin.memberName()/] = factory->create[pin.eClass().name/]_in_CallAction([pin.owner.oclAsType(NamedElement).memberName()/]);
		[/if]
	[elseif (pin.owner.oclIsKindOf(CallBehaviorAction))]
		[if (pin.oclIsKindOf(InputPin))]
	[pin.memberName()/] = factory->create[pin.eClass().name/]_in_InvocationAction([pin.owner.oclAsType(NamedElement).memberName()/]);
		[else]
	[pin.memberName()/] = factory->create[pin.eClass().name/]_in_CallAction([pin.owner.oclAsType(NamedElement).memberName()/]);
		[/if]
[elseif (pin.owner.oclIsKindOf(ValueSpecificationAction))]
	[pin.memberName()/] = factory->create[pin.eClass().name/]_in_ValueSpecificationAction([pin.owner.oclAsType(NamedElement).memberName()/]);
[elseif (pin.owner.oclIsKindOf(Action))]
	[pin.memberName()/] = factory->create[pin.eClass().name/]_in_Action([pin.owner.oclAsType(NamedElement).memberName()/]);
[else]
	[pin.memberName()/] = factory->create[pin.eClass().name/]_in_Owner([pin.owner.oclAsType(NamedElement).memberName()/]);
[/if]
[/template]

[**
 * generate elements for ReadSelfAction
*/]
[template private generateReadSelfActionCommands(aReadSelfAction : ReadSelfAction)]
[if (aReadSelfAction.result.oclIsUndefined())]
['UML4CPP_Generation Error: ReadSelfAction: '.concat(aReadSelfAction.name).concat(' result pin invalid.').registerError()/]
[else]
[aReadSelfAction.result.memberName()/]->setName("[aReadSelfAction.result.name/]");
[aReadSelfAction.memberName()/]->setResult([aReadSelfAction.result.memberName()/]);
[/if]
[/template]

[**
 * generate elements for DestroyObjectAction
*/]
[template private generateDestroyObjectActionCommands(aDestroyObjectAction : DestroyObjectAction)]
[if (aDestroyObjectAction.target.oclIsUndefined())]
['UML4CPP_Generation Error: DestroyObjectAction: '.concat(aDestroyObjectAction.name).concat(' target pin invalid.').registerError()/]
[else]
[aDestroyObjectAction.target.memberName()/]->setName("[aDestroyObjectAction.target.name/]");
[aDestroyObjectAction.memberName()/]->setTarget([aDestroyObjectAction.target.memberName()/]);
[/if]
[/template]

[**
 * generate initialization of meta model instance for an ActivtiyNode or derived element
 * 
 * this includes:
 * - set ActivtiyNode name
 * - initialization of derived element specific properties
*/]
[template public initializeActivityNode(anActivityNode : ActivityNode)]
//ActivityNode [anActivityNode.name /] ([anActivityNode.eClass().name/])
[anActivityNode.memberName()/]->setName("[anActivityNode.name/]");
[anActivityNode.initializeActivityNodeSpecial(anActivityNode)/]
[/template]

[**
 * generate initialization of meta model instance for an ActivityParameterNode element
 * 
 * this includes:
 * - set parameter
*/]
[template private initializeActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(ActivityParameterNode))]
[anActivityNode.memberName()/]->setParameter([anActivityNode.oclAsType(ActivityParameterNode).parameter.memberName()/]);

[/template]

[**
 * generate initialization of meta model instance for an AddStructuralFeatureValueAction element
 * 
 * this includes:
 * - add object pin to input
 * - initialize pins
 * - set structuralFeature
 * - set isReplaceAll
*/]
[template private initializeActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(AddStructuralFeatureValueAction))]
[let action : AddStructuralFeatureValueAction = self.oclAsType(AddStructuralFeatureValueAction)]
	[action.input.initializePin()/]
	[action.output.initializePin()/]
	[action.memberName()/]->setStructuralFeature([action.structuralFeature.memberName()/]);
	[action.memberName()/]->setIsReplaceAll([action.isReplaceAll/]);
[/let]
[/template]

[**
 * generate initialization of meta model instance for an CallBehaviorAction element
 * 
 * this includes:
 * - set behavior
 * - set isSynchronous to 'true'
 * - initalize input and output pins
*/]
[template private initializeActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(CallBehaviorAction))]
[anActivityNode.memberName()/]->setBehavior([anActivityNode.oclAsType(CallBehaviorAction).behavior.generatePackageGetterCall()/]);
[anActivityNode.memberName()/]->setIsSynchronous(true); //imposed by the fUML specification
[anActivityNode.oclAsType(CallBehaviorAction).input.initializePin()/]
[anActivityNode.oclAsType(CallBehaviorAction).output.initializePin()/]
[/template]

[**
 * generate initialization of meta model instance for an CallOperationAction element
 * 
 * this includes:
 * - set operation
 * - initalize input and output pins
*/]
[template private initializeActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(CallOperationAction))]
[anActivityNode.memberName()/]->setOperation([anActivityNode.oclAsType(CallOperationAction).operation.generatePackageGetterCall()/]);
[anActivityNode.oclAsType(CallOperationAction).input.initializePin()/]
[anActivityNode.oclAsType(CallOperationAction).output.initializePin()/]
[/template]

[**
 * generate initialization of meta model instance for an CreateObjectAction element
 * 
 * this includes:
 * - initialize pins
*/]
[template private initializeActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(CreateObjectAction))]
[let action : CreateObjectAction = self.oclAsType(CreateObjectAction)]
[action.output.initializePin()/]
[action.memberName()/]->setClassifier([action.classifier.memberName()/]);
[/let]
[/template]

[**
 * generate initialization of meta model instance for an DecisionNode element
 * 
 * this includes:
 * - set decisionInput if defined
*/]
[template private initializeActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(DecisionNode))]
[if (not anActivityNode.oclAsType(DecisionNode).decisionInput.oclIsUndefined())]
[anActivityNode.memberName()/]->setDecisionInput([memberName(anActivityNode.oclAsType(DecisionNode).decisionInput)/]);
[/if]
[/template]

[**
 * generate initialization of meta model instance for an ValueSpecificationAction element
 * 
 * this includes:
 * - set value if defined
 * - set output if defined
*/]
[template private initializeActivityNodeSpecial(anActivityNode : ActivityNode) ? (oclIsKindOf(ValueSpecificationAction))]
[if (not anActivityNode.oclAsType(ValueSpecificationAction).value.oclIsUndefined())]
[anActivityNode.memberName()/]->setValue([memberName(anActivityNode.oclAsType(ValueSpecificationAction).value)/]);
[/if]
[if (not anActivityNode.oclAsType(ValueSpecificationAction).result.oclIsUndefined())]
[anActivityNode.oclAsType(ValueSpecificationAction).result.memberName()/]->setName("[anActivityNode.oclAsType(ValueSpecificationAction).name/]");
[memberName(anActivityNode)/]->getOutput()->push_back([anActivityNode.oclAsType(ValueSpecificationAction).result.memberName()/]);
[/if]
[/template]

[**
 * query to check, if a pin is a target pin of CallOperationAction instance
*/]
[query private isTargetPin(pin : Pin) : Boolean = if (pin.owner.oclIsKindOf(CallOperationAction)) then pin.owner.oclAsType(CallOperationAction).target = pin else false endif/]

[**
 * generate initialization of meta model instance for an Pin element
 * 
 * this includes:
 * - set name
 * - if pin is a target pin, add to input pin list of CallOperationAction instance
*/]
[template private initializePin(pin : Pin)]
[pin.memberName()/]->setName("[pin.name/]");
[if (pin.oclIsKindOf(InputPin) and pin.isTargetPin())]
[memberName(pin.owner.oclAsType(NamedElement))/]->getInput()->push_back([pin.memberName()/]);
[/if]
[/template]