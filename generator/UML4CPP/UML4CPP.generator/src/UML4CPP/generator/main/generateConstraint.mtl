[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateConstraint('http://www.eclipse.org/uml2/5.0.0/UML')/]

[import UML4CPP::generator::main::generateAttribute /]
[import UML4CPP::generator::main::helper /]
[import UML4CPP::generator::main::helpers::nameHelper /]
 
[template public generateConstraintCreation(aConstraint : Constraint)]
con = factory->createConstraint_in_Context([memberName(aConstraint.owner.oclAsType(Class))/]);
con->setName("[aConstraint.name/]");
[for (elem : Element | aConstraint.constrainedElement->asOrderedSet()->sortedBy(myQualifiedName())) separator ('\n')]
con->getConstrainedElement()->push_back([elem.appendTypeRes()/]);[/for]

oe = std::shared_ptr<uml::OpaqueExpression>(uml::UmlFactory::eInstance()->createOpaqueExpression_in_Owner([memberName(aConstraint.owner.oclAsType(Class))/]));
[for (it : String | aConstraint.specification.oclAsType(OpaqueExpression).language) separator ('\n')]
oe->getLanguage()->push_back(std::shared_ptr<std::string>(new std::string("[it/]")));
[/for]
[for (it : String | aConstraint.specification.oclAsType(OpaqueExpression)._body) separator ('\n')]
oe->getBody()->push_back(std::shared_ptr<std::string>(new std::string("[it.substituteAll('\n', '').substituteAll('\r','"\\\r\n"') /]")));
[/for]
con->setSpecification(oe);
[/template]

[template public appendTypeRes(elem : Element) ? (oclIsKindOf(Property))]
[elem.oclAsType(Property).memberName()/]
[/template]

[template public appendTypeRes(elem : Element) ? (oclIsKindOf(Class))]
[elem.oclAsType(Class).memberName()/]
[/template]