#include "CalcModel/impl/CalcModelPackageImpl.hpp"

//meta meta model classes
#include "uml/Activity.hpp"
#include "uml/ActivityFinalNode.hpp"
#include "uml/CallBehaviorAction.hpp"
#include "uml/CallOperationAction.hpp"
#include "uml/ChangeEvent.hpp"
#include "uml/Class.hpp"
#include "uml/ControlFlow.hpp"
#include "uml/DecisionNode.hpp"
#include "uml/FunctionBehavior.hpp"
#include "uml/InitialNode.hpp"
#include "uml/InputPin.hpp"
#include "uml/LiteralBoolean.hpp"
#include "uml/LiteralInteger.hpp"
#include "uml/LiteralString.hpp"
#include "uml/MergeNode.hpp"
#include "uml/ObjectFlow.hpp"
#include "uml/Operation.hpp"
#include "uml/OutputPin.hpp"
#include "uml/Parameter.hpp"
#include "uml/PrimitiveType.hpp"
#include "uml/Property.hpp"

#include "abstractDataTypes/SubsetUnion.hpp"
//meta meta model factory
#include "uml/UmlFactory.hpp"

//metamodel factory
#include "CalcModel/CalcModelFactory.hpp"

//depending model packages
#include "primitivetypesReflection/PrimitiveTypesPackage.hpp"



using namespace CalcModel;

CalcModelPackageImpl::CalcModelPackageImpl()
{
}

CalcModelPackageImpl::~CalcModelPackageImpl()
{
}

bool CalcModelPackageImpl::isInited = false;

CalcModelPackage* CalcModelPackageImpl::create()
{
	if (isInited)
	{
		return CalcModelPackage::eInstance().get();
	}
	isInited = true;
	
    // Obtain or create and register package, create package meta-data objects
    CalcModelPackageImpl * metaModelPackage = new CalcModelPackageImpl();
	metaModelPackage->initMetaModel();
    metaModelPackage->createPackageContents();
    return metaModelPackage;
}

void CalcModelPackageImpl::init()
{
    // Initialize created meta-data
    initializePackageContents();   
}

void CalcModelPackageImpl::initMetaModel()
{
}

void CalcModelPackageImpl::createPackageContents()
{
	if (isCreated)
	{
		return;
	}
	isCreated = true;

	struct null_deleter{void operator()(void const *) const {} };
	std::shared_ptr<CalcModelPackageImpl> calcModel = std::shared_ptr<CalcModelPackageImpl>(this, null_deleter());
	std::shared_ptr<uml::UmlFactory> factory = uml::UmlFactory::eInstance();

	createPackageValueSpecifications(calcModel, factory);
	createPackageInterfaces(calcModel, factory);
	createPackageClasses(calcModel, factory);
	createPackageInstanceSpecifications(calcModel, factory);
	createPackageStereotypes(calcModel, factory);
	createPackageActivities(calcModel, factory);
	createPackageDependencies(calcModel, factory);
	createPackagePrimitiveTypes(calcModel, factory);
	createPackageEnumerationLiterals(calcModel, factory);
}

void CalcModelPackageImpl::createPackageActivities(std::shared_ptr<CalcModelPackageImpl> calcModel, std::shared_ptr<uml::UmlFactory> factory)
{
	calcModel_PrimeChecker_CheckIfPrime = factory->createActivity_in_Package(calcModel);
	calcModel_PrimeChecker_CheckIfPrime_CalcModel_PrimeChecker_CheckIfPrime_actInputNode = factory->createParameter_in_Behavior(calcModel_PrimeChecker_CheckIfPrime);
	
	//Node
	calcModel_PrimeChecker_CheckIfPrimeActivityFinal1 = factory->createActivityFinalNode_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimeActivityFinal1->setName("ActivityFinal1");
	calcModel_PrimeChecker_CheckIfPrimeActivityFinal2 = factory->createActivityFinalNode_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimeActivityFinal2->setName("ActivityFinal2");
	calcModel_PrimeChecker_CheckIfPrimeActivityFinal3 = factory->createActivityFinalNode_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimeActivityFinal3->setName("ActivityFinal3");
	calcModel_PrimeChecker_CheckIfPrimeInitial1 = factory->createInitialNode_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimeInitial1->setName("Initial1");
	calcModel_PrimeChecker_CheckIfPrimeMerge = factory->createMergeNode_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimeMerge->setName("Merge");
	calcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime = factory->createCallBehaviorAction_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime->setName("cbaPrintIsPrime");
	//CallBehaviorAction cbaPrintIsPrime
	calcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime->setBehavior(calcModel_PrimeChecker_fbPrintIsPrime);
	calcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime->setIsSynchronous(true); //imposed by the fUML specification
	
	calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime = factory->createCallBehaviorAction_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime->setName("cbaPrintNotPrime");
	//CallBehaviorAction cbaPrintNotPrime
	calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime->setBehavior(calcModel_PrimeChecker_fbPrintNotPrime);
	calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime->setIsSynchronous(true); //imposed by the fUML specification
	
	calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2 = factory->createCallBehaviorAction_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2->setName("cbaPrintNotPrime2");
	//CallBehaviorAction cbaPrintNotPrime2
	calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2->setBehavior(calcModel_PrimeChecker_fbPrintNotPrime);
	calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2->setIsSynchronous(true); //imposed by the fUML specification
	
	calcModel_PrimeChecker_CheckIfPrimecoaDivides = factory->createCallOperationAction_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimecoaDivides->setName("coaDivides");
	//CallOperationAction coaDivides
	//Pin owner type: CallOperationAction
	inputPin_coaDividesself = factory->createInputPin_in_CallOperationAction(calcModel_PrimeChecker_CheckIfPrimecoaDivides);
	inputPin_coaDividesself->setName("self");
	
	//Pin owner type: CallOperationAction
	outputPin_coaDividesisDivisible = factory->createOutputPin_in_CallAction(calcModel_PrimeChecker_CheckIfPrimecoaDivides);
	outputPin_coaDividesisDivisible->setName("isDivisible");
	
	calcModel_PrimeChecker_divides_ = factory->createOperation_in_Class(calcModel_PrimeChecker); //TODO: check if used 
	calcModel_PrimeChecker_divides_->setName("divides");
	
	
	calcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished = factory->createCallOperationAction_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished->setName("coaIsNotFinished");
	//CallOperationAction coaIsNotFinished
	//Pin owner type: CallOperationAction
	inputPin_coaIsNotFinishedself = factory->createInputPin_in_CallOperationAction(calcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished);
	inputPin_coaIsNotFinishedself->setName("self");
	
	//Pin owner type: CallOperationAction
	outputPin_coaIsNotFinishedisNotFinished = factory->createOutputPin_in_CallAction(calcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished);
	outputPin_coaIsNotFinishedisNotFinished->setName("isNotFinished");
	
	calcModel_PrimeChecker_isNotFinished_ = factory->createOperation_in_Class(calcModel_PrimeChecker); //TODO: check if used 
	calcModel_PrimeChecker_isNotFinished_->setName("isNotFinished");
	
	
	calcModel_PrimeChecker_CheckIfPrimecoaIsOdd = factory->createCallOperationAction_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimecoaIsOdd->setName("coaIsOdd");
	//CallOperationAction coaIsOdd
	//Pin owner type: CallOperationAction
	inputPin_coaIsOddself = factory->createInputPin_in_CallOperationAction(calcModel_PrimeChecker_CheckIfPrimecoaIsOdd);
	inputPin_coaIsOddself->setName("self");
	
	//Pin owner type: CallOperationAction
	outputPin_coaIsOddisOdd = factory->createOutputPin_in_CallAction(calcModel_PrimeChecker_CheckIfPrimecoaIsOdd);
	outputPin_coaIsOddisOdd->setName("isOdd");
	
	calcModel_PrimeChecker_isOdd_ = factory->createOperation_in_Class(calcModel_PrimeChecker); //TODO: check if used 
	calcModel_PrimeChecker_isOdd_->setName("isOdd");
	
	
	calcModel_PrimeChecker_CheckIfPrimecoaNext = factory->createCallOperationAction_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimecoaNext->setName("coaNext");
	//CallOperationAction coaNext
	//Pin owner type: CallOperationAction
	inputPin_coaNextself = factory->createInputPin_in_CallOperationAction(calcModel_PrimeChecker_CheckIfPrimecoaNext);
	inputPin_coaNextself->setName("self");
	
	
	calcModel_PrimeChecker_next_ = factory->createOperation_in_Class(calcModel_PrimeChecker); //TODO: check if used 
	calcModel_PrimeChecker_next_->setName("next");
	
	
	calcModel_PrimeChecker_CheckIfPrimedn_IsOdd = factory->createDecisionNode_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimedn_IsOdd->setName("dn_IsOdd");
	calcModel_PrimeChecker_CheckIfPrimedn_divides = factory->createDecisionNode_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimedn_divides->setName("dn_divides");
	calcModel_PrimeChecker_CheckIfPrimedn_isNotFinished = factory->createDecisionNode_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimedn_isNotFinished->setName("dn_isNotFinished");
	
	//flow
	cF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd = factory->createControlFlow_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd->setName("");
	cF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides = factory->createControlFlow_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides->setName("");
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3 = factory->createControlFlow_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3->setName("");
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1 = factory->createControlFlow_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1->setName("");
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2 = factory->createControlFlow_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2->setName("");
	cF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished = factory->createControlFlow_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished->setName("");
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge = factory->createControlFlow_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge->setName("");
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2 = factory->createControlFlow_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2->setName("");
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime = factory->createControlFlow_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime->setName("");
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext = factory->createControlFlow_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext->setName("");
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge = factory->createControlFlow_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge->setName("");
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime = factory->createControlFlow_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime->setName("");
	calcModel_PrimeChecker_CheckIfPrimeifDivides = factory->createObjectFlow_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimeifDivides->setName("ifDivides");
	calcModel_PrimeChecker_CheckIfPrimeifIsNotFinished = factory->createObjectFlow_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimeifIsNotFinished->setName("ifIsNotFinished");
	calcModel_PrimeChecker_CheckIfPrimeifIsOdd = factory->createObjectFlow_in_Activity(calcModel_PrimeChecker_CheckIfPrime);
	calcModel_PrimeChecker_CheckIfPrimeifIsOdd->setName("ifIsOdd");
	
}

void CalcModelPackageImpl::createPackageClasses(std::shared_ptr<CalcModelPackageImpl> calcModel, std::shared_ptr<uml::UmlFactory> factory)
{
	std::shared_ptr<uml::Constraint> con = nullptr;
	std::shared_ptr<uml::OpaqueExpression> oe = nullptr;

	// PrimeChecker
	calcModel_PrimeChecker = factory->createClass_in_Package(calcModel);
	
    // PrimeChecker attributes
	calcModel_PrimeChecker_divider = factory->createProperty_in_Class(calcModel_PrimeChecker);
	calcModel_PrimeChecker_number = factory->createProperty_in_Class(calcModel_PrimeChecker);

    // PrimeChecker operations
	calcModel_PrimeChecker_divides_ = factory->createOperation_in_Class(calcModel_PrimeChecker);
	calcModel_PrimeChecker_divides_isDivisible = factory->createParameter_in_Operation(calcModel_PrimeChecker_divides_);

	calcModel_PrimeChecker_isNotFinished_ = factory->createOperation_in_Class(calcModel_PrimeChecker);
	calcModel_PrimeChecker_isNotFinished_isNotFinished = factory->createParameter_in_Operation(calcModel_PrimeChecker_isNotFinished_);

	calcModel_PrimeChecker_isOdd_ = factory->createOperation_in_Class(calcModel_PrimeChecker);
	calcModel_PrimeChecker_isOdd_isOdd = factory->createParameter_in_Operation(calcModel_PrimeChecker_isOdd_);

	calcModel_PrimeChecker_next_ = factory->createOperation_in_Class(calcModel_PrimeChecker);

	calcModel_PrimeChecker_printIsPrime_ = factory->createOperation_in_Class(calcModel_PrimeChecker);

	calcModel_PrimeChecker_printNotPrime_ = factory->createOperation_in_Class(calcModel_PrimeChecker);

    // PrimeChecker function behaviors
	calcModel_PrimeChecker_fbDivides = factory->createFunctionBehavior_in_BehavioredClassifier(calcModel_PrimeChecker);
	calcModel_PrimeChecker_fbDivides_isDivisible = factory->createParameter_in_Behavior(calcModel_PrimeChecker_fbDivides);
	

	calcModel_PrimeChecker_fbNext = factory->createFunctionBehavior_in_BehavioredClassifier(calcModel_PrimeChecker);
	

	calcModel_PrimeChecker_fbPrintNotPrime = factory->createFunctionBehavior_in_BehavioredClassifier(calcModel_PrimeChecker);
	

	calcModel_PrimeChecker_fbPrintIsPrime = factory->createFunctionBehavior_in_BehavioredClassifier(calcModel_PrimeChecker);
	

	calcModel_PrimeChecker_fbIsOdd = factory->createFunctionBehavior_in_BehavioredClassifier(calcModel_PrimeChecker);
	calcModel_PrimeChecker_fbIsOdd_isOdd = factory->createParameter_in_Behavior(calcModel_PrimeChecker_fbIsOdd);
	

	calcModel_PrimeChecker_fbIsNotFinished = factory->createFunctionBehavior_in_BehavioredClassifier(calcModel_PrimeChecker);
	calcModel_PrimeChecker_fbIsNotFinished_isNotFinished = factory->createParameter_in_Behavior(calcModel_PrimeChecker_fbIsNotFinished);
	

}

void CalcModelPackageImpl::createPackageDependencies(std::shared_ptr<CalcModelPackageImpl> calcModel, std::shared_ptr<uml::UmlFactory> factory)
{
}

void CalcModelPackageImpl::createPackageEnumerationLiterals(std::shared_ptr<CalcModelPackageImpl> calcModel, std::shared_ptr<uml::UmlFactory> factory)
{
}

void CalcModelPackageImpl::createPackageInstanceSpecifications(std::shared_ptr<CalcModelPackageImpl> calcModel, std::shared_ptr<uml::UmlFactory> factory)
{
}

void CalcModelPackageImpl::createPackageInterfaces(std::shared_ptr<CalcModelPackageImpl> calcModel, std::shared_ptr<uml::UmlFactory> factory)
{
}

void CalcModelPackageImpl::createPackagePrimitiveTypes(std::shared_ptr<CalcModelPackageImpl> calcModel, std::shared_ptr<uml::UmlFactory> factory)
{
}

void CalcModelPackageImpl::createPackageStereotypes(std::shared_ptr<CalcModelPackageImpl> calcModel, std::shared_ptr<uml::UmlFactory> factory)
{
}

void CalcModelPackageImpl::createPackageValueSpecifications(std::shared_ptr<CalcModelPackageImpl> calcModel, std::shared_ptr<uml::UmlFactory> factory)
{
	cF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd = factory->createLiteralBoolean_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd));
	cF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd->setValue(true);

	cF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd = factory->createLiteralInteger_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd));
	cF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd->setValue(0);

	cF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides = factory->createLiteralBoolean_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides));
	cF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides->setValue(true);

	cF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides = factory->createLiteralInteger_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides));
	cF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides->setValue(0);

	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3 = factory->createLiteralBoolean_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3));
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3->setValue(true);

	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3 = factory->createLiteralInteger_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3));
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3->setValue(0);

	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1 = factory->createLiteralBoolean_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1));
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1->setValue(true);

	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1 = factory->createLiteralInteger_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1));
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1->setValue(0);

	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2 = factory->createLiteralBoolean_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2));
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2->setValue(true);

	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2 = factory->createLiteralInteger_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2));
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2->setValue(0);

	cF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished = factory->createLiteralBoolean_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished));
	cF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished->setValue(true);

	cF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished = factory->createLiteralInteger_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished));
	cF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished->setValue(0);

	cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge = factory->createLiteralBoolean_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge));
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge->setValue(true);

	cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2 = factory->createLiteralBoolean_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2));
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2->setValue(false);

	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime = factory->createLiteralBoolean_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime));
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime->setValue(true);

	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime = factory->createLiteralInteger_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime));
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime->setValue(0);

	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext = factory->createLiteralBoolean_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext));
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext->setValue(false);

	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext = factory->createLiteralInteger_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext));
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext->setValue(0);

	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge = factory->createLiteralBoolean_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge));
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge->setValue(true);

	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime = factory->createLiteralBoolean_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime));
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime->setValue(false);

	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime = factory->createLiteralInteger_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime));
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_weight_LiteralInteger_CF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime->setValue(0);

	calcModel_PrimeChecker_divider_defaultValue_LiteralInteger_CalcModel_PrimeChecker_divider = factory->createLiteralInteger_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(calcModel_PrimeChecker_divider));
	calcModel_PrimeChecker_divider_defaultValue_LiteralInteger_CalcModel_PrimeChecker_divider->setValue(3);

	calcModel_PrimeChecker_divides_isDivisible_defaultValue_LiteralString_CalcModel_PrimeChecker_divides_isDivisible = factory->createLiteralString_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(calcModel_PrimeChecker_divides_isDivisible));
	calcModel_PrimeChecker_divides_isDivisible_defaultValue_LiteralString_CalcModel_PrimeChecker_divides_isDivisible->setValue("");

	calcModel_PrimeChecker_fbDivides_isDivisible_defaultValue_LiteralString_CalcModel_PrimeChecker_fbDivides_isDivisible = factory->createLiteralString_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(calcModel_PrimeChecker_fbDivides_isDivisible));
	calcModel_PrimeChecker_fbDivides_isDivisible_defaultValue_LiteralString_CalcModel_PrimeChecker_fbDivides_isDivisible->setValue("");

	calcModel_PrimeChecker_fbIsOdd_isOdd_defaultValue_LiteralString_CalcModel_PrimeChecker_fbIsOdd_isOdd = factory->createLiteralString_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(calcModel_PrimeChecker_fbIsOdd_isOdd));
	calcModel_PrimeChecker_fbIsOdd_isOdd_defaultValue_LiteralString_CalcModel_PrimeChecker_fbIsOdd_isOdd->setValue("");

	calcModel_PrimeChecker_isOdd_isOdd_defaultValue_LiteralString_CalcModel_PrimeChecker_isOdd_isOdd = factory->createLiteralString_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(calcModel_PrimeChecker_isOdd_isOdd));
	calcModel_PrimeChecker_isOdd_isOdd_defaultValue_LiteralString_CalcModel_PrimeChecker_isOdd_isOdd->setValue("");

	calcModel_PrimeChecker_number_defaultValue_LiteralInteger_CalcModel_PrimeChecker_number = factory->createLiteralInteger_in_Namespace(std::dynamic_pointer_cast<uml::Namespace>(calcModel_PrimeChecker_number));
	calcModel_PrimeChecker_number_defaultValue_LiteralInteger_CalcModel_PrimeChecker_number->setValue(524287);
}

void CalcModelPackageImpl::initializePackageContents()
{
	if (isInitialized)
	{
		return;
	}
	isInitialized = true;

	// Initialize package
	setName(eNAME);
	setURI(eNS_URI);

	// Add supertypes to classes
	struct null_deleter{void operator()(void const *) const {} };
	std::shared_ptr<CalcModelPackageImpl> calcModel = std::shared_ptr<CalcModelPackageImpl>(this, null_deleter());

	initializePackageActivities();
	initializePackageClasses();
	initializePackageDependencies();
	initializePackageInstanceSpecifications();
	initializePackageInterfaces();
	initializePackageStereotypes();
}

//ActivityNodes and Edges
void CalcModelPackageImpl::initializePackageActivities()
{
	// activity CheckIfPrime
	calcModel_PrimeChecker_CheckIfPrime->setName("CheckIfPrime");
	// parameter actInputNode
	calcModel_PrimeChecker_CheckIfPrime_CalcModel_PrimeChecker_CheckIfPrime_actInputNode->setName("actInputNode");
	calcModel_PrimeChecker_CheckIfPrime_CalcModel_PrimeChecker_CheckIfPrime_actInputNode->setType(get_CalcModel_PrimeChecker());
	calcModel_PrimeChecker_CheckIfPrime_CalcModel_PrimeChecker_CheckIfPrime_actInputNode->setLower(1);
	calcModel_PrimeChecker_CheckIfPrime_CalcModel_PrimeChecker_CheckIfPrime_actInputNode->setUpper(1);
	calcModel_PrimeChecker_CheckIfPrime_CalcModel_PrimeChecker_CheckIfPrime_actInputNode->setDirection(uml::ParameterDirectionKind::IN);
	
	
	
	
	
	
	calcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime->setBehavior(CalcModel::CalcModelPackage::eInstance()->get_CalcModel_PrimeChecker_fbPrintIsPrime());
	
	
	
	calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime->setBehavior(CalcModel::CalcModelPackage::eInstance()->get_CalcModel_PrimeChecker_fbPrintNotPrime());
	
	
	
	calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2->setBehavior(CalcModel::CalcModelPackage::eInstance()->get_CalcModel_PrimeChecker_fbPrintNotPrime());
	
	
	
	calcModel_PrimeChecker_CheckIfPrimecoaDivides->setOperation(CalcModel::CalcModelPackage::eInstance()->get_CalcModel_PrimeChecker_divides_());
	calcModel_PrimeChecker_CheckIfPrimecoaDivides->getInput()->push_back(inputPin_coaDividesself);
	
	
	
	calcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished->setOperation(CalcModel::CalcModelPackage::eInstance()->get_CalcModel_PrimeChecker_isNotFinished_());
	calcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished->getInput()->push_back(inputPin_coaIsNotFinishedself);
	
	
	
	calcModel_PrimeChecker_CheckIfPrimecoaIsOdd->setOperation(CalcModel::CalcModelPackage::eInstance()->get_CalcModel_PrimeChecker_isOdd_());
	calcModel_PrimeChecker_CheckIfPrimecoaIsOdd->getInput()->push_back(inputPin_coaIsOddself);
	
	
	
	calcModel_PrimeChecker_CheckIfPrimecoaNext->setOperation(CalcModel::CalcModelPackage::eInstance()->get_CalcModel_PrimeChecker_next_());
	calcModel_PrimeChecker_CheckIfPrimecoaNext->getInput()->push_back(inputPin_coaNextself);
	
	
	
	
	
	
	
	
	
	
	cF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd->setSource(calcModel_PrimeChecker_CheckIfPrimeInitial1);
	calcModel_PrimeChecker_CheckIfPrimeInitial1->getOutgoing()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd);
	cF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd->setTarget(calcModel_PrimeChecker_CheckIfPrimecoaIsOdd);
	calcModel_PrimeChecker_CheckIfPrimecoaIsOdd->getIncoming()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd);
	cF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd->setGuard(cF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd);
	cF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides->setSource(calcModel_PrimeChecker_CheckIfPrimeMerge);
	calcModel_PrimeChecker_CheckIfPrimeMerge->getOutgoing()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides);
	cF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides->setTarget(calcModel_PrimeChecker_CheckIfPrimecoaDivides);
	calcModel_PrimeChecker_CheckIfPrimecoaDivides->getIncoming()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides);
	cF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides->setGuard(cF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides);
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3->setSource(calcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime);
	calcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime->getOutgoing()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3);
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3->setTarget(calcModel_PrimeChecker_CheckIfPrimeActivityFinal3);
	calcModel_PrimeChecker_CheckIfPrimeActivityFinal3->getIncoming()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3);
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3->setGuard(cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3);
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1->setSource(calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2);
	calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2->getOutgoing()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1);
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1->setTarget(calcModel_PrimeChecker_CheckIfPrimeActivityFinal1);
	calcModel_PrimeChecker_CheckIfPrimeActivityFinal1->getIncoming()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1);
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1->setGuard(cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1);
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2->setSource(calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime);
	calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime->getOutgoing()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2);
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2->setTarget(calcModel_PrimeChecker_CheckIfPrimeActivityFinal2);
	calcModel_PrimeChecker_CheckIfPrimeActivityFinal2->getIncoming()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2);
	cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2->setGuard(cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2);
	cF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished->setSource(calcModel_PrimeChecker_CheckIfPrimecoaNext);
	calcModel_PrimeChecker_CheckIfPrimecoaNext->getOutgoing()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished);
	cF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished->setTarget(calcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished);
	calcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished->getIncoming()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished);
	cF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished->setGuard(cF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge->setSource(calcModel_PrimeChecker_CheckIfPrimedn_IsOdd);
	calcModel_PrimeChecker_CheckIfPrimedn_IsOdd->getOutgoing()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge->setTarget(calcModel_PrimeChecker_CheckIfPrimeMerge);
	calcModel_PrimeChecker_CheckIfPrimeMerge->getIncoming()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge->setGuard(cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2->setSource(calcModel_PrimeChecker_CheckIfPrimedn_IsOdd);
	calcModel_PrimeChecker_CheckIfPrimedn_IsOdd->getOutgoing()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2->setTarget(calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2);
	calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2->getIncoming()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2->setGuard(cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime->setSource(calcModel_PrimeChecker_CheckIfPrimedn_divides);
	calcModel_PrimeChecker_CheckIfPrimedn_divides->getOutgoing()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime->setTarget(calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime);
	calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime->getIncoming()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime->setGuard(cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext->setSource(calcModel_PrimeChecker_CheckIfPrimedn_divides);
	calcModel_PrimeChecker_CheckIfPrimedn_divides->getOutgoing()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext->setTarget(calcModel_PrimeChecker_CheckIfPrimecoaNext);
	calcModel_PrimeChecker_CheckIfPrimecoaNext->getIncoming()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext->setGuard(cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge->setSource(calcModel_PrimeChecker_CheckIfPrimedn_isNotFinished);
	calcModel_PrimeChecker_CheckIfPrimedn_isNotFinished->getOutgoing()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge->setTarget(calcModel_PrimeChecker_CheckIfPrimeMerge);
	calcModel_PrimeChecker_CheckIfPrimeMerge->getIncoming()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge->setGuard(cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime->setSource(calcModel_PrimeChecker_CheckIfPrimedn_isNotFinished);
	calcModel_PrimeChecker_CheckIfPrimedn_isNotFinished->getOutgoing()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime->setTarget(calcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime);
	calcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime->getIncoming()->push_back(cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime);
	cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime->setGuard(cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_guard_LiteralBoolean_CF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime);
	calcModel_PrimeChecker_CheckIfPrimeifDivides->setSource(outputPin_coaDividesisDivisible);
	outputPin_coaDividesisDivisible->getOutgoing()->push_back(calcModel_PrimeChecker_CheckIfPrimeifDivides);
	calcModel_PrimeChecker_CheckIfPrimeifDivides->setTarget(calcModel_PrimeChecker_CheckIfPrimedn_divides);
	calcModel_PrimeChecker_CheckIfPrimedn_divides->getIncoming()->push_back(calcModel_PrimeChecker_CheckIfPrimeifDivides);
	calcModel_PrimeChecker_CheckIfPrimeifIsNotFinished->setSource(outputPin_coaIsNotFinishedisNotFinished);
	outputPin_coaIsNotFinishedisNotFinished->getOutgoing()->push_back(calcModel_PrimeChecker_CheckIfPrimeifIsNotFinished);
	calcModel_PrimeChecker_CheckIfPrimeifIsNotFinished->setTarget(calcModel_PrimeChecker_CheckIfPrimedn_isNotFinished);
	calcModel_PrimeChecker_CheckIfPrimedn_isNotFinished->getIncoming()->push_back(calcModel_PrimeChecker_CheckIfPrimeifIsNotFinished);
	calcModel_PrimeChecker_CheckIfPrimeifIsOdd->setSource(outputPin_coaIsOddisOdd);
	outputPin_coaIsOddisOdd->getOutgoing()->push_back(calcModel_PrimeChecker_CheckIfPrimeifIsOdd);
	calcModel_PrimeChecker_CheckIfPrimeifIsOdd->setTarget(calcModel_PrimeChecker_CheckIfPrimedn_IsOdd);
	calcModel_PrimeChecker_CheckIfPrimedn_IsOdd->getIncoming()->push_back(calcModel_PrimeChecker_CheckIfPrimeifIsOdd);
	
}

void CalcModelPackageImpl::initializePackageClasses()
{
	std::shared_ptr<uml::Generalization> gen = nullptr;

	//	class PrimeChecker
	calcModel_PrimeChecker->setName("PrimeChecker");
	calcModel_PrimeChecker->setIsAbstract(false);
	
    // PrimeChecker attributes
	calcModel_PrimeChecker_divider->setName("divider");
	calcModel_PrimeChecker_divider->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	calcModel_PrimeChecker_divider->setLower(1);
	calcModel_PrimeChecker_divider->setUpper(1);
	
	calcModel_PrimeChecker_divider->setDefaultValue(calcModel_PrimeChecker_divider_defaultValue_LiteralInteger_CalcModel_PrimeChecker_divider);
	
	calcModel_PrimeChecker_number->setName("number");
	calcModel_PrimeChecker_number->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Integer());
	calcModel_PrimeChecker_number->setLower(1);
	calcModel_PrimeChecker_number->setUpper(1);
	
	calcModel_PrimeChecker_number->setDefaultValue(calcModel_PrimeChecker_number_defaultValue_LiteralInteger_CalcModel_PrimeChecker_number);
	

    // PrimeChecker operations
	calcModel_PrimeChecker_divides_->setName("divides");
	calcModel_PrimeChecker_divides_->getMethod()->push_back(calcModel_PrimeChecker_fbDivides);
	// parameter isDivisible
	calcModel_PrimeChecker_divides_isDivisible->setName("isDivisible");
	calcModel_PrimeChecker_divides_isDivisible->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	calcModel_PrimeChecker_divides_isDivisible->setLower(1);
	calcModel_PrimeChecker_divides_isDivisible->setUpper(1);
	calcModel_PrimeChecker_divides_isDivisible->setDirection(uml::ParameterDirectionKind::RETURN);
	

	calcModel_PrimeChecker_isNotFinished_->setName("isNotFinished");
	calcModel_PrimeChecker_isNotFinished_->getMethod()->push_back(calcModel_PrimeChecker_fbIsNotFinished);
	// parameter isNotFinished
	calcModel_PrimeChecker_isNotFinished_isNotFinished->setName("isNotFinished");
	calcModel_PrimeChecker_isNotFinished_isNotFinished->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	calcModel_PrimeChecker_isNotFinished_isNotFinished->setLower(1);
	calcModel_PrimeChecker_isNotFinished_isNotFinished->setUpper(1);
	calcModel_PrimeChecker_isNotFinished_isNotFinished->setDirection(uml::ParameterDirectionKind::RETURN);
	

	calcModel_PrimeChecker_isOdd_->setName("isOdd");
	calcModel_PrimeChecker_isOdd_->getMethod()->push_back(calcModel_PrimeChecker_fbIsOdd);
	// parameter isOdd
	calcModel_PrimeChecker_isOdd_isOdd->setName("isOdd");
	calcModel_PrimeChecker_isOdd_isOdd->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	calcModel_PrimeChecker_isOdd_isOdd->setLower(1);
	calcModel_PrimeChecker_isOdd_isOdd->setUpper(1);
	calcModel_PrimeChecker_isOdd_isOdd->setDirection(uml::ParameterDirectionKind::RETURN);
	

	calcModel_PrimeChecker_next_->setName("next");
	calcModel_PrimeChecker_next_->getMethod()->push_back(calcModel_PrimeChecker_fbNext);
	

	calcModel_PrimeChecker_printIsPrime_->setName("printIsPrime");
	calcModel_PrimeChecker_printIsPrime_->getMethod()->push_back(calcModel_PrimeChecker_fbPrintIsPrime);
	

	calcModel_PrimeChecker_printNotPrime_->setName("printNotPrime");
	calcModel_PrimeChecker_printNotPrime_->getMethod()->push_back(calcModel_PrimeChecker_fbPrintNotPrime);
	

    // PrimeChecker function behaviors
	calcModel_PrimeChecker_fbDivides->setName("fbDivides");
	// parameter isDivisible
	calcModel_PrimeChecker_fbDivides_isDivisible->setName("isDivisible");
	calcModel_PrimeChecker_fbDivides_isDivisible->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	calcModel_PrimeChecker_fbDivides_isDivisible->setLower(1);
	calcModel_PrimeChecker_fbDivides_isDivisible->setUpper(1);
	calcModel_PrimeChecker_fbDivides_isDivisible->setDirection(uml::ParameterDirectionKind::RETURN);
	

	calcModel_PrimeChecker_fbNext->setName("fbNext");
	

	calcModel_PrimeChecker_fbPrintNotPrime->setName("fbPrintNotPrime");
	

	calcModel_PrimeChecker_fbPrintIsPrime->setName("fbPrintIsPrime");
	

	calcModel_PrimeChecker_fbIsOdd->setName("fbIsOdd");
	// parameter isOdd
	calcModel_PrimeChecker_fbIsOdd_isOdd->setName("isOdd");
	calcModel_PrimeChecker_fbIsOdd_isOdd->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	calcModel_PrimeChecker_fbIsOdd_isOdd->setLower(1);
	calcModel_PrimeChecker_fbIsOdd_isOdd->setUpper(1);
	calcModel_PrimeChecker_fbIsOdd_isOdd->setDirection(uml::ParameterDirectionKind::RETURN);
	

	calcModel_PrimeChecker_fbIsNotFinished->setName("fbIsNotFinished");
	// parameter isNotFinished
	calcModel_PrimeChecker_fbIsNotFinished_isNotFinished->setName("isNotFinished");
	calcModel_PrimeChecker_fbIsNotFinished_isNotFinished->setType(PrimitiveTypes::PrimitiveTypesPackage::eInstance()->get_PrimitiveTypes_Boolean());
	calcModel_PrimeChecker_fbIsNotFinished_isNotFinished->setLower(1);
	calcModel_PrimeChecker_fbIsNotFinished_isNotFinished->setUpper(1);
	calcModel_PrimeChecker_fbIsNotFinished_isNotFinished->setDirection(uml::ParameterDirectionKind::RETURN);
	

}

void CalcModelPackageImpl::initializePackageDependencies()
{
}

void CalcModelPackageImpl::initializePackageInstanceSpecifications()
{
}

void CalcModelPackageImpl::initializePackageInterfaces()
{
}

void CalcModelPackageImpl::initializePackageStereotypes()
{
}

std::shared_ptr<uml::ControlFlow> CalcModelPackageImpl::get_CF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd()
{
	return cF_CalcModel_PrimeChecker_CheckIfPrimeInitial1_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd;
}
std::shared_ptr<uml::ControlFlow> CalcModelPackageImpl::get_CF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides()
{
	return cF_CalcModel_PrimeChecker_CheckIfPrimeMerge_CalcModel_PrimeChecker_CheckIfPrimecoaDivides;
}
std::shared_ptr<uml::ControlFlow> CalcModelPackageImpl::get_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3()
{
	return cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3;
}
std::shared_ptr<uml::ControlFlow> CalcModelPackageImpl::get_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1()
{
	return cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1;
}
std::shared_ptr<uml::ControlFlow> CalcModelPackageImpl::get_CF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2()
{
	return cF_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2;
}
std::shared_ptr<uml::ControlFlow> CalcModelPackageImpl::get_CF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished()
{
	return cF_CalcModel_PrimeChecker_CheckIfPrimecoaNext_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished;
}
std::shared_ptr<uml::ControlFlow> CalcModelPackageImpl::get_CF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge()
{
	return cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimeMerge;
}
std::shared_ptr<uml::ControlFlow> CalcModelPackageImpl::get_CF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2()
{
	return cF_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2;
}
std::shared_ptr<uml::ControlFlow> CalcModelPackageImpl::get_CF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime()
{
	return cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime;
}
std::shared_ptr<uml::ControlFlow> CalcModelPackageImpl::get_CF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext()
{
	return cF_CalcModel_PrimeChecker_CheckIfPrimedn_divides_CalcModel_PrimeChecker_CheckIfPrimecoaNext;
}
std::shared_ptr<uml::ControlFlow> CalcModelPackageImpl::get_CF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge()
{
	return cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimeMerge;
}
std::shared_ptr<uml::ControlFlow> CalcModelPackageImpl::get_CF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime()
{
	return cF_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime;
}
std::shared_ptr<uml::ChangeEvent> CalcModelPackageImpl::get_CalcModel_ChangeEvent1()
{
	return calcModel_ChangeEvent1;
}
std::shared_ptr<uml::Class> CalcModelPackageImpl::get_CalcModel_PrimeChecker()
{
	return calcModel_PrimeChecker;
}
std::shared_ptr<uml::Activity> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrime()
{
	return calcModel_PrimeChecker_CheckIfPrime;
}
std::shared_ptr<uml::ActivityFinalNode> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal1()
{
	return calcModel_PrimeChecker_CheckIfPrimeActivityFinal1;
}
std::shared_ptr<uml::ActivityFinalNode> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal2()
{
	return calcModel_PrimeChecker_CheckIfPrimeActivityFinal2;
}
std::shared_ptr<uml::ActivityFinalNode> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimeActivityFinal3()
{
	return calcModel_PrimeChecker_CheckIfPrimeActivityFinal3;
}
std::shared_ptr<uml::InitialNode> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimeInitial1()
{
	return calcModel_PrimeChecker_CheckIfPrimeInitial1;
}
std::shared_ptr<uml::MergeNode> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimeMerge()
{
	return calcModel_PrimeChecker_CheckIfPrimeMerge;
}
std::shared_ptr<uml::Parameter> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrime_CalcModel_PrimeChecker_CheckIfPrime_actInputNode()
{
	return calcModel_PrimeChecker_CheckIfPrime_CalcModel_PrimeChecker_CheckIfPrime_actInputNode;
}
std::shared_ptr<uml::CallBehaviorAction> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime()
{
	return calcModel_PrimeChecker_CheckIfPrimecbaPrintIsPrime;
}
std::shared_ptr<uml::CallBehaviorAction> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime()
{
	return calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime;
}
std::shared_ptr<uml::CallBehaviorAction> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2()
{
	return calcModel_PrimeChecker_CheckIfPrimecbaPrintNotPrime2;
}
std::shared_ptr<uml::CallOperationAction> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimecoaDivides()
{
	return calcModel_PrimeChecker_CheckIfPrimecoaDivides;
}
std::shared_ptr<uml::CallOperationAction> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished()
{
	return calcModel_PrimeChecker_CheckIfPrimecoaIsNotFinished;
}
std::shared_ptr<uml::CallOperationAction> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimecoaIsOdd()
{
	return calcModel_PrimeChecker_CheckIfPrimecoaIsOdd;
}
std::shared_ptr<uml::CallOperationAction> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimecoaNext()
{
	return calcModel_PrimeChecker_CheckIfPrimecoaNext;
}
std::shared_ptr<uml::DecisionNode> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimedn_IsOdd()
{
	return calcModel_PrimeChecker_CheckIfPrimedn_IsOdd;
}
std::shared_ptr<uml::DecisionNode> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimedn_divides()
{
	return calcModel_PrimeChecker_CheckIfPrimedn_divides;
}
std::shared_ptr<uml::DecisionNode> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimedn_isNotFinished()
{
	return calcModel_PrimeChecker_CheckIfPrimedn_isNotFinished;
}
std::shared_ptr<uml::ObjectFlow> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimeifDivides()
{
	return calcModel_PrimeChecker_CheckIfPrimeifDivides;
}
std::shared_ptr<uml::ObjectFlow> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimeifIsNotFinished()
{
	return calcModel_PrimeChecker_CheckIfPrimeifIsNotFinished;
}
std::shared_ptr<uml::ObjectFlow> CalcModelPackageImpl::get_CalcModel_PrimeChecker_CheckIfPrimeifIsOdd()
{
	return calcModel_PrimeChecker_CheckIfPrimeifIsOdd;
}
std::shared_ptr<uml::Property> CalcModelPackageImpl::get_CalcModel_PrimeChecker_divider()
{
	return calcModel_PrimeChecker_divider;
}
std::shared_ptr<uml::Operation> CalcModelPackageImpl::get_CalcModel_PrimeChecker_divides_()
{
	return calcModel_PrimeChecker_divides_;
}
std::shared_ptr<uml::Parameter> CalcModelPackageImpl::get_CalcModel_PrimeChecker_divides_isDivisible()
{
	return calcModel_PrimeChecker_divides_isDivisible;
}
std::shared_ptr<uml::FunctionBehavior> CalcModelPackageImpl::get_CalcModel_PrimeChecker_fbDivides()
{
	return calcModel_PrimeChecker_fbDivides;
}
std::shared_ptr<uml::Parameter> CalcModelPackageImpl::get_CalcModel_PrimeChecker_fbDivides_isDivisible()
{
	return calcModel_PrimeChecker_fbDivides_isDivisible;
}
std::shared_ptr<uml::FunctionBehavior> CalcModelPackageImpl::get_CalcModel_PrimeChecker_fbIsNotFinished()
{
	return calcModel_PrimeChecker_fbIsNotFinished;
}
std::shared_ptr<uml::Parameter> CalcModelPackageImpl::get_CalcModel_PrimeChecker_fbIsNotFinished_isNotFinished()
{
	return calcModel_PrimeChecker_fbIsNotFinished_isNotFinished;
}
std::shared_ptr<uml::FunctionBehavior> CalcModelPackageImpl::get_CalcModel_PrimeChecker_fbIsOdd()
{
	return calcModel_PrimeChecker_fbIsOdd;
}
std::shared_ptr<uml::Parameter> CalcModelPackageImpl::get_CalcModel_PrimeChecker_fbIsOdd_isOdd()
{
	return calcModel_PrimeChecker_fbIsOdd_isOdd;
}
std::shared_ptr<uml::FunctionBehavior> CalcModelPackageImpl::get_CalcModel_PrimeChecker_fbNext()
{
	return calcModel_PrimeChecker_fbNext;
}
std::shared_ptr<uml::FunctionBehavior> CalcModelPackageImpl::get_CalcModel_PrimeChecker_fbPrintIsPrime()
{
	return calcModel_PrimeChecker_fbPrintIsPrime;
}
std::shared_ptr<uml::FunctionBehavior> CalcModelPackageImpl::get_CalcModel_PrimeChecker_fbPrintNotPrime()
{
	return calcModel_PrimeChecker_fbPrintNotPrime;
}
std::shared_ptr<uml::Operation> CalcModelPackageImpl::get_CalcModel_PrimeChecker_isNotFinished_()
{
	return calcModel_PrimeChecker_isNotFinished_;
}
std::shared_ptr<uml::Parameter> CalcModelPackageImpl::get_CalcModel_PrimeChecker_isNotFinished_isNotFinished()
{
	return calcModel_PrimeChecker_isNotFinished_isNotFinished;
}
std::shared_ptr<uml::Operation> CalcModelPackageImpl::get_CalcModel_PrimeChecker_isOdd_()
{
	return calcModel_PrimeChecker_isOdd_;
}
std::shared_ptr<uml::Parameter> CalcModelPackageImpl::get_CalcModel_PrimeChecker_isOdd_isOdd()
{
	return calcModel_PrimeChecker_isOdd_isOdd;
}
std::shared_ptr<uml::Operation> CalcModelPackageImpl::get_CalcModel_PrimeChecker_next_()
{
	return calcModel_PrimeChecker_next_;
}
std::shared_ptr<uml::Property> CalcModelPackageImpl::get_CalcModel_PrimeChecker_number()
{
	return calcModel_PrimeChecker_number;
}
std::shared_ptr<uml::Operation> CalcModelPackageImpl::get_CalcModel_PrimeChecker_printIsPrime_()
{
	return calcModel_PrimeChecker_printIsPrime_;
}
std::shared_ptr<uml::Operation> CalcModelPackageImpl::get_CalcModel_PrimeChecker_printNotPrime_()
{
	return calcModel_PrimeChecker_printNotPrime_;
}
std::shared_ptr<uml::InputPin> CalcModelPackageImpl::get_InputPin_coaDividesself()
{
	return inputPin_coaDividesself;
}
std::shared_ptr<uml::InputPin> CalcModelPackageImpl::get_InputPin_coaIsNotFinishedself()
{
	return inputPin_coaIsNotFinishedself;
}
std::shared_ptr<uml::InputPin> CalcModelPackageImpl::get_InputPin_coaIsOddself()
{
	return inputPin_coaIsOddself;
}
std::shared_ptr<uml::InputPin> CalcModelPackageImpl::get_InputPin_coaNextself()
{
	return inputPin_coaNextself;
}
std::shared_ptr<uml::OutputPin> CalcModelPackageImpl::get_OutputPin_coaDividesisDivisible()
{
	return outputPin_coaDividesisDivisible;
}
std::shared_ptr<uml::OutputPin> CalcModelPackageImpl::get_OutputPin_coaIsNotFinishedisNotFinished()
{
	return outputPin_coaIsNotFinishedisNotFinished;
}
std::shared_ptr<uml::OutputPin> CalcModelPackageImpl::get_OutputPin_coaIsOddisOdd()
{
	return outputPin_coaIsOddisOdd;
}


