#ifndef NEWMODEL_METAMODELPACKAGE_HPP
#define NEWMODEL_METAMODELPACKAGE_HPP

//********************************************************************
//*    
//* Warning: This file was generated by Mesapp Generator
//*
//********************************************************************

 
#include "Factory.hpp"


#include "Package.hpp"	

namespace NewModel {
class PrimeChecker;
class NewModelPackage;

}

namespace uml {
class LiteralInteger;
class CallBehaviorAction;
class ControlFlow;
class Property;
class CallOperationAction;
class OutputPin;
class ActivityFinalNode;
class MergeNode;
class ForkNode;
class Activity;
class Class;
class Operation;
class ObjectFlow;
class LiteralBoolean;
class Parameter;
class FunctionBehavior;
class ActivityParameterNode;
class DecisionNode;
class ProfileApplication;
class InputPin;
class LiteralString;
}

namespace NewModel {

/*!
The Metamodel Package for the NewModel metamodel. This package is used to enable the reflection of model elements. It contains all model elements
which were described in an ecore file.
*/


class NewModelPackage : virtual public uml::Package
{

//protected default construcotr
protected:
	NewModelPackage(){}


public:

	//static variables
	static const QString eNAME;
	static const QString eNS_URI;
	static const QString eNS_PREFIX;


//getter for the ownedMember
virtual uml::Parameter* get_NewModel_PrimeChecker_divides_isDivisible()= 0;
virtual uml::CallOperationAction* get_NewModel_CheckIfPrimecoaNext()= 0;
virtual uml::ObjectFlow* get_NewModel_CheckIfPrimeifIsOdd()= 0;
virtual uml::FunctionBehavior* get_NewModel_PrimeChecker_PrintNotPrime()= 0;
virtual uml::Property* get_NewModel_PrimeChecker_divider()= 0;
virtual uml::ForkNode* get_NewModel_CheckIfPrimeFork1()= 0;
virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimenext_call_NewModel_CheckIfPrimecoaIsNotFinished()= 0;
virtual uml::CallBehaviorAction* get_NewModel_CheckIfPrimecbaPrintIsPrime()= 0;
virtual uml::ObjectFlow* get_OF_NewModel_CheckIfPrimeFork1_coaNexttarget()= 0;
virtual uml::CallOperationAction* get_NewModel_CheckIfPrimecoaIsOdd()= 0;
virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimecbaPrintNotPrime_NewModel_CheckIfPrimeActivityFinal2()= 0;
virtual uml::FunctionBehavior* get_NewModel_PrimeChecker_isNotFinished()= 0;
virtual uml::Class* get_NewModel_PrimeChecker()= 0;
virtual uml::FunctionBehavior* get_NewModel_PrimeChecker_divides()= 0;
virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimecbaPrintIsPrime_NewModel_CheckIfPrimeActivityFinal3()= 0;
virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimedivides_NewModel_CheckIfPrimecbaPrintNotPrime()= 0;
virtual uml::CallBehaviorAction* get_NewModel_CheckIfPrimecbaPrintNotPrime2()= 0;
virtual uml::InputPin* get_coaDividestarget()= 0;
virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimeisNotFinished_NewModel_CheckIfPrimecbaPrintIsPrime()= 0;
virtual uml::ActivityFinalNode* get_NewModel_CheckIfPrimeActivityFinal2()= 0;
virtual uml::InputPin* get_coaIsNotFinishedtarget()= 0;
virtual uml::ObjectFlow* get_OF_NewModel_CheckIfPrimeFork1_coaIsOddtarget()= 0;
virtual uml::Operation* get_NewModel_PrimeChecker_isNotFinished_()= 0;
virtual uml::CallBehaviorAction* get_NewModel_CheckIfPrimecbaPrintNotPrime()= 0;
virtual uml::ObjectFlow* get_OF_NewModel_CheckIfPrimeFork1_coaDividestarget()= 0;
virtual uml::OutputPin* get_coaIsOddisOdd()= 0;
virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimecbaPrintNotPrime2_NewModel_CheckIfPrimeActivityFinal1()= 0;
virtual uml::InputPin* get_coaIsOddtarget()= 0;
virtual uml::Operation* get_NewModel_PrimeChecker_divides_()= 0;
virtual uml::FunctionBehavior* get_NewModel_PrimeChecker_isOdd()= 0;
virtual uml::InputPin* get_coaNexttarget()= 0;
virtual uml::ObjectFlow* get_OF_NewModel_CheckIfPrimeFork1_coaIsNotFinishedtarget()= 0;
virtual uml::ObjectFlow* get_NewModel_CheckIfPrimeifDivides()= 0;
virtual uml::Parameter* get_NewModel_PrimeChecker_isOdd_isOdd()= 0;
virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimedivides_NewModel_CheckIfPrimenext_call()= 0;
virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimeIsOdd_NewModel_CheckIfPrimecbaPrintNotPrime2()= 0;
virtual uml::Operation* get_NewModel_PrimeChecker_next_()= 0;
virtual uml::Property* get_NewModel_PrimeChecker_number()= 0;
virtual uml::ObjectFlow* get_OF_NewModel_CheckIfPrimeFork1_next_calltarget()= 0;
virtual uml::CallOperationAction* get_NewModel_CheckIfPrimecoaDivides()= 0;
virtual uml::CallOperationAction* get_NewModel_CheckIfPrimenext_call()= 0;
virtual uml::Parameter* get_NewModel_PrimeChecker_isNotFinished_isNotFinished()= 0;
virtual uml::OutputPin* get_coaIsNotFinishedisNotFinished()= 0;
virtual uml::MergeNode* get_NewModel_CheckIfPrimeMerge()= 0;
virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimeIsOdd_NewModel_CheckIfPrimeMerge()= 0;
virtual uml::Parameter* get_NewModel_CheckIfPrime_NewModel_CheckIfPrime_ActInputNode()= 0;
virtual uml::DecisionNode* get_NewModel_CheckIfPrimeIsOdd()= 0;
virtual uml::DecisionNode* get_NewModel_CheckIfPrimedivides()= 0;
virtual uml::OutputPin* get_coaDividesisDivisible()= 0;
virtual uml::ObjectFlow* get_NewModel_CheckIfPrimeifIsNotFinished()= 0;
virtual uml::Operation* get_NewModel_PrimeChecker_isOdd_()= 0;
virtual uml::InputPin* get_next_calltarget()= 0;
virtual uml::ActivityFinalNode* get_NewModel_CheckIfPrimeActivityFinal3()= 0;
virtual uml::Activity* get_NewModel_CheckIfPrime()= 0;
virtual uml::Operation* get_NewModel_PrimeChecker_printNotPrime_()= 0;
virtual uml::FunctionBehavior* get_NewModel_PrimeChecker_printIsPrime()= 0;
virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimeisNotFinished_NewModel_CheckIfPrimeMerge()= 0;
virtual uml::Operation* get_NewModel_PrimeChecker_printIsPrime_()= 0;
virtual uml::DecisionNode* get_NewModel_CheckIfPrimeisNotFinished()= 0;
virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimeMerge_NewModel_CheckIfPrimecoaDivides()= 0;
virtual uml::ActivityFinalNode* get_NewModel_CheckIfPrimeActivityFinal1()= 0;
virtual uml::ActivityParameterNode* get_NewModel_CheckIfPrimeprimeChecker()= 0;
virtual uml::FunctionBehavior* get_NewModel_PrimeChecker_next()= 0;
virtual uml::CallOperationAction* get_NewModel_CheckIfPrimecoaIsNotFinished()= 0;
virtual uml::ObjectFlow* get_OF_NewModel_CheckIfPrimeprimeChecker_NewModel_CheckIfPrimeFork1()= 0;






//Singleton Instance and Getter

private:
static NewModelPackage* instance;

public:
static NewModelPackage* eInstance();

//Creator functions

//Package

//virtual NewModelPackage * getNewModelPackage() = 0;



};


}




#endif /* end of include guard: NEWMODEL_METAMODELPACKAGE_HPP */

