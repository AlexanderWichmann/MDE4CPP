//********************************************************************
//*    	
//* Warning: This file was generated by MDE4CPP Generator
//*
//********************************************************************

#ifndef NEWMODEL_METAMODELPACKAGEIMPL_HPP
#define NEWMODEL_METAMODELPACKAGEIMPL_HPP

#ifdef NDEBUG
  #define DEBUG_MESSAGE(a) /**/
#else
  #define DEBUG_MESSAGE(a) a
#endif
#include <iostream>

#include "NewModelPackage.hpp"
#include "impl/PackageImpl.hpp"	

namespace NewModel
{
	class NewModelPackageImpl : virtual public uml::PackageImpl ,virtual public NewModelPackage
	{
			friend class NewModelPackage;
			// Constructor
			NewModelPackageImpl();

		public:
			// destructor
			virtual ~NewModelPackageImpl();

			//getter for the ownedMember
			virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimeIsOdd_NewModel_CheckIfPrimeMerge();
			virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimeIsOdd_NewModel_CheckIfPrimecbaPrintNotPrime2();
			virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimeMerge_NewModel_CheckIfPrimecoaDivides();
			virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimecbaPrintIsPrime_NewModel_CheckIfPrimeActivityFinal3();
			virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimecbaPrintNotPrime2_NewModel_CheckIfPrimeActivityFinal1();
			virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimecbaPrintNotPrime_NewModel_CheckIfPrimeActivityFinal2();
			virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimedivides_NewModel_CheckIfPrimecbaPrintNotPrime();
			virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimedivides_NewModel_CheckIfPrimenext_call();
			virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimeisNotFinished_NewModel_CheckIfPrimeMerge();
			virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimeisNotFinished_NewModel_CheckIfPrimecbaPrintIsPrime();
			virtual uml::ControlFlow* get_CF_NewModel_CheckIfPrimenext_call_NewModel_CheckIfPrimecoaIsNotFinished();
			virtual uml::InputPin* get_InputPin_coaDividestarget();
			virtual uml::InputPin* get_InputPin_coaIsNotFinishedtarget();
			virtual uml::InputPin* get_InputPin_coaIsOddtarget();
			virtual uml::InputPin* get_InputPin_coaNexttarget();
			virtual uml::InputPin* get_InputPin_next_calltarget();
			virtual uml::Activity* get_NewModel_CheckIfPrime();
			virtual uml::ActivityFinalNode* get_NewModel_CheckIfPrimeActivityFinal1();
			virtual uml::ActivityFinalNode* get_NewModel_CheckIfPrimeActivityFinal2();
			virtual uml::ActivityFinalNode* get_NewModel_CheckIfPrimeActivityFinal3();
			virtual uml::ForkNode* get_NewModel_CheckIfPrimeFork1();
			virtual uml::DecisionNode* get_NewModel_CheckIfPrimeIsOdd();
			virtual uml::MergeNode* get_NewModel_CheckIfPrimeMerge();
			virtual uml::Parameter* get_NewModel_CheckIfPrime_NewModel_CheckIfPrime_ActInputNode();
			virtual uml::CallBehaviorAction* get_NewModel_CheckIfPrimecbaPrintIsPrime();
			virtual uml::CallBehaviorAction* get_NewModel_CheckIfPrimecbaPrintNotPrime();
			virtual uml::CallBehaviorAction* get_NewModel_CheckIfPrimecbaPrintNotPrime2();
			virtual uml::CallOperationAction* get_NewModel_CheckIfPrimecoaDivides();
			virtual uml::CallOperationAction* get_NewModel_CheckIfPrimecoaIsNotFinished();
			virtual uml::CallOperationAction* get_NewModel_CheckIfPrimecoaIsOdd();
			virtual uml::CallOperationAction* get_NewModel_CheckIfPrimecoaNext();
			virtual uml::DecisionNode* get_NewModel_CheckIfPrimedivides();
			virtual uml::ObjectFlow* get_NewModel_CheckIfPrimeifDivides();
			virtual uml::ObjectFlow* get_NewModel_CheckIfPrimeifIsNotFinished();
			virtual uml::ObjectFlow* get_NewModel_CheckIfPrimeifIsOdd();
			virtual uml::DecisionNode* get_NewModel_CheckIfPrimeisNotFinished();
			virtual uml::CallOperationAction* get_NewModel_CheckIfPrimenext_call();
			virtual uml::ActivityParameterNode* get_NewModel_CheckIfPrimeprimeChecker();
			virtual uml::Class* get_NewModel_PrimeChecker();
			virtual uml::Property* get_NewModel_PrimeChecker_divider();
			virtual uml::Parameter* get_NewModel_PrimeChecker_divides_isDivisible();
			virtual uml::Operation* get_NewModel_PrimeChecker_divides_();
			virtual uml::FunctionBehavior* get_NewModel_PrimeChecker_fbDivides();
			virtual uml::Parameter* get_NewModel_PrimeChecker_fbDivides_isDivisible();
			virtual uml::FunctionBehavior* get_NewModel_PrimeChecker_fbIsNotFinished();
			virtual uml::Parameter* get_NewModel_PrimeChecker_fbIsNotFinished_isNotFinished();
			virtual uml::FunctionBehavior* get_NewModel_PrimeChecker_fbIsOdd();
			virtual uml::Parameter* get_NewModel_PrimeChecker_fbIsOdd_isOdd();
			virtual uml::FunctionBehavior* get_NewModel_PrimeChecker_fbNext();
			virtual uml::FunctionBehavior* get_NewModel_PrimeChecker_fbPrintIsPrime();
			virtual uml::FunctionBehavior* get_NewModel_PrimeChecker_fbPrintNotPrime();
			virtual uml::Parameter* get_NewModel_PrimeChecker_isNotFinished_isNotFinished();
			virtual uml::Operation* get_NewModel_PrimeChecker_isNotFinished_();
			virtual uml::Parameter* get_NewModel_PrimeChecker_isOdd_isOdd();
			virtual uml::Operation* get_NewModel_PrimeChecker_isOdd_();
			virtual uml::Operation* get_NewModel_PrimeChecker_next_();
			virtual uml::Property* get_NewModel_PrimeChecker_number();
			virtual uml::Operation* get_NewModel_PrimeChecker_printIsPrime_();
			virtual uml::Operation* get_NewModel_PrimeChecker_printNotPrime_();
			virtual uml::ObjectFlow* get_OF_NewModel_CheckIfPrimeFork1_InputPin_coaDividestarget();
			virtual uml::ObjectFlow* get_OF_NewModel_CheckIfPrimeFork1_InputPin_coaIsNotFinishedtarget();
			virtual uml::ObjectFlow* get_OF_NewModel_CheckIfPrimeFork1_InputPin_coaIsOddtarget();
			virtual uml::ObjectFlow* get_OF_NewModel_CheckIfPrimeFork1_InputPin_coaNexttarget();
			virtual uml::ObjectFlow* get_OF_NewModel_CheckIfPrimeFork1_InputPin_next_calltarget();
			virtual uml::ObjectFlow* get_OF_NewModel_CheckIfPrimeprimeChecker_NewModel_CheckIfPrimeFork1();
			virtual uml::OutputPin* get_OutputPin_coaDividesisDivisible();
			virtual uml::OutputPin* get_OutputPin_coaIsNotFinishedisNotFinished();
			virtual uml::OutputPin* get_OutputPin_coaIsOddisOdd();
			

		private:
			//private variables for ownedMember of the metamodel package
			uml::ControlFlow* cF_NewModel_CheckIfPrimeIsOdd_NewModel_CheckIfPrimeMerge = nullptr;
			uml::LiteralBoolean* cF_NewModel_CheckIfPrimeIsOdd_NewModel_CheckIfPrimeMerge_guard_LiteralBoolean_CF_NewModel_CheckIfPrimeIsOdd_NewModel_CheckIfPrimeMerge = nullptr;
			uml::ControlFlow* cF_NewModel_CheckIfPrimeIsOdd_NewModel_CheckIfPrimecbaPrintNotPrime2 = nullptr;
			uml::LiteralBoolean* cF_NewModel_CheckIfPrimeIsOdd_NewModel_CheckIfPrimecbaPrintNotPrime2_guard_LiteralBoolean_CF_NewModel_CheckIfPrimeIsOdd_NewModel_CheckIfPrimecbaPrintNotPrime2 = nullptr;
			uml::ControlFlow* cF_NewModel_CheckIfPrimeMerge_NewModel_CheckIfPrimecoaDivides = nullptr;
			uml::LiteralBoolean* cF_NewModel_CheckIfPrimeMerge_NewModel_CheckIfPrimecoaDivides_guard_LiteralBoolean_CF_NewModel_CheckIfPrimeMerge_NewModel_CheckIfPrimecoaDivides = nullptr;
			uml::LiteralInteger* cF_NewModel_CheckIfPrimeMerge_NewModel_CheckIfPrimecoaDivides_weight_LiteralInteger_CF_NewModel_CheckIfPrimeMerge_NewModel_CheckIfPrimecoaDivides = nullptr;
			uml::ControlFlow* cF_NewModel_CheckIfPrimecbaPrintIsPrime_NewModel_CheckIfPrimeActivityFinal3 = nullptr;
			uml::LiteralBoolean* cF_NewModel_CheckIfPrimecbaPrintIsPrime_NewModel_CheckIfPrimeActivityFinal3_guard_LiteralBoolean_CF_NewModel_CheckIfPrimecbaPrintIsPrime_NewModel_CheckIfPrimeActivityFinal3 = nullptr;
			uml::LiteralInteger* cF_NewModel_CheckIfPrimecbaPrintIsPrime_NewModel_CheckIfPrimeActivityFinal3_weight_LiteralInteger_CF_NewModel_CheckIfPrimecbaPrintIsPrime_NewModel_CheckIfPrimeActivityFinal3 = nullptr;
			uml::ControlFlow* cF_NewModel_CheckIfPrimecbaPrintNotPrime2_NewModel_CheckIfPrimeActivityFinal1 = nullptr;
			uml::LiteralBoolean* cF_NewModel_CheckIfPrimecbaPrintNotPrime2_NewModel_CheckIfPrimeActivityFinal1_guard_LiteralBoolean_CF_NewModel_CheckIfPrimecbaPrintNotPrime2_NewModel_CheckIfPrimeActivityFinal1 = nullptr;
			uml::LiteralInteger* cF_NewModel_CheckIfPrimecbaPrintNotPrime2_NewModel_CheckIfPrimeActivityFinal1_weight_LiteralInteger_CF_NewModel_CheckIfPrimecbaPrintNotPrime2_NewModel_CheckIfPrimeActivityFinal1 = nullptr;
			uml::ControlFlow* cF_NewModel_CheckIfPrimecbaPrintNotPrime_NewModel_CheckIfPrimeActivityFinal2 = nullptr;
			uml::LiteralBoolean* cF_NewModel_CheckIfPrimecbaPrintNotPrime_NewModel_CheckIfPrimeActivityFinal2_guard_LiteralBoolean_CF_NewModel_CheckIfPrimecbaPrintNotPrime_NewModel_CheckIfPrimeActivityFinal2 = nullptr;
			uml::LiteralInteger* cF_NewModel_CheckIfPrimecbaPrintNotPrime_NewModel_CheckIfPrimeActivityFinal2_weight_LiteralInteger_CF_NewModel_CheckIfPrimecbaPrintNotPrime_NewModel_CheckIfPrimeActivityFinal2 = nullptr;
			uml::ControlFlow* cF_NewModel_CheckIfPrimedivides_NewModel_CheckIfPrimecbaPrintNotPrime = nullptr;
			uml::LiteralBoolean* cF_NewModel_CheckIfPrimedivides_NewModel_CheckIfPrimecbaPrintNotPrime_guard_LiteralBoolean_CF_NewModel_CheckIfPrimedivides_NewModel_CheckIfPrimecbaPrintNotPrime = nullptr;
			uml::LiteralInteger* cF_NewModel_CheckIfPrimedivides_NewModel_CheckIfPrimecbaPrintNotPrime_weight_LiteralInteger_CF_NewModel_CheckIfPrimedivides_NewModel_CheckIfPrimecbaPrintNotPrime = nullptr;
			uml::ControlFlow* cF_NewModel_CheckIfPrimedivides_NewModel_CheckIfPrimenext_call = nullptr;
			uml::LiteralBoolean* cF_NewModel_CheckIfPrimedivides_NewModel_CheckIfPrimenext_call_guard_LiteralBoolean_CF_NewModel_CheckIfPrimedivides_NewModel_CheckIfPrimenext_call = nullptr;
			uml::LiteralInteger* cF_NewModel_CheckIfPrimedivides_NewModel_CheckIfPrimenext_call_weight_LiteralInteger_CF_NewModel_CheckIfPrimedivides_NewModel_CheckIfPrimenext_call = nullptr;
			uml::ControlFlow* cF_NewModel_CheckIfPrimeisNotFinished_NewModel_CheckIfPrimeMerge = nullptr;
			uml::LiteralBoolean* cF_NewModel_CheckIfPrimeisNotFinished_NewModel_CheckIfPrimeMerge_guard_LiteralBoolean_CF_NewModel_CheckIfPrimeisNotFinished_NewModel_CheckIfPrimeMerge = nullptr;
			uml::ControlFlow* cF_NewModel_CheckIfPrimeisNotFinished_NewModel_CheckIfPrimecbaPrintIsPrime = nullptr;
			uml::LiteralBoolean* cF_NewModel_CheckIfPrimeisNotFinished_NewModel_CheckIfPrimecbaPrintIsPrime_guard_LiteralBoolean_CF_NewModel_CheckIfPrimeisNotFinished_NewModel_CheckIfPrimecbaPrintIsPrime = nullptr;
			uml::LiteralInteger* cF_NewModel_CheckIfPrimeisNotFinished_NewModel_CheckIfPrimecbaPrintIsPrime_weight_LiteralInteger_CF_NewModel_CheckIfPrimeisNotFinished_NewModel_CheckIfPrimecbaPrintIsPrime = nullptr;
			uml::ControlFlow* cF_NewModel_CheckIfPrimenext_call_NewModel_CheckIfPrimecoaIsNotFinished = nullptr;
			uml::LiteralBoolean* cF_NewModel_CheckIfPrimenext_call_NewModel_CheckIfPrimecoaIsNotFinished_guard_LiteralBoolean_CF_NewModel_CheckIfPrimenext_call_NewModel_CheckIfPrimecoaIsNotFinished = nullptr;
			uml::LiteralInteger* cF_NewModel_CheckIfPrimenext_call_NewModel_CheckIfPrimecoaIsNotFinished_weight_LiteralInteger_CF_NewModel_CheckIfPrimenext_call_NewModel_CheckIfPrimecoaIsNotFinished = nullptr;
			uml::InputPin* inputPin_coaDividestarget = nullptr;
			uml::InputPin* inputPin_coaIsNotFinishedtarget = nullptr;
			uml::InputPin* inputPin_coaIsOddtarget = nullptr;
			uml::InputPin* inputPin_coaNexttarget = nullptr;
			uml::InputPin* inputPin_next_calltarget = nullptr;
			uml::Activity* newModel_CheckIfPrime = nullptr;
			uml::ActivityFinalNode* newModel_CheckIfPrimeActivityFinal1 = nullptr;
			uml::ActivityFinalNode* newModel_CheckIfPrimeActivityFinal2 = nullptr;
			uml::ActivityFinalNode* newModel_CheckIfPrimeActivityFinal3 = nullptr;
			uml::ForkNode* newModel_CheckIfPrimeFork1 = nullptr;
			uml::DecisionNode* newModel_CheckIfPrimeIsOdd = nullptr;
			uml::MergeNode* newModel_CheckIfPrimeMerge = nullptr;
			uml::Parameter* newModel_CheckIfPrime_NewModel_CheckIfPrime_ActInputNode = nullptr;
			uml::CallBehaviorAction* newModel_CheckIfPrimecbaPrintIsPrime = nullptr;
			uml::CallBehaviorAction* newModel_CheckIfPrimecbaPrintNotPrime = nullptr;
			uml::CallBehaviorAction* newModel_CheckIfPrimecbaPrintNotPrime2 = nullptr;
			uml::CallOperationAction* newModel_CheckIfPrimecoaDivides = nullptr;
			uml::CallOperationAction* newModel_CheckIfPrimecoaIsNotFinished = nullptr;
			uml::CallOperationAction* newModel_CheckIfPrimecoaIsOdd = nullptr;
			uml::CallOperationAction* newModel_CheckIfPrimecoaNext = nullptr;
			uml::DecisionNode* newModel_CheckIfPrimedivides = nullptr;
			uml::ObjectFlow* newModel_CheckIfPrimeifDivides = nullptr;
			uml::ObjectFlow* newModel_CheckIfPrimeifIsNotFinished = nullptr;
			uml::ObjectFlow* newModel_CheckIfPrimeifIsOdd = nullptr;
			uml::DecisionNode* newModel_CheckIfPrimeisNotFinished = nullptr;
			uml::CallOperationAction* newModel_CheckIfPrimenext_call = nullptr;
			uml::ActivityParameterNode* newModel_CheckIfPrimeprimeChecker = nullptr;
			uml::LiteralInteger* newModel_CheckIfPrimeprimeChecker_upperBound_LiteralInteger_NewModel_CheckIfPrimeprimeChecker = nullptr;
			uml::Class* newModel_PrimeChecker = nullptr;
			uml::Property* newModel_PrimeChecker_divider = nullptr;
			uml::LiteralInteger* newModel_PrimeChecker_divider_defaultValue_LiteralInteger_NewModel_PrimeChecker_divider = nullptr;
			uml::Parameter* newModel_PrimeChecker_divides_isDivisible = nullptr;
			uml::LiteralString* newModel_PrimeChecker_divides_isDivisible_defaultValue_LiteralString_NewModel_PrimeChecker_divides_isDivisible = nullptr;
			uml::Operation* newModel_PrimeChecker_divides_ = nullptr;
			uml::FunctionBehavior* newModel_PrimeChecker_fbDivides = nullptr;
			uml::Parameter* newModel_PrimeChecker_fbDivides_isDivisible = nullptr;
			uml::LiteralString* newModel_PrimeChecker_fbDivides_isDivisible_defaultValue_LiteralString_NewModel_PrimeChecker_fbDivides_isDivisible = nullptr;
			uml::FunctionBehavior* newModel_PrimeChecker_fbIsNotFinished = nullptr;
			uml::Parameter* newModel_PrimeChecker_fbIsNotFinished_isNotFinished = nullptr;
			uml::FunctionBehavior* newModel_PrimeChecker_fbIsOdd = nullptr;
			uml::Parameter* newModel_PrimeChecker_fbIsOdd_isOdd = nullptr;
			uml::LiteralString* newModel_PrimeChecker_fbIsOdd_isOdd_defaultValue_LiteralString_NewModel_PrimeChecker_fbIsOdd_isOdd = nullptr;
			uml::FunctionBehavior* newModel_PrimeChecker_fbNext = nullptr;
			uml::FunctionBehavior* newModel_PrimeChecker_fbPrintIsPrime = nullptr;
			uml::FunctionBehavior* newModel_PrimeChecker_fbPrintNotPrime = nullptr;
			uml::Parameter* newModel_PrimeChecker_isNotFinished_isNotFinished = nullptr;
			uml::Operation* newModel_PrimeChecker_isNotFinished_ = nullptr;
			uml::Parameter* newModel_PrimeChecker_isOdd_isOdd = nullptr;
			uml::LiteralString* newModel_PrimeChecker_isOdd_isOdd_defaultValue_LiteralString_NewModel_PrimeChecker_isOdd_isOdd = nullptr;
			uml::Operation* newModel_PrimeChecker_isOdd_ = nullptr;
			uml::Operation* newModel_PrimeChecker_next_ = nullptr;
			uml::Property* newModel_PrimeChecker_number = nullptr;
			uml::LiteralInteger* newModel_PrimeChecker_number_defaultValue_LiteralInteger_NewModel_PrimeChecker_number = nullptr;
			uml::Operation* newModel_PrimeChecker_printIsPrime_ = nullptr;
			uml::Operation* newModel_PrimeChecker_printNotPrime_ = nullptr;
			uml::ObjectFlow* oF_NewModel_CheckIfPrimeFork1_InputPin_coaDividestarget = nullptr;
			uml::ObjectFlow* oF_NewModel_CheckIfPrimeFork1_InputPin_coaIsNotFinishedtarget = nullptr;
			uml::ObjectFlow* oF_NewModel_CheckIfPrimeFork1_InputPin_coaIsOddtarget = nullptr;
			uml::ObjectFlow* oF_NewModel_CheckIfPrimeFork1_InputPin_coaNexttarget = nullptr;
			uml::ObjectFlow* oF_NewModel_CheckIfPrimeFork1_InputPin_next_calltarget = nullptr;
			uml::ObjectFlow* oF_NewModel_CheckIfPrimeprimeChecker_NewModel_CheckIfPrimeFork1 = nullptr;
			uml::OutputPin* outputPin_coaDividesisDivisible = nullptr;
			uml::OutputPin* outputPin_coaIsNotFinishedisNotFinished = nullptr;
			uml::OutputPin* outputPin_coaIsOddisOdd = nullptr;
			

			static NewModelPackage* create();
			static bool isInited;
			bool isInitialized = false;
			bool isCreated = false;

			void initMetaModel();
			virtual void init();

		public:
 			void initializePackageContents();
			void createPackageContents();
	};
} 
#endif /* end of include guard: NEWMODEL_METAMODELPACKAGEIMPL_HPP */
