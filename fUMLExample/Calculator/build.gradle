apply plugin: 'base' 

description 'Build tasks for project: CalcModel'

task buildCalcModel(dependsOn: ['generateCalcModel', 'compileCalcModelAll']) {
	group 'CalcModel'
	description 'build CalcModel'
}

task compileCalcModelAll(dependsOn: ['compileCalcModel', 'compileCalcModelExec']) {
	group 'CalcModel'
	description 'compile the binaries for the fuml generated model CalcModel'
}

task compileCalcModel(dependsOn: ['compileCalcModelDebug', 'compileCalcModelRelease']) {
	group 'CalcModel'
	description 'compile CalcModel'
}
task compileCalcModelDebug {
	description 'compile CalcModel in Debug'

	def folder = new File(file('./src_gen/CalcModel/.cmake/Debug').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'src_gen/CalcModel/.cmake/Debug'
			commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Debug ' + file("./src_gen/CalcModel").absolutePath
		}
		exec {
			workingDir 'src_gen/CalcModel/.cmake/Debug'
			if (make_parallel_jobs)
			{			
				commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
			}
			else
			{
				commandLine 'cmd', '/c', 'mingw32-make install' 
			}
		}
	}
}
compileCalcModelDebug.onlyIf {
	(project.hasProperty("DEBUG") && !(project.getProperty("DEBUG") == '0')) || (project.hasProperty("D") && !(project.getProperty("D") == '0')) || (!project.hasProperty("RELEASE") && !project.hasProperty("R") && !project.hasProperty("DEBUG") && !project.hasProperty("D"))
}
task compileCalcModelRelease {
	description 'compile CalcModel in Release'

	def folder = new File(file('./src_gen/CalcModel/.cmake/Release').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'src_gen/CalcModel/.cmake/Release'
			commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Release ' + file("./src_gen/CalcModel").absolutePath
		}
		exec {
			workingDir 'src_gen/CalcModel/.cmake/Release'
			if (make_parallel_jobs)
			{			
				commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
			}
			else
			{
				commandLine 'cmd', '/c', 'mingw32-make install' 
			}
		}
	}
}
compileCalcModelRelease.onlyIf {
	(project.hasProperty("RELEASE") && !(project.getProperty("RELEASE") == '0')) || (project.hasProperty("R") && !(project.getProperty("R") == '0')) || (!project.hasProperty("RELEASE") && !project.hasProperty("R") && !project.hasProperty("DEBUG") && !project.hasProperty("D"))
}

task compileCalcModelExec(dependsOn: ['compileCalcModelExecDebug', 'compileCalcModelExecRelease']) {
	group 'CalcModel'
	description 'compile CalcModel'
}
task compileCalcModelExecDebug {
	description 'compile CalcModelExec in Debug'

	def folder = new File(file('./src_gen/CalcModelExec/.cmake/Debug').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'src_gen/CalcModelExec/.cmake/Debug'
			commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Debug ' + file("./src_gen/CalcModelExec").absolutePath
		}
		exec {
			workingDir 'src_gen/CalcModelExec/.cmake/Debug'
			if (make_parallel_jobs)
			{			
				commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
			}
			else
			{
				commandLine 'cmd', '/c', 'mingw32-make install' 
			}
		}
	}
}
compileCalcModelExecDebug.onlyIf {
	(project.hasProperty("DEBUG") && !(project.getProperty("DEBUG") == '0')) || (project.hasProperty("D") && !(project.getProperty("D") == '0')) || (!project.hasProperty("RELEASE") && !project.hasProperty("R") && !project.hasProperty("DEBUG") && !project.hasProperty("D"))
}
task compileCalcModelExecRelease {
	description 'compile CalcModelExec in Release'

	def folder = new File(file('./src_gen/CalcModelExec/.cmake/Release').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'src_gen/CalcModelExec/.cmake/Release'
			commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Release ' + file("./src_gen/CalcModelExec").absolutePath
		}
		exec {
			workingDir 'src_gen/CalcModelExec/.cmake/Release'
			if (make_parallel_jobs)
			{			
				commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
			}
			else
			{
				commandLine 'cmd', '/c', 'mingw32-make install' 
			}
		}
	}
}
compileCalcModelExecRelease.onlyIf {
	(project.hasProperty("RELEASE") && !(project.getProperty("RELEASE") == '0')) || (project.hasProperty("R") && !(project.getProperty("R") == '0')) || (!project.hasProperty("RELEASE") && !project.hasProperty("R") && !project.hasProperty("DEBUG") && !project.hasProperty("D"))
}

task generateCalcModel(type: JavaExec) {
	group 'CalcModel'
	description 'generate C++ code of CalcModel.uml model'
	main = "-jar"
	workingDir "./model"
	args System.getenv('MDE4CPP_HOME') + "/application/generator/fUML4CPP.jar", "CalcModel.uml", "../src_gen"
	inputs.files file(System.getenv('MDE4CPP_HOME') + "/application/generator/fUML4CPP.jar"), file("model/CalcModel.uml")
	outputs.dir file("src_gen")
	
	doFirst {
		if (System.getenv('MDE4CPP_HOME') == null) {
			throw new GradleException('System environment variable "MDE4CPP_HOME" is not defined')
		}
		if (!file(System.getenv('MDE4CPP_HOME') + "/application/generator/fUML4CPP.jar").exists()) {
			throw new GradleException('fUML4CPP.jar is missing in folder ' + file(System.getenv('MDE4CPP_HOME') + '/application/generator') + '. Please run task createFUML4CPP!')
		}
	}
}

compileCalcModelDebug.mustRunAfter generateCalcModel
compileCalcModelRelease.mustRunAfter generateCalcModel
compileCalcModelExecDebug.mustRunAfter compileCalcModelDebug
compileCalcModelExecRelease.mustRunAfter compileCalcModelRelease

clean.doFirst {
	def cmakeFolder = file('./src_gen/CalcModel/.cmake/')
	if(cmakeFolder.exists()) {
    	delete cmakeFolder.absolutePath
   		println "deleting folder " + cmakeFolder.absolutePath
	}

	def cmakeFolderExec = file('./src_gen/CalcModelExec/.cmake/')
	if(cmakeFolderExec.exists()) {
    	delete cmakeFolderExec.absolutePath
   		println "deleting folder " + cmakeFolderExec.absolutePath
	}
}
