/*-------------------------------------------------
*
* Tasks created by MDE4CPP Generator 
*
*-------------------------------------------------
*/

apply plugin: 'cpp'

description 'C++ project of model CalcModel.ecore, generated by Ecore4CPP'

File appendDebugSuffix(File binaryFile) {
  int extensionSeparatorIndex = binaryFile.path.lastIndexOf('.')
  return new File(binaryFile.path.substring(0, extensionSeparatorIndex) + "d" + binaryFile.path.substring(extensionSeparatorIndex))
}

task deliverCalcModel(dependsOn: ['deliverCalcModelHeaders','deliverCalcModelDebugSharedLibrary', 'deliverCalcModelReleaseSharedLibrary']) {
	description 'deliver CalcModel header, debug and release libraries to application folder (%MDE4CPP_HOME%/application)'
}

task deliverCalcModelHeaders(type: Copy) {
	description 'deliver CalcModel header to %MDE4CPP_HOME%/application/include/CalcModel'
	from "."
	into System.getenv('MDE4CPP_HOME')+"/application/include/CalcModel"
	include "**/*.hpp"
	exclude "build", ".gradle"
}

task deliverCalcModelDebugSharedLibrary(type: Copy) {
	description 'deliver CalcModel debug libary to %MDE4CPP_HOME%/application/bin'
	from "build/libs/CalcModel/shared/debug"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "CalcModeld.dll"
}

task deliverCalcModelReleaseSharedLibrary(type: Copy) {
	description 'deliver CalcModel release libary to %MDE4CPP_HOME%/application/bin'
	from "build/libs/CalcModel/shared/release"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "CalcModel.dll"
}


model {
    toolChains {
    	 gcc(Gcc) {
    	 	"g++"
    	 }
    }
	
    buildTypes {
        debug 
        release
    }


	repositories {
        libs(PrebuiltLibraries) {
			[ 'ecoreReflection', 'umlReflection' ].each {
				delegate."$it" {
					def libraryName = "${name}"
					headers.srcDir System.getenv('MDE4CPP_HOME')+"/application/include"
					binaries.withType(SharedLibraryBinary) {
						if(buildType == buildTypes.debug) {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}d.dll")
						} else {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}.dll")						
						}
					}
				}	
			}         
		}
	}

	repositories {
        libs(PrebuiltLibraries) {
			[  'ecore', 'uml', 'primitiveTypesReflection' ].each {
				delegate."$it" {
					def libraryName = "${name}"
					headers.srcDir System.getenv('MDE4CPP_HOME')+"/application/include/${libraryName}"
					binaries.withType(SharedLibraryBinary) {
						if(buildType == buildTypes.debug) {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}d.dll")
						} else {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}.dll")						
						}
					}
				}	
			}         
		}
	}

    components {
        CalcModel(NativeLibrarySpec)
        {
        	sources {
                cpp {
                    source {
                        srcDirs ".", "../" 

						include "impl/CheckIfPrimeImpl.cpp"
						include "impl/PrimeCheckerImpl.cpp"
						include	"impl/CalcModelFactoryImpl.cpp"
						include	"CalcModelFactory.cpp"
						include	"impl/CalcModelPackageImpl.cpp"
						include	"CalcModelPackage.cpp"
                    }
					exportedHeaders {
                        srcDirs "."
                        srcDirs "../" 
						srcDirs System.getenv('MDE4CPP_HOME')+"/application/include"
						srcDirs System.getenv('MDE4CPP_HOME')+"/application/include/util"
                        include "**/*.hpp"
                    }
					lib library: "ecore"
					lib library: "uml"
					lib library: "primitiveTypesReflection"
					lib library: "ecoreReflection"
					lib library: "umlReflection"

                }
            }

			binaries.withType(StaticLibraryBinarySpec) {
				buildable = false
			}
        }
		
		withType(NativeComponentSpec) {
			binaries.withType(NativeBinarySpec) {
				if(buildType == buildTypes.debug) {
					if (it instanceof SharedLibraryBinarySpec) {
						sharedLibraryFile = appendDebugSuffix(sharedLibraryFile)
						sharedLibraryLinkFile = appendDebugSuffix(sharedLibraryLinkFile)
					} else if (it instanceof StaticLibraryBinarySpec) {
						staticLibraryFile = appendDebugSuffix(staticLibraryFile)
					} else {
						throw new GradleException("Unknown native library binary")
					}
				}
			}
        }
    }
    
    binaries {
        all {
        	cppCompiler.args '-std=c++11','-Wall', '-Wno-overloaded-virtual', '-pipe'
			if (buildType == buildTypes.debug) {
				cppCompiler.args '-g'
			}

			else {
				cppCompiler.args '-O3', '-DNDEBUG'
			}
        }
    }
}

build.finalizedBy(deliverCalcModel)
