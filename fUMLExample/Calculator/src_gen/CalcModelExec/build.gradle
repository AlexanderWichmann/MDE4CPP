/*-------------------------------------------------
*
* Tasks created by fuml4CPP Generator 
*
*-------------------------------------------------
*/

apply plugin: 'cpp'

description 'C++ project of model CalcModel.uml, generated by Fuml4CPP'

File appendDebugSuffix(File binaryFile) {
  int extensionSeparatorIndex = binaryFile.path.lastIndexOf('.')
  return new File(binaryFile.path.substring(0, extensionSeparatorIndex) + "d" + binaryFile.path.substring(extensionSeparatorIndex))
}

task deliverCalcModelExec(dependsOn: ['deliverCalcModelExecDebugExecutable', 'deliverCalcModelExecReleaseExecutable']) {
	description 'deliver CalcModelExec header, debug and release executable to application folder (%MDE4CPP_HOME%/application)'
}

task deliverCalcModelExecDebugExecutable(type: Copy) {
	description 'deliver CalcModelExec debug executable to %MDE4CPP_HOME%/application/bin'
	from "build/exe/CalcModelExec/debug"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "CalcModelExecd.exe"
}

task deliverCalcModelExecReleaseExecutable(type: Copy) {
	description 'deliver CalcModelExec release executable to %MDE4CPP_HOME%/application/bin/release'
	from "build/exe/CalcModelExec/release"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "CalcModelExec.exe"
}


model {
    toolChains {
    	 gcc(Gcc) {
    	 	"g++"
    	 }
    }
	
    buildTypes {
        debug 
        release
    }
	repositories {
        libs(PrebuiltLibraries) {
			[ 'ecoreReflection', 'umlReflection' ].each {
				delegate."$it" {
					def libraryName = "${name}"
					headers.srcDir System.getenv('MDE4CPP_HOME')+"/application/include"
					binaries.withType(SharedLibraryBinary) {
						if(buildType == buildTypes.debug) {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}d.dll")
						} else {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}.dll")						
						}
					}
				}	
			}         
		}
	}

	repositories {
        libs(PrebuiltLibraries) {
			[  'uml', 'ecore', 'fuml', 'primitiveTypesReflection', 'CalcModel' ].each {
				delegate."$it" {
					def libraryName = "${name}"
					headers.srcDir System.getenv('MDE4CPP_HOME')+"/application/include/${libraryName}"
					binaries.withType(SharedLibraryBinary) {
						if(buildType == buildTypes.debug) {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}d.dll")
						} else {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}.dll")						
						}
					}
				}	
			}         
		}
	}

    components {
        CalcModelExec(NativeExecutableSpec)
        {
        	sources {
                cpp {
                    source {
                        srcDirs "." 
						include "CheckIfPrimeExecution.cpp"
						include "PrimeCheckerExecution.cpp"
						include "FbDividesExecution.cpp"
						include "FbNextExecution.cpp"
						include "FbPrintIsPrimeExecution.cpp"
						include "FbIsOddExecution.cpp"
						include "FbPrintNotPrimeExecution.cpp"
						include "FbIsNotFinishedExecution.cpp"
						include "main.cpp"
						include	"impl/CalcModelFactoryImpl.cpp"
						include	"CalcModelFactory.cpp"
						include	"impl/CalcModelPackageImpl.cpp"
						include	"CalcModelPackage.cpp"
                    }
					exportedHeaders {
                        srcDirs ".", "../", System.getenv('MDE4CPP_HOME')+"/application/include", System.getenv('MDE4CPP_HOME')+"/application/include/Util"
                        include "**/*.hpp"
                    }
									lib library: "uml"
									lib library: "ecore"
									lib library: "fuml"
									lib library: "CalcModel"
									lib library: "primitiveTypesReflection"
									lib library: "ecoreReflection"
									lib library: "umlReflection"
				
                }
            }
        }
		
		withType(NativeComponentSpec) {
			binaries.withType(NativeBinarySpec) {
				if (it instanceof NativeExecutableBinarySpec) {
					if(buildType == buildTypes.debug) {
						it.getExecutable().setFile(appendDebugSuffix(it.getExecutable().getFile()))						
					}
				}
			}
        }
    }
    
    binaries {
        all {
        	cppCompiler.args '-std=c++11','-Wall', '-Wno-overloaded-virtual', '-pipe'
			if (buildType == buildTypes.debug) {
				cppCompiler.args '-g'
			}
			else {
				cppCompiler.args '-O3', '-DNDEBUG'
			}
        }
    }
}

build.finalizedBy(deliverCalcModelExec)
