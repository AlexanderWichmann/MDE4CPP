apply plugin: 'base' 

description 'Build tasks for project: types'

task buildTypes(dependsOn: ['generateTypes', 'compileTypes']) {
	group 'types'
	description 'build types in debug and release'
}
task buildTypesDebug(dependsOn: ['generateTypes', 'compileTypesDebug']) {
	group 'types'
	description 'build types in debug'
}
task buildTypesRelease(dependsOn: ['generateTypes', 'compileTypesRelease']) {
	group 'types'
	description 'build types in release'
}

task compileTypes(dependsOn: ['compileTypesDebug', 'compileTypesRelease']) {
	group 'types'
	description 'compile types in debug and release'
}
task compileTypesDebug {
	group 'types'
	description 'compile types in Debug'

	def folder = new File(file('./src_gen/types/.cmake/Debug').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'src_gen/types/.cmake/Debug'
			commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Debug ' + file("./src_gen/types").absolutePath
		}
		exec {
			workingDir 'src_gen/types/.cmake/Debug'
			if (make_parallel_jobs)
			{			
				commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
			}
			else
			{
				commandLine 'cmd', '/c', 'mingw32-make install' 
			}
		}
	}
}
task compileTypesRelease {
	group 'types'
	description 'compile types in Release'

	def folder = new File(file('./src_gen/types/.cmake/Release').absolutePath)
	if( !folder.exists() ) {
		folder.mkdirs()
	}

	doLast {
		exec {
			workingDir 'src_gen/types/.cmake/Release'
			commandLine 'cmd', '/c', 'cmake -G "MinGW Makefiles" -D CMAKE_BUILD_TYPE=Release ' + file("./src_gen/types").absolutePath
		}
		exec {
			workingDir 'src_gen/types/.cmake/Release'
			if (make_parallel_jobs)
			{			
				commandLine 'cmd', '/c', 'mingw32-make install -j' + make_parallel_jobs
			}
			else
			{
				commandLine 'cmd', '/c', 'mingw32-make install' 
			}
		}
	}
}

task generateTypes(type: JavaExec) {
	group 'types'
	description 'generate C++ code of types.ecore model'
	main = "-jar"
	workingDir "./model"
	args System.getenv('MDE4CPP_HOME') + "/application/generator/ecore4CPP.jar", "types.ecore", "../src_gen"
	inputs.files file(System.getenv('MDE4CPP_HOME') + "/application/generator/ecore4CPP.jar"), file("model/types.ecore")
	outputs.dir file("src_gen")
	
	doFirst {
		if (System.getenv('MDE4CPP_HOME') == null) {
			throw new GradleException('System environment variable "MDE4CPP_HOME" is not defined')
		}
		if (!file(System.getenv('MDE4CPP_HOME') + "/application/generator/ecore4CPP.jar").exists()) {
			throw new GradleException('ecore4CPP.jar is missing in folder ' + file(System.getenv('MDE4CPP_HOME') + '/application/generator') + '. Please run task createEcore4CPP!')
		}
	}
}

compileTypes.mustRunAfter generateTypes
compileTypesDebug.mustRunAfter generateTypes
compileTypesRelease.mustRunAfter generateTypes

clean.doFirst {
	def cmakeFolder = file('./src_gen/types/.cmake/')
	if(cmakeFolder.exists()) {
    	delete cmakeFolder.absolutePath
   		println "deleting folder " + cmakeFolder.absolutePath
	}
}
