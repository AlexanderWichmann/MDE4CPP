/*-------------------------------------------------
*
* Tasks created by ecore4CPP Generator 
*
*-------------------------------------------------
*/

apply plugin: 'cpp'

description 'C++ project of model types.ecore, generated by Ecore4CPP'

File appendDebugSuffix(File binaryFile) {
	int extensionSeparatorIndex = binaryFile.path.lastIndexOf('.')
	return new File(binaryFile.path.substring(0, extensionSeparatorIndex) + "d" + binaryFile.path.substring(extensionSeparatorIndex))
}

task deliverTypes(dependsOn: ['deliverTypesHeaders','deliverTypesDebugSharedLibrary', 'deliverTypesReleaseSharedLibrary']) {
	description 'deliver types header, debug and release libraries to application folder (%MDE4CPP_HOME%/application)'
}

task deliverTypesHeaders(type: Copy) {
	description 'deliver types header to %MDE4CPP_HOME%/application/include/types'
	from "."
	into System.getenv('MDE4CPP_HOME')+"/application/include/types"
	include "**/*.hpp"
	exclude "build", ".gradle"
}

task deliverTypesDebugSharedLibrary(type: Copy) {
	description 'deliver types debug libary to %MDE4CPP_HOME%/application/bin'
	from "build/libs/types/shared/debug"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "typesd.dll"
}

task deliverTypesReleaseSharedLibrary(type: Copy) {
	description 'deliver types release libary to %MDE4CPP_HOME%/application/bin'
	from "build/libs/types/shared/release"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "types.dll"
}

model {
    toolChains {
    	 gcc(Gcc) {
    	 	"g++"
    	 }
    }
	
    buildTypes {
        debug 
        release
    }
	repositories {
        libs(PrebuiltLibraries) {
			[ "ecore", "PluginFramework" ].each {
				delegate."$it" {
					def libraryName = "${name}"
					headers.srcDir System.getenv('MDE4CPP_HOME')+"/application/include/${libraryName}"
					binaries.withType(SharedLibraryBinary) {
						if(buildType == buildTypes.debug) {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}d.dll")
						} else {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}.dll")						
						}
					}
				}	
			}         
		}
	}

    components {
        types(NativeLibrarySpec)
        {
        	sources {
                cpp {
                    source {
                        srcDirs "."  
						include	"impl/TypesFactoryImpl.cpp"
						include	"TypesFactory.cpp"
						include	"impl/TypesPackageImpl.cpp"
						include	"TypesPackage.cpp"
						include	"impl/TypesPluginImpl.cpp"
						include	"TypesPlugin.cpp"
                    }
					exportedHeaders {
                        srcDirs ".", "../", System.getenv('MDE4CPP_HOME')+"/application/include", System.getenv('MDE4CPP_HOME')+"/application/include/abstractDataTypes"
                        include "**/*.hpp"
                    }
					lib library: "ecore"
					lib library: "PluginFramework"
                }
            }

			binaries.withType(StaticLibraryBinarySpec) {
				buildable = false
			}
        }
		
		withType(NativeComponentSpec) {
			binaries.withType(NativeBinarySpec) {
				if(buildType == buildTypes.debug) {
					if (it instanceof SharedLibraryBinarySpec) {
						sharedLibraryFile = appendDebugSuffix(sharedLibraryFile)
						sharedLibraryLinkFile = appendDebugSuffix(sharedLibraryLinkFile)
					} else if (it instanceof StaticLibraryBinarySpec) {
						staticLibraryFile = appendDebugSuffix(staticLibraryFile)
					} else {
						throw new GradleException("Unknown native library binary")
					}
				}
			}
        }
    }
    
    binaries {
        all {
			linker.args '-fopenmp'
        	cppCompiler.args '-std=c++1y','-Wall', '-Wno-overloaded-virtual', '-Wdeprecated-declarations', '-pipe', '-fmax-errors=5', '-fopenmp'
			if (buildType == buildTypes.debug) {
				cppCompiler.args '-g'
			}
			else {
				cppCompiler.args '-O3', '-DNDEBUG'
			}
        }
    }
}

build.finalizedBy(deliverTypes)
