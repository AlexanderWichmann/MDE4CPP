plugins {
  id "tui.sse.mde4cpp.mde4cpp-compile-plugin" version "0.2"
}
apply plugin: "base"

description 'Example collection'

task buildBenchmarks(dependsOn: ['compileEcoreBenchmark', 'compileMemoryBenchmarkEcore']) {
	group 'Examples'
	description 'build all benchmark applications'	
}

task compileEcoreBenchmark(type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group 'Examples'
	description 'compile ecoreBenchmark'
	
	projectFolder = file("./ecoreBenchmark")
}

task compileMemoryBenchmarkEcore(type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group 'Examples'
	description 'compile memoryBenchmarkEcore'
	
	projectFolder = file("./memoryBenchmarkEcore")
}

task compileUMLBenchmark(type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group 'Examples'
	description 'compile UMLBenchmark'
	
	projectFolder = file("./UMLBenchmark")
}

clean.doFirst {
	def cmakeFolder = file("./ecoreBenchmark/.cmake")
	if(cmakeFolder.exists()) {
    	delete cmakeFolder.absolutePath
   		println "deleting folder " + cmakeFolder.absolutePath
	}
	
	cmakeFolder = file("./memoryBenchmarkEcore/.cmake")
	if(cmakeFolder.exists()) {
    	delete cmakeFolder.absolutePath
   		println "deleting folder " + cmakeFolder.absolutePath
	}
	
	cmakeFolder = file("./UMLBenchmark/.cmake")
	if(cmakeFolder.exists()) {
    	delete cmakeFolder.absolutePath
   		println "deleting folder " + cmakeFolder.absolutePath
	}
}