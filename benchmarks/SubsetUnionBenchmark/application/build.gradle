plugins {
	id "tui.sse.mde4cpp.mde4cpp-compile-plugin" version "0.4"
}

description 'Compile task for project: App_subsetUnionBenchmark'

task compileApplicationForSubsetUnionBenchmark(type: tui.sse.mde4cpp.MDE4CPPCompile) {
	group 'subsetUnionBenchmark'
	description 'compile ApplicationForsubsetUnionBenchmark'

	projectFolder = file('.' + File.separator + 'src')

	inputs.files(fileTree('.') {
        exclude 'src/.cmake/**'
    })
	if(!file('.' + File.separator + 'src' + File.separator + '.cmake' + File.separator).exists()) {
		outputs.upToDateWhen { false }
	}
	outputs.file file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'bin' + File.separator + 'App_subsetUnionBenchmark.exe')
	outputs.file file(System.getenv('MDE4CPP_HOME') + File.separator + 'application' + File.separator + 'bin' + File.separator + 'App_subsetUnionBenchmarkd.exe')

	// dependency to model 'subsetUnionBenchmark'
	def subsetUnionBenchmark = getRootProject().getTasksByName('compileSubsetUnionBenchmark', true)
	dependsOn subsetUnionBenchmark
	inputs.files(subsetUnionBenchmark.outputs)
}

task clean {
	doFirst {
		def cmakeFolder = file('.' + File.separator + 'src' + File.separator + '.cmake/')
		if(cmakeFolder.exists()) {
    		delete cmakeFolder.absolutePath
   			println "deleting folder " + cmakeFolder.absolutePath
		}
	}
}
