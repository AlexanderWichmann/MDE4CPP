//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef SUBSETUNIONBENCHMARK_CONTAINERCONTAINERIMPL_HPP
#define SUBSETUNIONBENCHMARK_CONTAINERCONTAINERIMPL_HPP

//*********************************
// generated Includes

//Model includes
#include "../Container.hpp"


#include "ecore/impl/EObjectImpl.hpp"

//*********************************
namespace subsetUnionBenchmark 
{
	class ContainerImpl :virtual public ecore::EObjectImpl,
virtual public Container 
	{
		public: 
			ContainerImpl(const ContainerImpl & obj);
			virtual std::shared_ptr<ecore::EObject> copy() const;

		private:    
			ContainerImpl& operator=(ContainerImpl const&) = delete;

		protected:
			friend class SubsetUnionBenchmarkFactoryImpl;
			ContainerImpl();
			virtual std::shared_ptr<Container> getThisContainerPtr() const;
			virtual void setThisContainerPtr(std::weak_ptr<Container> thisContainerPtr);



		public:
			//destructor
			virtual ~ContainerImpl();
			
			//*********************************
			// Operations
			//*********************************
			
			
			//*********************************
			// Attributes Getter Setter
			//*********************************
			/*!
			 */ 
			virtual std::string getName() const ;
			
			/*!
			 */ 
			virtual void setName (std::string _name); 
			
			
			
			//*********************************
			// Reference
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<Subset<subsetUnionBenchmark::Element_Level1, subsetUnionBenchmark::Element>> getSubset1() const ;
			
			/*!
			 */
			virtual std::shared_ptr<Subset<subsetUnionBenchmark::Element_Level10, subsetUnionBenchmark::Element>> getSubset10() const ;
			
			/*!
			 */
			virtual std::shared_ptr<Subset<subsetUnionBenchmark::Element_Level2, subsetUnionBenchmark::Element>> getSubset2() const ;
			
			/*!
			 */
			virtual std::shared_ptr<Subset<subsetUnionBenchmark::Element_Level3, subsetUnionBenchmark::Element>> getSubset3() const ;
			
			/*!
			 */
			virtual std::shared_ptr<Subset<subsetUnionBenchmark::Element_Level4, subsetUnionBenchmark::Element>> getSubset4() const ;
			
			/*!
			 */
			virtual std::shared_ptr<Subset<subsetUnionBenchmark::Element_Level5, subsetUnionBenchmark::Element>> getSubset5() const ;
			
			/*!
			 */
			virtual std::shared_ptr<Subset<subsetUnionBenchmark::Element_Level6, subsetUnionBenchmark::Element>> getSubset6() const ;
			
			/*!
			 */
			virtual std::shared_ptr<Subset<subsetUnionBenchmark::Element_Level7, subsetUnionBenchmark::Element>> getSubset7() const ;
			
			/*!
			 */
			virtual std::shared_ptr<Subset<subsetUnionBenchmark::Element_Level8, subsetUnionBenchmark::Element>> getSubset8() const ;
			
			/*!
			 */
			virtual std::shared_ptr<Subset<subsetUnionBenchmark::Element_Level9, subsetUnionBenchmark::Element>> getSubset9() const ;
			
			
							
			
			//*********************************
			// Union Getter
			//*********************************
			/*!
			 */
			virtual std::shared_ptr<Union<subsetUnionBenchmark::Element>> getUnionBag() const ; 
			 
			//*********************************
			// Structural Feature Getter/Setter
			//*********************************

			virtual std::shared_ptr<ecore::EObject> eContainer() const ; 
			
			//*********************************
			// Persistence Functions
			//*********************************
			virtual void load(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler) ;
			virtual void loadAttributes(std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::map<std::string, std::string> attr_list);
			virtual void loadNode(std::string nodeName, std::shared_ptr<persistence::interfaces::XLoadHandler> loadHandler, std::shared_ptr<subsetUnionBenchmark::SubsetUnionBenchmarkFactory> modelFactory);
			
			virtual void resolveReferences(const int featureID, std::list<std::shared_ptr<ecore::EObject> > references) ;
			virtual void save(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const ;
			virtual void saveContent(std::shared_ptr<persistence::interfaces::XSaveHandler> saveHandler) const;
			

		protected:
			virtual std::shared_ptr<ecore::EClass> eStaticClass() const;
			virtual Any eGet(int featureID, bool resolve, bool coreType) const ;
			virtual bool internalEIsSet(int featureID) const ;
			virtual bool eSet(int featureID, Any newValue) ;

		private:
			std::weak_ptr<Container> m_thisContainerPtr;
	};
}
#endif /* end of include guard: SUBSETUNIONBENCHMARK_CONTAINERCONTAINERIMPL_HPP */
