//********************************************************************
//*    
//* Warning: This file was generated by ecore4CPP Generator
//*
//********************************************************************

#ifndef SUBSETUNIONBENCHMARKPACKAGEIMPL_HPP
#define SUBSETUNIONBENCHMARKPACKAGEIMPL_HPP

#ifdef NDEBUG
    #define DEBUG_MESSAGE(a) /**/
#else
    #define DEBUG_MESSAGE(a) a
#endif

#ifdef ACTIVITY_DEBUG_ON
    #define ACT_DEBUG(a) a
#else
    #define ACT_DEBUG(a) /**/
#endif

#include <cassert>

#include "ContainerImpl.hpp"
#include "ElementImpl.hpp"
#include "Element_Level1Impl.hpp"
#include "Element_Level10Impl.hpp"
#include "Element_Level2Impl.hpp"
#include "Element_Level3Impl.hpp"
#include "Element_Level4Impl.hpp"
#include "Element_Level5Impl.hpp"
#include "Element_Level6Impl.hpp"
#include "Element_Level7Impl.hpp"
#include "Element_Level8Impl.hpp"
#include "Element_Level9Impl.hpp"

#include "SubsetUnionBenchmarkPackage.hpp"
#include "SubsetUnionBenchmarkPackage.hpp"
#include "EcorePackage.hpp"
#include "impl/EPackageImpl.hpp"

namespace subsetUnionBenchmark
{
	class SubsetUnionBenchmarkPackageImpl : public ecore::EPackageImpl ,virtual public SubsetUnionBenchmarkPackage
	{
		private:    
			SubsetUnionBenchmarkPackageImpl(SubsetUnionBenchmarkPackageImpl const&) = delete;
			SubsetUnionBenchmarkPackageImpl& operator=(SubsetUnionBenchmarkPackageImpl const&) = delete;

		protected:
			SubsetUnionBenchmarkPackageImpl();

		public:
			virtual ~SubsetUnionBenchmarkPackageImpl();

			// Begin Class Container
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getContainer() const ;
			virtual std::shared_ptr<ecore::EAttribute> getContainer_Name() const ;
			
			virtual std::shared_ptr<ecore::EReference> getContainer_Subset1() const ;
			virtual std::shared_ptr<ecore::EReference> getContainer_Subset10() const ;
			virtual std::shared_ptr<ecore::EReference> getContainer_Subset2() const ;
			virtual std::shared_ptr<ecore::EReference> getContainer_Subset3() const ;
			virtual std::shared_ptr<ecore::EReference> getContainer_Subset4() const ;
			virtual std::shared_ptr<ecore::EReference> getContainer_Subset5() const ;
			virtual std::shared_ptr<ecore::EReference> getContainer_Subset6() const ;
			virtual std::shared_ptr<ecore::EReference> getContainer_Subset7() const ;
			virtual std::shared_ptr<ecore::EReference> getContainer_Subset8() const ;
			virtual std::shared_ptr<ecore::EReference> getContainer_Subset9() const ;
			virtual std::shared_ptr<ecore::EReference> getContainer_Union() const ;
			
			
			// End Class Container

			// Begin Class Element
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getElement() const ;
			virtual std::shared_ptr<ecore::EAttribute> getElement_Name() const ;
			
			
			
			// End Class Element

			// Begin Class Element_Level1
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getElement_Level1() const ;
			
			
			
			// End Class Element_Level1

			// Begin Class Element_Level10
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getElement_Level10() const ;
			
			
			
			// End Class Element_Level10

			// Begin Class Element_Level2
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getElement_Level2() const ;
			
			
			
			// End Class Element_Level2

			// Begin Class Element_Level3
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getElement_Level3() const ;
			
			
			
			// End Class Element_Level3

			// Begin Class Element_Level4
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getElement_Level4() const ;
			
			
			
			// End Class Element_Level4

			// Begin Class Element_Level5
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getElement_Level5() const ;
			
			
			
			// End Class Element_Level5

			// Begin Class Element_Level6
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getElement_Level6() const ;
			
			
			
			// End Class Element_Level6

			// Begin Class Element_Level7
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getElement_Level7() const ;
			
			
			
			// End Class Element_Level7

			// Begin Class Element_Level8
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getElement_Level8() const ;
			
			
			
			// End Class Element_Level8

			// Begin Class Element_Level9
			//Class and Feature Getter
			virtual std::shared_ptr<ecore::EClass> getElement_Level9() const ;
			
			
			
			// End Class Element_Level9

			

		private:
			std::shared_ptr<ecore::EClass> containerEClass = nullptr;
			std::shared_ptr<ecore::EClass> elementEClass = nullptr;
			std::shared_ptr<ecore::EClass> element_Level1EClass = nullptr;
			std::shared_ptr<ecore::EClass> element_Level10EClass = nullptr;
			std::shared_ptr<ecore::EClass> element_Level2EClass = nullptr;
			std::shared_ptr<ecore::EClass> element_Level3EClass = nullptr;
			std::shared_ptr<ecore::EClass> element_Level4EClass = nullptr;
			std::shared_ptr<ecore::EClass> element_Level5EClass = nullptr;
			std::shared_ptr<ecore::EClass> element_Level6EClass = nullptr;
			std::shared_ptr<ecore::EClass> element_Level7EClass = nullptr;
			std::shared_ptr<ecore::EClass> element_Level8EClass = nullptr;
			std::shared_ptr<ecore::EClass> element_Level9EClass = nullptr;
			
			

			friend class SubsetUnionBenchmarkPackage;

			static bool isInited;
			static SubsetUnionBenchmarkPackage* create();
			bool isInitialized = false;
 			bool isCreated = false;

			virtual void init();

		public:
			void initializePackageContents();
			void createPackageContents();
	};
}
#endif /* end of include guard: SUBSETUNIONBENCHMARKPACKAGEIMPL_HPP */

