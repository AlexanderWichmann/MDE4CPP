[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateClass('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::generateConstraint /]
[import UML4CPP::generator::main::generateType /]
[import UML4CPP::generator::main::helper /]

[template public generateGetThisPtr(aClass : Class)]
virtual std::shared_ptr<[aClass.name/]> [generateGetThisPtrPropertyGetterName()/]();
virtual void [generateGetThisPtrPropertySetterName()/](std::weak_ptr<[aClass.name.toUpperFirst()/]> [generateGetThisPtrPropertyName()/]);
[/template]

[template public generateGetThisPtrCPP(aClass: Class)]
std::shared_ptr<[aClass.name.toUpperFirst()/]> [aClass.name.toUpperFirst()/]Impl::[generateGetThisPtrPropertyGetterName()/]()
{
	return m_[generateGetThisPtrPropertyName()/].lock();
}
void [aClass.name.toUpperFirst()/]Impl::[generateGetThisPtrPropertySetterName()/](std::weak_ptr<[aClass.name.toUpperFirst()/]> [generateGetThisPtrPropertyName()/])
{
	m_[generateGetThisPtrPropertyName()/] = [generateGetThisPtrPropertyName()/];
[for (superClass : Class | aClass.superClass->asOrderedSet()->sortedBy(name))]
	[superClass.generateGetThisPtrPropertySetterName()/]([aClass.generateGetThisPtrPropertyName()/]);
[/for]
[if (aClass.superClass->isEmpty() and not aClass.oclIsKindOf(Stereotype))]
	setThisClassPtr([aClass.generateGetThisPtrPropertyName()/]);
[elseif (aClass.superClass->isEmpty() and aClass.oclIsKindOf(Stereotype))]
	setThisStereotypePtr([aClass.generateGetThisPtrPropertyName()/]);
[/if]
}
[/template]

[query public generateGetThisPtrPropertyName(aClass : Class) : String = 'this'.concat(aClass.name.toUpperFirst()).concat('Ptr')/]
[query public generateGetThisPtrPropertySetterName(aClass : Class) : String = 'set'.concat(generateGetThisPtrPropertyName().toUpperFirst())/]
[query public generateGetThisPtrPropertyGetterName(aClass : Class) : String = 'get'.concat(generateGetThisPtrPropertyName().toUpperFirst())/]


[template public generateClassCreate(aClass : Class,impl : Boolean) ? (aClass.isAbstract=false)]
virtual std::shared_ptr<[aClass.generateCppType(true)/]> create[aClass.name.toUpperFirst()/]()[abstractSufix(impl)/];
[for (anAssociation : Association | aClass.getCompositionsToClass())]
[let containerProperty : Property = anAssociation.memberEnd->select(type = aClass)->asOrderedSet()->first()]
[let containmentProperty : Property = anAssociation.memberEnd->select(not (type = aClass))->asOrderedSet()->first()]
virtual std::shared_ptr<[aClass.generateCppType(true)/]> create[aClass.name.toUpperFirst()/]_in_[containmentProperty.name.toUpperFirst()/]([containmentProperty.generateCppType()/] [containmentProperty.name.toLowerFirst()/])[abstractSufix(impl)/]; 
[/let]
[/let]
[/for]

[/template]

[template public generateStaticClassID(aClass : Class)]
static const int [aClass.name.toUpperCase()/] = [aClass._package.member->asOrderedSet()->indexOf(aClass)/];
static const int [aClass.name.toUpperCase()/]_FEATURE_COUNT = [aClass.allFeatures()->size()/];
static const int [aClass.name.toUpperCase()/]_OPERATION_COUNT = [aClass.ownedOperation->size()/];

[/template]

[template public generateClassCreation(aClass : Class)]
[memberName(aClass)/] = factory->createClass_in_Package([aClass.ancestors(Package)->first().memberName()/]);
[if (aClass.ownedRule->size() > 0)]

//constraints
[for (aConstraint : Constraint | aClass.ownedRule) separator('\n')]
[aConstraint.generateConstraintCreation()/]
[/for][/if]
[/template]

[template public generateClassInitialization(aClass : Class)]
[memberName(aClass)/]->setName("[aClass.name/]");
[memberName(aClass)/]->setIsAbstract([aClass.isAbstract/]);
[for (superClass : Class | aClass.superClass->asOrderedSet()->sortedBy(myQualifiedName())) before ('\n') separator ('\n')]
gen = uml::UmlFactory::eInstance()->createGeneralization_in_Specific([aClass.packageGetter(aClass)/]);
gen->setGeneral([superClass.packageGetter(aClass)/]);
[/for]
[/template]