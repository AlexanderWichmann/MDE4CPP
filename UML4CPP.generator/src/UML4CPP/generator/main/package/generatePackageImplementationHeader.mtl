[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generatePackageImplementationHeader('http://www.eclipse.org/uml2/5.0.0/UML','http://www.eclipse.org/emf/2002/Ecore')]

[import UML4CPP::generator::main::helper /]

[template public baseClass(aPackage : Package) ? (oclIsKindOf(Profile))]
virtual public uml::ProfileImpl
[/template]

[template public baseClass(aPackage : Package) ? (not oclIsKindOf(Profile))]
virtual public uml::PackageImpl
[/template]

[template public generatePackageImplHeader(aPackage : Package) {packageName : String = aPackage.name.concat('PackageImpl').toUpperFirst();}]
[file (aPackage.getPackageName().concat('/impl/').concat(aPackage.name.toUpperFirst()).concat('PackageImpl.hpp'), false, 'UTF-8')]
[startGuard(aPackage,'MetaModelPackageImpl')/]
#include "[aPackage.getPackageName()/]/[aPackage.name.concat('Package').toUpperFirst()/].hpp"
[if (aPackage.oclIsKindOf(Profile))]
#include "uml/impl/ProfileImpl.hpp"
[else]
#include "uml/impl/PackageImpl.hpp"	
[/if]
namespace uml
{
[for (nE : EClass | OrderedSet{(aPackage.allOwnedElements()->filter(ValueSpecification)-aPackage.allOwnedElements()->filter(Slot)).eClass()}->flatten()->sortedBy(name))]
	class [nE.name/];
[/for]
	class UmlFactory;
}

namespace [aPackage.name/]
{
	class [packageName/] : [aPackage.baseClass()/] ,virtual public [aPackage.name.toUpperFirst().concat('Package')/]
	{
			friend class [aPackage.name.toUpperFirst().concat('Package')/];
			// Constructor
			[packageName/]();

		public:
			// destructor
			virtual ~[packageName/]();

			//getter for the ownedMember
			[(aPackage.allOwnedElements()->filter(NamedElement)-aPackage.allOwnedElements()->filter(ValueSpecification))->sortedBy(myQualifiedName()).generateGetter(true)/]

		private:
			//private variables for ownedMember of the metamodel package
			[(aPackage.allOwnedElements()->filter(NamedElement))->reject(owner.oclIsKindOf(Slot))->sortedBy(myQualifiedName()).generatePrivatePackageMember()/]

			static [aPackage.name.concat('Package').toUpperFirst()/]* create();
			static bool isInited;
			bool isInitialized = false;
			bool isCreated = false;

			void initMetaModel();
			virtual void init();

		public:
 			void initializePackageContents();
			void createPackageContents();

		private:
			void createPackageActivities(std::shared_ptr<[packageName/]> [aPackage.memberName()/], std::shared_ptr<uml::UmlFactory> factory);
			void createPackageClasses(std::shared_ptr<[packageName/]> [aPackage.memberName()/], std::shared_ptr<uml::UmlFactory> factory);
			void createPackageDependencies(std::shared_ptr<[packageName/]> [aPackage.memberName()/], std::shared_ptr<uml::UmlFactory> factory);
			void createPackageEnumerationLiterals(std::shared_ptr<[packageName/]> [aPackage.memberName()/], std::shared_ptr<uml::UmlFactory> factory);
			void createPackageInstanceSpecifications(std::shared_ptr<[packageName/]> [aPackage.memberName()/], std::shared_ptr<uml::UmlFactory> factory);
			void createPackageInterfaces(std::shared_ptr<[packageName/]> [aPackage.memberName()/], std::shared_ptr<uml::UmlFactory> factory);
			void createPackagePrimitiveTypes(std::shared_ptr<[packageName/]> [aPackage.memberName()/], std::shared_ptr<uml::UmlFactory> factory);
			void createPackageStereotypes(std::shared_ptr<[packageName/]> [aPackage.memberName()/], std::shared_ptr<uml::UmlFactory> factory);
			void createPackageValueSpecifications(std::shared_ptr<[packageName/]> [aPackage.memberName()/], std::shared_ptr<uml::UmlFactory> factory);

			void initializePackageActivities();
			void initializePackageClasses();
			void initializePackageDependencies();
			void initializePackageInstanceSpecifications();
			void initializePackageInterfaces();
			void initializePackageStereotypes();
	};
} 
[endGuard(aPackage,'MetaModelPackageImpl')/]
[/file]
[/template]