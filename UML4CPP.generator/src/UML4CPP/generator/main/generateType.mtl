[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateType('http://www.eclipse.org/uml2/5.0.0/UML')]

[template public generateCppType(aProperty : Property)]
[if (not(aProperty.upper=1))]
std::vector<[aProperty.type.transformType()/]> *[else]
[aProperty.type.transformType()/][/if]
[/template]

[template public generateCppType(aOperation : Operation)]
[if (not(aOperation.upper=1))]
std::vector<[aOperation.type.transformType()/]> *[else]
[aOperation.type.transformType()/][/if]
[/template]

[template public generateCppType(aType : Type)]
[aType.transformType()/]
[/template]

[template public generateType(aType : Type)]
[if (aType.oclIsUndefined())]
QVariant[else]
[aType.transformType()/][/if]
[/template]

[template public generateTypeClass(anEDataType : ecore::EClass)]
[anEDataType.name/]*
[/template]

[**
 * Transformation uml to C++
*/]
[template public transformType(aType : Type) ? (oclIsUndefined())]
void
[/template]

[template public transformType(aType : Type) ? (name = 'Boolean' )]
bool
[/template]

[template public transformType(aType : Type) ? (name = 'UnlimitedNatural' )]
int
[/template]

[template public transformType(aType : Type) ? (name = 'Integer')]
int
[/template]

[template public transformType(aType : Type) ? (name = 'Real')]
double
[/template]

[template public transformType(aType : Type) ? (oclIsKindOf(PrimitiveType) and name = 'String')]
std::string
[/template]

[template public transformType(aType : Type) ? (oclIsKindOf(Enumeration))]
[aType.namespace.ns()/]::[aType.name/]
[/template]

[template public transformType(aType : Type) ? (not oclIsKindOf(PrimitiveType) and not oclIsKindOf(Enumeration) )]
[aType.namespace.ns()/]::[aType.name/] *
[/template]

[template public ns(ns : Namespace)]
[if (ns.name='UML')]uml[else]
[ns.name/][/if]
[/template]