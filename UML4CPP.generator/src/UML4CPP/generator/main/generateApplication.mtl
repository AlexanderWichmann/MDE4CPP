[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateApplication('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::generateBuildFile /]
[import UML4CPP::generator::main::generateParameter /]
[import UML4CPP::generator::main::generateProjectFiles /]
[import UML4CPP::generator::main::helper /]

[template public generateApplication(aPackage : Package) { packageName : String = getPackageName().toUpperFirst(); }]
[file ('../application/src/main.cpp', false, 'UTF-8')]

#include <iostream>
#include "[packageName/]Factory.hpp"
#include "[packageName/]Package.hpp"

[for (aClass : Class | aPackage.allOwnedElements()->select(e|e.oclIsKindOf(uml::Class))->select(e|not (e.oclIsKindOf(FunctionBehavior))).oclAsType(uml::Class)->sortedBy(name))]
#include "[aClass.name.toUpperFirst()/].hpp"
[/for]
[for (anInterface : Interface | aPackage.allOwnedElements()->select(e|e.oclIsKindOf(uml::Interface)).oclAsType(uml::Interface)->sortedBy(name))]
#include "[anInterface.name.toUpperFirst()/].hpp"
[/for]
[for (anEnumeration : Enumeration | aPackage.ownedMember->filter(Enumeration))]
#include "[anEnumeration.name/].hpp"
[/for]

// [protected ('includes')] 
// You may manually edit additional includes, won't be overwritten upon generation.

// [/protected]

using namespace [getPackageName()/];

// [protected ('functions')] 
// You may manually edit additional functions, won't be overwritten upon generation.

// [/protected]

int main ()
{
	//Create Model Factory and Package
	std::shared_ptr<[packageName/]Factory> factory = [packageName/]Factory::eInstance();
	std::shared_ptr<[packageName/]Package> package = [packageName/]Package::eInstance();

// [protected ('main')]
// You may manually edit the following lines, won't be overwritten upon generation.

// [/protected]

    return 0;

}
[/file]

[comment	build application files/]
[file ('../application/'.concat('CMakeLists.txt'), false, 'UTF-8')]
#############################################################################
#																			#
#		 			CMakeList created by UML4CPP Generator					# 
#																			#
#############################################################################

# C++ project of application for [packageName/].ecore, generated by UML4CPP

CMAKE_MINIMUM_REQUIRED(VERSION 3.9)

SET(CMAKE_C_COMPILER "gcc.exe")
SET(CMAKE_CXX_COMPILER "g++.exe")

# [protected ('project_name')]
# You may manually edit the project name, won't be overwritten upon generation.
PROJECT(App_[packageName/])
# [/protected]

IF(NOT CMAKE_BUILD_TYPE) 
    SET(CMAKE_BUILD_TYPE Debug)
ENDIF(NOT CMAKE_BUILD_TYPE)

SET(CMAKE_CXX_STANDARD 14)
SET(GCC_COVERAGE_LINK_FLAGS "-fopenmp")
SET(CMAKE_CXX_FLAGS "-Wall -Wno-overloaded-virtual -Wdeprecated-declarations -fopenmp -fmax-errors=5")
[if (aPackage.name='UML')]
SET(CMAKE_CXX_FLAGS_DEBUG " -ggdb")
SET(CMAKE_CXX_FLAGS_RELEASE " -DNDEBUG")
[else]
SET(CMAKE_CXX_FLAGS_DEBUG " -Og -ggdb")
SET(CMAKE_CXX_FLAGS_RELEASE " -O3 -DNDEBUG")
[/if]

string(REPLACE "\\" "/" MDE4CPP_HOME $ENV{MDE4CPP_HOME})

SET(SOURCE_FILES
	src/main.cpp
# [protected ('cpp')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
)

INCLUDE_DIRECTORIES(
[if (not(aPackage.name='UML'))]
    .
[/if]
	../
	${MDE4CPP_HOME}/application/include
	${MDE4CPP_HOME}/application/include/abstractDataTypes
	${MDE4CPP_HOME}/application/include/PluginFramework
	${MDE4CPP_HOME}/application/include/util
	${MDE4CPP_HOME}/application/include/ecore
	${MDE4CPP_HOME}/application/include/PrimitivetypesReflection
	${MDE4CPP_HOME}/application/include/uml
[if (not aPackage.includeEcorePackages())]
[for (pack : Package | aPackage.metaModelIncludesWithoutReflection()->sortedBy(myQualifiedName())) separator (',')]
	${MDE4CPP_HOME}/application/include/[pack.name/]
[/for]
	${MDE4CPP_HOME}/application/include/[packageName/]
[/if]
# [protected ('includes')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
)

IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
	FIND_LIBRARY(PLUGINFRAMEWORK_DEBUG PluginFrameworkd ${MDE4CPP_HOME}/application/lib)
[for (packName : String | aPackage.metaModelLibrariesNames())]
FIND_LIBRARY([packName.toUpperCase()/]_DEBUG [packName/]d ${MDE4CPP_HOME}/application/lib)

[/for]
	FIND_LIBRARY([packageName.toUpperCase()/]_DEBUG [packageName/]d ${MDE4CPP_HOME}/application/lib)
# [protected ('library_finding_debug')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
ELSE()
	FIND_LIBRARY(PLUGINFRAMEWORK_RELEASE PluginFramework ${MDE4CPP_HOME}/application/lib)
[for (packName : String | aPackage.metaModelLibrariesNames())]
	FIND_LIBRARY([packName.toUpperCase()/]_RELEASE [packName/] ${MDE4CPP_HOME}/application/lib)

[/for]
	FIND_LIBRARY([packageName.toUpperCase()/]_RELEASE [packageName/] ${MDE4CPP_HOME}/application/lib)
# [protected ('library_finding_release')]
# You may manually edit the following lines, won't be overwritten upon generation.

# [/protected]
ENDIF()

ADD_EXECUTABLE(${PROJECT_NAME} ${SOURCE_FILES})
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES DEBUG_POSTFIX "d")

IF (CMAKE_BUILD_TYPE STREQUAL "Debug")
	TARGET_LINK_LIBRARIES(${PROJECT_NAME} 
		debug ${PLUGINFRAMEWORK_DEBUG}
	[for (packName : String | aPackage.metaModelLibrariesNames())]
		debug ${[packName.toUpperCase()/]_DEBUG}
	[/for]
		debug ${[packageName.toUpperCase()/]_DEBUG}
	# [protected ('library_assigning_debug')]
	# You may manually edit the following lines, won't be overwritten upon generation.
	
	# [/protected]
	)
ELSE()
	TARGET_LINK_LIBRARIES(${PROJECT_NAME}
		optimized ${PLUGINFRAMEWORK_RELEASE}
	[for (packName : String | aPackage.metaModelLibrariesNames())]
		optimized ${[packName.toUpperCase()/]_RELEASE}
	[/for]
		optimized ${[packageName.toUpperCase()/]_RELEASE}
	# [protected ('library_assigning_release')] 
	# You may manually edit the following lines, won't be overwritten upon generation.
	
	# [/protected]
	)
ENDIF()

#-----------------------------------------------------
# DELIVERING binaries and header to ${MDE4CPP_HOME}
#-----------------------------------------------------

INSTALL(TARGETS ${PROJECT_NAME} 
	RUNTIME DESTINATION ${MDE4CPP_HOME}/application/bin
)

INSTALL(DIRECTORY . DESTINATION ${MDE4CPP_HOME}/application/include/${PROJECT_NAME}
	FILES_MATCHING PATTERN "*.hpp"
	PATTERN ".cmake" EXCLUDE
)
[/file]

[aPackage.generateProjectsFiles(true)/]
[/template]