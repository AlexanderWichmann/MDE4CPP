[comment encoding = UTF-8 /]
[**
 * Copyright (c) 2017 TU Ilmenau, Systems and Software Engineering Group
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), 
 * to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, 
 * and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, 
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, 
 * WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */]
[module generateBuildFile('http://www.eclipse.org/uml2/5.0.0/UML')]

[import UML4CPP::generator::main::helper /]
 
[query public metaModelIncludes(aPackage : Package) : Set(Package) = OrderedSet{aPackage.member->filter(Class).attribute.type.getNearestPackage(),aPackage.member->filter(Class).attribute.getAppliedStereotypes().getNearestPackage(), aPackage.member->filter(Class).interfaceRealization.supplier.getNearestPackage()}->flatten() /]
[query public includeEcorePackages(aPackage : Package) : Boolean = if ((aPackage.name='UML') or (aPackage.name='Ecore')or (aPackage.name='PrimitiveTypes') or (aPackage.eAllContents()->filter(ecore::EAnnotation)->select(source = 'SDK')->notEmpty())) then true else false endif /]
[query public metaModelIncludesWithoutReflection(aPackage : Package) : Set(Package) = aPackage.metaModelIncludes()->reject((name = aPackage.name) or (name = 'PrimitiveTypes') or (name = 'UML')or (name = 'Ecore'))/]
[query public metaModelIncludesReflection(aPackage : Package) : Set(Package) = aPackage.metaModelIncludes()->select((not (name = aPackage.name) or (name = 'PrimitiveTypes') or (name = 'UML')or (name = 'Ecore')))/]

[template public generateReflectionLibraryNames(aPackage : Package)]
[if (aPackage.name='UML') or (aPackage.eAllContents()->filter(ecore::EAnnotation)->select(source = 'SDK')->notEmpty())]'ecoreReflection'
[else]'ecoreReflection', 'umlReflection'[/if]
[/template]

[template public generateLibraryNamesWithoutReflection(aPackage : Package)]
[if (aPackage.includeEcorePackages())]'ecore', 'uml'[if (aPackage.name='UML') or (aPackage.eAllContents()->filter(ecore::EAnnotation)->select(source = 'SDK')->notEmpty())], 'primitiveTypesReflection'[/if][else] [for (pack : Package | aPackage.metaModelIncludesWithoutReflection()->sortedBy(name)) separator (', ') after (',')]'[pack.name/]'[/for]'ecore', 'uml', 'PluginFramework', 'primitiveTypesReflection'[/if]
[/template]

[template public generateLibraryIncludes(aPackage : Package)]
[if (aPackage.includeEcorePackages())] 
					lib library: "ecore"
					lib library: "uml"
[if (aPackage.name='UML') or (aPackage.eAllContents()->filter(ecore::EAnnotation)->select(source = 'SDK')->notEmpty())]
					lib library: "primitiveTypesReflection"
					lib library: "ecoreReflection"
[/if]
[else]
					lib library: "ecore"
					lib library: "uml"
					lib library: "PluginFramework"
					lib library: "primitiveTypesReflection"
					lib library: "ecoreReflection"
					lib library: "umlReflection"
[for (pack : Package | aPackage.metaModelIncludesWithoutReflection()->sortedBy(name)) separator (',')]
					lib library: "[pack.name/]"
[/for]
[/if]
[/template]

[template public generateBuildFile(aPackage : Package)]
[generateBuildFile(aPackage,false)/]
[/template]

[template public generateBuildFile(aPackage : Package, packOnly:Boolean) { packageName : String = getPackageName().toUpperFirst(); }]
[file (packageName.concat('/').concat('build.gradle'), false, 'UTF-8')]
/*-------------------------------------------------
*
* Tasks created by UML4CPP Generator 
*
*-------------------------------------------------
*/

apply plugin: 'cpp'

description 'C++ project of model [packageName/].uml, generated by UML4CPP'

File appendDebugSuffix(File binaryFile) {
  int extensionSeparatorIndex = binaryFile.path.lastIndexOf('.')
  return new File(binaryFile.path.substring(0, extensionSeparatorIndex) + "d" + binaryFile.path.substring(extensionSeparatorIndex))
}

task deliver[packageName/]Headers(type: Copy) {
	description 'deliver [packageName/] header to %MDE4CPP_HOME%/application/include/[packageName/]'
	from "."
	into System.getenv('MDE4CPP_HOME')+"/application/include/[packageName/]"
	include "**/*.hpp"
	exclude "build", ".gradle"
}

task deliver[packageName/]DebugSharedLibrary(type: Copy) {
	description 'deliver [packageName/] debug libary to %MDE4CPP_HOME%/application/bin'
	from "build/libs/[packageName/]/shared/debug"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "[packageName/]d.dll"
}

task deliver[packageName/]ReleaseSharedLibrary(type: Copy) {
	description 'deliver [packageName/] release libary to %MDE4CPP_HOME%/application/bin'
	from "build/libs/[packageName/]/shared/release"
	into System.getenv('MDE4CPP_HOME')+"/application/bin"
	include "[packageName/].dll"
}

model {
    toolChains {
    	 gcc(Gcc) {
    	 	"g++"
    	 }
    }
	
    buildTypes {
        debug 
        release
    }

[if (((aPackage.name='UML') or (aPackage.eAllContents()->filter(ecore::EAnnotation)->select(source = 'SDK')->notEmpty())) or not aPackage.includeEcorePackages())]
	repositories {
        libs(PrebuiltLibraries) {
			['['/] [aPackage.generateReflectionLibraryNames()/] [']'/].each {
				delegate."$it" {
					def libraryName = "${name}"
					headers.srcDir System.getenv('MDE4CPP_HOME')+"/application/include"
					binaries.withType(SharedLibraryBinary) {
						if(buildType == buildTypes.debug) {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}d.dll")
						} else {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}.dll")						
						}
					}
				}	
			}         
		}
	}
[/if]

	repositories {
        libs(PrebuiltLibraries) {
			['['/] [aPackage.generateLibraryNamesWithoutReflection()/] [']'/].each {
				delegate."$it" {
					def libraryName = "${name}"
					headers.srcDir System.getenv('MDE4CPP_HOME')+"/application/include/${libraryName}"
					binaries.withType(SharedLibraryBinary) {
						if(buildType == buildTypes.debug) {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}d.dll")
						} else {
							sharedLibraryFile = file(System.getenv('MDE4CPP_HOME')+"/application/bin/${libraryName}.dll")						
						}
					}
				}	
			}         
		}
	}

    components {
        [packageName/](NativeLibrarySpec)
        {
        	sources {
                cpp {
                    source {
                        srcDirs ".", "../" [if (aPackage.includeEcorePackages())], System.getenv('MDE4CPP_HOME')+"/application/include/util"[/if]

[if (not packOnly)]
[for (aClass : Class | aPackage.allOwnedElements()->filter(Class)->select(e|not e.oclIsKindOf(FunctionBehavior))->sortedBy(myQualifiedName()))]
						include "impl/[aClass.name.toUpperFirst()/]Impl.cpp"
[/for]
						include	"impl/[aPackage.name.toUpperFirst()/]FactoryImpl.cpp"
						include	"[aPackage.name.toUpperFirst()/]Factory.cpp"
						include	"impl/[aPackage.name.toUpperFirst()/]PluginImpl.cpp"
						include	"[aPackage.name.toUpperFirst()/]Plugin.cpp"
[/if]
						include	"impl/[aPackage.name.toUpperFirst()/]PackageImpl.cpp"
						include	"[aPackage.name.toUpperFirst()/]Package.cpp"
[if (aPackage.includeEcorePackages())]
						include "util.cpp"
						include "registry.cpp"
						include "stereotypestorage.cpp"
[/if]
                    }
					exportedHeaders {
[if (not(aPackage.name='UML'))]
                        srcDirs "."
[/if]
                        srcDirs "../" 
						srcDirs System.getenv('MDE4CPP_HOME')+"/application/include"
						srcDirs System.getenv('MDE4CPP_HOME')+"/application/include/util"
						srcDirs System.getenv('MDE4CPP_HOME')+"/application/include/abstractDataTypes"

                        include "**/*.hpp"
                    }
[aPackage.generateLibraryIncludes()/]
                }
            }

			binaries.withType(StaticLibraryBinarySpec) {
				buildable = false
			}
        }
		
		withType(NativeComponentSpec) {
			binaries.withType(NativeBinarySpec) {
				if(buildType == buildTypes.debug) {
					if (it instanceof SharedLibraryBinarySpec) {
						sharedLibraryFile = appendDebugSuffix(sharedLibraryFile)
						sharedLibraryLinkFile = appendDebugSuffix(sharedLibraryLinkFile)
					} else if (it instanceof StaticLibraryBinarySpec) {
						staticLibraryFile = appendDebugSuffix(staticLibraryFile)
					} else {
						throw new GradleException("Unknown native library binary")
					}
				}
			}
        }
    }
    
    binaries {
        all {
			linker.args '-fopenmp'
        	cppCompiler.args '-std=c++1y','-Wall', '-Wno-overloaded-virtual', '-pipe', '-fopenmp'
			if (buildType == buildTypes.debug) {
				cppCompiler.args '-g'
			}

			else {
				cppCompiler.args [if (not (aPackage.name='UML'))]'-O3', [/if]'-DNDEBUG'
			}
        }
    }
}

tasks.withType(LinkSharedLibrary) { compileTask -> deliver[packageName/]Headers.mustRunAfter compileTask }
tasks.withType(LinkSharedLibrary) { compileTask -> deliver[packageName/]DebugSharedLibrary.mustRunAfter compileTask }
tasks.withType(LinkSharedLibrary) { compileTask -> deliver[packageName/]ReleaseSharedLibrary.mustRunAfter compileTask }

task compile[packageName/](dependsOn: ['['/]'build', 'deliver[packageName/]Headers', 'deliver[packageName/]DebugSharedLibrary', 'deliver[packageName/]ReleaseSharedLibrary'[']'/]){
	group '[packageName/]'
	description 'compile [packageName/] in debug and release'
}
task compile[packageName/]Debug(dependsOn: ['['/]'[packageName/]DebugSharedLibrary', 'deliver[packageName/]Headers', 'deliver[packageName/]DebugSharedLibrary'[']'/]) {
	group '[packageName/]'
	description 'compile [packageName/] in debug'
}
task compile[packageName/]Release(dependsOn: ['['/]'[packageName/]ReleaseSharedLibrary', 'deliver[packageName/]Headers', 'deliver[packageName/]ReleaseSharedLibrary'[']'/]) {
	group '[packageName/]'
	description 'compile [packageName/] in release'
}
[/file]

[file ('../build.gradle', false, 'UTF-8')]
description 'Build tasks for project: [packageName/]'

task build[packageName/](dependsOn: ['['/]'model:generate[packageName/]', 'src_gen:[packageName/]:compile[packageName/]'[']'/]) {
	group '[packageName/]'
	description 'build [packageName/] in debug and release'
}
task build[packageName/]Debug(dependsOn: ['['/]'model:generate[packageName/]', 'src_gen::[packageName/]:compile[packageName/]Debug'[']'/]) {
	group '[packageName/]'
	description 'build [packageName/] in debug'
}
task build[packageName/]Release(dependsOn: ['['/]'model:generate[packageName/]', 'src_gen::[packageName/]:compile[packageName/]Release'[']'/]) {
	group '[packageName/]'
	description 'build [packageName/] in release'
}

tasks.getByPath('src_gen:[packageName/]:compile[packageName/]').mustRunAfter tasks.getByPath('model:generate[packageName/]')
tasks.getByPath('src_gen:[packageName/]:compile[packageName/]Debug').mustRunAfter tasks.getByPath('model:generate[packageName/]')
tasks.getByPath('src_gen:[packageName/]:compile[packageName/]Release').mustRunAfter tasks.getByPath('model:generate[packageName/]')
[/file]

[file ('../settings.gradle', false, 'UTF-8')]
include 'model', 'src_gen:[packageName/]'
[/file]
[/template]
